<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/</link>
    <description>Recent content on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 28 Apr 2018 02:34:48 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ubuntuでバックアップが失敗する話、あるいはディスクサイズとファイルサイズについて</title>
      <link>//KeenS.github.io/blog/2018/04/28/ubuntudebakkuappugashippaisuruhanashi_aruihadisukusaizutofairusaizunitsuite/</link>
      <pubDate>Sat, 28 Apr 2018 02:34:48 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/04/28/ubuntudebakkuappugashippaisuruhanashi_aruihadisukusaizutofairusaizunitsuite/</guid>
      <description>&lt;p&gt;κeenです。寝れないので小ネタを。数年悩んでた問題がようやく解決しましたのでそれについて。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rayonの真価は分割統治にアリ</title>
      <link>//KeenS.github.io/blog/2018/04/08/rayonnoshinkahabunkatsutouchiniari/</link>
      <pubDate>Sun, 08 Apr 2018 22:50:43 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/04/08/rayonnoshinkahabunkatsutouchiniari/</guid>
      <description>&lt;p&gt;κeenです。やや釣りっぽいタイトルですがRustのデータ並列ライブラリの&lt;a href=&#34;https://github.com/rayon-rs/rayon&#34;&gt;rayon&lt;/a&gt;について。イテレータを並列に計算できるだけでなく&lt;code&gt;join&lt;/code&gt;で自分で並列処理を書くこともできるんだよという記事です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cargo asmでRustのメモリ周り最適化をチェック</title>
      <link>//KeenS.github.io/blog/2018/04/04/cargo_asmderustnomemorimawarisaitekikawochekku/</link>
      <pubDate>Wed, 04 Apr 2018 06:00:57 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/04/04/cargo_asmderustnomemorimawarisaitekikawochekku/</guid>
      <description>&lt;p&gt;κeenです。
Rustはたとえば&lt;code&gt;Box&lt;/code&gt;を使っていても必ずしもヒープにアロケートされる訳ではないなど、メモリの扱いを多少最適化してるらしいです。
しかし何がどう最適化されるのかは実際にコードを書いてみて実験しないとわからないことが多いので実験してみます。&lt;/p&gt;

&lt;p&gt;rust 1.25.0です。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>オブジェクト指向言語と関数型言語</title>
      <link>//KeenS.github.io/slide/obujiekutoshikougengotokansuugatagengo/</link>
      <pubDate>Wed, 14 Mar 2018 22:22:40 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/obujiekutoshikougengotokansuugatagengo/</guid>
      <description># はじめに ---------- * 椅子のキーストラップは是非お持ち帰り下さい * 主にプログラミング言語を1つ覚えたくらいの人を対象にしています * トークで40分全部使い切る予定なので質問はこのあとの職員室でお願いします * たまに細かい話が出てきますがスルーして下さい + 主に重箱の角をつつく人への対策です ===  オブジェクト指向言語 と 関数型言語  ---------------- [MANABIYA](https://manabiya.tech/) 2日目5時間目@ギャラリーB [#manabiya](https://twitter.com/search?src=typd&amp;q=%23manabiya&amp;lang=ja) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * 言語処理系を作るのが好き * 仕事での経験: Java, Scala, Rust * 趣味: C, Common Lisp, Standard ML, Rust === # 話すこと -------- * オブジェクト指向/関数型&#34;プログラミング&#34;とはパラダイムのことだよ * オブジェクト指向/関数型&#34;言語&#34;とはそのパラダイムを支援する言語のことだよ * 言語とパラダイムの区別を明確に！ === # 理想のソフトウェア ------------------- * 変更に強いソフトウェア * バグの少ないソフトウェア * 凝集度を高めて結合度を低めたい + 似たようなものは同じところに + 互いの依存関係を減らす * 理想のソフトウェアを作るには？ === # パラダイム ----------- * [Wikipedia](https://ja.</description>
    </item>
    
    <item>
      <title>DieselでSELECT NULLする</title>
      <link>//KeenS.github.io/blog/2018/02/26/dieseldenullwosentakusuru/</link>
      <pubDate>Mon, 26 Feb 2018 15:51:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/02/26/dieseldenullwosentakusuru/</guid>
      <description>&lt;p&gt;κeenです。個人メモ。dieselでリテラルの&lt;code&gt;NULL&lt;/code&gt;を&lt;code&gt;SELECT&lt;/code&gt;したいケースでの書き方。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>関数適用、関数から評価するか？引数から評価するか？</title>
      <link>//KeenS.github.io/blog/2018/02/24/kansuutekiyou_kansuukarahyoukasuruka_hikisuukarahyoukasuruka/</link>
      <pubDate>Sat, 24 Feb 2018 01:26:59 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/02/24/kansuutekiyou_kansuukarahyoukasuruka_hikisuukarahyoukasuruka/</guid>
      <description>&lt;p&gt;κeenです。簡単にいうと「OCamlが関数の引数を右から評価する件について」。&lt;/p&gt;

&lt;p&gt;これは他人から聞いた話なのですがよく目にするので文章として纏めておきます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>マクロクラブ Rust支部</title>
      <link>//KeenS.github.io/blog/2018/02/17/makurokurabu_rustshibu/</link>
      <pubDate>Sat, 17 Feb 2018 15:15:07 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/02/17/makurokurabu_rustshibu/</guid>
      <description>&lt;p&gt;マクロ・クラブのルール&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;マクロを書くな&lt;/li&gt;
&lt;li&gt;それがパターンをカプセル化する唯一の方法ならば、マクロを書け&lt;/li&gt;
&lt;li&gt;例外: 同等の関数に比べて、 呼び出し側が楽になるならば、マクロを書いても構わない&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>改めましてRocksDBさん</title>
      <link>//KeenS.github.io/blog/2018/02/08/aratamemashiterockdbsan/</link>
      <pubDate>Thu, 08 Feb 2018 04:22:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/02/08/aratamemashiterockdbsan/</guid>
      <description>&lt;p&gt;κeenです。寝れない。&lt;a href=&#34;https://keens.github.io/blog/2018/02/05/hello__rocksdb/&#34;&gt;前回のエントリ&lt;/a&gt;でRocksDBのことを勘違いしていたようだったので改めてRocksDBについて書きます。&lt;/p&gt;

&lt;p&gt;個人的理解をメモした雑多な記述です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello, RocksDB</title>
      <link>//KeenS.github.io/blog/2018/02/05/hello__rocksdb/</link>
      <pubDate>Mon, 05 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/02/05/hello__rocksdb/</guid>
      <description>&lt;p&gt;κeenです。進捗ダメです。最近全然コード書いてないのでたまには手を動かすかということでRocksDBにHello Worldしてみます。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>情報科学若手の会冬の陣2018でライブコーディングしてきた</title>
      <link>//KeenS.github.io/blog/2018/02/03/jouhoukagakuwakatenokaifuyunojin2018deraibuko_dingushitekita/</link>
      <pubDate>Sat, 03 Feb 2018 21:57:45 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/02/03/jouhoukagakuwakatenokaifuyunojin2018deraibuko_dingushitekita/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://wakate.connpass.com/event/74427/&#34;&gt;情報科学若手の会冬の陣2018 #wakate2018w&lt;/a&gt;でライブコーディングしてきたのでその補足です。
Rustは&lt;code&gt;unwrap&lt;/code&gt;を多用する言語ではありません。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「イミュータブル」って多義的だよね</title>
      <link>//KeenS.github.io/blog/2018/01/27/imyu_taburu_ttetagitekidayone/</link>
      <pubDate>Sat, 27 Jan 2018 12:33:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/01/27/imyu_taburu_ttetagitekidayone/</guid>
      <description>&lt;p&gt;κeenです。「XX言語はデフォルトイミュータブルだ」とか「この機能を使うとイミュータブルになる」とかのもの、よく混乱が見受けられますよね。
ユーザの勘違いもありますし言語毎に指しているものが違ったりするので整理してみます
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>エンジニアの働き方とかについてのエモい記事</title>
      <link>//KeenS.github.io/blog/2018/01/12/enjinianohatarakihoutokanitsuitenoemoikiji/</link>
      <pubDate>Fri, 12 Jan 2018 17:47:19 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/01/12/enjinianohatarakihoutokanitsuitenoemoikiji/</guid>
      <description>&lt;p&gt;κeenです。
&lt;a href=&#34;https://qiita.com/jonathanh/items/79056e13ac1f32a658ea&#34;&gt;非エンジニアのマネージャがエンジニアチームと上手くやる方法&lt;/a&gt;の記事に影響を受けてエンジニアとしての意見を書いてみようかなと。
非エンジニア向けのつもりです。&lt;/p&gt;

&lt;p&gt;ここでいうエンジニアはソフトウェアエンジニアのことです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustに何が欲しいだろう</title>
      <link>//KeenS.github.io/blog/2018/01/05/rustninanigahoshiidarou/</link>
      <pubDate>Fri, 05 Jan 2018 22:20:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/01/05/rustninanigahoshiidarou/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html&#34;&gt;New Year&amp;rsquo;s Rust: A Call for Community Blogposts&lt;/a&gt;の一環のつもりです。
恐らく英語の記事が望まれてるんだろうなと思いつつも試しに日本から声を上げてみます。

私はRustは1.0前後の頃から触っていて、ドキュメントの翻訳をしたりここ1年くらいは&lt;a href=&#34;https://idein.jp/&#34;&gt;Idein Inc.&lt;/a&gt;での業務でも使っています。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2018年注目していきたい技術</title>
      <link>//KeenS.github.io/blog/2018/01/04/2018nenchuumokushiteikitaigijutsu/</link>
      <pubDate>Thu, 04 Jan 2018 23:36:22 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/01/04/2018nenchuumokushiteikitaigijutsu/</guid>
      <description>&lt;p&gt;κeenです。毎年恒例です。個人的に注目していきたい技術と飛び込んでみたい技術を書いていきます。&lt;/p&gt;

&lt;p&gt;あくまで個人的な内容なので悪しからず。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2017年注目していきたかった技術の振り返りと個人的振り返り</title>
      <link>//KeenS.github.io/blog/2017/12/31/2017nenchuumokushiteikitakattagijutsunofurikaeritokojintekifurikaeri/</link>
      <pubDate>Sun, 31 Dec 2017 17:27:20 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/31/2017nenchuumokushiteikitakattagijutsunofurikaeritokojintekifurikaeri/</guid>
      <description>&lt;p&gt;κeenです。年始に&lt;a href=&#34;http://keens.github.io/blog/2017/01/01/2017nenchuumokushiteikitaigijutsu/&#34;&gt;2017年注目していきたい技術 | κeenのHappy Hacκing Blog&lt;/a&gt;ってのを書いたので雑に振り返ります。あと個人的な一年の総括を。&lt;/p&gt;

&lt;p&gt;※個人メモなので雑多な記述が多いです。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLのエコシステム（？）</title>
      <link>//KeenS.github.io/blog/2017/12/24/smlnoekoshisutemu___/</link>
      <pubDate>Sun, 24 Dec 2017 21:18:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/24/smlnoekoshisutemu___/</guid>
      <description>&lt;p&gt;κeenです。
どこかで紹介したつもりでしたが意外に書いてなかったのでSMLのツールとかそういうのを紹介します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのバイナリが大きい理由</title>
      <link>//KeenS.github.io/blog/2017/12/18/rustnobainarigaookiiriyuu/</link>
      <pubDate>Mon, 18 Dec 2017 23:21:32 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/18/rustnobainarigaookiiriyuu/</guid>
      <description>&lt;p&gt;κeenです。方々で言われる話ですがRustコンパイラの吐くバイナリはそこそこ大きいです。
この理由を自分で納得してなかったので追います。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust &amp; Swagger</title>
      <link>//KeenS.github.io/slide/rust___swagger/</link>
      <pubDate>Mon, 18 Dec 2017 19:35:19 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rust___swagger/</guid>
      <description># Rust &amp; Swagger ---------------------- [【増席】RustのLT会！ Rust入門者の集い #4 ](https://rust.connpass.com/event/72649/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # Swagger ---------- * [The World&#39;s Most Popular API Tooling](https://swagger.io/) * JSON APIの定義からドキュメントとコードを生成 === # rust-server ------------- * 最近Rustのサポートが[入った](https://github.com/swagger-api/swagger-codegen/pull/6613) * 軽くデモ + [petstore](http://petstore.swagger.io/) * [issue](https://github.com/swagger-api/swagger-codegen/issues)なげよう   </description>
    </item>
    
    <item>
      <title>diesel小ネタ集</title>
      <link>//KeenS.github.io/blog/2017/12/16/dieselshounetashuu/</link>
      <pubDate>Sat, 16 Dec 2017 16:40:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/16/dieselshounetashuu/</guid>
      <description>&lt;p&gt;κeenです。これは&lt;a href=&#34;https://qiita.com/advent-calendar/2017/rust-lang&#34;&gt;Rust Advent Calendar 2017&lt;/a&gt;の記事です。
RustのORM、クエリビルダ、マイグレーションツールのdieselについて。
dieselについては&lt;a href=&#34;http://diesel.rs/guides/getting-started/&#34;&gt;公式チュートリアル&lt;/a&gt;を読めばだいたい使い始められるのですが、それだけでは足りないのでいくつか持ちネタを書きます。

diesel-1.0.0-beta1での情報です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Graal/Truffleについて軽く</title>
      <link>//KeenS.github.io/blog/2017/12/13/graal_trufflenitsuitekaruku/</link>
      <pubDate>Wed, 13 Dec 2017 20:32:41 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/13/graal_trufflenitsuitekaruku/</guid>
      <description>&lt;p&gt;κeenです。これは&lt;a href=&#34;https://qiita.com/advent-calendar/2017/lang_dev&#34;&gt;言語実装 Advent Calendar 2017&lt;/a&gt;14日目の記事です。
JVMのコンパイラエンジンGraalと高速インタプリタ作成フレームワークのTruffleについて。

この記事の前に&lt;a href=&#34;//KeenS.github.io/blog/2017/12/12/rpythonnitsuitekaruku/&#34;&gt;昨日の記事&lt;/a&gt;を読んでおくと理解の助けになるかもしれません。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RPythonについて軽く</title>
      <link>//KeenS.github.io/blog/2017/12/12/rpythonnitsuitekaruku/</link>
      <pubDate>Tue, 12 Dec 2017 20:25:00 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/12/rpythonnitsuitekaruku/</guid>
      <description>&lt;p&gt;κeenです。これは &lt;a href=&#34;https://qiita.com/advent-calendar/2017/lang_dev&#34;&gt;言語実装 Advent Calendar 2017&lt;/a&gt;13日目の記事です。
RPythonやPyPyについて勘違いしてる人向けに誤解を解こうかと。あんまコードは出てこないやつです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WebAssemblyでGC</title>
      <link>//KeenS.github.io/blog/2017/12/07/webassemblynogc/</link>
      <pubDate>Thu, 07 Dec 2017 23:19:41 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/07/webassemblynogc/</guid>
      <description>&lt;p&gt;κeenです。この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2017/webassembly&#34;&gt;WebAssembly Advent Calendar 2017&lt;/a&gt; 8日目の記事です。WebAssemblyでガーベジコレクションする話。
2017-12-08: ページサイズに関する誤りを訂正しました。その他加筆。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>クレートを公開する前に埋めておくべきメタデータ</title>
      <link>//KeenS.github.io/blog/2017/12/03/kure_towokoukaisurumaeniumeteokubekimetade_ta/</link>
      <pubDate>Sun, 03 Dec 2017 23:14:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/03/kure_towokoukaisurumaeniumeteokubekimetade_ta/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://qiita.com/advent-calendar/2017/rust-lang-2&#34;&gt;Rustその2 Advent Calendar 2017&lt;/a&gt;3日目の記事です。&lt;/p&gt;

&lt;p&gt;クレートを&lt;code&gt;cargo publish&lt;/code&gt;する前に何すればいいんだっけと毎回なるので備忘録
publishするまでの手順自体は&lt;a href=&#34;https://keens.github.io/blog/2016/01/31/rustnopakke_jiwocrates_ionitourokusuru/&#34;&gt;過去記事&lt;/a&gt;を参考にして下さい
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ironのレスポンスの中身を覗き見るライブラリを雑に作った</title>
      <link>//KeenS.github.io/blog/2017/12/02/ironnoresuponsunonakamiwonozokimiruraiburariwozatsunitsukutta/</link>
      <pubDate>Sat, 02 Dec 2017 17:23:53 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/02/ironnoresuponsunonakamiwonozokimiruraiburariwozatsunitsukutta/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://qiita.com/advent-calendar/2017/rust-lang-2&#34;&gt;Rustその2 Advent Calendar 2017&lt;/a&gt;2日目の記事です。
タイトルのままです。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RustのDI</title>
      <link>//KeenS.github.io/blog/2017/12/01/rustnodi/</link>
      <pubDate>Fri, 01 Dec 2017 21:10:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/01/rustnodi/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://qiita.com/advent-calendar/2017/rust-lang-2&#34;&gt;Rustその2 Advent Calendar 2017&lt;/a&gt;が空いてたので小ネタをば。1日目の記事です。
&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E4%BE%9D%E5%AD%98%E6%80%A7%E3%81%AE%E6%B3%A8%E5%85%A5&#34;&gt;Dependency Injection&lt;/a&gt;の話。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>雰囲気でシェルを使っている人のためのシェル入門</title>
      <link>//KeenS.github.io/blog/2017/10/17/fun_ikideshieruwotsukatteiruninnotamenoshierunyuumon/</link>
      <pubDate>Tue, 17 Oct 2017 22:36:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/10/17/fun_ikideshieruwotsukatteiruninnotamenoshierunyuumon/</guid>
      <description>&lt;p&gt;κeenです。雰囲気でシェルを使ってる人が多いとのことだったので少しばかり込み入った知識を。
あと一応POSIX準拠かどうかも気にしながらやっていきます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>心臓のこと</title>
      <link>//KeenS.github.io/blog/2017/10/09/shinzounokoto/</link>
      <pubDate>Mon, 09 Oct 2017 17:32:40 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/10/09/shinzounokoto/</guid>
      <description>&lt;p&gt;κeenです。そろそろそういう時期になってきたので。
結論からいうと心配無用です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustで高速な標準出力</title>
      <link>//KeenS.github.io/blog/2017/10/05/rustdekousokunahyoujunshutsuryoku/</link>
      <pubDate>Thu, 05 Oct 2017 20:36:33 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/10/05/rustdekousokunahyoujunshutsuryoku/</guid>
      <description>&lt;p&gt;κeenです。Rustで何も考えずに標準出力に吐いてると遅いよねーって話です。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1ML - コア言語とモジュール言語の統合</title>
      <link>//KeenS.github.io/slide/1ml___koagengotomoju_rugengonotougou/</link>
      <pubDate>Sun, 24 Sep 2017 23:23:57 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/1ml___koagengotomoju_rugengonotougou/</guid>
      <description># 1ML - コア言語とモジュール言語の統合 ---------------------- [型システム論文読書会 Vol.1 - connpass](https://connpass.com/event/63454/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます * 型システム初心者です * 論文初心者です === # MLのモジュールについておさらい === # モジュール、シグネチャ ---- * ストラクチャは型、関数、値をまとめたもの + なんかレコードっぽい * シグネチャはその型 * モジュールはシグネチャを充足すればよい（余計なフィールドがあってもよい） + もちろん余計なフィールドは隠蔽される === ``` sml signature S = sig type t val f: t - t val zero: t end structure M: S = struct type t = int fun f x = x val zero = 0 fun g x = x end ``` === # ファンクタ ----------- * ストラクチャを引数にとってストラクチャを返す + なんか関数っぽい * 受け取ったモジュールに依存して型が変わったりする === ``` sml functor F(X: sig type &#39;a t end): sig type &#39;a t val id: &#39;a t - &#39;a t end = struct open X fun id x = x end ``` === # `include` ----------- * なんかシグネチャをincludeできちゃう * ストラクトもopenできちゃう === ``` sml signature T = sig include S val g: t - t end structure N : T = struct open M fun g x = x end ``` === # オペーク ---------- * シグネチャの型をトランスパレントにするかオペークにするか選べる * `M: S` vs `M : S` * オペークなストラクチャの型は存在型になる * `:` をsealing operatorというらしい * transparent(透明)とopaque(不透明)があるのでtranslucent(半透明)と呼ぶひともいるとかいないとか === ``` sml structure M: S = struct .</description>
    </item>
    
    <item>
      <title>Hugoにシーケンス図を埋め込むその2</title>
      <link>//KeenS.github.io/blog/2017/08/27/hugonishi_kensuzuwoumekomusono2/</link>
      <pubDate>Sun, 27 Aug 2017 09:57:09 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/08/27/hugonishi_kensuzuwoumekomusono2/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;//KeenS.github.io/blog/2017/08/26/hugonishi_kensuzuwoumekomu/&#34;&gt;昨日のエントリ&lt;/a&gt;に&lt;a href=&#34;https://github.com/knsv/mermaid&#34;&gt;mermaid.js&lt;/a&gt;を試すといいよとのコメントを頂いたので試します。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugoにシーケンス図を埋め込む</title>
      <link>//KeenS.github.io/blog/2017/08/26/hugonishi_kensuzuwoumekomu/</link>
      <pubDate>Sat, 26 Aug 2017 15:20:21 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/08/26/hugonishi_kensuzuwoumekomu/</guid>
      <description>&lt;p&gt;κeenです。ブログに図を入れるお話です。
このブログの長らくの読者ならお気付きかもしれませんが、アスキーアートを多用していました。inkscapeを開いて図を生成してコピーして手で画像へのリンクを張るのがだるいためです。特段自動生成とかはしてなくて、全て手書きです。
流石にそろそろどうにかしようと思い立っていじった次第です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近のSML#の話題</title>
      <link>//KeenS.github.io/slide/saikinnosml_nowadai/</link>
      <pubDate>Mon, 17 Jul 2017 21:04:57 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/saikinnosml_nowadai/</guid>
      <description># 最近のSML#の話題 ---------------------- [ML勉強会 #2 - connpass](https://ml-lang.connpass.com/event/58151/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # 話すこと ------ * SML# 3.0。0以降立て続けにリリースが続いてる * 最近の変更を追いきれないのでまとめて追う ver. | date ------|----- 3.3.0 | 2017-06-20 3.2.0 | 2016-09-16 3.1.1 | 2016-07-15 3.1.0 | 2016-05-26 3.0.1 | 2016-04-04 3.0.0 | 2016-03-31 2.0.0 | 2014-04-04 1.2.0 | 2012-11-14 === # そもそもSML#って？ ------------------- * SML &#39;97 互換のコンパイラ + [The Definition of Standard ML, Revised](http://sml-family.</description>
    </item>
    
    <item>
      <title>ステートマシン抽象化としてのFuture</title>
      <link>//KeenS.github.io/blog/2017/07/02/sute_tomashinchuushoukatoshitenofuture/</link>
      <pubDate>Sun, 02 Jul 2017 12:31:07 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/07/02/sute_tomashinchuushoukatoshitenofuture/</guid>
      <description>&lt;p&gt;κeenです。最近Futureと一口にいってもいくつか種類があるなと気付いたのでRustの&lt;a href=&#34;https://github.com/alexcrichton/futures-rs&#34;&gt;&lt;code&gt;futures-rs&lt;/code&gt;&lt;/a&gt;に実装されているFutureの挙動を紐解こうと思います。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ジェネリクス勉強会補足</title>
      <link>//KeenS.github.io/blog/2017/06/24/jienerikusubenkyoukaihosoku/</link>
      <pubDate>Sat, 24 Jun 2017 23:22:16 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/06/24/jienerikusubenkyoukaihosoku/</guid>
      <description>&lt;p&gt;κeenです。本日&lt;a href=&#34;https://connpass.com/event/56773/?utm_campaign=event_participate_to_owner&amp;amp;utm_source=notifications&amp;amp;utm_medium=email&amp;amp;utm_content=title_link&#34;&gt;ジェネリクス勉強会&lt;/a&gt;で発表したのですがいくつか拾いきれないコメントがあったのでここでお返事書きます&lt;/p&gt;

&lt;p&gt;発表スライドは&lt;a href=&#34;https://keens.github.io/slide/jienerikusu_disupatchi_omoteura/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ジェネリクス ディスパッチ 表裏</title>
      <link>//KeenS.github.io/slide/jienerikusu_disupatchi_omoteura/</link>
      <pubDate>Sat, 17 Jun 2017 22:25:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/jienerikusu_disupatchi_omoteura/</guid>
      <description># ジェネリクス ディスパッチ 表裏 ---------------------- [ジェネリクス勉強会 - connpass](https://connpass.com/event/56773/?utm_campaign=event_participate_to_owner&amp;utm_source=notifications&amp;utm_medium=email&amp;utm_content=title_link) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # はじめに ----------- * 例にはJavaとRustを使います + それ以外にあまり詳しくない + たまにScalaが出てくるかも * 主に裏側で何が起きてるかに焦点を当てます * 一般的な手法の比較と言語固有実装の比較がやや混じります + 実例重視 * 言語や機能を選ぶときの知識が増えればよし === # ジェネリクス -------------- * 型でパラメータ化された何か * パラメータ化する方法にいくつか方式が + 任意の型に対応する実装にする - Java + 使う型毎に実体をつくる - 型が引数になるイメージ - Rust * 便宜上前者をポインタ方式、後者をテンプレート方式と呼ぶ === # 関数ジェネリクス ----------------- * Javaコード ``` java public class Generics { public static void main(String[] args) { Generics g = new Generics(); System.</description>
    </item>
    
    <item>
      <title>Rustでエラーが出てないのにファイルに書き出せないときは</title>
      <link>//KeenS.github.io/blog/2017/06/13/rustdeera_gadetenainonifairunikakidasenaitokiha/</link>
      <pubDate>Tue, 13 Jun 2017 22:53:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/06/13/rustdeera_gadetenainonifairunikakidasenaitokiha/</guid>
      <description>&lt;p&gt;κeenです。随分前から書こうと思いつつ先送りになっていた小ネタです。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのトランザクション抽象化ライブラリ作った</title>
      <link>//KeenS.github.io/blog/2017/06/06/rustnotoranzakushonchuushoukaraiburaritsukutta/</link>
      <pubDate>Tue, 06 Jun 2017 18:20:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/06/06/rustnotoranzakushonchuushoukaraiburaritsukutta/</guid>
      <description>&lt;p&gt;κeenです。最近&lt;a href=&#34;https://github.com/KeenS/transaction-rs&#34;&gt;KeenS/transaction-rs: The transaction abstraction library and its executors for rust&lt;/a&gt;というライブラリをリリースしたのでそれについて。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>非同期とノンブロッキングとあと何か</title>
      <link>//KeenS.github.io/blog/2017/05/19/hidoukitononburokkingutoatonanika/</link>
      <pubDate>Fri, 19 May 2017 20:51:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/05/19/hidoukitononburokkingutoatonanika/</guid>
      <description>&lt;p&gt;κeenです。最近同期/非同期、ブロッキング/ノンブロッキング、直接形式/継続渡し形式あたりが混乱してきたので個人的に整理します。
あくまで私個人の理解を纏めただけなので誤謬などに注意して下さい。&lt;/p&gt;

&lt;p&gt;追記: &lt;a href=&#34;https://twitter.com/tanaka_akr&#34;&gt;@tanaka_akr&lt;/a&gt;さんから&lt;a href=&#34;https://twitter.com/tanaka_akr/status/865722507281580032&#34;&gt;指摘&lt;/a&gt;されたのですが、用語の説明が間違っていそうだったので書き直しました。
diffは&lt;a href=&#34;https://github.com/KeenS/KeenS.github.io/commit/d46dad5282436eeaa615f31c160f892e6c724403&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust風にデザインパターン23種</title>
      <link>//KeenS.github.io/blog/2017/05/06/rustkazenidezainpata_n23tane/</link>
      <pubDate>Sat, 06 May 2017 21:59:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/05/06/rustkazenidezainpata_n23tane/</guid>
      <description>&lt;p&gt;κeenです。
GoFのデザインパターンは有名ですが、言語機能によっては単純化できたりあるいは不要だったりするのでRust風に書き換えたらどうなるか試してみます。

発端はこのツイート。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>メモリとスタックとヒープとプログラミング言語</title>
      <link>//KeenS.github.io/blog/2017/04/30/memoritosutakkutohi_puto/</link>
      <pubDate>Sun, 30 Apr 2017 09:09:50 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/04/30/memoritosutakkutohi_puto/</guid>
      <description>&lt;p&gt;κeenです。
今回の話は別にRustに限ったものではないのですが、よくRustを始めたばかりの人がスタックとヒープが分からないと言っているのをみかけるので少しメモリの話をしますね。
厳密な話というよりは雰囲気を掴んで欲しいという感じです。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cargoのサブプロジェクトとreplace</title>
      <link>//KeenS.github.io/blog/2017/04/05/cargonosabupurojiekutotoreplace/</link>
      <pubDate>Wed, 05 Apr 2017 20:46:26 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/04/05/cargonosabupurojiekutotoreplace/</guid>
      <description>&lt;p&gt;κeenです。最近Cargoのreplace機能を使おうとしてハマったのでメモを残しておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>関数型プログラマからみたRust</title>
      <link>//KeenS.github.io/blog/2017/04/04/kansuugatapuroguramakaramitarust/</link>
      <pubDate>Tue, 04 Apr 2017 21:38:57 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/04/04/kansuugatapuroguramakaramitarust/</guid>
      <description>&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;C++からRustに入った人あたりから「関数型言語から来た人のRustの感想を知りたい」とたまに言われるのでいつかブログ書こうか。&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/848900720573075458&#34;&gt;2017年4月3日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ソフトウェアエンジニアがFPGAやってみる</title>
      <link>//KeenS.github.io/slide/sofutoueaenjiniagafpgayattemiru/</link>
      <pubDate>Tue, 28 Mar 2017 09:21:33 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/sofutoueaenjiniagafpgayattemiru/</guid>
      <description># ソフトウェアエンジニアがPYNQでFPGAやってみる ---------------------- === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # よくある話 ------------ 「Lisperって自分のLispを作るらしいよ」  「Lispって昔は専用ハードウェアで動いてたらしいよ」  「じゃあハードウェア作んなきゃ」  「FPGAやるかー」  === # FPGAって？ ------------ * Field-Programmable Gate Array * プログラマブルな集積回路 + オレオレ設計のCPU作ったり + HDMI入力を直でmpg4にエンコードするデバイスとかも * クロックはASIC(ふつうのCPU)より大分遅い * でも上手く嵌れば100倍高速化とか === # PYNQって？ ------------ * [PYNQ-Z1 Python Productivity for Zynq - Digilent](http://store.digilentinc.com/pynq-z1-python-productivity-for-zynq/) * xilinxのFPGAとARMのチップが載ったSoC * ARMで動いてるPython(Jupyter)からFPGAにロジック焼ける + 手軽にロジックを試せる * FPGAとの通信はMMIO + 特定のアドレスのメモリにデータを書くとFPGAに送られる + メモリのデータを読むとFPGAからデータが送られる === 会社にPYNQがきたよ！！azure倒したら遊ぶ！！！！ pic.</description>
    </item>
    
    <item>
      <title>Rust in Production</title>
      <link>//KeenS.github.io/slide/rust_in_production/</link>
      <pubDate>Wed, 22 Mar 2017 19:57:28 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rust_in_production/</guid>
      <description># Rust in Production ---------------------- [Rust プログラマーミートアップ / Rust programmers&#39; meetup - connpass](https://rust.connpass.com/event/49304/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * 若者 * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # Rust採用までの流れ -------------------- Ω＜「κeen君継続的ベンチマークサーバ作って」Ω＜「GitHubにpushする度ベンチマーク走る感じで」Ω＜「GPUとRaspberry Piでベンチマークするから」Ω＜「全部任せるね」⸜( ¯⌓¯ )⸝「Rustで書くか」やったこととか知見とかトピック毎にかいつまんで話します === # Rustのメリット --------------- * κeenが馴れてる * 社員の半分くらい書ける * Linux, Mac, Raspberry Piで動く * テスト書かなくてもそんなにバグらなそう * 将来のために小さいところでノウハウ溜めていきたい * シングルバイナリで楽に動きそう * **単純に使いたかった** * ※今回は速度や安全性は必要ない === # コンポーネント --------------- * CLIクライアント + 各自の手元やCIサーバから起動 * アグリゲータ + ワーカに仕事を投げ、結果を受け取る + ジョブ管理 * ワーカ + GPUマシンやRSPiなどでベンチマーク + 結果をアグリゲータに返す * ブラウザ + ベンチマーク結果の閲覧 === # プロジェクト構成 ------------------- * [ワークスペース](http://doc.</description>
    </item>
    
    <item>
      <title>オーディナルの話とカーディナルの話</title>
      <link>//KeenS.github.io/blog/2017/03/02/o_dinarunohanashitoka_dinarunohanashi/</link>
      <pubDate>Thu, 02 Mar 2017 21:15:44 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/03/02/o_dinarunohanashitoka_dinarunohanashi/</guid>
      <description>&lt;p&gt;ちょっとオーディナルの話をしよう。ついでにカーディナルの話もしよう。
特に何も知らなくても分かる内容。だけど文脈を知ってると伝えたいことが伝わる筈。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>仕事でdiesel使ってみた</title>
      <link>//KeenS.github.io/slide/shigotodedieseltsukattemita/</link>
      <pubDate>Wed, 01 Mar 2017 10:57:38 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/shigotodedieseltsukattemita/</guid>
      <description># 仕事でdiesel使ってみた ---------------------- [RustのLT会！ Rust入門者の集い #2 - connpass](https://rust.connpass.com/event/48826/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # [diesel.rs](diesel.rs) ![dieselのwebページ](/images/diesel/diesel-web.png) === # diesel --------- * RustのORM * スキーマからコード自動生成 * diesel_codegen * クエリビルダ * マイグレーション管理 * PostgreSQL, MySQL, SQLiteサポート === # 準備 ------- * [docker-composeでmysql &amp; postgreSQL をサクッと起動 - Qiita](http://qiita.com/astrsk_hori/items/1e683a7a2f2b7189cb6e) ``` cargo install diesel_cli echo DATABASE_URL=postgres://username:password@localhost/hoge  .</description>
    </item>
    
    <item>
      <title>WebAssemblyとコンパイラとランタイム</title>
      <link>//KeenS.github.io/slide/webassemblytokonpairatorantaimu/</link>
      <pubDate>Thu, 16 Feb 2017 15:46:21 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/webassemblytokonpairatorantaimu/</guid>
      <description># WebAssemblyとコンパイラとランタイム ---------------------- [emscripten night !! #3 - connpass](https://emsn.connpass.com/event/48100/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # 何の話 --------- * WebAssemblyをバックエンドに使う言語を作りたい * [KeenS/webml: An ML like toy language compiler](https://github.com/KeenS/webml) * 既に発表したものの補足記事的な + [コンパイラの人からみたWebAssembly | κeenのHappy Hacκing Blog](https://keens.github.io/slide/konpairanoninkaramitaWebAssembly/) + ある程度再度説明します === # アジェンダ ------------ * なぜWebAssembly * コンパイラ * コード生成 * ランタイム === # なぜWebAssembly === # なぜWebAssembly ---------------- * なんかバイナリでテンション上がる * ポータブルでコンパクトで速い * 機能的にJSを越えるかもしれない…？ * コンパイラがブラウザで動くと言語導入のハードル下がる + 気軽に試せる + コンパイラだけでなく吐いたコードもブラウザで動かしたい === # WASM over LLVM ---------------- * 既存のJS環境と協調する + JSとの相互呼び出しとか * **non-determinismが少ない** * 細かいアラインメント考える必要がない * **API安定しそう** === # WASM over asm.</description>
    </item>
    
    <item>
      <title>RustのちょっとやりすぎなBuilderパターン</title>
      <link>//KeenS.github.io/blog/2017/02/09/rustnochottoyarisuginabuilderpata_n/</link>
      <pubDate>Thu, 09 Feb 2017 23:03:45 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/02/09/rustnochottoyarisuginabuilderpata_n/</guid>
      <description>&lt;p&gt;κeenです。Rustでちょっとやりすぎだけど使う側の自由度が高くて安全なBuilderパターンを思い付いたので紹介しますね。&lt;/p&gt;

&lt;p&gt;※2017-02-11T13:18:58Z+09:00 最下部に追記しました
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deprecating CIM</title>
      <link>//KeenS.github.io/blog/2017/01/29/deprecating_cim/</link>
      <pubDate>Sun, 29 Jan 2017 22:18:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/01/29/deprecating_cim/</guid>
      <description>I&amp;rsquo;m κeen. I have a sad news, I&amp;rsquo;ll stop the development of CIM and no more updates for new lisp impls will be provided. It has been months from when I stopped developping CIM and only providing updates for new lisp impl versions. From that point, CIM is a half-dead product. I know there are still someone using CIM though, so I kept updating. For present CIM users, I recomend to migrate to roswell, also a lisp installer and manager, which is well-maintained.</description>
    </item>
    
    <item>
      <title>コンパイラの人からみたWebAssembly</title>
      <link>//KeenS.github.io/slide/konpairanoninkaramitawebassembly/</link>
      <pubDate>Sun, 22 Jan 2017 13:35:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/konpairanoninkaramitawebassembly/</guid>
      <description># コンパイラの人からみたWebAssembly ---------------------- [コンパイラ勉強会 - connpass](https://connpass.com/event/46850/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # アジェンダ ------------ * WebAssemblyの概要 * 具体的な話 * WebAssembly吐こうとした話 === # WebAssemblyの概要 === # JavaScript ------------- * ブラウザ上で動くスクリプト言語 * 動的型付 * 高級 * GCとかある * 今までブラウザで動く唯一の言語だった * 遅い + 各ブラウザJITなどで補強 === # [asm.js](http://asmjs.org/) ------------ * プラウザ上で動く言語 * 低級 * GCなし * JSのサブセット + asm.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>//KeenS.github.io/about/</link>
      <pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/about/</guid>
      <description> Me  2011-04 - 2013-03 東京大学理科I類 2013-04 - 2015-03 東京大学理学部数学科(中退) 2015-04 - 2016-12 サイバーエージェント(エンジニア) 2017-01 - 現在 Idein Inc. (エンジニア)  Activities  2014-06 - 2017-01 Shibuya.lispの運営 2016-02 - 現在 Rustドキュメント翻訳プロジェクト 2013 ISUCON3 学生賞 2014 ISUCON4 学生賞  その他いくつかのOSSの開発者/コミッタ/コントリビュータ
SNS accounts  Twitter: @blackenedgold GitHub: KeenS COOKPAD: κeen Qiita: blackenedgold SlideShare: blackenedgold  Main Interests  Emacs Lisp Rust ML (Meta Language) 言語処理系(主にインタプリタ)  GC 最適化 CPU λ計算 継続  Linux システムプログラミング 数学基礎論  </description>
    </item>
    
    <item>
      <title>Rustのモジュールの使い方</title>
      <link>//KeenS.github.io/blog/2017/01/15/rustnomoju_runokirikata/</link>
      <pubDate>Sun, 15 Jan 2017 20:52:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/01/15/rustnomoju_runokirikata/</guid>
      <description>&lt;p&gt;κeenです。たまにRustのモジュールが分かりづらいとの声を聞くので解説しますね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>頑張らないLinuxデスクトップ環境</title>
      <link>//KeenS.github.io/blog/2017/01/10/linuxdesukutoppukankyou/</link>
      <pubDate>Tue, 10 Jan 2017 22:07:31 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/01/10/linuxdesukutoppukankyou/</guid>
      <description>&lt;p&gt;κeenです。みんなカスタマイズしてLinux使っているようなのであまりカスタマイズしてない私のものも紹介しますね。&lt;/p&gt;

&lt;p&gt;因みに私は会社でMac使ってたら使いにくすぎてVMに逃げたくらいのLinuxユーザです。家では勿論Linuxしか使ってないです。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Idein Incに入社しました</title>
      <link>//KeenS.github.io/blog/2017/01/06/idein_incninyuushashimashita/</link>
      <pubDate>Fri, 06 Jan 2017 20:53:12 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/01/06/idein_incninyuushashimashita/</guid>
      <description>&lt;p&gt;κeenです。本日を以ちまして&lt;a href=&#34;http://idein.jp/&#34;&gt;Idein Inc.&lt;/a&gt;に入社したので報告します。&lt;/p&gt;

&lt;p&gt;退職エントリは&lt;a href=&#34;http://keens.github.io/blog/2016/11/30/saiba_e_jientowotaishokushimashita/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>QUICの中身が分からないから仕様読んでみた</title>
      <link>//KeenS.github.io/blog/2017/01/02/quicnonakamigawakaranaikarashiyouyondemita/</link>
      <pubDate>Mon, 02 Jan 2017 10:46:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/01/02/quicnonakamigawakaranaikarashiyouyondemita/</guid>
      <description>&lt;p&gt;κeenです。先日同期と話しててQUICの中身ってあまり知らないよねってことでQUICの仕様（ドラフト）を読んだのでまとめますね。あまりまとめきれてませんが。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;※ドラフトは既に古くなっているのでこのブログの内容は現行では正しくない可能性があります。というか一部既に正しくないことが判明しています。ご注意下さい&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;後で新しいドラフトを発見したので内容を書き換えました。とりあえずリンクを貼ってあるドラフトの内容までは反映出来ています。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2017年注目していきたい技術</title>
      <link>//KeenS.github.io/blog/2017/01/01/2017nenchuumokushiteikitaigijutsu/</link>
      <pubDate>Sun, 01 Jan 2017 22:12:01 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/01/01/2017nenchuumokushiteikitaigijutsu/</guid>
      <description>&lt;p&gt;κeenです。毎年これやっていく。個人的に注目していきたい技術と飛び込んでみたい技術書いく。&lt;/p&gt;

&lt;p&gt;あくまで個人的な内容。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2016年注目していきたかった技術の振り返りと個人的振り返り</title>
      <link>//KeenS.github.io/blog/2016/12/31/2016nenchuumokushiteikitakattagijutsunofurikaeritokojintekifurikaeri/</link>
      <pubDate>Sat, 31 Dec 2016 16:57:48 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/31/2016nenchuumokushiteikitakattagijutsunofurikaeritokojintekifurikaeri/</guid>
      <description>&lt;p&gt;κeenです。年始に&lt;a href=&#34;http://keens.github.io/blog/2016/01/01/2016nenchuumokushiteikitaigijutsu/&#34;&gt;2016年注目していきたい技術 | κeenのHappy Hacκing Blog&lt;/a&gt;ってのを書いたので雑に振り返ります。あと個人的な一年の総括を。&lt;/p&gt;

&lt;p&gt;※個人メモなので雑多な記述が多いです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>気付いたらRustの環境構築がかなり楽になってた</title>
      <link>//KeenS.github.io/blog/2016/12/29/kizuitararustnokankyoukouchikugakanarirakuninatteta/</link>
      <pubDate>Thu, 29 Dec 2016 11:52:55 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/29/kizuitararustnokankyoukouchikugakanarirakuninatteta/</guid>
      <description>&lt;p&gt;κeenです。ここのところRustの開発ツール回りでリリースが続いてセットアップが楽になってるようだったので最新の情報をお届けします。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのライフタイムを使ったスコープ解析</title>
      <link>//KeenS.github.io/blog/2016/12/24/rustnoraifutaimuwotsukattasuko_pukaiseki/</link>
      <pubDate>Sat, 24 Dec 2016 22:51:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/24/rustnoraifutaimuwotsukattasuko_pukaiseki/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/rust-lang-2&#34;&gt;Rust その2 Advent Calendar 2016 - Qiita&lt;/a&gt;の25日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。大トリに小ネタで申し訳ないのですが最近書いたコードでちょっと便利だなと思ったテクニックを紹介します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustの所有権、ライフタイム、参照、型、しがらみ</title>
      <link>//KeenS.github.io/blog/2016/12/14/rustnoshoyuuken_raifutaimu_sanshou_kata_shigarami/</link>
      <pubDate>Wed, 14 Dec 2016 11:19:12 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/14/rustnoshoyuuken_raifutaimu_sanshou_kata_shigarami/</guid>
      <description>&lt;p&gt;κeenです。Rustには所有権やらライフタイムやら参照やらがあって型システムが面倒ですよね。線形（アフィン）と言われてるのに「あれ？」と思う部分もあるので詳しく探っていこうと思います。&lt;/p&gt;

&lt;p&gt;尚、この記事は型システムに興味のある人向けです。単にRustを書きたい方に有用な情報があるかは分かりません。&lt;/p&gt;

&lt;p&gt;2016-212-14T15:28Z09:00 加筆訂正しました。diffは&lt;a href=&#34;https://github.com/KeenS/KeenS.github.io/commit/f86c03a3793fde1787a9c0eb47f8efda305c2be4&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのstructとtraitって似てるよね</title>
      <link>//KeenS.github.io/blog/2016/12/03/rustnostructtotraittteniteruyone/</link>
      <pubDate>Sat, 03 Dec 2016 22:06:18 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/03/rustnostructtotraittteniteruyone/</guid>
      <description>&lt;p&gt;κeenです。関連型について考えてたらtraitがstructに見えてきたので一筆。小ネタです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのプロセス</title>
      <link>//KeenS.github.io/blog/2016/12/02/rustnopurosesu/</link>
      <pubDate>Fri, 02 Dec 2016 17:52:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/02/rustnopurosesu/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/rust-lang-2&#34;&gt;Rust その2 Advent Calendar 2016 - Qiita&lt;/a&gt;3日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。Rustの&lt;a href=&#34;https://doc.rust-lang.org/std/process/index.html&#34;&gt;&lt;code&gt;std::process&lt;/code&gt;&lt;/a&gt;の扱い方を紹介します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>新しいコンパイラバックエンドcretonne</title>
      <link>//KeenS.github.io/blog/2016/12/02/atarashiikonpairabakkuendocretonne/</link>
      <pubDate>Fri, 02 Dec 2016 14:00:11 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/02/atarashiikonpairabakkuendocretonne/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/lang_dev&#34;&gt;言語実装 Advent Calendar 2016 - Qiita&lt;/a&gt;3日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。先日、Rustの開発者フォーラムに新しいバックエンドして&lt;a href=&#34;https://github.com/stoklund/cretonne&#34;&gt;cretonne&lt;/a&gt;が&lt;a href=&#34;https://internals.rust-lang.org/t/possible-alternative-compiler-backend-cretonne/4275&#34;&gt;提案されていました&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;ちょっと気になったのでそれを紹介します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustでバイト列を扱う時のtips</title>
      <link>//KeenS.github.io/blog/2016/12/01/rustdebaitoretsuwoatsukautokinotips/</link>
      <pubDate>Thu, 01 Dec 2016 14:29:33 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/01/rustdebaitoretsuwoatsukautokinotips/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/rust-lang-2&#34;&gt;Rust その2 Advent Calendar 2016 - Qiita&lt;/a&gt;2日目の記事です。&lt;/p&gt;

&lt;p&gt;Rustはシステムプログラミング言語なのでバイト列をあれこれしたいことがあると思います。その時にイテレータでバイト列を舐める以外にも色々方法があるなと気付いたので。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>マクロやコンパイラプラグインの実装方法色々</title>
      <link>//KeenS.github.io/blog/2016/12/01/makuroyakonpairapuraguinnojissouhouhou/</link>
      <pubDate>Thu, 01 Dec 2016 13:29:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/01/makuroyakonpairapuraguinnojissouhouhou/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/lang_dev&#34;&gt;言語実装 Advent Calendar 2016 - Qiita&lt;/a&gt;2日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。マクロなどのコンパイル時に何か処理をしてコード生成する機構の実現方法が言語によって様々にあるなぁと思ったのでちょっと探ってみます&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>4年間続いたShibuya.lispのLispMeetUp</title>
      <link>//KeenS.github.io/blog/2016/12/01/4nenkantsuzuitashibuya_lispnolispmeetup/</link>
      <pubDate>Thu, 01 Dec 2016 12:40:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/01/4nenkantsuzuitashibuya_lispnolispmeetup/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/event-management&#34;&gt;IT勉強会/コミュニティ運営 Advent Calendar 2016 - Qiita&lt;/a&gt;2日目の記事です。&lt;/p&gt;

&lt;p&gt;Shibuya.lispの開催しているlispmeetupは約4年間毎月開催しました（現46回開催）。
そこまで長く続いているコミュニティ活動はそんなに多くないのではないでしょうか。
lispmeetupがどうして続いたのかちょっと考察してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>サイバーエージェントを退職しました</title>
      <link>//KeenS.github.io/blog/2016/11/30/saiba_e_jientowotaishokushimashita/</link>
      <pubDate>Wed, 30 Nov 2016 15:51:38 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/11/30/saiba_e_jientowotaishokushimashita/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://www.adventar.org/calendars/1638&#34;&gt;Ex CyberAgent Developers Advent Calendar 2016 - Adventar&lt;/a&gt;1日目の記事です。
元サイバーエージェントの人がわいわいやります。&lt;/p&gt;

&lt;p&gt;κeenです。二年弱勤めたサイバーエージェントを退職したのでその旨について。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#をUbuntu 16.10で動かす</title>
      <link>//KeenS.github.io/blog/2016/11/30/sml_woubuntu_16_10deugokasu/</link>
      <pubDate>Wed, 30 Nov 2016 15:18:58 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/11/30/sml_woubuntu_16_10deugokasu/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2016/ml&#34;&gt;ML Advent Calendar 2016 - Qiita&lt;/a&gt;の1日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。小ネタを。Ubuntu 16.10でSML#を動かそうと思ったら動かなかったので動かします。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SchemeでClassとProtocol</title>
      <link>//KeenS.github.io/slide/schemedeclasstoprotocol/</link>
      <pubDate>Mon, 28 Nov 2016 15:41:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/schemedeclasstoprotocol/</guid>
      <description># ClassとProtocol ---------------------- [Lisp Meet Up presented by Shibuya.lisp #46](https://lisp.connpass.com/event/45517/) Scheme回 === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * サイバーエージェントのエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # Class ------- * ここでは単に値の集合を表わす * `new` のように新しいインスタンスを作る機能はつけない * ほとんど型と同じ機能 * 唯一の機能 `instance?` を持つ === ``` scheme (instance? 3 ) ; = #t (instance? &#34;foo&#34; ) ; = #f ``` === # Classの実装 ------------- * 事実上述語があればいい * [詳細](https://github.</description>
    </item>
    
    <item>
      <title>Rustで非同期Thriftしたい</title>
      <link>//KeenS.github.io/slide/rustdehidoukithriftshitai/</link>
      <pubDate>Sat, 26 Nov 2016 13:07:29 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rustdehidoukithriftshitai/</guid>
      <description># Rustで非同期Thrift ---------------------- [歌舞伎座.tech#12「メッセージフォーマット/RPC勉強会」 - connpass](https://kbkz.connpass.com/event/40629/) === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * サイバーエージェントのエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === * X RPCライブラリを使う話 * O RPCライブラリを作る話 === # RPC ----- * Remote Procedure Call * リモートで呼べる * 言語跨げる * シリアライズフォーマットが決まれば大体出来る * Thrift, protobuf/gRPC, avro... * 大抵バイナリ + JSONに比べて2倍くらい効率がいい === # Thrift -------- * Facebook発(現apache)RPCフレームワーク * IDLから複数の言語向けのコードを吐ける * 対応言語多い * 新しい言語はthriftレポジトリフォークして追加 === # Thrift vs gRPC ---------------- \ | Thrift | gRPC ------------------------|:------:|:----: ベース | 自前 | HTTP/2 コード生成 | o | o プロトコルのアップデート | o | o 通信の多重化 | トランスポート次第 | o (HTTP/2) 認証 | x | o 例外 | ユーザ定義可能 | 事前定義のみ?</description>
    </item>
    
    <item>
      <title>Rustの関連型の使いどころ</title>
      <link>//KeenS.github.io/blog/2016/11/22/rustnokanrenkatanotsukaidokoro/</link>
      <pubDate>Tue, 22 Nov 2016 18:26:47 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/11/22/rustnokanrenkatanotsukaidokoro/</guid>
      <description>&lt;p&gt;κeenです。昨日は&lt;a href=&#34;https://rust.connpass.com/event/41467/&#34;&gt;RustのLT会！ Rust入門者の集い - connpass&lt;/a&gt;に参加してきました。
そこで&lt;a href=&#34;http://qiita.com/tacke_jp/items/9c7617971dc341146c0f&#34;&gt;関連型に関する発表&lt;/a&gt;があったので感化されて私も一筆。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustの話とリソースの話</title>
      <link>//KeenS.github.io/slide/rustnohanashitoriso_sunohanashi/</link>
      <pubDate>Sun, 20 Nov 2016 14:08:07 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rustnohanashitoriso_sunohanashi/</guid>
      <description># Rustの話とリソースの話 ---------------------- [RustのLT会！ Rust入門者の集い](https://rust.connpass.com/event/41467/) 2016-11-21 === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * 若者 * サイバーエージェントのエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます * [プログラミング言語Rust](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/)の翻訳 * [Join rust-jp on Slack!](http://rust-jp.herokuapp.com/) にもいます。 * [Rust その2 Advent Calendar 2016 - Qiita](http://qiita.com/advent-calendar/2016/rust-lang-2) === # 注意 ------ * たまにマニアックな話が出ますが気にせず無視して下さい * 「なんかRustすげー」って思ってもらえれば幸いです === # Rustとの出会い ---------------- * 元々Lisperだった * 他にはML, Ruby, JVM言語など === ![lis books](/images/rust-and-resource/lisp.jpg)=== 「Lisperは自分で処理系作って一人前」 === ![compiler books](/images/rust-and-resource/compiler.jpg) === # 苦悩 ------- * Cは低級すぎる * Javaは向いてない * C++は怖そう + 闇の軍団 + 縄文土器飛んできそう + あと **nullあるしメモリ破壊あるし** * MLは向いてるけどシステムプログラミングしづらい * ATS2, Golang, D.</description>
    </item>
    
    <item>
      <title>Rustの型レベルLispっぽいの作った</title>
      <link>//KeenS.github.io/blog/2016/11/06/rustnokatareberulispppoinotsukutta/</link>
      <pubDate>Sun, 06 Nov 2016 11:49:43 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/11/06/rustnokatareberulispppoinotsukutta/</guid>
      <description>&lt;p&gt;κeenです。ふとした気紛れでRustの型レベルLispっぽいの作りました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Scala 2.12.0変更点</title>
      <link>//KeenS.github.io/slide/scala_2_12_0henkouten/</link>
      <pubDate>Fri, 04 Nov 2016 13:19:01 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/scala_2_12_0henkouten/</guid>
      <description># Scala 2.12.0変更点 ---------------------- サイバーエージェント ScalaMeetUp === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * AI Studio Dev Group * Lisp, ML, Rust, Shell Scriptあたりを書きます === # サマリー ---------- 全部[公式ページ](http://www.scala-lang.org/news/2.12.0)に詳細あるよ * Java8向けの互換性向上したよ + トレイトがinterfaceに + 無名関数がlambdaに + SAMとScalaの関数が統合 * コンパイラが少し賢くなったよ + いくつかでinvokedynamicを使うように + 中間状態をやめた + 最適化をするように * ライブラリ改善した + EitherがRight Biasedに + Futureが強化 * 非互換いくつか === # トレイトがinterfaceに ----------------------- ``` scala trait Foo { def foo(): String = &#34;</description>
    </item>
    
    <item>
      <title>VMwareのUbuntuを16.10にしたら起動しなくなった</title>
      <link>//KeenS.github.io/blog/2016/10/31/vmwarenoubuntuwo16_10nishitarakidoushinakunatta/</link>
      <pubDate>Mon, 31 Oct 2016 22:06:17 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/10/31/vmwarenoubuntuwo16_10nishitarakidoushinakunatta/</guid>
      <description>&lt;p&gt;κeenです。普段はネイティブのUbuntuを使ってますが会社では使えないのでVMwareにUbuntuを入れて使っています。
今日そのUbuntuを16.04から16.10にアップグレードしたら起動しなくなったので対策メモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのクロージャ3種を作って理解する</title>
      <link>//KeenS.github.io/blog/2016/10/10/rustnokuro_ja3tanewotsukutterikaisuru/</link>
      <pubDate>Mon, 10 Oct 2016 16:48:43 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/10/10/rustnokuro_ja3tanewotsukutterikaisuru/</guid>
      <description>&lt;p&gt;κeenです。Rustのクロージャ、3種類もあって複雑ですよね。
こういう複雑なものはRustの気持になって考えれば理解出来たりします。ということで手でクロージャを作って理解してみましょう。&lt;/p&gt;

&lt;p&gt;尚、これはRustの1.12.0-stableと1.14.0-nightly (6e8f92f11 2016-10-07)で実験しています。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLでモナド</title>
      <link>//KeenS.github.io/blog/2016/10/10/smldemonado/</link>
      <pubDate>Mon, 10 Oct 2016 11:05:38 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/10/10/smldemonado/</guid>
      <description>&lt;p&gt;κeenです。ML Workshop 2016でなんかSMLで型クラスする発表があったらしいので追ってみます。&lt;/p&gt;

&lt;p&gt;implicit parameterをexplicitに渡すのではなく、モジュールとファンクタを使った実装です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>正しいScalaのコードが欲しい</title>
      <link>//KeenS.github.io/slide/tadashiiscalanoko_dogahoshii/</link>
      <pubDate>Wed, 05 Oct 2016 00:10:25 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/tadashiiscalanoko_dogahoshii/</guid>
      <description># 正しいScalaのコードが欲しい ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループ + Lisp, ML, Rust, Shell Scriptあたりを書きます + Scalaはあんまり === # Scalaを始めたばかりの頃の話 === ``` scala def revappend[A]( xs: List[A], ys: List[A]): List[A] = match xs { case Nil = Nil case x::xs_ = revappend(xs_, x::ys) } ``` === ``` scala def length(xs: List[_]): Int = xs match { case Nil = Nil case x::xs_ = 1 + length(xs_) } ``` === ``` scala def append[A]( xs: List[A], ys: List[A]): List[A] = xs match { case Nil = Nil case x::xs_ = x :: append(xs_, ys) } append(List(1, 2, 3), List(4, 5, 6)) // = List(1, 2, 3) ``` === # Scalaを始めたばかりの頃の話 ----------------------------- * 正しくないコードばかり書いてしまう + 他の言語の構文と混ぜてしまう + 型エラー + 実装ミス * 正しいScalaのコードが欲しい === # 正しさって？ ------------- * 構文が正しいコード?</description>
    </item>
    
    <item>
      <title>Pijulのインストールが難易度高いので解説する</title>
      <link>//KeenS.github.io/blog/2016/09/29/pijulnoinsuto_ruganan_idotakainodekaisetsusuru/</link>
      <pubDate>Thu, 29 Sep 2016 22:15:51 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/09/29/pijulnoinsuto_ruganan_idotakainodekaisetsusuru/</guid>
      <description>&lt;p&gt;κeenです。ふとTwitterで&lt;a href=&#34;http://pijul.org&#34;&gt;Pijul&lt;/a&gt;の話題を見掛けたついでにインストールしようと思ったら難易度が高かったので解説します。
Pijulそのものについては&lt;a href=&#34;//KeenS.github.io/blog/2016/02/14/dvcsnomoderu_aruihapijulnitsuite/&#34;&gt;過去のエントリ&lt;/a&gt;を参照して下さい。&lt;/p&gt;

&lt;p&gt;因みにPijulは「ピーフール」みたいに発音するそうです。「フー」は喉の奥から出す破擦音ですね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustでシェル作った</title>
      <link>//KeenS.github.io/blog/2016/09/04/rustdeshierutsukutta/</link>
      <pubDate>Sun, 04 Sep 2016 16:26:20 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/09/04/rustdeshierutsukutta/</guid>
      <description>&lt;p&gt;κeenです。
先日、先輩社員と話してるとシェルを作る話になりました。
だいたいのコンピュータサイエンスの学生なら学部生の頃に課題でシェルを作りますが数学科にいた私は作ったことありませんでした。
でも、その時「今ならシェルなんて作ろうと思えばすぐに作れますよ」なんて言っちゃったのでなんか作りました。
まあ、習作程度の雑なものです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mirah 0.2がリリースされました。</title>
      <link>//KeenS.github.io/blog/2016/08/11/mirah_0_2gariri_susaremashita/</link>
      <pubDate>Thu, 11 Aug 2016 15:32:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/08/11/mirah_0_2gariri_susaremashita/</guid>
      <description>&lt;p&gt;κeenです。久しぶりに&lt;a href=&#34;mirah.org&#34;&gt;mirah&lt;/a&gt;のリリースが出ましたので新機能の紹介をしたいと思います。&lt;/p&gt;

&lt;p&gt;リリース版のダウンロードは &lt;a href=&#34;https://github.com/mirah/mirah/releases/tag/0.2.0&#34;&gt;こちら&lt;/a&gt;から。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>私がコードを書くときテストは書かない</title>
      <link>//KeenS.github.io/blog/2016/08/02/watashigako_dowokakutokitesutohakakanai/</link>
      <pubDate>Tue, 02 Aug 2016 00:12:22 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/08/02/watashigako_dowokakutokitesutohakakanai/</guid>
      <description>ちょっとポエムというか自分語りを。会社の同期と話してて少し刺激されたので。あとはソースコードって実際のところどういうふうに書いていますか？｜Rui Ueyama｜noteにも刺激されて。 発端は同期が最近は何か書いてもイケてなくて後で丸っと書き直すことが多くてつらい、という話を始めたこと。 自分は、そんなの普通だろと返した。少なくとも自分の中では当たり前だった。 ふと考えてみたらそうじゃない人も沢山いる気がした。当たり前じゃない人に、自分の当たり前を喋ってみたら面白そうということで自分がコードを書くときにやることを語る。
コードを書き始めた時点では仕様は完全には固まっていない。アプリケーションの構成とかは決まってるけど、ソフトウェアの中身はほとんど何も決まっていない。 まずは手を着けやすそうな所から始める。最初は必ずHello Worldから。そしてmainの中にPoCを書いてイメージを掴む。 そこから一気に飛躍して、ディレクトリ構成を決める。mainは三枚下ろしにして各ディレクトリ下に入れる。これでアプリケーションの骨格が見える。ここまでトップダウン。この状態でアプリケーションを走らせるとPoCが動く。
次はボトムアップのフェーズで、骨格に肉付けしていく。1度に考えることが一箇所で済むように、順番を考えながら気儘にコードを加えていく。だいたいデータアクセス層のインターフェース、データアクセス層の実装のスタブ、サービス層のスタブ、メインルーチン、サービス層、くらいの順番。抽象すると必要そうなものを定義する、定義したものを使う、定義したものを実装する。多少型が違ってコンパイルが通らなくても気にしない。エラー処理やエッジケースは全部スタブのまま。コードのあちこちに FIXME が散らばる。条件分岐の枝は全ては書かない。頭のコンテキストスイッチで死んでしまう。集中したい枝以外はFIXMEで埋める。こんなもんかな、と思ったところでちゃんとコンパイルが通るように修正する。ここまでテスト無し、データアクセス層の実装無し。
ここからようやく永続データのスキーマやアプリケーションの仕様を決める。コードを見ればどういうデータにパターンでアクセスして、どういうエッジケースがあるかが分かるからサクサク決まる。
データのスキーマが決まったので最後データアクセス層を実装出来る。そしたら動くものが完成する。動いたものをポチポチやってみて実装が正しいことを確認する。
このまま細かい実装を詰めていくかというとそうならない。仕様を見て、コードを見て、イケてない所を全部書き直す。まずはインターフェースを変える、型を変える。意図的にコードを壊す。あとはコンパイルエラーで修正箇所が全て分かる。ついでにFIXMEも片付けていく。エラーが取れてアプリケーションが再度動くようになったら、リファクタの完了。納得のいくコードになっている筈。ここでようやく仕様を固定するためにテストを書く。全てのコードが出来てからテストを書くからホワイトボックスに近いテストになる。
どうしてこのようなプロセスを経るかと考えてみた。ポールグレアムも言っているように、私にとってのアプリケーションは、アプリケーションのドメインを記述するための巨大な言語（ライブラリ）と、それを使った非常に小さな実装からなる。 そして言語と実装の境界は何度も押したり引いたりしてようやく固まる。この手順は境界が固まるまでの過程だ。DSLを作るにはまずどのようなAPIがあれば便利か理解する必要がある。理解するのに一番手っ取り早い方法は一旦実装してみることだ。 ある人は言うだろう、「何を七面倒な。最初からちゃんと設計していれば手戻りがないものを。」と。違う。こういうときに私はよく詰将棋を引き合いに出す。 新聞の片隅にある詰将棋を解いてみる。新聞とにらめっこしてアレコレ考えても中々上手くいかない。 ところが将棋盤を引っ張り出してきて、パチパチ駒を動かしてみると簡単に解けることがある。ここは実は銀を持っていた、ここで馬が効くからこの手は指せない。 人間先を読むには想像力が足りなすぎる。目の前に現物がないと気付けないことが多い。だから先に実装する。一度作ってしまえば壊してもコンパイラが助けてくれる。
一度目でアタリを付ける。二度目で実線を書く。作って、壊して、また作る。</description>
    </item>
    
    <item>
      <title>型クラスを越えて</title>
      <link>//KeenS.github.io/slide/katakurasuwokoete/</link>
      <pubDate>Sat, 16 Jul 2016 02:53:49 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/katakurasuwokoete/</guid>
      <description># 型クラスを越えて ---------------------- [歌舞伎座.tech#10「型クラス勉強会」](http://kbkz.connpass.com/event/32420/) === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # Rustとは ---------- * システムプログラミング言語 * GCなし！でもメモリ管理は自動 * **Zero-Cost Abstraction** * **Trait-Based Generics** * パターンマッチ、代数的データ型などなど * [プログラミング言語Rust](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/README.html) === # Rustのトレイト的なの ---------------- * 型に固有のメソッド + オブジェクト指向的な * トレイト + 型クラス === # 型クラスじゃない方 ------------------- ``` rust struct Person { name: String, } impl Person { // Static constructor fn new(name: String) - Self { Person{name: name} } // method fn hello(&amp;self) { println!</description>
    </item>
    
    <item>
      <title>シェル芸十八般</title>
      <link>//KeenS.github.io/blog/2016/07/13/shierugeijuuhachihan/</link>
      <pubDate>Wed, 13 Jul 2016 23:34:03 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/07/13/shierugeijuuhachihan/</guid>
      <description>&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;武芸十八般のひとつシェル芸ってワードがふと湧いてきたけどどちらかというとシェル芸十八般とかの方がよさそう。grep, cut, xargs,&amp;hellip;&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/753211663927513088&#34;&gt;2016年7月13日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Container Desgin Patterns</title>
      <link>//KeenS.github.io/blog/2016/07/02/container_desgin_patterns/</link>
      <pubDate>Sat, 02 Jul 2016 22:26:10 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/07/02/container_desgin_patterns/</guid>
      <description>&lt;p&gt;κeenです。先日、Kubernetesの開発者が書いた&lt;a href=&#34;http://blog.kubernetes.io/2016/06/container-design-patterns.html&#34;&gt;Kubernetes: Container Design Patterns&lt;/a&gt;というのを教えてもらって、面白かったのでそれを紹介します。
ただ漫然とコンテナを使っているだけでは気付かない使い方があったのでコンテナに興味のある方は是非一読下さい。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Socket on SML#</title>
      <link>//KeenS.github.io/slide/socket_on_sml_/</link>
      <pubDate>Sat, 02 Jul 2016 15:25:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/socket_on_sml_/</guid>
      <description># Socket on SML&amp;#x23; ---------------------- [ML勉強会](http://connpass.com/event/32752/) 2016-07-09 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # HTTP on SML&amp;#x23;? ------------- * SML#にJSONサポートが入った + REST API簡単に叩けるのでは？ * SML#にFully Concurrent GCが入った + HTTPサーバ書くとレイテンシ抑えられて嬉しいのでは？ * スレッドも使えるしスループットも高い筈 * SML#でHTTPの機運 * しかしHTTPサポートはないので自前実装するしかない === # Socket on SML&amp;#x23;? ------------------ * HTTPサポートに必要 * Basisにはある (Optional) + SML#のBasisはサポートしてない * FFIあるしユーザランドで実装するか * [KeenS/SmlSharpSocketSupport](https://github.com/KeenS/SmlSharpSocketSupport) === # TCP/IP、ソケットなど --------------------------- * ソケットアドレス - 自分、相手の居場所。これがないと通信出来ない + 複数のアドレスファミリ(AF)がある + IP v4, IP v6, UNIXドメインなど。 * ソケット - 通信の仕組み。プログラムからはfdとして見える。 + AFやtype(stream/diagram)の属性を持つ * INet - インターネットドメインソケット + TCPとUDP + IP v4/v6アドレスで通信 === # 主要なstructure ----------------- * Socket * NetHostDB * INetSock * (UnixSock) === # [NetHostDB](http://sml-family.</description>
    </item>
    
    <item>
      <title>Rustの所有権/ミュータビリティの分割</title>
      <link>//KeenS.github.io/blog/2016/06/19/rustnoshoyuuken_myu_tabiriteinobunkatsu/</link>
      <pubDate>Sun, 19 Jun 2016 20:42:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/06/19/rustnoshoyuuken_myu_tabiriteinobunkatsu/</guid>
      <description>&lt;p&gt;κeenです。昔所有権/ミュータビリティを分割したくなったけどぱっと方法が思いつかなくて困ったことがあるので今更ながら備忘録として残しておきます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>multirustが非推奨になったようなのでrustupに移行する</title>
      <link>//KeenS.github.io/blog/2016/06/12/multirustgahisuishouninattayounanoderustupniikousuru/</link>
      <pubDate>Sun, 12 Jun 2016 15:23:06 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/06/12/multirustgahisuishouninattayounanoderustupniikousuru/</guid>
      <description>&lt;p&gt;κeenです。どうやらもうそろそろRustのツールチェーン管理はmultirustじゃなくてrustupを使った方が良さそうなので移行しようと思います。

きっかけはmultirustにそういうコミットがされたから。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DOT/dottyについて調べてみた</title>
      <link>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</link>
      <pubDate>Tue, 24 May 2016 23:40:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</guid>
      <description># DOT/dottyについて調べてみた ---------------------- サイバーエージェント Scala Meet Up 2016-05-27 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループ + Lisp, ML, Rust, Shell Scriptあたりを書きます + Scala初心者 + Scala歴1年未満&amp;gt;&amp;lt; === # Scalaコンパイラ ---------------- * 型推論（特にimplicit）が遅い * コンパイルフェーズが多い + 中間オブジェクトが多くて遅くなる * 多くのクラスファイルを生成する + コンパイラのくせにディスクIOが多い * 気を抜いてると `Any` に推論される e.g.) `if(x) 1 else &#34;a&#34;` * そもそものScalaの設計に起因する点が多い + 抜本的変更が必要 === # Scala基礎 ----------- * Scalaが成立するのに最低限必要な機能って？ + e.g.) `case class` はなくても `class` だけでどうにかなる * 「最低限の機能」を減らせばコンパイラがシンプルになる + 他の機能はただのシンタックスシュガーになる + コンパイラのバグを減らせる + 機能追加時の矛盾確認が楽 * コア言語 === # Featherlight Scala --------------------- * Scalaのシンタックスシュガーを減らした感じ * 小さな言語 * 元のScalaはこれをベースに議論されてきた === # 形式言語理論 ------------- * 最低限必要な機能を形式的にモデル化 + 全ての動作は予め決められた「規則」に基く + 実際に書いて動かすものではない * 形式的にすることで「証明」とかが出来る + 「型検査に通れば実行時に型エラーが起きない」 + 「型検査が必ず終了する」 * 逆に、「このモデルだとこの機能は実現出来ない」とかも分かる === # Dependent Object Type ------ * Scalaのコアをモデル化したもの（要出典） * 形式言語 * ジェネリクスもなければクラスも継承もない、パッケージもない。 * 小さい言語ながら表現力豊か * 全ての値はオブジェクト。 + オブジェクトのフィールドとメソッドと型メンバーだけ + 型はそのまま * Path Dependent Type * サブタイピング === # About DOT --------- * 型付の健全性が証明された * System FSystem DDOT * existential typeを自然に表現出来る * 交差型と合併型 + `A extends B` - `A &amp; B` + 合併型は主に型推論の結果に出てくる === ```scala package scala.</description>
    </item>
    
    <item>
      <title>cargo-profilerを試す</title>
      <link>//KeenS.github.io/blog/2016/05/14/cargo_profilerwotamesu/</link>
      <pubDate>Sat, 14 May 2016 20:59:13 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/05/14/cargo_profilerwotamesu/</guid>
      <description>&lt;p&gt;κeenです。先日Rustのニュースに流れてきたcargo profilerを試してみます。
元の紹介記事はこちら&lt;a href=&#34;http://www.suchin.co/2016/05/11/Introducing-Cargo-Profiler/&#34;&gt;Introducing Cargo Profiler · suchin&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>高速な継続ライブラリに向けて</title>
      <link>//KeenS.github.io/slide/kousokunakeizokuraiburarinimukete/</link>
      <pubDate>Sun, 08 May 2016 21:26:32 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/kousokunakeizokuraiburarinimukete/</guid>
      <description># 高速な継続ライブラリに向けて ---------------------- [継続勉強会](http://connpass.com/event/28150/) 2016-05-22 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # 継続欲しい ----------- * 色々な場面で便利 * Schemeで使い回してるのうらやましい * Common Lispでも使いたい * 現実には限定継続が欲しい + Common Lispには大域脱出はある === # 限定継続を使う例 ----------------- ## 非同期プログラミング * コールバック形式だと厳しい * 限定継続を使うと綺麗に書き直せる === # 限定継続を使う例 ----------------- ## ゲームのコルーチン * 複数のオブジェクトを制御するのにコルーチンが欲しい * cf [コルーチンをCommon Lispで簡単に定義 - さくらんぼのlambda日記](http://lambdasakura.hatenablog.com/entry/20111026/1319598590) === # 限定継続を使う例 ----------------- ## do記法 * モナドのdo記法は限定継続を使って実装出来る * [Operational monad in scheme](http://www.</description>
    </item>
    
    <item>
      <title>RustでベアメタルRaspberry PiのLチカ</title>
      <link>//KeenS.github.io/blog/2016/05/04/rustdebeametaruraspberry_pinolchika/</link>
      <pubDate>Wed, 04 May 2016 11:43:26 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/05/04/rustdebeametaruraspberry_pinolchika/</guid>
      <description>&lt;p&gt;κeenです。GWもくもく会で机の片隅で埃被ってたRSPiのベアメタルを触ってみたのでその成果報告を。
ベアメタルについて知らない人でも読めるように書きます。そしてアセンブラもCも出てきませんし、半田付けも必要ありません。
Rustしか使いません。&lt;/p&gt;

&lt;p&gt;Rustは分かるけどLチカは全く知らない、けど興味のある方は是非読んでみて下さい。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LXDがリリースされたらしい</title>
      <link>//KeenS.github.io/blog/2016/04/14/lxc_2_0_0gariri_susaretarashii/</link>
      <pubDate>Thu, 14 Apr 2016 22:51:20 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/04/14/lxc_2_0_0gariri_susaretarashii/</guid>
      <description>&lt;p&gt;κeenです。頭痛い。LXDがリリースされたようなので1つ記事をば。
LXDはLinuxで動く軽量仮想化コンテナ、LXCのラッパでREST APIとCLIが提供されています。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>テストについて、Scalaと。</title>
      <link>//KeenS.github.io/slide/tesutonitsuite_scalato_/</link>
      <pubDate>Tue, 12 Apr 2016 22:31:51 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/tesutonitsuite_scalato_/</guid>
      <description># テストについて、Scalaと。 ---------------------- サイバーエージェント アドテクスタジオ ScalaMeetUp テスト回 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + 基盤開発グループでScalaで基盤開発してます + Lisp, ML, Rust, Shell Scriptあたりを書きます === # Scalaのテスト --------------- * ScalaTest + 機能豊富 + 複数のテストスタイルを選べる + 他のフレームワークとの統合がある * Specs2 + 普通に使いやすい * 他にもScalaCheck、JUnit、Gatlingなどなど === # ScalaTestのスタイルたち ----------- * FunSuite + xUnitっぽいらしい * FlatSpec + xUnitからBDDに移行した人向けらしい * FunSpec + RSpecっぽいBDD用の === # ScalaTestのスタイルたち ----------- * WordSpec + Specs2に似てる。 * FreeSpec + 何段にでもネスト出来る。自由。 * Spec + テスト=メソッド。速いらしい。 === # ScalaTestのスタイルたち ----------- * PropSpec + プロパティベースのテスト。ScalaCheckとの統合。 * FeatureSpec + シナリオテスト。 === # その他の機能 ------------- * mockitoのシュガー * Matcher DSL * 複数のランナー（複数のツールとの統合） === # Axionのテスト コード紹介を多めに === # 単体テスト --------------- * 普通の単体テストはWordSpec * ホーアの3つ組に基いて事前条件、コマンド、事後条件(不変条件)に分ける + 「{事前条件}が成り立つ時{コマンド}を実行し、停止するなら{事後条件(不変条件)}が成り立つ」の列挙 * [テストについて考えてみた | κeenのHappy Hacκing Blog](http://keens.</description>
    </item>
    
    <item>
      <title>Mirah関連ツールまとめ</title>
      <link>//KeenS.github.io/blog/2016/04/04/mirahkanrentsu_rumatome/</link>
      <pubDate>Mon, 04 Apr 2016 01:16:31 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/04/04/mirahkanrentsu_rumatome/</guid>
      <description>&lt;p&gt;κeenです。寝付けないのでMirah関連ツールについてまとめようかと。
とはいってもそんなにないのですが。Mirahについて知らない人は適当にググって下さい。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLで函数型的正規表現マッチ</title>
      <link>//KeenS.github.io/slide/smldekansuukatatekiseikihyougenmatchi/</link>
      <pubDate>Tue, 29 Mar 2016 01:44:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/smldekansuukatatekiseikihyougenmatchi/</guid>
      <description># SMLで函数型的正規表現マッチ ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # 元ネタ -------- [関数型的正規表現マッチ | Preferred Research](https://research.preferred.jp/2010/11/regexp-play/) === # 正規表現 ---------- 必要最小限の要素は5つだけ 1. 空文字 2. アルファベット1つ 3. 正規表現のOR結合 4. 正規表現のAND結合 5. 正規表現の繰り返し === # SMLで表してみる ----------------- ``` sml datatype reg = Empty | Sym of t | Or of reg * reg | And of reg * reg | Rep of reg ``` === # 本当に大丈夫？ === # `/(a|b)*c/` ----------- ``` sml And(Rep(Or(Sym &#34;</description>
    </item>
    
    <item>
      <title>ビッグデータしないDrill、ローカルで快適に使うために</title>
      <link>//KeenS.github.io/slide/biggude_tashinaidrill_ro_karudekaitekinitsukautameni/</link>
      <pubDate>Sun, 06 Mar 2016 14:54:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/biggude_tashinaidrill_ro_karudekaitekinitsukautameni/</guid>
      <description># ビッグデータしないDrill、ローカルで快適に使うために ---------------------- [Tokyo Apache Drill Meetup](http://drill.connpass.com/event/27414/) 2016-03-22 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + Lisp, ML, Rust, Shell Scriptあたりを書きます + サイバーエージェントのエンジニア + アドテクスタジオ所属 + データエンジニアじゃなくてもデータを触ることはある === # なぜローカルか --------------- * ビッグデータ重い * 使いたいデータが絞れる時には大袈裟 + 「売り上げ上位1000のユーザの行動」とか * 同じようなクエリの重複 + 新しいテーブル作れないDBとかview作れないDBとか * 結果をRに渡したりとかが面倒 + CSVダウンロードがGUI === # キャッシュ的な ---------------- ``` +---------------------------------+ | BIG DATA (BigQuery, Spark, etc) | +---------------------------------+ ^ | ^ | | | | | | v | v +-------------------+ | ローカルキャッシュ | ＿人人人人人人人＿ ＞　突然のDrill　＜ ￣Y^Y^Y^Y^Y^Y￣  === # なぜ Drill ------------ * (デーモン立ち上げておけば)サクっと始められる * CSVをそのまま読める + Schema定義がいらない!</description>
    </item>
    
    <item>
      <title>Rustとは何か。どんな言語か。</title>
      <link>//KeenS.github.io/slide/rusttohananika_donnagengoka_/</link>
      <pubDate>Sun, 06 Mar 2016 05:27:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rusttohananika_donnagengoka_/</guid>
      <description># Rustとは何か。どんな言語か。 ---------------------- [異種プログラミング言語格闘勉強会](http://kbkz.connpass.com/event/26677/) 2016-03-20 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # Rustって? ---------- * システムプログラミング言語 * だけど函数型言語から影響を受けた * 安全かつ高速 * ゼロコスト抽象化 === ## システムプログラミング言語 --------------------------- * スレッドはネイティブ、Cとの相互呼び出し、小さなバイナリサイズ * ゲームエンジンとか作れる([piston](https://github.com/PistonDevelopers/piston)) * レンダリングエンジンとか作れる([Servo](https://github.com/servo/servo)) * Lチカとか出来る * OSとか作れる([Redox](https://github.com/redox-os/redox)) === ## 函数型言語的からの影響 ----------------------- 最近ではめずらしくなくなった * デフォルトイミュータブル * 代数的データ型 * コンビネータ * トレイト (型クラス) === ## 安全かつ高速 -------------- * データ競合が起きない + 所有権システム + だいたいコンパイル時Read Writeロック + Read only参照複数 or Write可能参照1つ * LLVMベースの強力な最適化 * スレッド周辺のAPIが揃ってる === ## ゼロコスト抽象化 ------------------ 省略 * [Rustのゼロコスト抽象化 | κeenのHappy Hacκing Blog](http://keens.</description>
    </item>
    
    <item>
      <title>リージョンとRustの返り値</title>
      <link>//KeenS.github.io/blog/2016/03/02/ri_jontorustnokaerichi/</link>
      <pubDate>Wed, 02 Mar 2016 00:05:03 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/03/02/ri_jontorustnokaerichi/</guid>
      <description>&lt;p&gt;Rustにおいては返り値ポインタで返すよりもそのまま返して、受け取る側でポインタで受け取るかそのまま受け取るかを指定するのが良い選択肢だ、といっています。
しかし初めて見る時にはどうしてそんなことが出来るのかわからず、びっくりしますよね。
それをRustがリージョンを使ってメモリ管理をしていると分かればどうなっているのか分かったのですこしばかり。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのゼロコスト抽象化</title>
      <link>//KeenS.github.io/blog/2016/03/01/rustnozerokosutochuushouka/</link>
      <pubDate>Tue, 01 Mar 2016 23:32:12 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/03/01/rustnozerokosutochuushouka/</guid>
      <description>&lt;p&gt;κeenです。今日Twitter上でのやりとりから少し面白いことが分かったのでそれについて。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>テストについて考えてみた</title>
      <link>//KeenS.github.io/blog/2016/03/01/tesutonitsuitekangaetemita/</link>
      <pubDate>Tue, 01 Mar 2016 22:49:23 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/03/01/tesutonitsuitekangaetemita/</guid>
      <description>&lt;p&gt;κeenです。
普段はテストをあまり書かない人なのですが業務では流石に書く必要があって、馴れないことをしていると色々と考えることがあったのでまとめます。
まだ私はテストのセオリーとかには詳しくないので勝手気儘に考えたことです。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RustのHigher-Kinded type Trait</title>
      <link>//KeenS.github.io/blog/2016/02/28/rustnohigherkinded_type_trait/</link>
      <pubDate>Sun, 28 Feb 2016 14:40:59 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/28/rustnohigherkinded_type_trait/</guid>
      <description>&lt;p&gt;κeenです。少し前の話になりますがRustの関連型を駆使してHigher Kinded type Trait（高階型トレイト）を実現してしまったものが出回ってたのでそれについて。
本来RustはHKTをサポートしていませんが不思議なことに実装出来てしまっているのです。&lt;/p&gt;

&lt;p&gt;HKTについて微塵も知らない方にも分かるように解説していきます。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>druidというリアルタイムデータ分析ツールを知った</title>
      <link>//KeenS.github.io/blog/2016/02/27/druidtoiuriarutaimude_tabunsekitsu_ruwoshitta/</link>
      <pubDate>Sat, 27 Feb 2016 21:28:16 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/27/druidtoiuriarutaimude_tabunsekitsu_ruwoshitta/</guid>
      <description>κeenです。社内ハッカソンに出てきた。そこでdruidというツール（？）を触ったのでそれについて。 読み方は「ドゥルイド」でいいのかな？公式ページはこちら。Metamarketsが主導で開発しているようで、オープンソースになっている。
公式サイトを少し回遊してもらうと分かると思うが、時系列データを分散環境でストリーミング処理出来るツール。分散環境で動くだけあってコンポーネントはいくつかある。
主にはストリーミングデータを取り込む「REALTIME」、クライアントからのクエリを処理する「BROKER」、過去のデータを処理する「HISTORICAL」があるようだ。 BROKERがDEEP STORAGE(s3などの永続データストア)にデータを保存し、HISTORICALがオンデマンドにそのデータを読み出してBROKERに返す。
イメージとしてはこんな感じだが、実際に動かすのには他のコンポーネントも必要で、分散環境に必須なZookeeperが必要なのはもちろんのこと、全体を司る「COORDINATOR」、取り込んだデータのメタデータを保存する「METADATA STORAGE」も必要になる。
画像の出展はこちら。
中々に大仰なアーキテクチャだがどのみちリアルタイムデータ分析基盤を作ろうと思うとこれくらい必要になる。それを1まとめにしてディストリビュートしてくれるdruidを使った方がなんぼか近道な気はする。
さて、これを1インスタンスで動かそうと思うと、DEEP STORAGEはローカルファイルシステム、METADATA STORAGEは組込みのDerby DBでまかなえ、REALTIMEはデータを取り込む時にのみ必要なのでZookeeper、Coordinator、Broker、Historical、都合4つのJava製ミドルウェアを起動すればどうにか使える。 これら合わせても2GBくらいのメモリしか必要なかったので十分手元で動く。
さて、このDruid、どういうことが出来るかというとクエリに注目すれば「Group By付きのAggrigation Functionを高速に動かす」が主な目的だろうか。他にも色々あるが。 BIツールや他のダッシュボードツールなんかと連携してストリーミングデータをリアルタイムに可視化するのに一役買う。YahooやAlibabaなんかでも使われているようだ。 例えばDruidをサポートするダッシュボードツール、panoramixなんかもある。
今回のハッカソンはGCPがテーマで、Cloud Pub/Subからデータを取り込むことになったがDruidにはPub/Subからデータを取り込むREALTIMEがない。ということでハッカソンでPub/Sub extensionを作った。 メーリスに投稿して様子を覘った上でコードを整理してプルリクを出す予定だ。 拡張は思ったよりも作りやすく、ドキュメントを読まなくても既存のKafka拡張を参考にするだけで書けた。まあ、その後苦労したが。
はじめて使うDBのプラグイン書いたらデータのロードは出来たもののクエリの投げ方が分からずに入ったデータを確認出来ない…っ…
&amp;mdash; κeen (@blackenedgold) 2016年2月26日 
今回作ったのはFirehose Pluginと呼ばれるものだが、他にもプラグインの種類は色々あるみたいだ。 しかしFirehose Pluginの基底クラスはあまりストリーミングデータのインポートには良くない気がする。FirehoseV2というのがあって、それが良いインターフェースになっていたが使い方が分からなかった。
今が0.9.0-SNAPSHOT。1.0.0が出る頃が楽しみだ。</description>
    </item>
    
    <item>
      <title>Bind Addressの意味がようやく分かった</title>
      <link>//KeenS.github.io/blog/2016/02/24/bind_addressnoimigayouyakuwakatta/</link>
      <pubDate>Wed, 24 Feb 2016 23:57:31 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/24/bind_addressnoimigayouyakuwakatta/</guid>
      <description>κeenです。小ネタを。サーバを立ち上げる時に指定するBind Addressについてよく分かっていなかったのがようやく分かるようになったのでそれについて。 Bind Addressはサーバ(特にHTTPサーバ)を立ち上げる時によく指定することになりますが、Usageを見ても「バインドするアドレスを指定する」などとトートジーめいたことしか書いてありませんでした。 実際に使ってみても127.0.0.1を指定すればローカルホストから、0.0.0.0を指定すれば外部からでも参照出来るな、くらいの認識しかありませんでした。 意味も分からず使っていると気持ち悪いもので、2つの疑問が湧いてきます。
 0.0.0.0と127.0.0.1は正確に何を意味するのか 127.0.0.1と0.0.0.0以外のアドレスを指定するのはどのようなケースか  もちろん、127.0.0.1がlocalhostを指すことは知っていますが0.0.0.0というアドレスはBind Addressでしか見たことありませんし、127.0.0.1が私の知っているlocalhostの意味でない可能性も十分あるな、と思っていました。
さて、この疑問に答えるには前提知識が必要なのでそこから始めましょう。
マシンは複数のIPアドレスを持ちうる 1つのマシンに、複数のIPアドレスが割り当てられることがあります。 典型的なのはルータのようにインターネットとローカルエリアネットワーク両方に参加しているもので、LANには「192.168.1.1」、インターネットには「www.xxx.yyy.zz」という2つのIPアドレスを持つでしょう。 また、どのマシンにも先程述べたlocalhost、127.0.0.1という内部から自身を指すIPアドレスもあります。 図にするとこんな感じでしょうか。
 [インターネット] | | | www.xxx.yyy.zz [x 127.0.0.1] ルータ | 192.168.1.1 | ...-+--+ | 192.168.1.2 [ 127.0.0.1]マシンA  さて、この時に例えばルータの管理WebUIを提供したいとしましょう。このUIは勿論LAN内にいるマシンAからは参照したいですがインターネット全てに公開する訳にはいきません。 こういう時のアクセス制御に使うのがBind Addressです。
呼ばれ方で反応を変える bind addressは、他のマシンから何という名前で呼ばれたかでメッセージを受け取る/受け取らない（というか見える見えない）を変えるものです。 街中で「田中さん」と呼ばれたら返事したいけど「†漆黒の天翅†さん」と呼ばれたら返事したくないですよね。 少し実験してみましょう。
さて、私の手元のマシンはifconfigによると127.0.0.1というアドレスと192.168.1.6というアドレスを持っているようです。
$ ifconfig lo Link encap:ローカルループバック inetアドレス:127.0.0.1 マスク:255.0.0.0 inet6アドレス: ::1/128 範囲:ホスト UP LOOPBACK RUNNING MTU:65536 メトリック:1 RXパケット:5132 エラー:0 損失:0 オーバラン:0 フレーム:0 TXパケット:5132 エラー:0 損失:0 オーバラン:0 キャリア:0 衝突(Collisions):0 TXキュー長:0 RXバイト:665331 (665.</description>
    </item>
    
    <item>
      <title>ClojureでSSPを作った話</title>
      <link>//KeenS.github.io/slide/clojuredesspwotsukuttahanashi/</link>
      <pubDate>Mon, 22 Feb 2016 20:19:11 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/clojuredesspwotsukuttahanashi/</guid>
      <description># ClojureでSSPを作った話 ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # SSPとは ------- ※今回作ったものの話なので実際は少し違う * Supplier Side Platform * メディアからの広告リクエストを受けて表示権をオークションに掛け、落札された広告を表示する 0. 広告リクエストを受け取って 1. 各DSPに競りの通知を投げて 2. 入札を受け取って 3. 落札者と落札価格を決めて 4. 落札通知を出す === # アドテクコンペ --------------- * [ビジネスモデルもエンジニアリングも学べるアドテクスタジオの育成プログラムとは | 株式会社サイバーエージェント](https://www.cyberagent.co.jp/techinfo_detail/id=11380) * サイバーエージェントの学生向けインターン * 3日間、3、4人のチームで **DSP** を作る * 学生は7チーム、1チームあたり2000q/sを捌くことになってる * 学生のDSPを繋ぐための **SSP** が必要になったので作ることに。 ===   日本におけるアドテク市場とサイバーエージェントのアドテク事業について  from CyberAgent, Inc.</description>
    </item>
    
    <item>
      <title>readlineの作り方</title>
      <link>//KeenS.github.io/blog/2016/02/14/readlinenotsukurikata/</link>
      <pubDate>Sun, 14 Feb 2016 22:37:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/14/readlinenotsukurikata/</guid>
      <description>&lt;p&gt;κeenです。なんか伏線っぽいもの回収しといた方が良いかなと思ってLinuxっぽい話でも。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>分散VCSのモデル、あるいはPijulについて</title>
      <link>//KeenS.github.io/blog/2016/02/14/dvcsnomoderu_aruihapijulnitsuite/</link>
      <pubDate>Sun, 14 Feb 2016 17:12:01 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/14/dvcsnomoderu_aruihapijulnitsuite/</guid>
      <description>先日、Pijulという分散VCSについて知って、それについて調べてみたら少し面白かったのでメモ。 DVCSで一番有名なのは間違いなくGitだろう。あれは分散グラフ理論木モデルに基いているらしい。ベースになったモデルがあることに驚いたが、調べても出てこなかった。 Gitは高速で信頼性が高い一方、コミット同士をチェーンのように繋げてしまうので柔軟性を欠き、例えばCherry Pickなんかがやりづらい。 あるいはリモートのmasterを取り込まずにローカルのmasterにコミットすると互いに独立した変更であっても一旦remote masterをマージしないとプッシュ出来ず、コミットグラフが汚れてしまう。 また、CUIが直感的でなく、理解しづらいという声もある。それはこういう皮肉にも現れている
まあ、言われてみれば私もこのスライドを見てようやく理解した。
  コンセプトから理解するGitコマンド  from ktateish 
他のVCSにも色々特色はあって、歴史は神聖なるmercurial、履歴にアクセスしてこそのVCSなFossil、レポジトリとはパッチの集合であるDarcsなどなど。
この中でもDarcsは大きく毛色が違うように思える。レポジトリは依存関係のあるパッチの集合で、互いに独立なパッチは相互作用しない。なので上に挙げたcherry pickだとかremote vs localの問題とかが起きない。 それにパッチベースの管理なのでメールでパッチを送り合うような古いシステムでも困らない。少なくともforkしてpull requestよりはパッチを送った方がなんぼか筋は良い気がする。他のVCSがsnapshot-basedなのに対してdarcsはpatch-basedになる。
さて、このDarcs、そこまで知らない人も多いかと思うが古くはGHCの開発に使われていたり(gitに移行した)、common-lisp.netで使われていたり(リニューアルの時に内部がgitlabになってdarcsサポートはドロップされた)した。 Haskellで書かれていたのとモデルが(理論的には)綺麗なので函数型な人達には人気があったようだ。
Darcsを使っていたプロジェクトがGitに移行したことから分かるように、Darcsにも問題があった(らしい)。1つはパフォーマンスの問題で、Haskellで書かれていたので流石にCで書かれたGitには勝てなかった。 さらには、勘の良い人は気付いたかもしれないが、パッチ同士の依存関係だけで管理してるとマージの時に最悪計算量が $O(2^n)$ になる(多くの場合は $O(n)$ で済むらしい)。
その他のDarcsの問題についてはこちらを参考されれば。
GHC の開発の darcs から git への移行 - Togetterまとめ
Pijul 今回話題に出したPijulはDarcsに影響を受けている。レポジトリとは依存関係を持ったパッチの集合で、パッチ同士の関係はGitに比べれば薄いが、snapshot-basedとpatch-basedの両方の良い所を取り入れている。 Pijulの特色はA Categorical Theory of Patchesの成果を取り入れていて、Darcsにあった計算量の問題が改善している。 この理論はファイルを対象、パッチを射とした圏を考えると、互いにコンフリクトしないパッチは同時に適用出来てかつ適用の順序に依らないことは圏論に於ける「押し出し」に一致することに着目している。 さらにこのパッチ圏を拡張(余完備化)することでコンフリクトが起きないように出来る。
さて、Pijulにすると何が嬉しいのかというと、色々ある。 Darcsのようにパッチベースな点は言わずもがな、パッチベースなのでパッチを作った後でブランチを切ることが出来る。 実際に作業をしてみてブランチの名前が不適切だったな、とかブランチを切る前に名前を考えるのに一瞬手が止まったりすることがない。 尚、Pijulの現バージョン(0.2)では内部構造的にはブランチを扱えるものの、インターフェースのコマンドがないため事実上ブランチは作れないらしい。 また、データの持ち方的にgit blame相当の機能が速いなどそれなりの特色を出している。
開発言語もOCaml、Scala、Haskell、Cなどを試して今はRustがベストフィットだと落ち着いたらしい。 cargo install pijul でインストール出来る。 Rustで開発したお陰もあってDarcsより大分速いらしい。
Darcsユーザには受けがいいようで、darcs to pijulブリッジも作られようとしているらしい。
個人で使うには困らない程度にまで安定したら楽しみだ。</description>
    </item>
    
    <item>
      <title>Nexus 5にUbuntu Touchのインストール</title>
      <link>//KeenS.github.io/blog/2016/02/10/nexus_5niubuntu_touchnoinsuto_ru/</link>
      <pubDate>Wed, 10 Feb 2016 23:09:09 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/10/nexus_5niubuntu_touchnoinsuto_ru/</guid>
      <description>κeenです。先日中古のNexus 5を入手したのでUbuntu Touchをインストールしました。その時のメモ。 尚、Multi ORMなどを使ったマルチブートではなく完全にAndroidを殺したシングルブートです。 色々調べてみましたが公式ドキュメントのままやるのが一番無難なようです。 まあ、スクショがないので他のサイトのスクショは参考にした方がいいかもしれませんが。
途中adbを使ったりする部分も丁寧に解説してるのでAndroid初心者でも問題ないはず。
ツールの準備 Ubuntu公式で案外色々なツールを用意してくれている模様。
sudo add-apt-repository ppa:ubuntu-sdk-team/ppa sudo apt-get update  でppaを登録した後は
Ubuntu Touchインストールに必要なツール
sudo apt-get install ubuntu-device-flash  USBで繋いだデバイスをデスクトップから操作するのに便利なツール
sudo apt-get install phablet-tools  をインストールします。（恐らく）このコマンドでadbとfastbootも入ります。
AndroidのUSBデバッグを有効にする 普段から自機でAndroidアプリを開発してない人はこのステップが必要でしょう。
開発者モードの解放 [設定のアプリ] → [一般] → [端末情報] → [ソフトウェア情報]
と進んで[ビルド番号]を7回タップすると開発者モードが解放されます。
私がAndroid Appを作ってた頃(Android 2.3)にはこんな手順なかったんですけどいつのまにやら変わったんですね。
USBデバッグの有効化 さて、これで[一般]タブに戻ると[開発者向けのオプション]という項目が出てくるのでそこからUSBデバッグを有効にしましょう。
Nexus 5を繋ぐ USBケーブルでNexus 5をPCに繋ぎます。
adb devices  で1つデバイスが表示されていたらちゃんとデバッグモードで繋げています。
Androidデータのバックアップ Androidに未練はなくてももしUbuntu Touchのインストールに失敗した時に引き返せるようにバックアップは必要です。
adb backup -apk -shared -all  のコマンドでカレントディレクトリに./backup.abという名前でデータが吸い出されます。
さらにAndroidの再インストールに必要なデバイスデータも取得します。
adb shell grep ro.</description>
    </item>
    
    <item>
      <title>Common Lispで高速行列演算</title>
      <link>//KeenS.github.io/blog/2016/02/04/common_lispdekousokugyouretsuenzan/</link>
      <pubDate>Thu, 04 Feb 2016 23:47:34 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/04/common_lispdekousokugyouretsuenzan/</guid>
      <description>&lt;p&gt;κeenです。Common Lispから線形代数ライブラリを使うポストで比較にCommon Lispのコードが出されていたのですがもう少し改良出来そうだったので少しばかり高速化してみました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HAMT ~ イミュータブルで高速なハッシュマップ ~</title>
      <link>//KeenS.github.io/slide/hamt/</link>
      <pubDate>Sun, 31 Jan 2016 16:17:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/hamt/</guid>
      <description># Hash-Array Mapped Trie ---------------------- ~ イミュータブルで高速なハッシュマップ ~ サイバーエージェント AdTech Scala Meetup LT大会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループの新卒 + Lisp, ML, Rust, Shell Scriptあたりを書きます === # scala.collections.immutable.HashMap ------------------------------------- * 今日の話題。これの実装をみていく。 * イミュータブル * キー-バリューペア * 値を追加する度に新たなハッシュマップを作る === # HashMap ---------------- * `O(1)`のアクセス効率 * 空間効率は悪い * ハッシュ関数が定義出来れば何でもキーに使える * 普通はミュータブルに使う + 大量のメモリをアロケートするのでコピーはつらい === # メモリ効率悪そう？ ------------------------- ```scala val hash = HashMap.empty + (3 - 1) // +---+---+---+---+---+---- // | / | 3 | / | / | / | .</description>
    </item>
    
    <item>
      <title>Rustのパッケージをcrates.ioに登録する</title>
      <link>//KeenS.github.io/blog/2016/01/31/rustnopakke_jiwocrates_ionitourokusuru/</link>
      <pubDate>Sun, 31 Jan 2016 14:43:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/31/rustnopakke_jiwocrates_ionitourokusuru/</guid>
      <description>&lt;p&gt;κeenです。技術の話題を書くのは久し振りですね。今日初めてRustのパッケージのセントラルレポジトリ、&lt;a href=&#34;crates.io&#34;&gt;crates.io&lt;/a&gt;にパッケージを登録したのでその流れを共有します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meetup3周年に寄せて</title>
      <link>//KeenS.github.io/blog/2016/01/27/lisp_meetup3shuunenniyosete/</link>
      <pubDate>Wed, 27 Jan 2016 23:40:11 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/27/lisp_meetup3shuunenniyosete/</guid>
      <description>&lt;p&gt;κeenです。昨日、&lt;a href=&#34;http://lisp.connpass.com/event/25546/&#34;&gt;Lisp Meetup #36&lt;/a&gt;が行なわれました。1回テックトークを挟んでるのでこれでちょうど丸3年、毎月Lisp Meetupが行われたことになります。

Lisp Meetupは&lt;a href=&#34;http://shibuya.lisp-users.org/&#34;&gt;Shibuya.lisp&lt;/a&gt;が基本、毎月開催している草の根活動で、Lisper同士の交流を目的として主に希望者によるトークをメインとした会です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>独学でプログラミングをやってきた中で良かった技術書50選</title>
      <link>//KeenS.github.io/blog/2016/01/17/dokugakudepuroguraminguwoyattekitanakadeyokattagijutsushowoageteiku/</link>
      <pubDate>Sun, 17 Jan 2016 16:48:28 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/17/dokugakudepuroguraminguwoyattekitanakadeyokattagijutsushowoageteiku/</guid>
      <description>&lt;p&gt;今まで読んできた技術書の中で良かったものを挙げていく。
そろそろ本棚が溢れるので捨てる前に書き留めておく。
あとはGitHub PagesがアフィOKとのことなので試してみようかと。50冊分（以上）アフィがあるのでページが重いがご容赦を。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミングを独学する時こそインプットを増やした方がいい</title>
      <link>//KeenS.github.io/blog/2016/01/17/puroguraminguwodokugakusurutokikosoinputtowofuyashitahougaii/</link>
      <pubDate>Sun, 17 Jan 2016 13:38:03 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/17/puroguraminguwodokugakusurutokikosoinputtowofuyashitahougaii/</guid>
      <description>巷でよく「アウトプットを増やせ」というのを聞くが個人的な意見としてインプットを増やした方が良いと思っているのでそれについて書く。 以前少し書いたことがあるが、私はプログラミングを独学で学んだ。 その時インプットがメインでほとんどアウトプットをしてこなかった。今でもそれは正解だったと思っている。何故か？ 答えは簡単で、「学ぶ」ということは情報を仕入れる、要はインプットのことを指しているからだ。それに独学でない人、つまり情報学科なんかにいる人は死ぬほど勉強している訳でちょろっと勉強したくらいでは到底太刀打ち出来ない。
全くアウトプットが必要ないかというとそうとも思っていない。アウトプットの瞬間に今まで仕入れた知識が自分に定着するからだ。 インプットとアウトプットどれくらいの比率でやればいいのかというと「インプットが溢れ出した時」にアウトプットすればいいと思っている。
ただ目だけで追った情報は自分の中ではぼんやりしていて形を成していない。 コードなり文書なりの形にアウトプットする時に同時に自分の中で形を成す。あるいは半知半解の部分が明みになって理解の手向けとなる。 そのぼんやりとしたものが形を成す瞬間が一番成長しているように感じるのでよく「アウトプットを増やせ」と言われるのではと思っている。 しかしそれはぼんやりとした情報が定着しているだけであって知識が増えている訳ではない。アウトプットの時に定着するものは今までのインプットに比例する。インプットがなければアウトプットの時の成長もない。 かといって定着させることなく情報を仕入れ続けると不安になる。あるいは、仕入れた知識を試してみたくなる。そういう時にアウトプットすればいいと思っている。 私はそれを「インプットが溢れた」と呼んでいる。
もう1つインプットを増やした方が良いと思っているのは大抵の問題は人類は既に解決しているからだ。無理にアウトプットしようと1時間掛けて悩むよりも10分掛けて解決法を学んだ方が手っ取り早い。 プログラミングを独学しようと思うと莫大な時間が必要になる。独学に取れる時間が有限ならば短時間で解決出来る方法を選ぶべきだ。 問題解決能力なんて手札が揃ってから考えればいい。碌な手札も持ってないのにそれで解決しようとするのは無理がある。まずは手札を揃えるべきだ。世の中のプログラマと同じ手札を揃えないとそもそも同じ土俵で戦えない。
ここで1つ言及しておきたいのが毎日ブログ問題だ。「毎日技術ブログを書き続けろ。つらくてもいいから続けろ。続けた先に見えるものがある。」なんて言われることがある。あれはあまり良くないと思っている。 本当に初学者の時は毎日くらいの頻度でインプットが溢れるかもしれない。しかしその期間は長くは続かない。ちゃんと学んで成長していればインプットのバッファも大きくなる。 すぐに1日の勉強量ではインプットが溢れなくなる。そうなった時にも毎日ブログを書く意味はない。ブログを書くのにも時間が取られるのを忘れてはいけない。ブログを書く達人になりたいのでもなければ時間を使う意味はさしてない。 それよりは平日に進めて土日で仕上げて日曜の夜にそれについてブログを書く、とかの計画的なサイクルを回した方が良い。あるいはもっと長いスパンで。
1つ、インプットばかりしていると懸念が生じる。それは実用上の問題ではなく自己満足とか成果とかの問題、精神上の問題だ。 何かを学ぶ以上成果が欲しくなる。特に実学なら実用的な成果が欲しくなる。学んではいるものの目に見える成果がないと不安になる。 例えば職のためにプログラミングを始めた人なら切実に成果が欲しいだろう。これについては私は今のところ有効な解決策を見付けていない。 目標のある人はどれだけ目標に近付いているかで測れるかもしれないが私には目標がなかった。 同じくらいの習熟度の人と比べるのが良さそうだが、独学同士相手を見付けるのは中々難しい。同学年の情報科学科の人と比べると正規軍に徒手空拳で挑むようなもので話にならない(そういう経験がある)。 時折たまに溢れ出たアウトプットを眺めてちゃんと前に進んでいるんだと自分に言い聞かせてきた。 不思議と、就職に関してもそれでどうにかなった。目に見える形にはなっていなくても面接などで話すと分かるのだろう。結局、不安は不安のまま抱え続けるしかなかった。独学とはそういうものなのかもしれない。
私も大学生でプログラミングに目覚めて今丁度丸4年。去年の4月からプログラマとして働いているが未だインプットの足りなさをひしひしと感じる。働きながら勉強を続けるが中々時間がとれない。 時間のある学生の時にもうちょっと効率的にインプットを増やしていたらと思う。そういう後悔をする人を一人でも減らそうと思ってこういう記事を書いてみた。</description>
    </item>
    
    <item>
      <title>Isabelleに入門した</title>
      <link>//KeenS.github.io/blog/2016/01/12/isabelleninyuumonshita/</link>
      <pubDate>Tue, 12 Jan 2016 22:23:45 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/12/isabelleninyuumonshita/</guid>
      <description>&lt;p&gt;κeenです。連休中にIsabelleを少しばかり触ったのでその時のまとめを。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#のpthreadバインディング作った</title>
      <link>//KeenS.github.io/blog/2016/01/11/sml_nopthreadbaindingutsukutta/</link>
      <pubDate>Mon, 11 Jan 2016 00:57:20 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/11/sml_nopthreadbaindingutsukutta/</guid>
      <description>&lt;p&gt;κeenです。またしても深夜になってしまいましたがSML#のpthreadバインディングを作ったのでその報告を。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustといえどリソースの解放は注意</title>
      <link>//KeenS.github.io/blog/2016/01/08/rusttoiedoriso_sunokaihouhachuui/</link>
      <pubDate>Fri, 08 Jan 2016 00:50:31 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/08/rusttoiedoriso_sunokaihouhachuui/</guid>
      <description>&lt;p&gt;κeenです。深夜にですが小ネタを。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2016年注目していきたい技術</title>
      <link>//KeenS.github.io/blog/2016/01/01/2016nenchuumokushiteikitaigijutsu/</link>
      <pubDate>Fri, 01 Jan 2016 20:09:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/01/2016nenchuumokushiteikitaigijutsu/</guid>
      <description>&lt;p&gt;2016年個人的に注目したいというか力を入れたいというか成行を見守りたいというか、そんな技術達を書き連ねていく。ものによっては「何を今更」と思うかもしれないがあくまで私にとって、だ。&lt;/p&gt;

&lt;p&gt;順不同。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ATS2の観が整理出来た</title>
      <link>//KeenS.github.io/blog/2016/01/01/ats2nokangaseiridekita/</link>
      <pubDate>Fri, 01 Jan 2016 18:52:56 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/01/ats2nokangaseiridekita/</guid>
      <description>&lt;p&gt;κeenです。ATS2には3つの世界があります。動的な世界、静的な世界、証明の世界。
&lt;a href=&#34;//KeenS.github.io/blog/2015/12/29/ats2noizongatawotsukatteavlki/&#34;&gt;前回&lt;/a&gt;の記事では静的な世界を色々扱ってみました。
今回は証明の世界である観について少し。

2016-1-2: いくつか誤植を直しました(用語で言えば、 注観→駐観 が正解でした)。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ATS2の依存型を使ってAVL木</title>
      <link>//KeenS.github.io/blog/2015/12/29/ats2noizongatawotsukatteavlki/</link>
      <pubDate>Tue, 29 Dec 2015 23:40:45 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/29/ats2noizongatawotsukatteavlki/</guid>
      <description>&lt;p&gt;κeenです。少しばかりATS2を触ってみたので成果報告でも。&lt;/p&gt;

&lt;p&gt;AVL木は左右のノードの高さが高々1しか違わない平衡二分木です。OCamlやSMLでナイーブに実装すると本当に1しか違わないことを保証するのは難しく、精々テストなどで部分的に検査するだけです。&lt;/p&gt;

&lt;p&gt;ところがSMLに似た文法を持つATS2には依存型があり、左右のノードの高さが高々1しか違わないことを型で保証出来ます。
つまり、左右のノードの高さが2以上違う木を作ろうとしてもコンパイルエラーになるのでコンパイルが通れば高さについてはバグがないこと保証されます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#とCプリプロセッサの連携</title>
      <link>//KeenS.github.io/blog/2015/12/26/sml_tocpuripurosessanorenkei/</link>
      <pubDate>Sat, 26 Dec 2015 20:09:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/26/sml_tocpuripurosessanorenkei/</guid>
      <description>&lt;p&gt;κeenです。Advent Calendarのためにネタやアイディアを用意したものの時間/場所的都合でAdvent Calendarとして出せなかったボツネタでも供養しようかと。
Advent Calendarが終わってしまったので投げやり気味ですね。
第3段はSML#とCプリプロセッサで連携する話。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#のオレオレREPLを作る話 初級</title>
      <link>//KeenS.github.io/blog/2015/12/26/sml_nooreorereplwotsukuruhanashi_shokyuu/</link>
      <pubDate>Sat, 26 Dec 2015 19:48:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/26/sml_nooreorereplwotsukuruhanashi_shokyuu/</guid>
      <description>&lt;p&gt;κeenです。Advent Calendarのためにネタやアイディアを用意したものの時間/場所的都合でAdvent Calendarとして出せなかったボツネタでも供養しようかと。
Advent Calendarが終わってしまったので投げやり気味ですね。
第2段はSML#のオレオレREPLを作る話の初級。&lt;/p&gt;

&lt;p&gt;SML#にはFFIがあり、任意のオブジェクトファイル/ライブラリをリンクしてC関数を呼び出すことが出来ますが、REPLで試そうとしてもREPLにリンクされていないので呼び出せません。
そこで呼び出したいオブジェクトファイルをリンクしたREPLを作れば捗るよね、という発想です。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのロガーを作る</title>
      <link>//KeenS.github.io/blog/2015/12/26/rustnoroga_wotsukuru/</link>
      <pubDate>Sat, 26 Dec 2015 19:18:31 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/26/rustnoroga_wotsukuru/</guid>
      <description>&lt;p&gt;κeenです。Advent Calendarのためにネタやアイディアを用意したものの時間/場所的都合でAdvent Calendarとして出せなかったボツネタでも供養しようかと。
Advent Calendarが終わってしまったので投げやり気味ですね。
第1段はRustのロガーを作る話。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2015/rust-lang&#34;&gt;Rust Advent Calendar&lt;/a&gt;の&lt;a href=&#34;//KeenS.github.io/blog/2015/11/14/rustdechiisanatsu_ruwotsukuttemiru/&#34;&gt;初日&lt;/a&gt;でロガーはfacadと実装に分かれてると書きましたが、実装を作る話ですね。

&lt;a href=&#34;https://doc.rust-lang.org/log/log/index.html&#34;&gt;ドキュメント&lt;/a&gt;を見てもらえば分かる通り、logは&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Apache Drillの不自然な挙動</title>
      <link>//KeenS.github.io/blog/2015/12/20/apache_drillnofushizennakyodou/</link>
      <pubDate>Sun, 20 Dec 2015 23:04:37 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/20/apache_drillnofushizennakyodou/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/drill&#34;&gt;Apache Drill Advent Calendar 2015&lt;/a&gt;21日目のエントリです&lt;/p&gt;

&lt;p&gt;最初は備忘録がてら普段使うMySQL、BigQuery、SQLite、Apache DrillのSQLシンタックスの違いでも書こうかと思ったのですが調査が思ったより大変だったのでやめました。ANSI SQLも色々変わってるということは理解出来ました。&lt;/p&gt;

&lt;p&gt;ということでApache Drillを使ってて「ん？」と思った挙動をいくつか出してみようかと。1.4時点での情報です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近作ってるLispの話</title>
      <link>//KeenS.github.io/blog/2015/12/20/saikintsukutterulispnohanashi/</link>
      <pubDate>Sun, 20 Dec 2015 22:40:16 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/20/saikintsukutterulispnohanashi/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/lisp&#34;&gt;Lisp Advent Calendar 2015&lt;/a&gt;21日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。最近あまりLispを書いてなくてネタがないので最近作ってるLispの話でもしようかと。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>travisとappveyorでクロスプラットフォームなCIする話</title>
      <link>//KeenS.github.io/blog/2015/12/20/travistoappveyerdekurosupurattofo_munacisuruhanashi/</link>
      <pubDate>Sun, 20 Dec 2015 22:19:21 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/20/travistoappveyerdekurosupurattofo_munacisuruhanashi/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/rust-lang&#34;&gt;Rust Advent Calendar 2015&lt;/a&gt;20日目の記事です。
日付を覚え間違っていて、締切ギリギリに書いてます。&lt;/p&gt;

&lt;p&gt;κeenです。ものすごい小ネタですがRustでCIする話でも。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClojureでReactive Messaging Pattern</title>
      <link>//KeenS.github.io/blog/2015/12/19/clojuredereactive_messaging_pattern/</link>
      <pubDate>Sat, 19 Dec 2015 22:30:19 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/19/clojuredereactive_messaging_pattern/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/clojure&#34;&gt;Clojure Advent Calendar 2015&lt;/a&gt;の16日目の記事です（大遅刻）&lt;/p&gt;

&lt;p&gt;κeenです。ここのところ体調優れず、また、特に面白いネタもなくClojure Advent Calendarに遅刻したことをお詫び申し上げます。&lt;/p&gt;

&lt;p&gt;さて、今日はReactive Messaging PatternをClojureのcore.asyncでやってみたいと思います。Reactive Messaging Pattersは、Java/Scala向けActorシステムの&lt;a href=&#34;http://akka.io/&#34;&gt;Akka&lt;/a&gt;の作者が著した本、&lt;a href=&#34;http://www.amazon.co.jp/Reactive-Messaging-Patterns-Actor-Model-ebook/dp/B011S8YC5G&#34;&gt;Amazon.co.jp: Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka&lt;/a&gt;で書かれているデザインパターンです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DSLとTagless Final</title>
      <link>//KeenS.github.io/slide/dsltotagless_final/</link>
      <pubDate>Sun, 13 Dec 2015 22:42:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/dsltotagless_final/</guid>
      <description># DSLとTagless Final ---------------------- サイバーエージェント アドテクスタジオ Scala Meet Up 2015-12-18 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + AMoAdの新卒エンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます - Scalaは初心者 ※ [Scala初心者の新卒が頑張ってLispを作ってみた](http://adtech.cyberagent.io/scalablog/2015/12/05/scala-lisp/) === # 注意 ------ * Scala初心者なのでScalaではなくScalaっぽい疑似コードで説明します + ~~コード例動かす時間が無かっただけ~~ * Scala初心者なのでScalaのコードは少なめに説明します === # DSLを作る ----------- 以下のようなHTTPなユーザをエミュレートするDSLを考える ``` scala val scenario = and( get(&#34;/&#34;), get(&#34;/users&#34;).andThen(res = post(&#34;/follow&#34;, first(users.getJsonData)))) val Right(_) = runScenario(scenario, &#34;user&#34;) ``` === # DSLを作る ----------- 普通は以下のようなAST作ってをラップする ``` scala trait ScenarioDSL sealed case class Get(url: String) extends ScenarioDSL sealed case class Post(url: String, data: JSON) extends ScenarioDSL sealed case class And(first, ScenarioDSL, second ScenarioDSL) extends ScenarioDSL sealed case class AndThen(first: ScenarioDSL, callBack: (Response) = ScenarioDSL) extends ScenarioDSL def get(url: String): ScenarioDSL= Get(url) .</description>
    </item>
    
    <item>
      <title>Rustでの日本語の扱い</title>
      <link>//KeenS.github.io/blog/2015/12/13/rustdenonihongonoatsukai/</link>
      <pubDate>Sun, 13 Dec 2015 17:14:18 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/13/rustdenonihongonoatsukai/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/rust-lang&#34;&gt;Rust Advent Calendar&lt;/a&gt; 14日目の記事です&lt;br /&gt;
前:gifnksmさんの &lt;a href=&#34;http://gifnksm.hatenablog.jp/entry/2015/12/13/204655&#34;&gt;kcovを使ってRustプログラムのカバレッジを測定する - gifnksmの雑多なメモ&lt;/a&gt;&lt;br /&gt;
後:nacika_insさんのtimeこわい&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#に学ぶコンパイラ言語におけるREPLの実装方法</title>
      <link>//KeenS.github.io/blog/2015/12/12/sml_nimanabukonpairagengoniokerureplnojissouhouhou/</link>
      <pubDate>Sat, 12 Dec 2015 19:42:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/12/sml_nimanabukonpairagengoniokerureplnojissouhouhou/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/lang_dev&#34;&gt;言語実装 Advent Calendar 2015&lt;/a&gt;16日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。かねてより気になっていたREPLの実装方法について、SML#のソースコードを読んだのでその話でもします。

さて、ソースコードを読みながらやっていきましょう。SML# 2.0.0のソースコードです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#でJITコンパイラを作る軽い話</title>
      <link>//KeenS.github.io/blog/2015/12/12/sml_dejitwotsukurukaruihanashi/</link>
      <pubDate>Sat, 12 Dec 2015 17:26:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/12/sml_dejitwotsukurukaruihanashi/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://www.adventar.org/calendars/848&#34;&gt;ML Advent Calendar 2015&lt;/a&gt;及び&lt;a href=&#34;http://qiita.com/advent-calendar/2015/lang_dev&#34;&gt;言語実装 Advent Calendar 2015&lt;/a&gt;15日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。先日流れてきた&lt;a href=&#34;http://www.jonathanturner.org/2015/12/building-a-simple-jit-in-rust.html&#34;&gt;RustでJITコンパイラを作る話&lt;/a&gt;が面白かったのでSML#でもやってみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>リージョンについて</title>
      <link>//KeenS.github.io/blog/2015/12/09/ri_jonnitsuite/</link>
      <pubDate>Wed, 09 Dec 2015 22:16:50 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/09/ri_jonnitsuite/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/lang_dev&#34;&gt;言語実装Advent Calendar 2015&lt;/a&gt; 10日目の記事です&lt;/p&gt;

&lt;p&gt;κeenです。今日はある程度gcに頼らずメモリを管理する手法、リージョンについて話そうと思います。
リージョン推論とそのアルゴリズムまで話せればよかったのですがサーベイが間に合わず…
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#でDBに接続</title>
      <link>//KeenS.github.io/blog/2015/12/05/sml_dedbnisetsuzoku/</link>
      <pubDate>Sat, 05 Dec 2015 22:04:25 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/05/sml_dedbnisetsuzoku/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://www.adventar.org/calendars/848&#34;&gt;ML Advent Calendar&lt;/a&gt;6日目の記事です。&lt;br /&gt;
次はdico_leque先生で、「ML中心にしつつ何か」です。&lt;/p&gt;

&lt;p&gt;κeenです。SMl#はDB接続及びSQLを言語レベルでサポートしていることが大きな特徴ですが詳細な方法についてはあまり情報がなく、
実際に利用するのは難しい状況にあります。そこで私がなんとかソースコードを読んで得られた知識を少し共有したいと思います。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cargoの使い方</title>
      <link>//KeenS.github.io/blog/2015/11/29/cargonotsukaikata/</link>
      <pubDate>Sun, 29 Nov 2015 23:25:54 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/11/29/cargonotsukaikata/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/rust-lang&#34;&gt;Rust Advent Calendar 2015&lt;/a&gt; 3日目の記事です。&lt;br /&gt;
前 &lt;a href=&#34;//KeenS.github.io/blog/2015/11/29/rustdechiisanatsu_ruwotsukuttemiru_kouhen_/&#34;&gt;Rustで小さなツールを作ってみる(後編)&lt;/a&gt;&lt;br /&gt;
次  szkttyさん インデックス構文によるアクセスを実装する&lt;/p&gt;

&lt;p&gt;κeenです。Rustを使うにはCargoを使う必要がありますが、&lt;code&gt;cargo help&lt;/code&gt;を見てもあまり情報が載っていないので少しばかり書きましょう。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustで小さなツールを作ってみる(後編)</title>
      <link>//KeenS.github.io/blog/2015/11/29/rustdechiisanatsu_ruwotsukuttemiru_kouhen_/</link>
      <pubDate>Sun, 29 Nov 2015 13:54:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/11/29/rustdechiisanatsu_ruwotsukuttemiru_kouhen_/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/rust-lang&#34;&gt;Rust Advent Calendar 2015&lt;/a&gt; 2日目の記事です。&lt;br /&gt;
前 &lt;a href=&#34;//KeenS.github.io/blog/2015/11/14/rustdechiisanatsu_ruwotsukuttemiru/&#34;&gt;Rustで小さなツールを作ってみる(前編)&lt;/a&gt;&lt;br /&gt;
次 &lt;a href=&#34;//KeenS.github.io/blog/2015/11/29/cargonotsukaikata/&#34;&gt;Cargoの使い方&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;κeenです。昨日の記事で作りかけだったIRCの生ログのDBへのインポートの続きです。今日はDBへのインポートをやります。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustで小さなツールを作ってみる(前編)</title>
      <link>//KeenS.github.io/blog/2015/11/14/rustdechiisanatsu_ruwotsukuttemiru/</link>
      <pubDate>Sat, 14 Nov 2015 23:57:43 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/11/14/rustdechiisanatsu_ruwotsukuttemiru/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/rust-lang&#34;&gt;Rust Advent Calendar 2015&lt;/a&gt; 1日目の記事です。&lt;br /&gt;
次 &lt;a href=&#34;//KeenS.github.io/blog/2015/11/29/rustdechiisanatsu_ruwotsukuttemiru_kouhen_/&#34;&gt;Rustで小さなツールを作ってみる(後編)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;κeenです。Rust Advent Calendar初日ということで軽い話から。
小さなツールって何だよって感じですが手元にIRCの生ログが大量にあるのでそれをDBにインポートしてみましょう。
あまりRustに向いた仕事じゃなさそうですが手始めとして。&lt;/p&gt;

&lt;p&gt;前編でログのパースを、後編でDBへのインポートをやります。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一時ファイルの作り方</title>
      <link>//KeenS.github.io/blog/2015/11/08/ichijifairunotsukurikata/</link>
      <pubDate>Sun, 08 Nov 2015 21:40:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/11/08/ichijifairunotsukurikata/</guid>
      <description>&lt;p&gt;Rustに&lt;a href=&#34;https://github.com/Stebalien/tempfile&#34;&gt;tempfile&lt;/a&gt;というライブラリがある。その名の通りテンポラリファイルを作るライブラリだ。
必要に迫られてそのライブラリにPRを送ろうとして実装を読んだのだが普段あまり意識しなかったテンポラリファイルの作り方を知ったのでちょっと解説してみる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClojureでDSPを作った話</title>
      <link>//KeenS.github.io/slide/clojurededspwotsukuttahanashi/</link>
      <pubDate>Tue, 27 Oct 2015 21:04:20 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/clojurededspwotsukuttahanashi/</guid>
      <description># ClojureでDSPを作った話 ---------------------- Lisp Meet Up #3 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # DSPとは -------- * Demand Side Platform * 広告主から広告を集めて広告の表示権を競り落し、適切な広告を出す 0. 広告主を集めて 1. 競りの通知を受け取って 2. 一番コスパが良さそうな広告を選んで 3. 入札して 4. 落札通知を受け取る 5. 落札したら広告を出す === # ひとりDSP ---------- * AdTech Studioの新卒研修 * 2ヶ月間、業務時間の20%を使ってDSPを作る + 実質8営業日 * 業務ロジックを理解することが目的 * 最後に新卒の作ったDSP同士で競争、利益が得点になる * 他には最終発表での得点も * **研修なので好きにやっていい** + Clojureで書くことに * サーバーの他は広告主データと学習用データが与えられる ===   日本におけるアドテク市場とサイバーエージェントのアドテク事業について  from CyberAgent, Inc.</description>
    </item>
    
    <item>
      <title>REST APIのテストにはwgetが便利かもしれない</title>
      <link>//KeenS.github.io/blog/2015/10/20/apinotesutonihawgetgabenrikamoshirenai/</link>
      <pubDate>Tue, 20 Oct 2015 00:30:42 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/10/20/apinotesutonihawgetgabenrikamoshirenai/</guid>
      <description>寝れずに悶々としていたので書いてみる。REST APIを叩くときはデフォルトで結果を標準出力に吐くcURLがよく使われるがテストにはwgetが向いてるかもしれない。 理由は簡単。exit statusだ。シェルのテストをする時はshunit2を使うことになるかと思うが、exit statusでテストをしたくなる。 cURLはHTTPサーバーがエラーステータスを返してもexit status 0で終了するのに対してwgetは所定の値を返す。
EXIT STATUS Wget may return one of several error codes if it encounters problems. 0 No problems occurred. 1 Generic error code. 2 Parse error---for instance, when parsing command-line options, the .wgetrc or .netrc... 3 File I/O error. 4 Network failure. 5 SSL verification failure. 6 Username/password authentication failure. 7 Protocol errors. 8 Server issued an error response.  少し試してみよう。
$ curl -sL google.</description>
    </item>
    
    <item>
      <title>Internal of b11d</title>
      <link>//KeenS.github.io/slide/internal_of_b11d/</link>
      <pubDate>Mon, 19 Oct 2015 21:33:00 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/internal_of_b11d/</guid>
      <description># Internal of b11d ---------------------- サイバーエージェント新卒研修 ひとりDSP最終発表会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + AMoAdのサーバーサイド（？）エンジニア + 趣味でLisp, ML, Shell Scriptあたりを書きます + 仕事でScalaとShell Scriptあたりを書きます === # 今回作ったもの ---------------- * b11d (ぶらっくんどごーるど) * Clojure (compojure + middleware)製 + + NginX + MySQL + Supervisord * 出来る限りシンプルになるように作った + 310行 * デプロイその他はシェルスクリプト * 監視はmackerel === # シンプルということ ------------------- * アプリケーションは状態を持たない * IO以外副作用を持たない * つまり、キャッシュを持たない + キャッシュはパフォーマンス上の意味しかない + 早過ぎる最適化は諸悪の根源 * スケールアウトが容易 * compojureのミドルウェアを上手く使った === # シンプルということ2 -------------------- * データベースはだいたい第4正規形（ﾀﾌﾞﾝ） + 全てのカラムは`NOT NULL` + 広告主の所だけ拡張性を持たせるために第1正規形に落とした + 1広告主に対して複数の広告が持てるようになる * 外部キー制約も全部付ける * データが綺麗なのでアプリケーション側でのやることが少ない * 分析する時にも活きる筈 === # デプロイ --------- * 全てシェルスクリプトでオペレーション出来る * 手作業を無くしてミスを無くす + 「あれ？設定書き換えたのに反映されてない」 → 「再起動忘れてた」とかを防ぐ * ☆秘伝☆のシェルテクニック満載！ * アプリケーションが1jarに収まるのでデプロイが楽。 === # 監視 ------ * mackerelで色々モニタリング * Linux, NginX, MySQL, JVM, レスポンスステータス * ほとんどMackerelに乗っかることで本質的でないことに労力を割かない + 本質 = 業務ロジックを理解すること * アプリケーションの死活監視にはsupervisord + 本当はsystemdでやりたかったけどUbuntuのバージョンが古かった === # 落穂拾い ---------- * DBへの書き込みは非同期。Clojureなら簡単に書ける + `(go .</description>
    </item>
    
    <item>
      <title>ddでPCの引っ越しをしたら起動しなかった</title>
      <link>//KeenS.github.io/blog/2015/10/05/dd_depcnohikkoshiwoshitarakidoushinakatta/</link>
      <pubDate>Mon, 05 Oct 2015 21:30:06 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/10/05/dd_depcnohikkoshiwoshitarakidoushinakatta/</guid>
      <description>&lt;p&gt;κeenです。この間長年使ってたDynabookからThink Padに乗り換えました。引っ越しの時に困ったのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>isucon にCommon Lispチームで出た</title>
      <link>//KeenS.github.io/blog/2015/09/27/isucon_nicommon_lispchi_mudedeta/</link>
      <pubDate>Sun, 27 Sep 2015 23:58:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/09/27/isucon_nicommon_lispchi_mudedeta/</guid>
      <description>&lt;p&gt;κeenです。 &lt;a href=&#34;isucon.net&#34;&gt;isucon&lt;/a&gt; に&lt;a href=&#34;https://twitter.com/i/notifications?lang=ja&#34;&gt;@nitro_idiot&lt;/a&gt;(深町さん)と&lt;a href=&#34;https://twitter.com/Rudolph_Miller?lang=ja&#34;&gt;@Rudolph_Miller&lt;/a&gt;のCommon Lispチームで出てきました。チーム名clfreaks。勿論Common Lispで再実装しました。

因みに深町さんは今回使ったWebサーバーのwooを含めCommon Lispのライブラリを多数公開している&lt;a href=&#34;http://github-awards.com/users/search?login=fukamachi&#34;&gt;世界一のCommon Lisper&lt;/a&gt;、ルドルフさんは元Common Lispの会社のCTO。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust初心者へのガイド</title>
      <link>//KeenS.github.io/blog/2015/09/23/rustwokakutokinochiken/</link>
      <pubDate>Wed, 23 Sep 2015 22:43:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/09/23/rustwokakutokinochiken/</guid>
      <description>&lt;p&gt;シルバーウィークの進捗が芳しくなかったので雑な記事書いてお茶を濁しとく。rustをそれなりに（といっても1000行くらい）書いて溜まった知見をとりあえず出す。rust1.3時点。&lt;/p&gt;

&lt;p&gt;最初の方で熱く語ってるが多くの人にとって欲しい情報は下の方にあると思う。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>xhyveでFreeBSD guestを動かす</title>
      <link>//KeenS.github.io/blog/2015/09/16/xhyvedefreebsd_guestwougokasu/</link>
      <pubDate>Wed, 16 Sep 2015 21:55:25 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/09/16/xhyvedefreebsd_guestwougokasu/</guid>
      <description>&lt;p&gt;久しぶりですね。κeenです。最近はMacでもまともな仮想環境が整ってきたのでFreeBSDでも動かすかーといって試したやつを共有します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ISUCONこれまでの流れ</title>
      <link>//KeenS.github.io/slide/isuconkoremadenonagare/</link>
      <pubDate>Fri, 04 Sep 2015 08:47:05 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/isuconkoremadenonagare/</guid>
      <description># ISUCONこれまでの流れ ---------------------- 雑に書き殴った === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + ISUCON3、 4の予選、本戦に出場（学生枠） === # ISUCON1 ブログ --------------- * node perl ruby * kazeburoの罠 * ブログのサイドバーが重いやつ * 割と親切なルール === # ISUCON2 チケット予約サイト --------------------------- * perl ruby node php java python * 席ランダムにしてなくてもベンチマーカー通っちゃう * 変更が1秒以内に反映されていること → 0.9秒毎に裏でバッチを回す * JOINが3連になってる所があってみんなそこに引っ掛かったがボトルネックはそこじゃない * ちょっとルールが雑になった === # ISUCON3予選 スニペット投稿サイト -------------------------------- * go node perl python ruby php * AWS1台 * Markdown変換がperl製の重いやつ * AWSだとプロセスのフォークも重い * titleの抜き出しも重い * チェッカーが甘くてVarnishを導入しただけで点数爆上がり * SQLの典型問題とかも * workloadに気付かなかった人多数 * 学生枠が出来た * ベンチマーカが通れば何でもアリな風潮 === # ISUCON3本戦 画像SNS -------------------- * go node perl python ruby * オンプレ5台 * 画像の変換が重い * 実は帯域もつらい * 画像のチェッカがあってチェッカが通れば画質を落としても良かった * 組長の罠 * ベンチマーカーに通れば何でもアリ * 複数サーバーでのファイルの共有にWebDAVが盲点 * 点数計算の罠に嵌まる人多数 + 基本点より追加点に目が眩む人がそれなりに * 推測するな計測せよ * nodeで初期パスワードが間違っているトラブル === # ISUCON4予選 銀行 -------------------------------------- * go node perl php python ruby * AWS1台 * ワークロードを桁外れに指定するとベンチマーカーが走り続けるバグ * ベンチマーカーにアクセスして行動パターンを解析した人が出る（その情報は使ってない。スポーツマンシップ。） * テンプレートエンジンをやめて静的ファイル * Go勢のon memory戦略が跋扈 * 「メモリに載せれば勝てるぜ」風潮 * 静的ファイルを返さない反則ギリギリのチューニング * ベンチマーカーのチューニング * Varnish潰し * アプリをC++で書き換えて予選突破したチームも出る === # ISUCON4本戦 動画広告 ---------------- * go perl php python ruby * オンプレ3台 * 最初からRedisに動画が載ってる * それ外したらスコア頭打ち(帯域がつまる) * ベンチマーク同士が干渉しあう * 実はCache-Controlをしたらスコアが爆上がり(上位2チームだけ気付いた) * 3位のチームは外向きと内向きの2枚のNICを使って団子状のスコアから頭1つだけ出た === #ISUCON5予選 ?</description>
    </item>
    
    <item>
      <title>SMLでPNGデコーダを作ろうとして分かったこと</title>
      <link>//KeenS.github.io/slide/smldepngdeko_dawotsukuroutoshitewakattakoto/</link>
      <pubDate>Fri, 04 Sep 2015 06:45:19 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/smldepngdeko_dawotsukuroutoshitewakattakoto/</guid>
      <description># SMLでPNGデコーダを作ろうとして分かったこと ------------------------------------------ サイバーエージェント アドテクスタジオ エンジニア月初会 === # About Me ---------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + AMoAdの新卒 + Lisp, ML, Shell Scriptあたりを書きます === うーむ。画像フォーマットの扱い一回くらい書いてみないとなーと思ってたけどやっぱり既存なんだよなー。Common LispかSMLあたりならフロンティアになれそう。
&amp;mdash; κeen (@blackenedgold) 2015, 9月 3 === @blackenedgold 仕様を理解するためにデコーダから実装するのがオススメです
&amp;mdash; ELD-R-ESH-2 (@eldesh) 2015, 9月 3 === @blackenedgold そんな詳しいわけではないんですが、jpegかpngがおすすめです。webpは動画コーデック由来で難しいと思います。tiffは画像コンテナみたいな立ち位置なので画像フォーマット感がないかなと。
&amp;mdash; ELD-R-ESH-2 (@eldesh) 2015, 9月 3 === 明日の朝までに SMLでpngデコーダを実装しよう === # Standard ML ------------- * ML系の函数型言語 * 文法はOCamlよりF#に似てる（というかF#が似せてきた） * 結構書き易い * 仕様は SML&#39;90とSML&#39;97がある * 仕様で言語のformal semanticsが定められてたりする * 要は研究向き + **ライブラリほぼなし** + **コミュニティほぼなし** === ＞　無理ゲー　＜ === # 一応フォーマットを調べる ------------------------ ``` +-----------------+ | Chunk | 画像はChunkの集合。 ++---------------++ Chunk自体は簡単なフォーマット || length | name || |+---------------+| || data || || .</description>
    </item>
    
    <item>
      <title>Method Drawでお手軽LGTM生成</title>
      <link>//KeenS.github.io/slide/method_drawdeotegarulgtmseisei/</link>
      <pubDate>Fri, 14 Aug 2015 00:55:37 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/method_drawdeotegarulgtmseisei/</guid>
      <description># Method Drawでお手軽LGTM生成 ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Method Draw ------------- * シンプルなSVG エディタ * オープンソース * [editor.method.ac](http://editor.method.ac/) === # デモ === # 以上 ------ Have a happy hacking life   </description>
    </item>
    
    <item>
      <title>構文解析にまつわる小話たち</title>
      <link>//KeenS.github.io/slide/koubunkaisekiarekore/</link>
      <pubDate>Sat, 08 Aug 2015 04:16:50 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/koubunkaisekiarekore/</guid>
      <description># 構文解析にまつわる小話たち ---------------------- [#peg_study](https://twitter.com/search?q=%23peg_study&amp;src=typd&amp;vertical=default&amp;f=tweets) === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバエージェントの新卒エンジニア + Lisp, ML, Shell Scriptあたりを書きます === # ウォームアップ === # 構文解析はバッドノウハウ ------------------------- * プログラム言語を使っているなら既にパーサはある + 文法も定義されてる * 目の前のパーサを使え + パーサAPIがある言語もある(Lispとか) * そうでなくても内部DSLを考えろ + 内部DSLで解決出来ないときだけ構文解析 === # 本質はAST ----------- * 結局はASTになればどんな文法でも同じ * 文法はただの外皮、欲しいのはAST * シンタックスシュガーは飾り + DRY出来るなら別 * S式を使え + ASTをそのまま書き下せる === # AST First ----------- * 最初にASTを考える。そして文法を考える * 何が欲しいのかイメージし易くなる * 構文解析はAST生成の自動化。普段してないことを自動化するのは愚か。 * 早めに間違いに気付ける + `+`は二項演算子。じゃあ `&amp;&amp;` は？ `=` は？ Note: Lispだと+は関数、andはマクロ、setqはスペシャルフォーム === # 構文解析の流れ === # 構文解析の流れ --------------- 1.</description>
    </item>
    
    <item>
      <title>ファイル削除コマンド色々</title>
      <link>//KeenS.github.io/blog/2015/07/05/fairusakujokomandoiroiro/</link>
      <pubDate>Sun, 05 Jul 2015 14:18:37 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/07/05/fairusakujokomandoiroiro/</guid>
      <description>&lt;p&gt;ファイル生成/削除コマンドについて覚え書き。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>マクロについて整理してみる</title>
      <link>//KeenS.github.io/blog/2015/07/04/makuronitsuiteseirishitemiru/</link>
      <pubDate>Sat, 04 Jul 2015 15:34:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/07/04/makuronitsuiteseirishitemiru/</guid>
      <description>&lt;p&gt;何故Lisperがマクロについて語るのか。Lisperと議論してみても満足のいく答を得た人はそんなにいないと思う。
それはLisper自身便利とは思っていても何が便利なのかを意識してなくて他人に上手く説明出来ないからじゃないかと思った。
ちょっと思いついた範囲でまとめてみる。

最近ではマクロシステムを持つ言語は珍しくない。Rust, Scala, Template Haskell, Mirahなどなど。最初にCommon Lispのマクロと他の言語のマクロとの違いを少し考えてみたい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>あなたの知らないShebang</title>
      <link>//KeenS.github.io/blog/2015/06/26/anatanoshiranaishebang/</link>
      <pubDate>Fri, 26 Jun 2015 23:24:44 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/06/26/anatanoshiranaishebang/</guid>
      <description>&lt;p&gt;κeenです。最近は何故かBlack君って呼ばれます。Shebangの書き方にはいくつかあって、それを利用したふと面白い方法を思い付いたので共有を。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Clojureおじさん</title>
      <link>//KeenS.github.io/slide/clojureojisan/</link>
      <pubDate>Mon, 22 Jun 2015 22:53:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/clojureojisan/</guid>
      <description># Clojureおじさん ---------------------- サイバーエージント新卒 第5回 Fresh勉強会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Clojure --------- * 2007年から * JVMで動くLisp系言語 * 函数型 * 動的型付き * 値は基本immutable * 遅延シーケンス * STMがあり、並列処理に強い === # Hello World ------------- ```clojure (println &#34;Hello, World&#34;) ``` === # JVM ------ ## Javaのコードをシームレスに呼べる * `obj.method()` ではなく `(.method obj)` * `Class.staticField` ではなく `Class/staticField` * `obj.</description>
    </item>
    
    <item>
      <title>Common Lisp処理系拡張の探求 SBCLのマルチスレッドサポート</title>
      <link>//KeenS.github.io/slide/common_lispshorikeikakuchounotankyuu_sbclnomaruchisureddosapo_to/</link>
      <pubDate>Sat, 20 Jun 2015 18:30:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/common_lispshorikeikakuchounotankyuu_sbclnomaruchisureddosapo_to/</guid>
      <description>### Common Lisp 処理系拡張の探求 SBCLのマルチスレッドサポート ---------------------- Lisp Meet Up #29 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # CLのマルチスレッド ---------------------------- ## [bordeaux-threads](https://trac.common-lisp.net/bordeaux-threads/wiki/ApiDocumentation) * 色々な処理系のマルチスレッドサポートの抽象レイヤー * デファクトスタンダード + スレッド + ロック + コンディションヴァリアル === # SBLCのマルチスレッド === # SBLCのマルチスレッド ---------------------------- * スレッド + スレッド内エラー * アトミック操作+ CAS* 排他制御（ロック） * セマフォ * コンディションヴァリアル * バリア * キュー* メールボックス* ゲート* frlock=== # アトミック操作 === # アトミック操作 ---------------- 複雑な動作は同じデータに並行に動かすと壊れうる ``` [var = 1] [incf] | [decf] [1][1] [2]---[var = 2] | | | [var = 0]+---+ go | | V V ``` === # frlock -------- * Fast Read Lock * またの名をRead-Write Lock * Read Lockは多重に取れる。Write Lockは1つしか取れない。 * 基本操作は`frlock-read`と`frlock-write` * 普通のlockと違って複数のReadが速くなる === # まとめ -------- * SBCLのマルチスレッドサポートはbordeaux-threadsよりもリッチ * 処理系の独自サポート面白い * 処理系に依存してしまってもいいんじゃないだろうか   </description>
    </item>
    
    <item>
      <title>Shell Scriptを書くときのテクニック10選</title>
      <link>//KeenS.github.io/blog/2015/06/17/shell_scriptwokakutokinikiwotsuketaikoto/</link>
      <pubDate>Wed, 17 Jun 2015 22:12:25 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/06/17/shell_scriptwokakutokinikiwotsuketaikoto/</guid>
      <description>&lt;p&gt;κeenです。LLで書かれた動作のもっさりしてるコマンドラインツールよりシェルスクリプトが好きです。&lt;/p&gt;

&lt;p&gt;しかしシェルスクリプトを書く時にはハマり所も多いです。ということでハマりそうなところと対処法を共有しますね。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustでstructのmutableなfieldあれこれ</title>
      <link>//KeenS.github.io/blog/2015/06/14/rustdestructnomutablenafieldarekore/</link>
      <pubDate>Sun, 14 Jun 2015 17:53:11 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/06/14/rustdestructnomutablenafieldarekore/</guid>
      <description>&lt;p&gt;κeenです。人々にRustを薦めておきながら本人は昨日ようやく入門しました。その時に困ったことをメモ。タイトルがルー語になってますが気にしない。&lt;/p&gt;

&lt;p&gt;因みにこれはRust 1.0の情報です。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClojureでOpenCV 3.0と戯れる</title>
      <link>//KeenS.github.io/blog/2015/06/07/clojuredeopencv3_0totawamureru/</link>
      <pubDate>Sun, 07 Jun 2015 16:56:51 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/06/07/clojuredeopencv3_0totawamureru/</guid>
      <description>&lt;p&gt;κeenです。先日OpenCV 3.0がリリースされましたね。
ちょっと触ってみようと思ったのですが公式バインディングがC++、C、Java、Pythonと中々つらい言語ばっかりなので扱いやすいClojureから触った時のメモです。&lt;/p&gt;

&lt;p&gt;2系とはAPIが変わってる部分もあるらしく、苦労しました。
UbuntuでやってるのでMacの人は適当に読み替えて下さい。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ボトルネックのイイ話</title>
      <link>//KeenS.github.io/slide/botorunekkunoiihanashi/</link>
      <pubDate>Thu, 04 Jun 2015 00:03:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/botorunekkunoiihanashi/</guid>
      <description># ボトルネックのイイ話 ---------------------- サイバーエージェント15新卒 FRESH勉強会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # ボトルネック -------------  ボトルネック (bottleneck) とは、システム設計上の制約の概念。英語の「瓶の首」の意。一部（主に化学分野）においては律速（りっそく、「速さ」を「律する（制御する）」要素を示すために使われる）、また『隘路（あいろ）』と言う同意語も存在する。 === # Webアプリの主な登場人物 ------------------------ * リバースプロキシ * アプリケーションサーバ * データベース === ![relation of reverse proxy, app and DB](/images/webapp.png) === # レスポンスタイムとスループット ------------------------------ * レスポンスタイム + リクエストを投げてレスポンスが返ってくるまでの時間 + ユーザから見たメトリクス * スループット+ 一定時間内にシステムがどれだけのリクエストを捌けるか + 中の人から見たメトリクス === # スループット ------------- * スループットの最大 ≒ リソースの限界 + ネットワーク帯域 + ディスクIO + メモリ使用量 + CPU負荷 * リソースのどれか1つでも限界になったらそれ以上パフォーマンスは上がらない === # パフォマンスの目安 ------------------- * ネットワーク帯域: bpsで表わす。NICによるが 1Gbpsとか * CPU: パーセンテージで表わす。100xコア数が最大マシンに依る。 * メモリ: Bで表わす。ピンキリだが1GB ~ 128GBくらい？ * ディスクIO: Bpsで表わす。HDDなら 100Bpsとか。SSDなら10倍くらい。 テキトーに調べたので間違ってるかも === # 誰が何を --------- * リバースプロキシ: ネットワーク、メモリ、CPUなど * アプリケーションサーバl: CPU、メモリなど * データベース: CPU、ディスクIOなど === 「CPUは100%に行ってないのにアプリケーションが遅いんだよ」 === # 誤り ------ * ボトルネックはCPUとは限らない * 他のメトリクスも一緒に見るべき === # 推測するな。計測せよ --------------------- * 実際に測ってみないとどこがボトルネックか分からない * 何をしてどれくらいパフォーマンスが上がったのかも分からない + コストパフォーマンスも重要 === 「パフォーマンスが悪いからCPUをグレードアップしよう」 === # 誤り ------ * ボトルネックはCPUとは限らない * 例えばネットワーク帯域が詰まっているのにCPUを改善しても意味がない * 帯域が詰まってるならデータを減らす、NIC（マシン）を増やすなどをする === 「多分アプリケーションを高速化したよ」 === # 誤り ------ * 計測せずに高速化しても意味がない + テストの無いリファクタリングがただの破壊なのと同じ * 高速化した気になって実際はコードが汚なくなっただけの可能性もある === # ボトルネックは変わりうる ------------------------ * 一箇所をずっと改善してても意味がない * ある程度改善したら次のリソースの限界がきてるかもしれない === 「アプリケーションを10倍高速化したのにあんまり速くなってない」 === # 誤り ------ * 10倍くらい極端に高速化すると次のリソースがボトルネックになる * ディスクやネットワークの改善を考えるべき === # リソースの食い合い ------------------- * 1マシンで完結している場合、リソースの食い合いが発生しうる + リバースプロキシとアプリケーションがCPUを食い合うとか * この時、どのようにして解決するのが適切か？ === # 例題 ------ * アプリが80%くらいの負荷 * Rプロキシが20%くらいの負荷 === # 例題 ------ 1.</description>
    </item>
    
    <item>
      <title>Transducerについて</title>
      <link>//KeenS.github.io/slide/transducernitsuite/</link>
      <pubDate>Wed, 03 Jun 2015 22:29:50 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/transducernitsuite/</guid>
      <description># Transducerについて ---------------------- サイバーエージェント 朝の3分スピーチ === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Transducerって？ ------------------ * Clojure 1.7で入るフレームワーク * 関数のパイプライン化を簡単にする * 入力、出力には依存しない === # Reduce関数について ------------------- * `reduce: (&#39;a - &#39;b - &#39;a) &#39;a - &#39;b list` * `(&#39;a - &#39;b - &#39;a)` でシーケンスを集約する * `(reduce + 0 &#39;(1 2 3)) ;= 6` * 要はreduceは関数を使って集約する。 === # Transducerについて ------------------- * `transduce:((&#39;a - &#39;b - &#39;a) - (&#39;a - &#39;b - &#39;a)) (&#39;a - &#39;b - &#39;a) &#39;a - &#39;b list` * 集約関数を変換する関数もとる * `(transduce xf + 0 &#39;(1 2 3))` * transducerで集約する前に処理を挟める === # すごいところ ------------------------- ## コンポーサビリティ * `((&#39;a - &#39;b - &#39;a) - (&#39;a - &#39;b - &#39;a))` * 変換関数は入力と出力が同じ。 * つまり変換関数を合成出来る * ex) `(comp (filter odd?</description>
    </item>
    
    <item>
      <title>TCOと例外ハンドル</title>
      <link>//KeenS.github.io/blog/2015/05/31/tcotoreigaihandoru/</link>
      <pubDate>Sun, 31 May 2015 21:02:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/31/tcotoreigaihandoru/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;//KeenS.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou&#34;&gt;先日のエントリー&lt;/a&gt;の最後でループ内で例外ハンドルをすると極端に遅くなるということを書きましたが、それについて。

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ループ内でExceptionをhandleしてる所為だった。ループの外に出したら超速になってインタプリタの方が20倍遅くなった。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>第一級ラベルを持たない言語におけるDirect Threaded VMの実装</title>
      <link>//KeenS.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou/</link>
      <pubDate>Fri, 29 May 2015 20:26:41 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou/</guid>
      <description>&lt;p&gt;こんにちは。κeenです。このブログでちょくちょく出てくるDirect Threaded VMについて。
SMLのようにgotoがない言語だとDT VMの実装出来ないよなー、と思ってた所、ふとアイディアが浮かんだのでそれについて。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Onigmoを最大49%高速化した話</title>
      <link>//KeenS.github.io/blog/2015/05/26/onigmowosaidai49_kousokukashitahanashi/</link>
      <pubDate>Tue, 26 May 2015 01:14:54 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/26/onigmowosaidai49_kousokukashitahanashi/</guid>
      <description>κeenです。Rubyでも使われてる高速な正規表現エンジン、Onigmo(鬼雲)を高速化したのでその話を。 先日、正規表現技術入門を読んだというエントリの中で
 ところで本に載ってた鬼雲のコードはDT(編注: Direct Threaded)にしてなかったけど簡単のためなのかな？あるいは厳格にC89に準拠するため？picrinみたくプリプロセッサで分岐すれば使えるのに。
 と書いたところ、鬼雲の作者、K.Takataさんから
@k_takata 「picrinみたくプリプロセッサで分岐すれば使えるのに。」これも知らなかった。
&amp;mdash; K.Takata (@k_takata) 2015, 5月 11 
という反応を頂きました。そしてイシューにも乗ったので言い出しっぺとして実装してみました。こちらのプルリクです。
Direct Threaded VM自体の解説はRubyist Magazineに載っている笹田さんのものが詳しいようです Rubyist Magazine - YARV Maniacs 【第 3 回】 命令ディスパッチの高速化
実装は少し技巧的ですがwhile, switch, case, break, continueなどをマクロでラップしつつDT VMが有効ならそれらと互換性のあるDT用のコード（gotoやラベル）に展開します。元はpicrinで使われていたテクニックです。 このコードは @wasabizが書いたものなのでpicrinがどこを参考にして書かれたかは@wasabizに聞いて下さい。もしかしたらわさびずの発明かもしれませんね。
で、パフォーマンスの方ですが、最初、素直に制御命令を1つづつマクロで書き換えたのですが、こうなりました。
master
 パターン時間 Twain47 ms ^Twain47 ms Twain$47 ms Huck[a-zA-Z]+|Finn[a-zA-Z]+127 ms a[^x]{20}b1172 ms Tom|Sawyer|Huckleberry|Finn151 ms .{0,3}(Tom|Sawyer|Huckleberry|Finn)497 ms [a-zA-Z]+ing4032 ms ^[a-zA-Z]{0,4}ing[^a-zA-Z]96 ms [a-zA-Z]+ing$4175 ms ^[a-zA-Z ]{5,}$1770 ms ^.{16,20}$1757 ms ([a-f](.[d-m].){0,2}[h-n]){2}1849 ms ([A-Za-z]awyer|[A-Za-z]inn)[^a-zA-Z]656 ms &#34;</description>
    </item>
    
    <item>
      <title>幽霊型を知った</title>
      <link>//KeenS.github.io/blog/2015/05/24/yuureikatawoshitta/</link>
      <pubDate>Sun, 24 May 2015 22:38:47 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/24/yuureikatawoshitta/</guid>
      <description>&lt;p&gt;κeenです。かねてより気になっていた幽霊型(Phantom Type)について知ったのでアウトプット。
&lt;a href=&#34;http://www.cs.rit.edu/~mtf/research/phantom-subtyping/jfp06/jfp06.pdf&#34;&gt;このPDF&lt;/a&gt;がベースになって
ます。&lt;/p&gt;

&lt;p&gt;余談ですが英語がファントム・タイプと中々中二な名前なので和訳も幻影型とかそういう方向に走って欲かったな。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>21世紀のエンジニアのためのHTTP/2入門</title>
      <link>//KeenS.github.io/slide/21seikinoenjinianotamenohttp_2nyuumon/</link>
      <pubDate>Mon, 18 May 2015 00:24:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/21seikinoenjinianotamenohttp_2nyuumon/</guid>
      <description># 21世紀のエンジニアのためのHTTP/2入門 ---------------------- サイバーエージェントFresh勉強会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # HTTPについて ------------- * 1990年誕生の骨董仕様 * Human Readableなテキストベース * パフォーマンスはあまり考慮してない === # HTTP/1.1の限界 --------------- * フォーマットがゆるふわでパースしづらい * 何度も似たようなヘッダをる + 割とネットワーク負荷が高い * 基本1コネクションにつき1ファイルの送受信 + 短命なコネクションをいくつも張ることになる + コネクションが&#34;ウォームアップ&#34;する前に切れる * Head of Line Blocking + 遅いコンテンツをダウンロードしてると他のコンテンツがダウンロード出来なくなる === ``` GET / HTTP/1.1 Host: localhost:8080 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.</description>
    </item>
    
    <item>
      <title>実装から理解するクロージャ</title>
      <link>//KeenS.github.io/slide/jissoukararikaisurukuro_ja/</link>
      <pubDate>Sun, 17 May 2015 01:33:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/jissoukararikaisurukuro_ja/</guid>
      <description># 実装から理解するクロージャ ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # クロージャとは？ ----------------- * 日本語にすると（関数）閉包 * 関数が外側のローカル変数を補足する * 補足されたローカル変数は無限の生存期間を持つ + ローカル変数は本来スコープを抜けると生存期間が終わる + 言い換えるとグローバル変数みたいになる + でもあくまでスコープはローカル === # コード例 --------- ```js function genpower(n){ var x = 1; return function(){ x *= n; return x; }; } var p = genpower(2); ``` === # コード例 ---------- ```js p() // = 2 p() // = 4 p() // = 8 x * 2 // x is not defined ``` === # コード例 ---------- * `p`が`n`と`x`を補足しているので関数を抜けた後も`x`と`n`は使える。 + 関数の仮引数もローカル変数。 * でもローカル変数なので外からは見えない。 === ``` +-----------------------+ | function genpower(n){ | | var x = 1; | | .</description>
    </item>
    
    <item>
      <title>正規表現技術入門を読んだ</title>
      <link>//KeenS.github.io/blog/2015/05/10/seikihyougengijutsunyuumonwoyonda/</link>
      <pubDate>Sun, 10 May 2015 20:32:45 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/10/seikihyougengijutsunyuumonwoyonda/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;http://gihyo.jp/book/2015/978-4-7741-7270-5&#34;&gt;正規表現技術入門&lt;/a&gt;という本の書評が望まれているようなので今日買ってきて読みました。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>勉強会駆動勉強で猛勉強</title>
      <link>//KeenS.github.io/slide/benkyoukaikudoubenkyoudetakeshibenkyou/</link>
      <pubDate>Wed, 06 May 2015 22:02:12 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/benkyoukaikudoubenkyoudetakeshibenkyou/</guid>
      <description># 勉強会駆動勉強で勉強 ---------------------- サイバーエージェント15卒FRESH勉強会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + 大学では非情報系の学部にいた + Lisp, ML, Shell Scriptあたりを書きます === # 勉強会駆動勉強 --------------- === # 勉強会駆動勉強 --------------- ## 方法 1. 勉強会を見付ける 2. (詳しくない内容について)トークを登録する 3. 期日までに勉強する 4. 期日までに資料を作る 5. 発表する === # 勉強会駆動勉強 --------------- ## ポイント * 自分でテーマを決めてる * 自分で期限を決めてる * 決めた期限は強制力がある * アプトプットする * 質問などでフィードバックがくる === # 勉強会駆動勉強 --------------- ## 身に付く力 * 素早く調べる力 * 要点を素早く見付ける力 * プレゼン資料の作成力 * プレゼン力 === # 例 === # 前回のRustの話 実は発表決めた時点ではRustを書いたことなかった !</description>
    </item>
    
    <item>
      <title>tarballベースの軽量バックアップツール&#39;Sheltar&#39;を作った</title>
      <link>//KeenS.github.io/blog/2015/05/06/tarballbe_sunokeiryoubakkuapputsu_rutsukutta/</link>
      <pubDate>Wed, 06 May 2015 20:45:53 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/06/tarballbe_sunokeiryoubakkuapputsu_rutsukutta/</guid>
      <description>&lt;p&gt;κeenです。みなさんバックアップは何使ってますか？大抵のOSには標準でバックアップツールが付いてますがそれ使ってます？私も使ってます。
しかしやつらはそのOSでしか動かない/動かす方法があまり知られていないのでマシンがクラッシュしたりマシンを失くした時に困ります。&lt;/p&gt;

&lt;p&gt;そこで候補に上がるのが安心と信頼のtarballですが今度は増分バックアップが取りづらいという問題があります。なのでtarballベースの差分バックアップツールを作りました。

まあ、捜せば同じようなものが色々あるでしょうが捜し回るのが面倒だし色々インストールするのも嫌なのでえいやと作ってしまいました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLを書くLisperの悩み</title>
      <link>//KeenS.github.io/blog/2015/05/03/smlwokakulispernonayami/</link>
      <pubDate>Sun, 03 May 2015 13:23:17 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/03/smlwokakulispernonayami/</guid>
      <description>&lt;p&gt;SMLばっかり書いてたら「お前Lisperじゃないだろ」って怒られたとかそういう話ではなく。&lt;/p&gt;

&lt;p&gt;ML系の言語は関数は1つの引数しかとれません。じゃあ複数の値を受け取りたい時はどうするかというと 1. 値を組(タプル)にして受け取る 2. 関数を返す関数((を返す関数)*)にして1つづつ受け取る の2種類の方法があります。
それに纏わる話。

それぞれの記法を例示すると&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#をMacでビルドする</title>
      <link>//KeenS.github.io/blog/2015/04/29/smlsharpwomacdebirudosuru/</link>
      <pubDate>Wed, 29 Apr 2015 16:09:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/29/smlsharpwomacdebirudosuru/</guid>
      <description>&lt;p&gt;κeenです。SML#2.0.0を文鎮と化していたMBAにインストールしたのでメモをば。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lispで限定継続と遊ぶ</title>
      <link>//KeenS.github.io/slide/common_lispdegenteikeizokutoasobu_/</link>
      <pubDate>Sun, 26 Apr 2015 21:09:07 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/common_lispdegenteikeizokutoasobu_/</guid>
      <description># Common Lispで限定継続と遊ぶ ---------------------- [Lisp Meet Up #27](https://atnd.org/events/64988) === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Agenda -------- 0. cl-contの紹介 1. 限定継続の話 2. 限定継続の使い方の話 3. 限定継続の実装の話 === # CL-CONTの紹介 === # CL-CONT --------- * Common Lispの限定継続ライブラリ * 結構古くからあるっぽい * 割と色々なライブラリが使ってる === # CL-CONT --------- ![cl-cont dependers](/images/cl-cont-dependers.png) === # API ----- * 継続を区切るマクロ + `with-call/cc` + `defun/cc` + `lambda/cc` * 継続を取得するマクロ + `call/cc` + `let/cc` ※後で説明するので意味が分からなくても問題ないです。 === # 限定継続の話 === # 継続とは --------- * &#34;</description>
    </item>
    
    <item>
      <title>非同期処理の「その後」の話。goto、継続、限定継続、CPS、そしてコールバック地獄。</title>
      <link>//KeenS.github.io/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</link>
      <pubDate>Sat, 25 Apr 2015 23:44:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</guid>
      <description># 非同期処理の「その後」の話 ---------------------- ## goto、継続、限定継続、CPS、そしてコールバック地獄 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # 同期処理とは ------------- 通常、外部とやりとり(I/O)する時に待ち時間(ブロック)が発生する。 ![sync task image](/images/sync.png) === # 非同期処理とは --------------- 待ち時間に(ブロックせずに)別の処理をしようという発想。 ![async task image](/images/async.png) === # 非同期処理の裏側 ----------------- 処理Aと処理Bの他にいつどっちを動かすかを決めるスケジューラが存在することが多い ![async scheduler image](/images/async_scheduler.png) === # どうやって戻る問題 ------------------- * 一時停止した後「その後」の処理にどうやって戻るか ![cont image](/images/cont.png) === # 「その後」とは ----------- ```C ... fputc(c); // ここの処理でI/Oが入る // 再開する時にここに戻ってきたい printf(&#34;Work done&#34;); .</description>
    </item>
    
    <item>
      <title>SMLSharpを使ってSMLのon-the-flyエラーチェック</title>
      <link>//KeenS.github.io/blog/2015/04/23/smlsharpwotsukattesmlnoon-the-flyerrorchekkingu/</link>
      <pubDate>Thu, 23 Apr 2015 23:01:17 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/23/smlsharpwotsukattesmlnoon-the-flyerrorchekkingu/</guid>
      <description>&lt;p&gt;κeenです。最近SMLを結構書いてるのですが中置演算子が乱立する言語はLisperにはつらくて、しょっちゅうコンパイルエラーを出します。
そこでSML#をflymakeで動かしてOn The Flyにエラーチェックをします。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>静的なメモリ管理の話。リージョン推論とλ計算からRustまで</title>
      <link>//KeenS.github.io/slide/seitekinamemorikanrinohanashi.rijonsuirontolambdakeisankararustmade/</link>
      <pubDate>Tue, 21 Apr 2015 00:25:56 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/seitekinamemorikanrinohanashi.rijonsuirontolambdakeisankararustmade/</guid>
      <description># 静的なメモリ管理の話。リージョン推論とλ計算からRustまで ---------------------- サイバーエージェント新卒エンジニア勉強会 === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * 大学では非情報系学科。趣味のプログラマ。 + 非ガチ勢なので優しくして下さい=== # 強い静的メモリ管理の話をしよう ------------------------------ * まずは可能性の議論が必要 * 実現可能性 * 実用性 === # 可能性の議論 ------------- * プログラミング言語の理論 ≒ λ計算 * そもそもλ計算はメモリのことを考慮してない + GCがあるかのように記述される === # 可能性の議論 ------------- * λ計算にメモリ管理まで含めて理論を立てたものは存在する（静的なメモリ管理） + リージョンというものをベースにしている [参考](http://www.elsman.com/mlkit/pdf/popl94.pdf) * さらにリージョンを自動で推論する理論もある（強いメモリ管理） + リージョン推論という === # 軽くリージョンの話 ------------------- * 型と同じようにプログラム全体を伝わるメタデータ。 * データが保存される場所を指す。リージョンはいくつもある。 * リージョン推論でデータがどのリージョンに入るかが分かる * さらにリージョンのサイズもある程度予想がつくので静的に管理出来る * 関数などは引数のリージョンに対して多相になる「リージョン多相」などもある * この辺は[Martin Elsmanの論文たち](http://www.</description>
    </item>
    
    <item>
      <title>SMLSharpでFFIバインディングを書く時の知見</title>
      <link>//KeenS.github.io/blog/2015/04/19/smlsharpdeffibaindinguwokakutokinochiken/</link>
      <pubDate>Sun, 19 Apr 2015 13:51:33 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/19/smlsharpdeffibaindinguwokakutokinochiken/</guid>
      <description>&lt;p&gt;κeenです。最近頻繁にSML#を使ってます。SML#のメイン機能の1つであるC連携ですが、ちょっと複雑なことをやろうとするとテクニックが必要になるので共有します。&lt;/p&gt;

&lt;p&gt;Twitterとかにコメントや突っ込みお願いします。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLのファンクタに少し踏み込んだ</title>
      <link>//KeenS.github.io/blog/2015/04/12/smlnofankutanisukoshifumikonda/</link>
      <pubDate>Sun, 12 Apr 2015 19:49:41 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/12/smlnofankutanisukoshifumikonda/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://github.com/bleis-tift/SmlSharpContrib&#34;&gt;SmlSharpContrib&lt;/a&gt;にコントリビュートしてます。そこでファンクタを使う用事があったのですが少し踏み込んだ使い方をしようとしたらハマったのでメモ。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CyberAgentに入社しました</title>
      <link>//KeenS.github.io/blog/2015/04/10/cyberagentninyuushashimashita/</link>
      <pubDate>Fri, 10 Apr 2015 19:55:59 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/10/cyberagentninyuushashimashita/</guid>
      <description>κeenです。少し遅くなりましたが4/1付で所属が変わったので報告です。 タイトルにあるように、株式会社サイバーエージェントに入社しました。こう言うとよく「あれ？サムライトじゃないの？」「もっとストイックな所に行くと思ってた」と言われます。サムライトについては特に関係はないです。エンジニア2人と知り合いなだけです。Common Lispだけが幸せの基準じゃありません。 それにキラキラ女子のイメージが強いかもしれませんがサイバーエージェント、結構ストイックですよ？
 因みに昨日までで全体研修が終わり、月曜から技術研修が始まります。技術研修を受けずに早期配属される同期や果ては社長になる同期も居る中のんびり6月末まで研修を受けます。フロント周りはからっきしなのでこれを機にその辺も勉強しようかと。
研修はグループワークが多かったのですが一緒のチームにいて優秀だなと思える人に何人も会ってきたしバックグラウンドを訊いてみて尖ってるエンジニアも一杯いたので正式配属されるのが楽しみです。私もそれなりに尖ってるつもりだったのですが精進が足りませんね。
まあ、マイペースに歩んでいきます
よし、来年Clojureおじさんになろう
&amp;mdash; κeen (@blackenedgold) 2014, 7月 16</description>
    </item>
    
    <item>
      <title>誰がUTF-32が使われてないなんて言ったんだ</title>
      <link>//KeenS.github.io/blog/2015/03/31/daregautf-32gatsukawaretenainanteitsuttanda/</link>
      <pubDate>Tue, 31 Mar 2015 19:41:05 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/03/31/daregautf-32gatsukawaretenainanteitsuttanda/</guid>
      <description>&lt;p&gt;最近ではUTF-8でソースコードを書いてUTF-8で出入力をする。それ以外のエンコーディングは使われていない。…だと？誰がそんなこと言ったんだ
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>caveman2、ningle…Common LispのWeb周りのフレームワークを快適に使うためのたった1つのコト</title>
      <link>//KeenS.github.io/slide/caveman2-ningle...common-lispnowebmawarinofure-muwa-kuwokaitekinitsukautatta1tsunokoto/</link>
      <pubDate>Thu, 05 Mar 2015 13:18:44 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/caveman2-ningle...common-lispnowebmawarinofure-muwa-kuwokaitekinitsukautatta1tsunokoto/</guid>
      <description># caveman2、ningle、datafly…Common LispのWeb周りのフレームワークを快適に使うためのたった1つのコト ---------------------- Clack Meet Up #1 2015-03-05 @サムライト === ずっと俺のターン === # 問題 ------ Common Lispは case * Sensitive * Insensitive どっち? === # 問題 ------- あれ？ ```lisp (eql? &#39;CaseInsensitive &#39;caseinsensitive) ;= t ``` === # 問題 ------- リーダがデフォルトで大文字にするだけ ```lisp (eql? &#39;|CaseSensitive| &#39;|casesensitive|) ;= nil ``` === # Caveman2 --------- ```lisp @route GET &#34;/hello&#34; (defun say-hello (&amp;key (|name| &#34;Guest&#34;)) (format nil &#34;Hello, ~A&#34; |name|)) ``` === # Ningle -------- ```lisp (setf (ningle:route *app* &#34;</description>
    </item>
    
    <item>
      <title>Lispエイリアンの矢印作った</title>
      <link>//KeenS.github.io/blog/2015/03/03/lispeiriannoyajirushitsukutta/</link>
      <pubDate>Tue, 03 Mar 2015 21:30:13 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/03/03/lispeiriannoyajirushitsukutta/</guid>
      <description>κeenです。勉強会などで役立ちそうなLispエイリアンの矢印を作りました。 Lispエイリアンの元データはこちらでPNGやSVGで公開されているのでInkscapeの練習がてらそれをいじりました。
どうぞ
lisplogo_alien_arrow.svg
ライセンスは元データに倣ってパブリックドメインとします。
PNG形式のもの必要…ですか？</description>
    </item>
    
    <item>
      <title>既存のテンプレートエンジンの問題点と再設計</title>
      <link>//KeenS.github.io/slide/kizonnotenpure-toenjinnomondaitentosaisekkeiaruihaarrowsnitsuite/</link>
      <pubDate>Mon, 02 Mar 2015 23:36:03 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/kizonnotenpure-toenjinnomondaitentosaisekkeiaruihaarrowsnitsuite/</guid>
      <description>.red { color: red; }  # 既存のテンプレートエンジンの問題点と再設計、あるいはArrowsについて ----------------------------------------------------------------- Clack Meet Up #1 2015-03-05 @サムライト === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 野生のLisper + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます === # Template Engines === # Existing Architeture ---------------------- 0. (リクエスト) 1. アプリ 0. 引数を計算 1. テンプレートに引数を渡す 2. レスポンスをレンダリング 4. レスポンスをサーバに渡す 5. (レスポンス) === # Rendering? ---------------------- * 結合した文字列はクライアントに返ったらその後はゴミ + GCへ負荷がかかる (後述) * クライアントにとって1つの文字列である必要はない * むしろ返せる部分だけ先に返した方が得（後述） === # GC Pressure (SBCL) ----------------- * 世代別Copy GC * 結合した文字列は比較的大きい * `alloc_space`に入らない大きさならアロケートが遅い * GCを頻繁に起動してしまう * 16KBを越えると特別扱いされて遅い/メモリを喰う * LispのWebアプリはレスポンスタイムの分散が大きい（要出展） 参考: [SBCL GENCGC @ x86 Linux](http://cl-www.</description>
    </item>
    
    <item>
      <title>面接でLispを口にして落ちない企業、私気になります！</title>
      <link>//KeenS.github.io/blog/2015/02/10/mensetsudelispwokuchinishiteochinaikigyouwatashikininarimasu/</link>
      <pubDate>Tue, 10 Feb 2015 08:01:35 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/02/10/mensetsudelispwokuchinishiteochinaikigyouwatashikininarimasu/</guid>
      <description>&lt;p&gt;κeenです。先日の記事がやたら拡散しました。その中で&lt;/p&gt;

&lt;p&gt;「面接でLispは口にしない方が良い。100%落ちる。」&lt;/p&gt;

&lt;p&gt;の一文がえらく気に入られたようです。Lispの風評被害を防ぐために1つアンケートにご協力下さい。

このスプレッドシートです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>就活について思ったことをここに書き記す</title>
      <link>//KeenS.github.io/blog/2015/02/07/shuukatsunitsuiteomottakotowokokonikakishirusu/</link>
      <pubDate>Sat, 07 Feb 2015 14:27:58 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/02/07/shuukatsunitsuiteomottakotowokokonikakishirusu/</guid>
      <description>&lt;p&gt;私は今4年生なので去年の今頃は就活なんてものをしていた。下の代から若干日程が変わっているがそろそろ就活ムードが出てきているのでなんか吐いておく。思い出かもしれないし愚痴かもしれないし毒かもしれない。経験かもしれないし他人の代弁かもしれない。後輩の役に立つかもしれないし人事の方に向けたメッセージかもしれない。&lt;/p&gt;

&lt;p&gt;念のために書いておくが私はIT系の会社のプログラマ、エンジニア職ばかり応募していた。他の業界、職種に当て嵌まるとは限らない。

注意&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mlyaccを使ってみてハマったところ</title>
      <link>//KeenS.github.io/blog/2015/01/31/mlyaccwotsukattemitehamattatokoro/</link>
      <pubDate>Sat, 31 Jan 2015 11:55:51 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/31/mlyaccwotsukattemitehamattatokoro/</guid>
      <description>&lt;p&gt;κeenです。前回の&lt;a href=&#34;//KeenS.github.io/blog/2014/12/10/mllexwoshi-tutemiru/&#34;&gt;mllexの記事&lt;/a&gt;の続きです。今回はmlyaccを使ってみました。

&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AsciiDocを使ってお手軽manページ生成</title>
      <link>//KeenS.github.io/blog/2015/01/24/generate-manpage/</link>
      <pubDate>Sat, 24 Jan 2015 10:58:29 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/24/generate-manpage/</guid>
      <description>&lt;p&gt;コマンドラインツールを作ってるみなさん、man書いてますか？コマンドラインツールを使う人は時代の変化に取り残された遺物なのでWebにドキュメント置いても読んでくれませんよ。&lt;/p&gt;

&lt;p&gt;いや、私のようにmanだけを頼りにツールを使う人もいるのでちゃんと書いて下さいね。面倒だって?AsciiDocを使えば簡単に書けますよ!
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>印刷フォマット済みのテキストファイルをPDF化する</title>
      <link>//KeenS.github.io/blog/2015/01/24/a2pdf/</link>
      <pubDate>Sat, 24 Jan 2015 10:23:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/24/a2pdf/</guid>
      <description>&lt;p&gt;小ネタ。古いドキュメントやらポータブルな仕様を落としてくると中身が印刷フォーマット済み(ページネーションやヘッダ、フッタをアスキーアートで表現してる)であることがあります。
それらを普通のテキスト形式だと読みづらいのでPDF化する話。

結論から言うと&lt;a href=&#34;http://search.cpan.org/~jonallen/a2pdf-1.11/lib/Script/a2pdf.pm&#34;&gt;a2pdf - search.cpan.org&lt;/a&gt;を使いました。選んだ理由は&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lispのポータビリティとユニバーサリティ</title>
      <link>//KeenS.github.io/blog/2015/01/22/common-lisp-portability-and-univesality/</link>
      <pubDate>Thu, 22 Jan 2015 07:51:02 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/22/common-lisp-portability-and-univesality/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://clfreaks.org/post/108341635899/1-cim-vs-roswell&#34;&gt;clfreaks&lt;/a&gt;の収録時に他のLisperと話してて価値観というか目標を共有出来てないなと思ったのでここで心情を語る次第。今のCommon Lispの使われ方には問題がある。

Common Lispにはポータビリティというかユニバーサリティというか、そういうものがない。いや、処理系の作者達はしっかり作ってるのだけどLisperがそういう使い方をしていない。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>picrinのcodegenプロセスを説明してみる</title>
      <link>//KeenS.github.io/blog/2015/01/10/picrin-codegen-explanation/</link>
      <pubDate>Sat, 10 Jan 2015 09:40:51 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/10/picrin-codegen-explanation/</guid>
      <description>&lt;p&gt;今、picrinのcodegenプロセスに手を入れる機運が高まってます。picrinはバイトコードインタプリタなのでS式を渡されたらそれをバイトコードに変換する作業が必要です。それがcodegen。本当はcompileなんだけどpicrinのCのソースコードのコンパイルと紛らわしいからcodegen。私も完全にはプロセスを理解してないので説明して理解度を試しつつ問題点を洗い出します。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FreeBSDの環境構築</title>
      <link>//KeenS.github.io/blog/2015/01/08/freebsd-environment-setups/</link>
      <pubDate>Thu, 08 Jan 2015 14:37:36 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/08/freebsd-environment-setups/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;//KeenS.github.io/blog/2014/12/27/freebsd/&#34;&gt;以前の記事&lt;/a&gt;の続編。FreeBSDで普通の(Ubuntuで使っていたのと同程度の)環境を整えようとしたときの話。普通ならPC BSDを使えば苦労しないんだろうけど私のラップトップは少し古いのか癖があるのかGPTパーティションに対応してなくてPC BSDのインストーラが使えなかったのでFreeBSDを入れてデスクトップ環境を一から構築した。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>OSお引っ越しの時のデータ移行の自分用注意点</title>
      <link>//KeenS.github.io/blog/2015/01/04/migration-memo/</link>
      <pubDate>Sun, 04 Jan 2015 05:26:25 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/04/migration-memo/</guid>
      <description>&lt;p&gt;自分用。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>新年の挨拶及び内部実装変更のお知らせ</title>
      <link>//KeenS.github.io/blog/2015/01/01/new-year-greeting/</link>
      <pubDate>Thu, 01 Jan 2015 06:44:31 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/01/new-year-greeting/</guid>
      <description>新年明けましておめでとう御座います。κeenです。私から一つお知らせが御座います。 私、本名を金舜琳といいますが今年から日本に帰化して志村舜琳と名乗ります。アルファベット表記もSunrim KIMからSunrin SHIMURAに変更致します。Sunrinも微妙に変化します。 尚、外部インターフェースのκeenは変らず、内部のみの変更になるので多くの方には影響は無いかと思います。 さらに正式に日本国籍を取得するまでは本名の金舜琳と通称名の志村舜琳両方で呼び出せるのでこの期間に移行下さい。
さて、帰化の理由についてですが、主に外国人参政権に関連します。昔は私も外国人に参政権を渡せと叫んでおりましたが最近考え方が変わりました。権利が欲いなら国籍とればくれてやる、国籍を取る事は認める。それで良いと思います。韓国の権利よりも日本の権利が欲い、なら日本国籍を取る。筋は通っていると思います。書類上の変更で血筋が変わる訳でもありませんし。父親の世代は在日韓国人というだけで日本の社会から拒絶され、帰化＝屈服だったそうで今でも帰化には否定的なようですが特に反対はありませんでした。私と同世代の姉は、もっと歴史を勉強して納得してから決めると言っています。価値感はそれぞれでしょう。
それでは皆様、今年も一年κeenこと志村舜琳を宜くお願い致します。
P.S.
志村舜琳ってDQNネームっぽくて嫌だなぁ。下の名前も変えようかなぁ。</description>
    </item>
    
    <item>
      <title>OctopressからHugoに移行した</title>
      <link>//KeenS.github.io/blog/2014/12/30/migration-from-octopress-to-hugo/</link>
      <pubDate>Tue, 30 Dec 2014 03:26:58 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/30/migration-from-octopress-to-hugo/</guid>
      <description>&lt;p&gt;κeenです。年末ですね。&lt;a href=&#34;http://deeeet.com/writing/2014/12/25/hugo/&#34;&gt;こちらのブログ&lt;/a&gt;にもあるようにOctopressの生成の遅さに閉口してたのでHugoに移行しました。
出来るだけブログのURLは変えないようにしました。でもどっかでリンク切れちゃってるかも。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FreeBSDに移行した</title>
      <link>//KeenS.github.io/blog/2014/12/27/freebsd/</link>
      <pubDate>Sat, 27 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/27/freebsd/</guid>
      <description>κeenです。Ubuntuのaptが古いのが我慢ならなくなってきたのでFreeBSDに移行しました。pkgのsbclが1.2.6ですよ！ 最初は踏ん切りがつかなかったのでメインの500GBのHDDではなく、ジャンクで買った128Gのものにインストール。様々な問題に当ったものの、どうにか使えてます。今はHDD換装してメインになってます。
 問題の半分はKDEを導入したら直った（最初はCinnamon入れようとした。UbuntuではUnity使ってた） ２日くらいはつぶす覚悟 Xorgの設定を手で畫くことになるとは  良いところ  速い気がする。ufsのお陰？（HDDの問題？） Firefoxが全然CPU食わなくなった（プラグインの問題？） pkg使い易い！ Ubuntuで使ってたソフトウェア大体動く portsもある！！ Dtraceとかjailとか便利そうじゃね？  問題 たいてい解決or妥協してるのですが、どうにもならない点がいくつか
 skkservがセグフォる。multiskkserv使えない。今は辞書直読みで対応してる。 Wifiのデバドラがない。今はUSBのアダプタ使ってる（そっちのドライバはある） sleepすると復帰したときにディスプレイが点かない メインのHDDにデュアルブートでバックポート出来無かった 日本語キーボードのモディファイアキーを認識しない: のたうち回ってpolykitの設定とかsysctlとか書いてる内に直った。でもen配列だと無理  特に3番が痛い。
解決/妥協した問題  インプットメソッド、ログインマネージャ、タイムゾーン: KDEを導入したら直った データの移行: fusefs_ext4でUbuntuのHDDマウントしてコピー、権限変更、chmod u+w フォント: sudo pkg install $(pkg search ja-font)の力技。あとはXorgの設定書いてKDEとFirefoxで好みのフォントを選んだ キーボードdvorakにしてるのにqwertyになる: qwertyで妥協。やりたければsekxkbdとかあるし ロケールが日本語になんなくてFirefoxとかが全部英語: ま、いっか タッチパッドでスクロールが出来無い: Xorgの設定書いた。ドライバもなんか設定書いた気がする kvmが使えない: むしろBHyVeを試してみるチャンス！開発中のVMMを提供してくれたFreeBSDに圧倒的感謝！！  デバドラとかハードウェア周りがつらい。ソフトウェアは統合デスクトップ環境が吸収してくれますね。
EmacsとFirefoxとThunderbirdが動くので今のところ問題ないですね。今後また問題が出て来るかも。</description>
    </item>
    
    <item>
      <title>独学のプログラミング</title>
      <link>//KeenS.github.io/blog/2014/12/18/du-xue-falsepuroguramingu/</link>
      <pubDate>Thu, 18 Dec 2014 23:51:27 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/18/du-xue-falsepuroguramingu/</guid>
      <description>&lt;p&gt;誰向けなのか分からない。多分5年後くらの初心を忘れた自分が読めば良いと思う。あるいは、独学でプログラミングを始めようとしてる人が参考にするのかもしれない。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>サイエンスかエンジニアリングか</title>
      <link>//KeenS.github.io/blog/2014/12/18/saiensugaenziniaringu/</link>
      <pubDate>Thu, 18 Dec 2014 23:03:41 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/18/saiensugaenziniaringu/</guid>
      <description>&lt;p&gt;最近、エンジニアリングかサイエンスかという分類を教えてもらった。それが出てきたのはGoがエンジニアリングから出た言語だと言われた時だった。

その時私はRustを推していたのでRustはサイエンスから出た言語だと言った。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>実用Common Lispを読んだ</title>
      <link>//KeenS.github.io/blog/2014/12/14/shi-yong-common-lispwodu-nda/</link>
      <pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/14/shi-yong-common-lispwodu-nda/</guid>
      <description>&lt;p&gt;以前&lt;a href=&#34;//KeenS.github.io/blog/2014/10/20/lisp-ja/&#34;&gt;Common Lispの勉強の手引の記事&lt;/a&gt;を書いたときに実用Common Lispの名を挙げたが読んだことはなかった。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mllexを使ってみる。あるいはlexユーザーに対するmllexの解説</title>
      <link>//KeenS.github.io/blog/2014/12/10/mllexwoshi-tutemiru/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/10/mllexwoshi-tutemiru/</guid>
      <description>&lt;p&gt;このエントリーは&lt;a href=&#34;http://qiita.com/advent-calendar/2014/ml&#34;&gt;ML Advent Calendar 10日目&lt;/a&gt;の記事です。&lt;br /&gt;
前 &lt;a href=&#34;http://h-sakurai.hatenablog.com/entry/2014/12/09/144655&#34;&gt;OCamlで作ったgoma言語 - h_sakurai&amp;rsquo;s diary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ふと思い立ってPrologのコンパイラかインタプリタかを作ってみようとして、その第一段でlexerに着手しました。

ちょ、SML分かる人はmllexくらい常識的に知ってるなんて言わないで下さい。私は初めて触りました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>割と処理系ポータブルなCommon Lisp実行可能ファイルを作る</title>
      <link>//KeenS.github.io/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru/</link>
      <pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru/</guid>
      <description>&lt;p&gt;κeenです。Lisp Advent Calendarはもう枠埋まっちゃったので普通にブログで。&lt;/p&gt;

&lt;p&gt;コマンドラインから実行可能なLispファイルをそれなりに多くの処理系で動くように作る話。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>H2Oにpicrinを溶かす</title>
      <link>//KeenS.github.io/blog/2014/12/07/h2onipicrinworong-kasu/</link>
      <pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/07/h2onipicrinworong-kasu/</guid>
      <description>&lt;p&gt;このエントリーは&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2014/lisp&#34;&gt;Lisp Advent Calendar&lt;/a&gt; 7日目&lt;br /&gt;
兼&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2014/h2o&#34;&gt;H2O Advent Calendar&lt;/a&gt; 7日目&lt;br /&gt;
の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。タイトルの通りです。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>claspがアップデートされたよ</title>
      <link>//KeenS.github.io/blog/2014/12/06/claspgaatupudetosaretayo/</link>
      <pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/06/claspgaatupudetosaretayo/</guid>
      <description>&lt;p&gt;このエントリーは&lt;a href=&#34;http://qiita.com/advent-calendar/2014/lisp&#34;&gt;Lisp Advent Calendar 2014&lt;/a&gt;6日目の記事です。&lt;br /&gt;
前: nobkzさんで &lt;a href=&#34;http://qiita.com/nobkz/items/2be2b6806237d8ea6e21&#34;&gt;lfe - (lisp (flavored (erlang)))について基本その1 - Qiita&lt;/a&gt;&lt;br /&gt;
後: 私で &lt;a href=&#34;//KeenS.github.io/blog/2014/12/07/h2onipicrinworong-kasu/&#34;&gt;H2Oにpicrinを溶かす | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;κeenです。アドベントカレンダーめっちゃ書いてますね。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mirahについて</title>
      <link>//KeenS.github.io/blog/2014/12/04/mirahnituite/</link>
      <pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/04/mirahnituite/</guid>
      <description>&lt;p&gt;このエントリーは&lt;a href=&#34;http://qiita.com/advent-calendar/2014/minor-language&#34;&gt;マイナー言語 Advent Calendar 2014 - Qiita&lt;/a&gt;4日目の記事です。&lt;br /&gt;
前: ksmakotoさんで&lt;a href=&#34;http://ksmakoto.hatenadiary.com/entry/2014/12/03/002435&#34;&gt;マクロ、拙作のテキストマクロ言語m55について主に - ksmakotoのhatenadiary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;κeenです。進捗ダメです。マイナー言語Advent Calendarが空いてるようだったのでMirahの話を捩じ込みますね。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VOPで遊ぶ</title>
      <link>//KeenS.github.io/blog/2014/12/02/vopdeyou-bu/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/02/vopdeyou-bu/</guid>
      <description>&lt;p&gt;(:meta&lt;br /&gt;
 ((:this &amp;ldquo;&lt;a href=&#34;http://qiita.com/advent-calendar/2014/lisp&#34;&gt;Lisp Advent Calendar 2014&lt;/a&gt;の3日目の記事&amp;rdquo;)&lt;br /&gt;
  (:prev (:author &amp;ldquo;tk_riple&amp;rdquo; :title &lt;a href=&#34;http://compassoftime.blogspot.jp/2014/12/r7rs.html&#34;&gt;&amp;ldquo;時の羅針盤＠blog: R7RSポータブルライブラリを書く際の落とし穴&amp;rdquo;&lt;/a&gt;))&lt;br /&gt;
  (:next (:author &amp;ldquo;nobkz&amp;rdquo; :tite &amp;ldquo;&lt;a href=&#34;http://qiita.com/nobkz/items/68ee2adbc13caf3eec6f&#34;&gt;Shenの基礎その1 基本的な型 - Qiita&lt;/a&gt;&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;κeenです。さっきまでVOPで遊んでたので当初の予定を変更してVOPの話をします。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>require, ASDF, quicklispを正しく使う</title>
      <link>//KeenS.github.io/blog/2014/11/30/quicklisp/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/11/30/quicklisp/</guid>
      <description>&lt;p&gt;κeenです。最近のCommon Lispのパッケージ管理は&lt;code&gt;ql:quickload&lt;/code&gt;しか知らないという方も多いのではないでしょうか。しかしそれだけでは機能が足りないこともあります。Common Lispには様々な管理システムがあるので整理しましょう。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lisp meet up #22でLTしてきた</title>
      <link>//KeenS.github.io/blog/2014/11/28/lisp-meet-up-number-22deltsitekita/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/11/28/lisp-meet-up-number-22deltsitekita/</guid>
      <description>&lt;p&gt;κeenです。先日 Lisp Meet Up #22 でLTしてきたので報告です。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Semantic S式</title>
      <link>//KeenS.github.io/slide/semantic-sshi/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/semantic-sshi/</guid>
      <description># Semantic S式 --- 2014-11-27 κeen(@blackenedgold) # About Me ---------- ![κeenのアイコン](/images/icon.png) + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます # Semantic Web とは # [Semantic Web](http://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%9E%E3%83%B3%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A6%E3%82%A7%E3%83%96) ---------------- * W3C のティム・バーナーズ＝リーが提唱 * 文章の見た目を記述するんじゃなくて構造を記述しよう * そうすると機械がクローリングするの楽になるよね # Semantic S式とは # Semantic S式 -------------- * Shibuya.lispのκeenが提唱 (昨日思い付いた) * S式の見た目じゃなくて構造で括弧をつけよう * そうするとコーディングが楽になるよね # 良いところ ------------ 1. 意味が分かり易い 2. パースし易い 3. 編集が楽になる 4. 壊れにくい # 1. 意味が分かり易い # 1. 意味が分かり易い -------------------- ## 例1 * Clojure ```clojure (let [a 1 b 2] .</description>
    </item>
    
    <item>
      <title>#isucon で学生賞二連覇してきた</title>
      <link>//KeenS.github.io/blog/2014/11/09/isucondexue-sheng-shang-er-lian-ba-sitekita/</link>
      <pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/11/09/isucondexue-sheng-shang-er-lian-ba-sitekita/</guid>
      <description>&lt;p&gt;κeenです。@nemunemu3desuさん（ねむさん）、@cocodripsさん（くーむさん）とチーム「(ρ_-)/超銀杏バスターズ&amp;#92;(･ω･ o)」で&lt;a href=&#34;http://isucon.net/&#34;&gt;ISUCON4&lt;/a&gt;で学生賞とってきた。二連覇わーい。

※2014-11-09 16:50 ちょっと加筆修正しました&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>claspを少し触ってみた</title>
      <link>//KeenS.github.io/slide/clasp/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/clasp/</guid>
      <description># claspを少し触ってみた ---------------------- Lisp Meet Up presented by Shibuya.lisp #21 2014-10-29 κeen(@blackenedgold) # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます # clasp ------- * Github: [drmeister/clasp](https://github.com/drmeister/clasp) * 2014-09-18に0.1リリース(現在0.11プレビューが出ている) * 今は0.11プレビューが出ている * ANSI Common Lisp準拠を目指す(現在80 ~90%) * ECLからのフォーク * LLVMベースのJIT([MCJIT](http://llvm.org/docs/MCJITDesignAndImplementation.html))搭載 * C++とLispで書かれている * C++との連携を意識 Note: C++との連携の部分を強調。今回は0.11プレビューでの話 # メモリ管理 ------------------ * Memory Pool Systemと Boehm GCから選べる * ビルドするときにどっちかを選ぶ # メモリ管理 ------------------ ## [Boehm GC](http://www.</description>
    </item>
    
    <item>
      <title>GCの話</title>
      <link>//KeenS.github.io/blog/2014/10/26/gcfalsehua/</link>
      <pubDate>Sun, 26 Oct 2014 19:13:45 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/10/26/gcfalsehua/</guid>
      <description>&lt;p&gt;#関数型なんたら でGCの話を聴いて、&lt;a href=&#34;http://www.pllab.riec.tohoku.ac.jp/papers/icfp2011UenoOhoriOtomoAuthorVersion.pdf&#34;&gt;SML#のGCの論文&lt;/a&gt;を読んで色々感じたのでエントリー。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>#関数型なんたら で喋ってきた</title>
      <link>//KeenS.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita/</link>
      <pubDate>Sun, 26 Oct 2014 17:14:10 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita/</guid>
      <description>κeenです。昨日函数型なんたらの集いに参加してきたので報告/感想です。 会場提供はドワンゴということでトークはニコ生に流された模様。ちらっと覗いてみたらLinuxでも見れましたね。いつのまにかFlashのバグ直ってたんですね。 とはいえ私自身のトーク中のコメントが見れなかったのであまり意味はないのですが…
プレミアム会員は放送後7日は生放送の内容を見れるそうですね。見れる方々はコチラからどうぞ。次回からはタイムシフト予約しておこう。
話した内容 C6H6+HNO3というタイトルで、picrinのbenzとnitrosについて。本当はnitrosの依存関係解決器sulfuricを完成させてそれについて話し、nitroを書こう!って言う予定だったんですが着手が遅れて完成しないまま発表になりました。
普段関数型言語のヒトは型やらモナドで殴ってる印象があったのでマクロで殴ろうと思ったのですがマクロの話のところで焦ってしまって話が飛んでしまい、殴れずに終わりました。
ガチの組み込み屋さんから組み込み機器で動作検証したのかとの質問がありましたがそもそも持ってないです。そろそろ1.0が出ると思うのでそのあたりでやります。
GCがconservativeかとの質問に対して「はい」と答えてしまいましたが間違いでした。 conservativeなのはcall/ccでした。GCはexactですね。ドキュメントに載ってます。
wasabizの名前に反応した人が多かったようですね。やっぱ有名人なのかぁ。
興味深かった話 エンジニアとモナド またモナドで殴る話かと思ったら全然違いました。トップダウンで設計するときにそれぞれを小さなDSLに分割してそれらをモナドで実装し、モナド変換子で組み合わせると良いよねとのこと。タスクアサインもモナド単位になるし分かり易い。スピードのために実際には単相化すると良いとか現実的な話をしてて非常に良かったです。
Lispで考えるとこうはいかないなと思います。トップダウンで設計するのが他の言語以上に向いてない気がします。というか、ボトムアップに向きすぎてる。小っさく始めて抽象が欲しければマクロを書いて…って。オブジェクト指向で作るにしてもオブジェクトとメソッドが分離してるのでボトムアップと相性が良い。この辺はポールグレアムの「ハッカーと画家」に詳しいです。
shapelessの紹介 興味を持ったのはshaplessそのものではなくてヘテロなリストやヘテロなハッシュに型をつける話。{ 1 =&amp;gt; &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot; =&amp;gt; 2}に型がつくのは面白すぎます。「高度に多相化された静的型は動的型と区別がつかなくなる」っぽかったです。
パターンマッチいろいろ 議論を呼んだ発表。パターンマッチを拡張する話。例えば年月日に対してYMD(y, 12 25)でクリスマスならそのときの年を取り出せるだとかさらにアンドを使えばHMSも一緒にマッチ出来るだとか。 そこからEgisonに話が飛んでEgisonの例のようにポーカーの役をScalaでパターンマッチする例の紹介。
議論を呼んだというのはパターンマッチにガードが吸収されてる件ですね。データ型のコンストラクタとエクストラクタが一対一対応してこそパターンマッチは真価を発揮する派vsパターンマッチの表現力が高ければ高い方が良い派の対立ですね。さらに前者は型の表現力が足りてないのなら型をもっと複雑にすべき派とガードを付けて網羅性の証明をすれば良い派に分かれます。私はパターンマッチには表現力があればあるほど良いよね派。
これはそもそもパターンに対する立場の違いがある気がするんですよね。私はパターンマッチは同じデータに対する条件判定のシンタックスシュガーとして捉えています。マッチと束縛を一緒に行なうのは便利なのとパフォーマンスのため。ガードが必要なのはパターンの表現力が足りないため。だからパターンがリッチならリッチな方が良い。そもそもLispでは網羅性のチェックは期待出来ませんので。そもそもの話動的言語はコンパイル時の検査をあきらめてその代わり表現力を得ようという思想ですからね。
パターンが複雑になるとメモリが爆発するとの指摘がありましたがそれに直面した人がいるらしく、パターンによる分岐の枝を実行時に伸ばしていくようなパターンマッチライブラリも存在します。（Lispは実行時にもマクロが動いていて、実行時にコードを生成することも可能なのです。）
懇親会その他 名古屋の型々方々と色々喋れました。偶々でこれきさん、みずぴーさんと同じテーブルに座り、昼御飯も一緒に。普段休日出勤してる印象が強く、名古屋に行かないと会えないと思っていたブレイスさんといよさんも一緒でした。でこれき先生はやっぱり大先生だった。
よんたさんにSML#のコードリーディング会開いて下さいって言ったら良いよって言ってもらいました。そろそろ64bit版も出るそうなのでリリース記念コードリーディング会&amp;amp;芋煮会やろうって話になりました。
OCamlのユニコードライブラリを作ってる方とも話しました。内部でropeで持ってるらしく、その話を聞きました。ropeのユニコード化はどうやら普通に文字列をUTF-8で保持し、ropeに文字列長のフィールドを保たせるだけで良いよう。ただ、picrinはCとの連携のためちょくちょくCの文字列に変換してまた新たにropeを作って、とするので若干勝手というかボトルネックが違いそう。
Schemeのネイティブコンパイラを作ってる方とも話しました。Schemeの実装について喋ったり、GCについて喋ったり。GCについては興味深いことを聴いたのでもう1本エントリー書きます。あとはプロセス代数とかモデル検査とか。
まとめ 楽しかった。どうしてもLispは関数型とはあまり言われない（し、私も関数型言語とは思ってない）のでLisperが少なかったのですが私自身はMLも好きなので楽しめました。GCとTaPLとHaskellとScalaとEgisonに対するモチベーションが上がりました。
最後に開催して下さった主催の方々、会場を提供して下さったドワンゴ様、ありがとう御座いました。</description>
    </item>
    
    <item>
      <title>C6H6&#43;HNO3</title>
      <link>//KeenS.github.io/slide/c6h6-plus-hno3/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/c6h6-plus-hno3/</guid>
      <description># $\mathbf{C_6H_6+HNO_3}$ ------------------------ 関数型なんたらの集い  κeen(@blackenedgold) # picrinについて --------------- ![ピクリン酸の構造式](/images/picrin/picrin-structure.png) 化学式 $\mathbf{C_6H_3N_3O_7}$、示性式 $\mathbf{C_6H_2(OH)(NO_2)_3}$ で表される芳香族のニトロ化合物。 一般にはフェノールのニトロ化によって得られる。 Note: ニトロ化に硫酸を使うことを触れる。 ![picrinのロゴ](/images/picrin/picrin-logo-fin01-02.png) # About Me ---------- + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, ML, Shell Scriptあたりを書きます + [picrin](https://github.com/picrin-scheme/picrin)のコミッタです # picrinについて ---------------- * github: picrin-scheme/picrin * R7RS-small scheme 処理系 * 速い、軽い、高機能を目指す * 組み込み向けを意識 * 1年くらい開発 * κeenがコミットし始めてから半年弱 # picrinの プロジェクト構成 --------------------------- コア(benz)はC、ビルドツールはCMake。 ``` ├── contrib (nitros) ....... ├── docs ├── etc ├── extlib │ └── benz ├── piclib .</description>
    </item>
    
    <item>
      <title>Common Lispの勉強をするには、あるいは情報を得るには</title>
      <link>//KeenS.github.io/blog/2014/10/20/lisp-ja/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/10/20/lisp-ja/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.8arrow.org/entry/2014/09/05/062028&#34;&gt;深町さんのブログ&lt;/a&gt;で日本語でCommon Lispの質問をする方法が載ってましたが質問じゃなくて単に情報を得たい、勉強をしたいという場合が書かれてなかったので勝手に補遺。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #20でLTしてきました</title>
      <link>//KeenS.github.io/blog/2014/09/30/lisp-meet-up-number-20/</link>
      <pubDate>Tue, 30 Sep 2014 09:35:05 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/09/30/lisp-meet-up-number-20/</guid>
      <description>κeenです。lisp meet up # 20に参加したのでレポートです。 20人の募集に19人参加予定。会場は今回初めてのところでした。
LT LTはTOYOZUMIさんが仕事で来れなくなったので私の1件のみ。内容はpicrinのチューニングの話と思わせてほとんどがその前振りのGCの話。
スライドはこちら。
Picrinのチューニングの話、もといGCの話 | κeenのHappy Hacκing Blog
TOYOZUMIさんのdocstringの話聞きたかった
飛び入り  ブラウザ上でbiwa schemeの環境(REPLだけでなくオートインデントとか)を作ってる 関連して、websocketでswankと対話できるやつ作ってる 関連して、ブラウザ上で動くLispに似てそうなBlockyというヴィジュアル言語がある なんかの話がありました。  余った時間 chikuさんが前でGCの話してました。んで話が尽きたあたりで私がpicrinの宣伝しました。(picrin control list)の話です。非同期プロミス然りpicrinにはトリッキーな機能が多いですね。
結局ライブコーディングはしませんでしたね。
懇親会 Raspberry Piの話とかちょいとGCの話とかVarnishの話とかaltJSとか。ブログの話題が出たのでOctopress推しといたり。なんでみんなGithub Pages + Octopress使わないん？便利ですやん。
結構色々話してた気がするんですが覚えてないですね。</description>
    </item>
    
    <item>
      <title>#ISUCON 4 予選に学生枠で参加してきました</title>
      <link>//KeenS.github.io/blog/2014/09/30/isucon4-q/</link>
      <pubDate>Tue, 30 Sep 2014 00:51:30 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/09/30/isucon4-q/</guid>
      <description>&lt;p&gt;κeenです。ISUCON 4 予選に学生枠で参加してきたのでレポートです。日曜、2日目の方に参加です。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Picrinのチューニングの話、もといGCの話</title>
      <link>//KeenS.github.io/slide/picrin-gc/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/picrin-gc/</guid>
      <description># Picrinのチューニングの話、もといGCの話 --- Lisp Meet Up presented by Shibuya.lisp #20 2014-09-29 κeen(@blackenedgold) # 自己紹介 --- + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます + [picrin](https://github.com/picrin-scheme/picrin)のコミッタです # picrin --- ![picrin](/images/picrin/picrin-logo-fin01-02.png) # picrin --- * R7RS compatibility * bytecode interpreter (based on stack VM) * internal representation by nan-boxing * conservative call/cc implementation (users can freely interleave native stack with VM stack) * exact GC (simple mark and sweep, partially reference count is used as well) * string representation by rope data structure # picrin --- * R7RS compatibility * bytecode interpreter (based on stack VM) * internal representation by nan-boxing * conservative call/cc implementation (users can freely interleave native stack with VM stack) * exact GC (simple mark and sweep, partially reference count is used as well) * string representation by rope data structure # picrin開発者の不満 --- * picrinの起動が遅い+ 2秒くらいかかる * picrinのテストが遅い+ 16秒くらいかかる # 少しGCの話 --- GC(ごみ集め)とは * 使われていないオブジェクトを自動的に解法する + メモリ管理に煩わせられないで済む + メモリーリークを防ぐ。 * 「使われていないオブジェクト」を判定するのはいくつかアルゴリズムがある # GCのアルゴリズム --- ## 主なGCのアルゴリズム * マーク&amp;amp;スイープ * 参照カウント * Copying GC # GCのアルゴリズム --- ## マーク&amp;amp;スイープ 1.</description>
    </item>
    
    <item>
      <title>低レベルなことがしたい</title>
      <link>//KeenS.github.io/blog/2014/09/18/low-level-languages/</link>
      <pubDate>Thu, 18 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/09/18/low-level-languages/</guid>
      <description>&lt;p&gt;低レベルなことがしたい。もうちょっと具体的に言うと、DBMを書きたい。コンパイラを書きたい。ただ動くだけじゃなくて効率的な実装がしたい。CPUの歓声が聞きたい。そのためにもバイナリを簡単に扱える言語が良い。マシン語が透けて見える言語が良い。いっそインラインアセンブラが欲しい。システムコールがスムーズに出来る(≒ C をスムーズに呼べる)言語が良い。どんな言語が適任か。

因みにコンパイラはLLVMをバックエンドに使う予定。何の言語のコンパイラかは決めてない。SMLのサブセットかmini Camlかその辺？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shibuya.lisp Tech Talk #8を運営&amp;LTしてきました</title>
      <link>//KeenS.github.io/blog/2014/09/16/lisp-tech-talk-8/</link>
      <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/09/16/lisp-tech-talk-8/</guid>
      <description>&lt;p&gt;κeenです。レポートに追われ試験があり合宿に行きで2週間以上空きましたが8/30にShibuya.lisp TT #8の運営をしつつLT枠での参加もしてきたので報告です。何かそこそこ大きなイベントの運営をされる方の参考になれば。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introduction to CIM</title>
      <link>//KeenS.github.io/slide/introduction-to-cim/</link>
      <pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/introduction-to-cim/</guid>
      <description># Introduction to CIM κeen(@blackenedgold) ## 突然ですが Common Lispのスクリプトファイルの実行方法知ってますか？ sbcl sbcl --script $file ecl ecl -shell $file ccl ccl -e $file -e &#39;(quit)&#39; ... シバン可搬性のあるスクリプトが書けない ## そこで、こんなの書きました ```sh case &#34;$LISP_IMPL&#34; in sbcl*) sbcl --script $1 ;; clisp*) clisp -on-error exit -i $1 ;; ecl*) ecl -shell $1 ;; ccl*) ... ``` ## でも問題がある * どの処理系をバックエンドに使うか * 処理系のパスをどう捜すか * そもそもどうやって使ってもらうか ## κeenの答え  処理系の管理までやってしまおう。  そうしたら一緒に使ってもらえる。 ＿人人人人人人＿ ＞　CIMの誕生　＜ ￣Y^Y^Y^Y^Y￣ ## CIMとは * Common Lisp Implementation Manager * ちむ * Rubyのrvmを強く意識 * Common Lisp処理系のインストール、切り替え、コマンドラインインターフェースなど。 * `cim`、 `cl`、 `ql`コマンドから成る * B Shell スクリプト製(マルチプラットフォーム対応のため) * 2013/10くらいからぼちぼち開発 ## `cim`コマンドについて インストール cim install sbcl バックエンドの切り替え cim use sbcl 現在情報 cim info CIMのアップデート cim get など。 ## `cl`コマンドについて * 最初に紹介したシェルスクリプトベース * コマンドラインからCommon Lispを使うことを重視 * シバン対応も。 * REPLは独自実装(デバッガを黙らせるのが主な目的) * オプションはrubyを意識 ## 少しシバンの話 ### だめな例 ```lisp #!</description>
    </item>
    
    <item>
      <title>授業で半年間moclを使ってみた</title>
      <link>//KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8/</link>
      <pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8/</guid>
      <description># 授業で半年間moclを使ってみた Shibuya.lisp TT #8 κeen(@blackenedgold) ## 自己紹介 + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます 一年前 ## [計算数学II](http://ks.ms.u-tokyo.ac.jp/) ![計算数学IIのホームページ](/images/shibuya_lisp_TT8/calculation_math.png) 自分でテーマを決めて半年間取り組む チーム[人造エイリアン](https://sites.google.com/site/2013ks2/home) ![チーム人造エイリアン](/images/shibuya_lisp_TT8/android_alien.png) ## Common Lisp でAndroid? ## [mocl](https://wukix.com/mocl) ![mocl home](/images/shibuya_lisp_TT8/mocl.png) ## What is mocl * iOS, Androidで動くCommon Lisp処理系 * LLVMをバックエンドに使う * Networking, Unicode, CLOS, and More. Run Countless CL Libraries. ## 買ってもらった(・ω・)v ![mocl home](/images/shibuya_lisp_TT8/mocl_ut.png) ## 注意 私が触ったのは1つ前のバージョンです。 一部5月のアップデートで改善されています。 ## How it Works ## コードサンプル 授業で私が作ったオセロのAIのコード ```java public BoardCanvas(Context context,int width, int height,int color ){ .</description>
    </item>
    
    <item>
      <title>Common LispでSIGINTを捉える</title>
      <link>//KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp/</link>
      <pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp/</guid>
      <description>&lt;p&gt;κeenです。もうすぐShibuya.lisp TT #8 ですね。今回はCIMのREPLの改善をしてたらSIGINTを補足しようとして詰まったので共有します。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>isucon夏期講習2014に参加してきた</title>
      <link>//KeenS.github.io/blog/2014/08/21/isucon-summer-2014/</link>
      <pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/08/21/isucon-summer-2014/</guid>
      <description>&lt;p&gt;レポート締切間近のκeenです。ISUCON夏期講習2014に参加してきたのでレポートです。とはいっても去年の夏期講習もISUCONも参加してるので目新しいことはないんですが。主な目的はメンバー集めです。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs便利機能/Tips紹介</title>
      <link>//KeenS.github.io/blog/2014/08/13/emacs-utility-functions/</link>
      <pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/08/13/emacs-utility-functions/</guid>
      <description>&lt;p&gt;κeenです。このブログのアクセスログを見てるとEmacsの記事が好評なようなのでここは一つ私の知ってる便利機能を全列挙してみますね。

どの辺から常識でどの辺からTipsかは私の主観です。だいたいるびきちさんの本に載ってるのは常識扱いです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mirah 0.1.3がリリースされました</title>
      <link>//KeenS.github.io/blog/2014/08/07/mirah-0-dot-1-3/</link>
      <pubDate>Thu, 07 Aug 2014 23:52:15 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/08/07/mirah-0-dot-1-3/</guid>
      <description>&lt;p&gt;本日2回目のκeenです。次はRuby-likeな文法でJavaが書けるMirah言語の0.1.3がリリースたのでこれを期にMirahの紹介をします。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shibuya.XSS TT #5 に参加してきました</title>
      <link>//KeenS.github.io/blog/2014/08/07/shibuya-dot-xss-tt-number-5-nican-jia-sitekimasita/</link>
      <pubDate>Thu, 07 Aug 2014 23:12:34 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/08/07/shibuya-dot-xss-tt-number-5-nican-jia-sitekimasita/</guid>
      <description>&lt;p&gt;強化練中のκeenです。明日も朝早いのでこんな時間にエントリー書いてて寝坊しないか心配です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloud9の紹介とLispのセットアップ</title>
      <link>//KeenS.github.io/blog/2014/08/02/introduction-to-cloud9/</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/08/02/introduction-to-cloud9/</guid>
      <description>&lt;p&gt;κeenです。先日のLisp Meet Upで紹介した&lt;a href=&#34;https://c9.io&#34;&gt;Cloud9&lt;/a&gt;の詳解でも書きます。まあ、そんなに詳しくないんですけどね。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #19でLTしてきました</title>
      <link>//KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19/</link>
      <pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19/</guid>
      <description>&lt;p&gt;κeenです毎月恒例の&lt;a href=&#34;https://atnd.org/events/53246&#34;&gt;Lisp Meet Up presented by Shibuya.lisp&lt;/a&gt;でLTしてきたのでレポートです。

今回は募集20に対して参加登録20、参加18、LT4本と集りの良い会でした。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloud 9の紹介</title>
      <link>//KeenS.github.io/slide/cloud-9/</link>
      <pubDate>Tue, 29 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/cloud-9/</guid>
      <description># Cloud 9の紹介 Lisp Meet Up #19 presented by Shibuya.lisp κeen(@blackenedgold) ## 自己紹介 + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます ## Lispがあまり使われない原因  認知度が低い 開発環境構築の難易度高い  ## Cloud 9について + WEBベースのIDEサービス + 40以上の言語に対応（らしい） + この間正式リリース + 1アカウント毎に1Docker環境与えられる + IDEはオープンソース + よく分かってない ## こんなん ## デモ ## 良いところ + 難易度低い + Lisp環境動く + Githubとの連携 + どこからでも同じ環境にアクセス + キーバインドはうれしい各宗教対応の {Mac, Windows}x{Default, Emacs, Vim, Sublime} ## 微妙なところ + シンタックスハイライト微妙 （せめてキーワード引数はどうにか） + 補完微妙 + インデント微妙 + swank使いたい 以上 何か質問あればどうぞ   </description>
    </item>
    
    <item>
      <title>(S式で書く(altJS)達)</title>
      <link>//KeenS.github.io/slide/sshi-deshu-kualtjs/</link>
      <pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/sshi-deshu-kualtjs/</guid>
      <description># (S式で書く(altJS)達) κeen(@blackenedgold) 天下一altJS武闘会(#tenka1altJS) @渋谷プライムプラザ四階 ## 自己紹介 + κeen + 東大数学科の4年生 + Twit : @blackenedgold + Github : KeenS + Blog : [κeenのHappy Hacκing Blog](http://KeenS.github.io/) + Shibuya.lispにいます。(2014-06〜運営になりました) + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます ## お品書き - (ボツ) Shen.js - (ボツ) Embedable Common Lisp with Emscripten - (ボツ) Picrin with Emscripten - (ボツ) オレオレaltJSの作り方の話 - ParenScript ## Shen.js Shenの公式ページより + パターンマッチ + λ計算ベース + マクロ + 遅延評価も可能 + 静的型検査 + 関数的なPrologの統合 + ビルトインコンパイラコンパイラ これのJS実装もある。 ## 例 ```lisp (define factorial 0 - 1 X - (* X (factorial (- X 1)))) ``` そもそもaltJSじゃない… ボツ ## ECL with Emscripten + ANSI Common Lisp準拠のCommon Lisp処理系 + LispをコンパイルしてCを吐く + Emscriptenでコンパイルすれば… `#include ` が悪さをしてコンパイル出来ない ボツ ## picrin + R7RS small準拠を目指すScheme処理系 + R7RS準拠の中では唯一Emscriptenで コンパイル出来るらしい + SDLもEmscriptenで動くらしいから 組み合わせればウハウハじゃね？ コンパイル出来ない… ( `va_args` は64bit x Clang3.</description>
    </item>
    
    <item>
      <title>近況</title>
      <link>//KeenS.github.io/blog/2014/07/13/jin-kuang/</link>
      <pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/07/13/jin-kuang/</guid>
      <description>&lt;p&gt;κeenです。書く書くいってた近況です。思ったよりあります。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>言葉遣いの時代変遷を追う</title>
      <link>//KeenS.github.io/slide/nlp/</link>
      <pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/nlp/</guid>
      <description># 言葉遣いの時代変遷を追う 理学部数学科4年 金 舜琳 （きん すんりん） ## 概要 古いものから新しいものまであるリソースから単語を抽出し、使用頻度から単語の時代変遷を追う ## 手法 ## step1 青空か新聞から単語抽出抽出を行なう * 名詞、形容詞、語尾などが候補 * 青空は多様性がある/話し言葉もとれるが古いのしかない？ * 新聞は均質だからサンプル調査に向いてる？ ## step2  年代別に使用頻度上位数十〜百ぐらいを使用頻度順まとめてみる ## step3  似たような意味の単語で順位の入れ替わりが見受けられたら詳細に追ってみる とりあえず手動を考えている。発展課題的にプログラムでやっても良いかもしれない ##step4  変遷の背景を考えてみる 戦前/戦後とか分りやすいものとかなんとか   </description>
    </item>
    
    <item>
      <title>パーティションテーブルとか色々吹っ飛ばした話</title>
      <link>//KeenS.github.io/blog/2014/06/12/partision-table/</link>
      <pubDate>Thu, 12 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/06/12/partision-table/</guid>
      <description>&lt;p&gt;ご不沙汰しております、κeenです。先日（と言ってもしばらく前）、安いHDDを買ってきてFreeBSDでも入れて遊ぼうかとしていました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #16 でLTしてきました。</title>
      <link>//KeenS.github.io/blog/2014/04/25/lisp-meet-up-number-16/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/04/25/lisp-meet-up-number-16/</guid>
      <description>&lt;p&gt;κeenです。年度末/年度始めで色々あり、しばらく更新できてませんでしたが &lt;a href=&#34;http://atnd.org/events/49370&#34;&gt;Lisp Meet Up Presented by Shibuya.lisp #16&lt;/a&gt;に参加してきたのでレポートです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #14でLTしてきました</title>
      <link>//KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14/</link>
      <pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14/</guid>
      <description>&lt;p&gt;どうも、κeenです。Rubyをアップグレードしようとしたら&lt;code&gt;rvm&lt;/code&gt;が動かなくて、あれ？ってなったら私が&lt;code&gt;echo -&amp;gt; echo&lt;/code&gt;とかいう謎のsymlinkを作ってたせいでした。このブログはOctopressで作ってるのでその間更新遅れました。&lt;/p&gt;

&lt;p&gt;さて、毎月恒例 &lt;a href=&#34;http://atnd.org/events/47730&#34;&gt;Lisp Meet Up Presented by Shibuya.lisp #14&lt;/a&gt;でLTしてきたので報告です。今回は「Real World OCamlを読んだ感想」というタイトルです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MathJaxを使って数式を埋め込む</title>
      <link>//KeenS.github.io/blog/2014/02/21/mathjax/</link>
      <pubDate>Fri, 21 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/02/21/mathjax/</guid>
      <description>&lt;p&gt;小ネタです。ブログに数式を埋め込むときの話。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shell Scriptでオプションをパースするときの必勝法</title>
      <link>//KeenS.github.io/blog/2014/02/19/option-parse-for-shell/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/02/19/option-parse-for-shell/</guid>
      <description>&lt;p&gt;κeenです。CIMの解説 実装編の執筆はもうちょい掛かりそうです。だいたいコードが落ち着いたら書きます。&lt;/p&gt;

&lt;p&gt;今回は長いオプションと短いオプションをシェルスクリプトでパースするときの話です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FreeBSDのmanページを手動インストールする</title>
      <link>//KeenS.github.io/blog/2014/02/01/freebsd-manpage/</link>
      <pubDate>Sat, 01 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/02/01/freebsd-manpage/</guid>
      <description>&lt;p&gt;FreeBSD10をインストールするときにdocをインストールしなかったら後で困ったのでメモ。環境はUbuntu13.10上のkvmに入れたFreeBSD10です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CIMの解説をしてみる コマンド編</title>
      <link>//KeenS.github.io/blog/2014/01/27/cim-explanation/</link>
      <pubDate>Mon, 27 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/01/27/cim-explanation/</guid>
      <description>&lt;p&gt;先日LTで紹介したCIMが思いの外反響を呼んでる(Githubのstarが15)ので解説でもしてみます。&lt;/p&gt;

&lt;p&gt;コマンド編の次は実装編です。これでバグにエンカウントしたときの調査とか完璧ですね。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #13でLTしてきました</title>
      <link>//KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13/</link>
      <pubDate>Fri, 24 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13/</guid>
      <description>&lt;p&gt;もう12時回ったので昨日になってしまいましたが &lt;a href=&#34;http://atnd.org/events/46746#comments&#34;&gt;Lisp Meet Up presented by Shibya.lisp #13&lt;/a&gt;に参加してLTしてきたので報告(?)エントリです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mpd 小ネタ</title>
      <link>//KeenS.github.io/blog/2014/01/21/mpd-something/</link>
      <pubDate>Tue, 21 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/01/21/mpd-something/</guid>
      <description>&lt;p&gt;mpdのちょっとした便利な使い方。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RSPiでMongoDBを動かし、Twitter Post Alertを作った話</title>
      <link>//KeenS.github.io/blog/2014/01/19/rspi-plus-mongodb-plus-twitter/</link>
      <pubDate>Sun, 19 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/01/19/rspi-plus-mongodb-plus-twitter/</guid>
      <description>&lt;p&gt;κeenです。ここのところ寒い日が続いてますね。寒いと家に扃(ひきこも)ってTweet数が急上昇します。 すると一日に何postしてるか気になるのでカウンタを作りました。&lt;br /&gt;
そのときの苦労話です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>.emacsの整理をした話 &#43; EmacsとViとShellとLispを悪魔合体させたら超絶便利だった</title>
      <link>//KeenS.github.io/blog/2013/12/13/dot-emacs-clean-up/</link>
      <pubDate>Fri, 13 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/12/13/dot-emacs-clean-up/</guid>
      <description>&lt;p&gt;やや長いタイトルですが・・・年末になって大掃除がやってきましたね。みなさんもそろそろ.emacsの大掃除をしましょう。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClackのHandlerの書き方</title>
      <link>//KeenS.github.io/blog/2013/12/06/lisp-advent-calendar-7/</link>
      <pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/12/06/lisp-advent-calendar-7/</guid>
      <description>&lt;p&gt;(この記事は &lt;a href=&#34;http://qiita.com/advent-calendar/2013/lisp&#34;&gt;Lisp Advent Calendar&lt;/a&gt; 7日目のためのエントリです。&lt;br /&gt;
 ( &lt;a href=&#34;http://meymao.hatenablog.com/entry/2013/12/06/140029&#34;&gt;6日目&lt;/a&gt; meymaoさんより「Lisperがクリスマスに贈るべきプレゼント三選」)&lt;br /&gt;
 ( &lt;a href=&#34;http://www.principia-m.com/ts/0081/index-jp.html&#34;&gt;8日目&lt;/a&gt; athos0220さんよりマクロとクロージャで作る並行プログラミング言語))&lt;/p&gt;

&lt;p&gt;ClackのHandlerの書き方についてちゃちゃっと解説します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UbuntuでEmacsからGPGを透過的に扱う</title>
      <link>//KeenS.github.io/blog/2013/12/04/emacs-gpg/</link>
      <pubDate>Wed, 04 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/12/04/emacs-gpg/</guid>
      <description>&lt;p&gt;暗号化といえばGPGですがEmacsからGPGで暗号化されたファイルを編集しようとすると毎回パスワードを訊かれて鬱陶しいです。これはキーリングを登録することで解決できました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rsync小ネタ</title>
      <link>//KeenS.github.io/blog/2013/11/30/something-about-rsync/</link>
      <pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/11/30/something-about-rsync/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;//KeenS.github.io/blog/2013/11/13/what-recent/&#34;&gt;mpdを導入したとき&lt;/a&gt;にrsyncでパーミッションの問題が発生したと言ってましたが解決策がありました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #11でLTしてきました</title>
      <link>//KeenS.github.io/blog/2013/11/29/lispmeetup-11/</link>
      <pubDate>Fri, 29 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/11/29/lispmeetup-11/</guid>
      <description>&lt;p&gt;「Makefile書けない人がMake 4.0触ってみた」での発表です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ここ１ヶ月くらいの近況</title>
      <link>//KeenS.github.io/blog/2013/11/13/what-recent/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/11/13/what-recent/</guid>
      <description>&lt;p&gt;#isucon 参戦記がフォロワーの多い@tagomorisさんとか@nitro_idiotさんとかにツイートされて普段の数十倍のアクセスが来てテンション上がったので近況書きますね。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>チーム「銀杏絶滅しろ」でisucon学生賞もらってきました</title>
      <link>//KeenS.github.io/blog/2013/11/11/isucon-final-stage/</link>
      <pubDate>Mon, 11 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/11/11/isucon-final-stage/</guid>
      <description>&lt;p&gt;しばらく間が空きました。まあ、その間のことはいつかまとめて書きます。今回は &lt;a href=&#34;http://isucon.net/&#34;&gt;isucon#3&lt;/a&gt;について。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//KeenS.github.io/blog/2013/10/09/isucon-qualifying-event/&#34;&gt;先日&lt;/a&gt;、isucon#3の予選を突破したと書きましたが、日曜にその決勝戦があったので報告です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ISUCON#3予選に参加しました</title>
      <link>//KeenS.github.io/blog/2013/10/09/isucon-qualifying-event/</link>
      <pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/10/09/isucon-qualifying-event/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://isucon.net/&#34;&gt;ISUCON&lt;/a&gt;#3の予選に参加してきた話です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tiarraにercで接続したときの/loadの問題</title>
      <link>//KeenS.github.io/blog/2013/10/06/tiarra-erc/</link>
      <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/10/06/tiarra-erc/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.clovery.jp/tiarra/&#34;&gt;tiarra&lt;/a&gt;に &lt;a href=&#34;http://www.emacswiki.org/ERC&#34;&gt;erc&lt;/a&gt;で接続したときの/loadの問題。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacsのdired-modeを使い易くする</title>
      <link>//KeenS.github.io/blog/2013/10/04/emacs-dired/</link>
      <pubDate>Fri, 04 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/10/04/emacs-dired/</guid>
      <description>&lt;p&gt;Emacsの標準ライブラリ&lt;code&gt;dired.el&lt;/code&gt;を読んでたら色々発見があったのでメモ兼dired-modeとはなんじゃらほいって方にも一から解説してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MPlayerがうまく動かない</title>
      <link>//KeenS.github.io/blog/2013/09/29/mplayer/</link>
      <pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/29/mplayer/</guid>
      <description>&lt;p&gt;MPlayerを使ってBGMを流すコマンドを作ろうとしたときに困ったことがいくつかあったので誰か解決して下さい。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Octopressのgistプラグインが動かなかったので修正した</title>
      <link>//KeenS.github.io/blog/2013/09/26/patch-to-gist-plugin/</link>
      <pubDate>Thu, 26 Sep 2013 22:57:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/26/patch-to-gist-plugin/</guid>
      <description>&lt;p&gt;どうもGithubのgistのURLが変わってる(?)っぽくてOctopressのgistプラグインが動いてくれなかったので修正しました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shellyを使ってCommon LispファイルをExecutableにする</title>
      <link>//KeenS.github.io/blog/2013/09/26/shelly-script/</link>
      <pubDate>Thu, 26 Sep 2013 21:25:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/26/shelly-script/</guid>
      <description>&lt;p&gt;コマンドラインからCommon Lispの関数を実行できる &lt;a href=&#34;https://github.com/fukamachi/shelly&#34;&gt;Shelly&lt;/a&gt;を使ってCommon Lispファイルを実行形式にしてみました。Shellyは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ shly + 1 2
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいに関数を実行できます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Common Lispスタイルガイド</title>
      <link>//KeenS.github.io/blog/2013/09/21/google-commonlisp-style-guide/</link>
      <pubDate>Sat, 21 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/21/google-commonlisp-style-guide/</guid>
      <description>&lt;p&gt;この度、 &lt;a href=&#34;http://google-styleguide.googlecode.com/svn/trunk/lispguide.xml&#34;&gt;Google Common Lispスタイルガイド&lt;/a&gt;が &lt;a href=&#34;http://google-common-lisp-style-guide-ja.cddddr.org/&#34;&gt;日本語に&lt;/a&gt;なりました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gitあれこれ</title>
      <link>//KeenS.github.io/blog/2013/09/18/some-git-matters/</link>
      <pubDate>Wed, 18 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/18/some-git-matters/</guid>
      <description>&lt;p&gt;githubで共同作業してたらいろいろ困ったことがあったのでそのときのメモ。はじめてやって困ったことなので経験ある人には常識なのかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>octomacs.elを修正しました</title>
      <link>//KeenS.github.io/blog/2013/09/16/octomacs-el/</link>
      <pubDate>Mon, 16 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/16/octomacs-el/</guid>
      <description>&lt;p&gt;EmacsからOctopressに投稿できるOctomacs.elが最新版のrvm.elに対応してないようだったので修正してみました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qiitaのユーザーヒアリングを受けてきました。</title>
      <link>//KeenS.github.io/blog/2013/09/13/met-qiita-engineer/</link>
      <pubDate>Fri, 13 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/13/met-qiita-engineer/</guid>
      <description>&lt;p&gt;今日の夕方、Qiitaのユーザーヒアリングを受けたのでその報告です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FreeBSD10でちょっとこけた</title>
      <link>//KeenS.github.io/blog/2013/09/12/error-on-svn/</link>
      <pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/12/error-on-svn/</guid>
      <description>&lt;p&gt;FreeBSD10をインストールしてたときにちょっとつまったところがあったのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>COOKPADのアイコン</title>
      <link>//KeenS.github.io/blog/2013/09/07/cookpad/</link>
      <pubDate>Sat, 07 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/07/cookpad/</guid>
      <description>&lt;p&gt;クックパッドにレシピ初投稿の記念として左上のソーシャルアイコンにクックパッドを追加しました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redmineのインストール</title>
      <link>//KeenS.github.io/blog/2013/09/05/install-redmine/</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/05/install-redmine/</guid>
      <description>&lt;p&gt;私はバイトではプロジェクト管理に &lt;a href=&#34;http://backlog.jp&#34;&gt;Backlog&lt;/a&gt;のサービスを利用してますが、同様のOSSに &lt;a href=&#34;http://redmine.jp&#34;&gt;Redmine&lt;/a&gt;なるものがあると聞いて動かしてみたときのメモ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PDFユーティリティ</title>
      <link>//KeenS.github.io/blog/2013/09/03/pdftk/</link>
      <pubDate>Tue, 03 Sep 2013 23:34:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/03/pdftk/</guid>
      <description>&lt;p&gt;小ネタ。コマンドラインからPDFを編集した話の備忘録。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rails Tutorial</title>
      <link>//KeenS.github.io/blog/2013/09/03/rails-tutorial/</link>
      <pubDate>Tue, 03 Sep 2013 22:15:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/03/rails-tutorial/</guid>
      <description>&lt;p&gt;夜中にコーヒー飲むと眠れなくなりますね。昨晩もコーヒー飲んだら朝まで眠れず、寝たのが朝8時半、起きたのが16時でした。明日提出のレポート終ってないのに…&lt;/p&gt;

&lt;p&gt;さて、かなり良いRuby on Railsのチュートリアルを見付けたので紹介します。&lt;br /&gt;
 &lt;a href=&#34;http://railstutorial.jp&#34;&gt;Ruby on Rails チュートリアル：実例を使ってRailsを学ぼう&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Githubの変更を追う</title>
      <link>//KeenS.github.io/blog/2013/09/02/rss-of-github/</link>
      <pubDate>Mon, 02 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/02/rss-of-github/</guid>
      <description>&lt;p&gt;こんばんは。κeenです。普段、Github上で最新のソースを追ってるプロジェクトはこまめにgit pullすることで更新を確認してたのですが、別の方法があることに気づきました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ブログ開設しました</title>
      <link>//KeenS.github.io/blog/2013/09/01/first-post/</link>
      <pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/01/first-post/</guid>
      <description>&lt;p&gt;はじめまして。κeenです。今までLispでblogエンジンを作ってblogを開設したいと思いつつも時間がなかったりWifiアダプタ失くしたりして結局あきらめ、github+octopressでblog作ることにしました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>