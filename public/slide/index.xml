<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Slides on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/slide/</link>
    <description>Recent content in Slides on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 16 Sep 2018 01:26:15 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/slide/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Inside Pattern Machings</title>
      <link>//KeenS.github.io/slide/inside_pattern_machings/</link>
      <pubDate>Sun, 16 Sep 2018 01:26:15 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/inside_pattern_machings/</guid>
      <description># Inside Pattern Machings ---------------------- === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [ちゅーんさんだよー](https://shindanmaker.com/789932) * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます ===  ( ^o^)パターンマッチって便利だなー ( ˘⊖˘) 。o(待てよ？なんでこんなに簡単にコードが書けるんだ) |コンパイラ|┗(☋｀ )┓三 ( ◠‿◠ )☛そこに気づいたか・・・消えてもらう ▂▅▇█▓▒░(’ω’)░▒▓█▇▅▂うわああああああ  === # 発表について ------------- * 元ネタ [Optimizing Pattern Matching](http://pauillac.inria.fr/~maranget/papers/opat/) (Fabrice Le Fessant, Luc Maranget) * 自作SMLコンパイラにパターンマッチを入れようとしたら難しかった + 「コードを生成」が割と厄介 + 次の中間言語の設計に影響を与える - というか専用の中間言語作るくらいの心意気が必要 * 既存手法を調べたら非自明だった + → 既存手法の紹介だけでも価値がありそう + → 発表するか + (本当は実装までしたかったけど進捗だめです) * 変数束縛の話はしない === # パターンについて ------------------ * パターンは値の集合にマッチする * ワイルドカードパターンがある * 直積にマッチするときは _横_ に伸びる * 直和にマッチするときは _縦_ に伸びる * パターンをネストするときは _奥_ に伸びる * パターンが _網羅的_ であるかに関心がある * 複数マッチする場合は最初のものにマッチする === # 例 ---- ``` standard-ml case (lx, ly) of ([], _) = 1 | (_, []) = 2 | (x::xs, y::ys) = 3 ``` === # パターンマッチの実装 --------------------- * いくつか方法がある + 素朴なifのチェーン + decision tree + backtracking automata * それぞれメリットデメリットがある === # ifのチェーン ------------- ``` C if (lx == [] &amp;&amp; true) { return 1; } else if (true &amp;&amp; ly == []) { return 2; } else if (lx == [] &amp;&amp; ly == []) { // discriminantとデータは別 x = lx.</description>
    </item>
    
    <item>
      <title>Rustのこれまでとこれから</title>
      <link>//KeenS.github.io/slide/rustnokoremadetokorekara/</link>
      <pubDate>Sat, 25 Aug 2018 16:09:33 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rustnokoremadetokorekara/</guid>
      <description># Rustこれまでとこれから---------------------- [Learn Languages 2018 in ODC (LL2018) ](https://llevent.connpass.com/event/95443/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [ちゅーんさんだよー](https://shindanmaker.com/789932) * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア + Rustで開発してるよ * Lisp, ML, Rust, Shell Scriptあたりを書きます === # 今日話すこと ------------- * X Rustの勉強法 * X Rust言語の紹介 * O Rustの歩み * O Rustの開発体制 === # Rustとは ---------- * システムプログラミング言語 * 安定性、信頼性が売り * 2015年に[1.0リリース](https://blog.rust-lang.org/2015/05/15/Rust-1.0.html) + ~~いつまで20年ものの言語使ってるの~~ * 大体の便利な言語機能を取り入れてる * 所有権システムにより **GCがない** * コンパイラが `free` を自動挿入 === ```rust // ジェネリクス+トレイト境界 // move セマンティクス fn dup(t: T) - (T, T) { // タプルあるよ (t.</description>
    </item>
    
    <item>
      <title>Rustと3種のDSL</title>
      <link>//KeenS.github.io/slide/rustto3tanenodsl/</link>
      <pubDate>Sun, 01 Jul 2018 21:58:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rustto3tanenodsl/</guid>
      <description># Rustと3種のDSL ---------------------- [Running Rust in Production](https://d-cube.connpass.com/event/90317/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # DSLとは  Lispでは，プログラムをただプログラミング言語に従って書くことはしない． プログラミング言語を自分の書くプログラムに向けて構築するのだ  -- Paul Graham (On Lispより) === # DSLとは ---------- * ドメイン特化言語 * 自分の解きたい問題に合わせてミニ言語を作る + 関心に集中 + 言語を設計することでドメインへの考察が深まる * 2種類ある + 内部DSL: ホスト言語の式でそれっぽく作る + 外部DSL: 外部化してパーサから作る * まずは内部DSLを検討しよう === # DSLの使いどころ ---------------- * だいたい以下の条件 + 素直に書くと記述が多い + 細かなバリエーションがあって関数一つにはまとめられない + → スイートスポットがDSL * 典型的にはビジネスロジックとか === # Actcast --------- * Idein社で開発中のサービス * IoTデバイスを管理する + 人、管理グループ、デバイス、アプリケーションなどエンティティが多め * APIはOpen API(旧Swagger)を使う * まだ開発中 + 一緒に開発してくれる人募集してます!</description>
    </item>
    
    <item>
      <title>nom勘所</title>
      <link>//KeenS.github.io/slide/nomkandokoro/</link>
      <pubDate>Tue, 26 Jun 2018 16:02:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/nomkandokoro/</guid>
      <description># nom勘所 ---------------------- [Rust LT](https://rust.connpass.com/event/88656/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # nom ----- * [GitHub](https://github.com/Geal/nom) * マクロベースのパーサコンビネータ * ゼロコピー、速い、バイト指向 === # nomの使い方 ------------ * [ドキュメント](https://docs.rs/nom/4.0.0/nom/)に大量にパーツがあるので分かりづらい * 基本的なパーツは以下 + `named!` - パーサを定義 + `do_parse!` - 連接 + `alt(_complete)!` - 選択 + `tag!` - トークン + `map!` - 型変換 * 1データ型1パーサくらいの感覚 * あとは必要に応じて覚える + 似たような実装を探して真似る === # 例: 四則演算 ------------- まずは列挙型を定義 ```rust #[derive(Debug, Clone, PartialEq)] enum Expr { BinOp(BinOp), Number(Number), } ``` === # 例: 四則演算 ------------- 対応するパーサを`alt!</description>
    </item>
    
    <item>
      <title>GCと1bit</title>
      <link>//KeenS.github.io/slide/gcto1bit/</link>
      <pubDate>Sun, 24 Jun 2018 15:11:23 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/gcto1bit/</guid>
      <description># GCと1bit ---------------------- [TCFMミートアップ](https://techplay.jp/event/680870) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます * 言語処理系が好き === # GCと(メタ)情報 -------------- * レジスタ/スタック上の値のpointer or not * Mark and Sweepのマーク * ヒープ上オブジェクトの「どこにポインタがいるか」 これらを節約する話 === # レジスタ中のポインタ ------------- * レジスタ上の値がポインタか数値か + GCのrootsetなので判断が必要 + 1bitの情報量が必要 * 多くはLSBをタグに使う + ポインタは0 + 4バイトアラインメントされてると自然にそうなる + 数値は1にする - 数値が31bit/63bitになる - タグを外して計算して戻すので遅い * bit stealしない方法は？ === ## レジスタ分別 --------------- * レジスタを半分に分ける + 片方はポインタ用 + もう片方は値用 * 物理的に1bit取らなくても1bitの情報量が確保できる * ただしレジスタが多いアーキじゃないと死ぬ === # Mark Bit ---------- * マーク済みかどうかのメタデータ + 1bitの情報量 * 素朴にはセルのメタデータに1byte確保 ``` +---+-------+---+-------+-- | 0 | .</description>
    </item>
    
    <item>
      <title>オブジェクト指向言語と関数型言語</title>
      <link>//KeenS.github.io/slide/obujiekutoshikougengotokansuugatagengo/</link>
      <pubDate>Wed, 14 Mar 2018 22:22:40 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/obujiekutoshikougengotokansuugatagengo/</guid>
      <description># はじめに ---------- * 椅子のキーストラップは是非お持ち帰り下さい * 主にプログラミング言語を1つ覚えたくらいの人を対象にしています * トークで40分全部使い切る予定なので質問はこのあとの職員室でお願いします * たまに細かい話が出てきますがスルーして下さい + 主に重箱の角をつつく人への対策です ===  オブジェクト指向言語 と 関数型言語  ---------------- [MANABIYA](https://manabiya.tech/) 2日目5時間目@ギャラリーB [#manabiya](https://twitter.com/search?src=typd&amp;q=%23manabiya&amp;lang=ja) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * 言語処理系を作るのが好き * 仕事での経験: Java, Scala, Rust * 趣味: C, Common Lisp, Standard ML, Rust === # 話すこと -------- * オブジェクト指向/関数型&#34;プログラミング&#34;とはパラダイムのことだよ * オブジェクト指向/関数型&#34;言語&#34;とはそのパラダイムを支援する言語のことだよ * 言語とパラダイムの区別を明確に！ === # 理想のソフトウェア ------------------- * 変更に強いソフトウェア * バグの少ないソフトウェア * 凝集度を高めて結合度を低めたい + 似たようなものは同じところに + 互いの依存関係を減らす * 理想のソフトウェアを作るには？ === # パラダイム ----------- * [Wikipedia](https://ja.</description>
    </item>
    
    <item>
      <title>Rust &amp; Swagger</title>
      <link>//KeenS.github.io/slide/rust___swagger/</link>
      <pubDate>Mon, 18 Dec 2017 19:35:19 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rust___swagger/</guid>
      <description># Rust &amp; Swagger ---------------------- [【増席】RustのLT会！ Rust入門者の集い #4 ](https://rust.connpass.com/event/72649/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # Swagger ---------- * [The World&#39;s Most Popular API Tooling](https://swagger.io/) * JSON APIの定義からドキュメントとコードを生成 === # rust-server ------------- * 最近Rustのサポートが[入った](https://github.com/swagger-api/swagger-codegen/pull/6613) * 軽くデモ + [petstore](http://petstore.swagger.io/) * [issue](https://github.com/swagger-api/swagger-codegen/issues)なげよう   </description>
    </item>
    
    <item>
      <title>1ML - コア言語とモジュール言語の統合</title>
      <link>//KeenS.github.io/slide/1ml___koagengotomoju_rugengonotougou/</link>
      <pubDate>Sun, 24 Sep 2017 23:23:57 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/1ml___koagengotomoju_rugengonotougou/</guid>
      <description># 1ML - コア言語とモジュール言語の統合 ---------------------- [型システム論文読書会 Vol.1 - connpass](https://connpass.com/event/63454/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます * 型システム初心者です * 論文初心者です === # MLのモジュールについておさらい === # モジュール、シグネチャ ---- * ストラクチャは型、関数、値をまとめたもの + なんかレコードっぽい * シグネチャはその型 * モジュールはシグネチャを充足すればよい（余計なフィールドがあってもよい） + もちろん余計なフィールドは隠蔽される === ``` sml signature S = sig type t val f: t - t val zero: t end structure M: S = struct type t = int fun f x = x val zero = 0 fun g x = x end ``` === # ファンクタ ----------- * ストラクチャを引数にとってストラクチャを返す + なんか関数っぽい * 受け取ったモジュールに依存して型が変わったりする === ``` sml functor F(X: sig type &#39;a t end): sig type &#39;a t val id: &#39;a t - &#39;a t end = struct open X fun id x = x end ``` === # `include` ----------- * なんかシグネチャをincludeできちゃう * ストラクトもopenできちゃう === ``` sml signature T = sig include S val g: t - t end structure N : T = struct open M fun g x = x end ``` === # オペーク ---------- * シグネチャの型をトランスパレントにするかオペークにするか選べる * `M: S` vs `M : S` * オペークなストラクチャの型は存在型になる * `:` をsealing operatorというらしい * transparent(透明)とopaque(不透明)があるのでtranslucent(半透明)と呼ぶひともいるとかいないとか === ``` sml structure M: S = struct .</description>
    </item>
    
    <item>
      <title>最近のSML#の話題</title>
      <link>//KeenS.github.io/slide/saikinnosml_nowadai/</link>
      <pubDate>Mon, 17 Jul 2017 21:04:57 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/saikinnosml_nowadai/</guid>
      <description># 最近のSML#の話題 ---------------------- [ML勉強会 #2 - connpass](https://ml-lang.connpass.com/event/58151/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # 話すこと ------ * SML# 3.0。0以降立て続けにリリースが続いてる * 最近の変更を追いきれないのでまとめて追う ver. | date ------|----- 3.3.0 | 2017-06-20 3.2.0 | 2016-09-16 3.1.1 | 2016-07-15 3.1.0 | 2016-05-26 3.0.1 | 2016-04-04 3.0.0 | 2016-03-31 2.0.0 | 2014-04-04 1.2.0 | 2012-11-14 === # そもそもSML#って？ ------------------- * SML &#39;97 互換のコンパイラ + [The Definition of Standard ML, Revised](http://sml-family.</description>
    </item>
    
    <item>
      <title>ジェネリクス ディスパッチ 表裏</title>
      <link>//KeenS.github.io/slide/jienerikusu_disupatchi_omoteura/</link>
      <pubDate>Sat, 17 Jun 2017 22:25:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/jienerikusu_disupatchi_omoteura/</guid>
      <description># ジェネリクス ディスパッチ 表裏 ---------------------- [ジェネリクス勉強会 - connpass](https://connpass.com/event/56773/?utm_campaign=event_participate_to_owner&amp;utm_source=notifications&amp;utm_medium=email&amp;utm_content=title_link) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # はじめに ----------- * 例にはJavaとRustを使います + それ以外にあまり詳しくない + たまにScalaが出てくるかも * 主に裏側で何が起きてるかに焦点を当てます * 一般的な手法の比較と言語固有実装の比較がやや混じります + 実例重視 * 言語や機能を選ぶときの知識が増えればよし === # ジェネリクス -------------- * 型でパラメータ化された何か * パラメータ化する方法にいくつか方式が + 任意の型に対応する実装にする - Java + 使う型毎に実体をつくる - 型が引数になるイメージ - Rust * 便宜上前者をポインタ方式、後者をテンプレート方式と呼ぶ === # 関数ジェネリクス ----------------- * Javaコード ``` java public class Generics { public static void main(String[] args) { Generics g = new Generics(); System.</description>
    </item>
    
    <item>
      <title>ソフトウェアエンジニアがFPGAやってみる</title>
      <link>//KeenS.github.io/slide/sofutoueaenjiniagafpgayattemiru/</link>
      <pubDate>Tue, 28 Mar 2017 09:21:33 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/sofutoueaenjiniagafpgayattemiru/</guid>
      <description># ソフトウェアエンジニアがPYNQでFPGAやってみる ---------------------- === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # よくある話 ------------ 「Lisperって自分のLispを作るらしいよ」  「Lispって昔は専用ハードウェアで動いてたらしいよ」  「じゃあハードウェア作んなきゃ」  「FPGAやるかー」  === # FPGAって？ ------------ * Field-Programmable Gate Array * プログラマブルな集積回路 + オレオレ設計のCPU作ったり + HDMI入力を直でmpg4にエンコードするデバイスとかも * クロックはASIC(ふつうのCPU)より大分遅い * でも上手く嵌れば100倍高速化とか === # PYNQって？ ------------ * [PYNQ-Z1 Python Productivity for Zynq - Digilent](http://store.digilentinc.com/pynq-z1-python-productivity-for-zynq/) * xilinxのFPGAとARMのチップが載ったSoC * ARMで動いてるPython(Jupyter)からFPGAにロジック焼ける + 手軽にロジックを試せる * FPGAとの通信はMMIO + 特定のアドレスのメモリにデータを書くとFPGAに送られる + メモリのデータを読むとFPGAからデータが送られる === 会社にPYNQがきたよ！！azure倒したら遊ぶ！！！！ pic.</description>
    </item>
    
    <item>
      <title>Rust in Production</title>
      <link>//KeenS.github.io/slide/rust_in_production/</link>
      <pubDate>Wed, 22 Mar 2017 19:57:28 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rust_in_production/</guid>
      <description># Rust in Production ---------------------- [Rust プログラマーミートアップ / Rust programmers&#39; meetup - connpass](https://rust.connpass.com/event/49304/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * 若者 * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # Rust採用までの流れ -------------------- Ω＜「κeen君継続的ベンチマークサーバ作って」Ω＜「GitHubにpushする度ベンチマーク走る感じで」Ω＜「GPUとRaspberry Piでベンチマークするから」Ω＜「全部任せるね」⸜( ¯⌓¯ )⸝「Rustで書くか」やったこととか知見とかトピック毎にかいつまんで話します === # Rustのメリット --------------- * κeenが馴れてる * 社員の半分くらい書ける * Linux, Mac, Raspberry Piで動く * テスト書かなくてもそんなにバグらなそう * 将来のために小さいところでノウハウ溜めていきたい * シングルバイナリで楽に動きそう * **単純に使いたかった** * ※今回は速度や安全性は必要ない === # コンポーネント --------------- * CLIクライアント + 各自の手元やCIサーバから起動 * アグリゲータ + ワーカに仕事を投げ、結果を受け取る + ジョブ管理 * ワーカ + GPUマシンやRSPiなどでベンチマーク + 結果をアグリゲータに返す * ブラウザ + ベンチマーク結果の閲覧 === # プロジェクト構成 ------------------- * [ワークスペース](http://doc.</description>
    </item>
    
    <item>
      <title>仕事でdiesel使ってみた</title>
      <link>//KeenS.github.io/slide/shigotodedieseltsukattemita/</link>
      <pubDate>Wed, 01 Mar 2017 10:57:38 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/shigotodedieseltsukattemita/</guid>
      <description># 仕事でdiesel使ってみた ---------------------- [RustのLT会！ Rust入門者の集い #2 - connpass](https://rust.connpass.com/event/48826/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # [diesel.rs](diesel.rs) ![dieselのwebページ](/images/diesel/diesel-web.png) === # diesel --------- * RustのORM * スキーマからコード自動生成 * diesel_codegen * クエリビルダ * マイグレーション管理 * PostgreSQL, MySQL, SQLiteサポート === # 準備 ------- * [docker-composeでmysql &amp; postgreSQL をサクッと起動 - Qiita](http://qiita.com/astrsk_hori/items/1e683a7a2f2b7189cb6e) ``` cargo install diesel_cli echo DATABASE_URL=postgres://username:password@localhost/hoge  .</description>
    </item>
    
    <item>
      <title>WebAssemblyとコンパイラとランタイム</title>
      <link>//KeenS.github.io/slide/webassemblytokonpairatorantaimu/</link>
      <pubDate>Thu, 16 Feb 2017 15:46:21 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/webassemblytokonpairatorantaimu/</guid>
      <description># WebAssemblyとコンパイラとランタイム ---------------------- [emscripten night !! #3 - connpass](https://emsn.connpass.com/event/48100/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # 何の話 --------- * WebAssemblyをバックエンドに使う言語を作りたい * [KeenS/webml: An ML like toy language compiler](https://github.com/KeenS/webml) * 既に発表したものの補足記事的な + [コンパイラの人からみたWebAssembly | κeenのHappy Hacκing Blog](https://keens.github.io/slide/konpairanoninkaramitaWebAssembly/) + ある程度再度説明します === # アジェンダ ------------ * なぜWebAssembly * コンパイラ * コード生成 * ランタイム === # なぜWebAssembly === # なぜWebAssembly ---------------- * なんかバイナリでテンション上がる * ポータブルでコンパクトで速い * 機能的にJSを越えるかもしれない…？ * コンパイラがブラウザで動くと言語導入のハードル下がる + 気軽に試せる + コンパイラだけでなく吐いたコードもブラウザで動かしたい === # WASM over LLVM ---------------- * 既存のJS環境と協調する + JSとの相互呼び出しとか * **non-determinismが少ない** * 細かいアラインメント考える必要がない * **API安定しそう** === # WASM over asm.</description>
    </item>
    
    <item>
      <title>コンパイラの人からみたWebAssembly</title>
      <link>//KeenS.github.io/slide/konpairanoninkaramitawebassembly/</link>
      <pubDate>Sun, 22 Jan 2017 13:35:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/konpairanoninkaramitawebassembly/</guid>
      <description># コンパイラの人からみたWebAssembly ---------------------- [コンパイラ勉強会 - connpass](https://connpass.com/event/46850/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # アジェンダ ------------ * WebAssemblyの概要 * 具体的な話 * WebAssembly吐こうとした話 === # WebAssemblyの概要 === # JavaScript ------------- * ブラウザ上で動くスクリプト言語 * 動的型付 * 高級 * GCとかある * 今までブラウザで動く唯一の言語だった * 遅い + 各ブラウザJITなどで補強 === # [asm.js](http://asmjs.org/) ------------ * プラウザ上で動く言語 * 低級 * GCなし * JSのサブセット + asm.</description>
    </item>
    
    <item>
      <title>SchemeでClassとProtocol</title>
      <link>//KeenS.github.io/slide/schemedeclasstoprotocol/</link>
      <pubDate>Mon, 28 Nov 2016 15:41:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/schemedeclasstoprotocol/</guid>
      <description># ClassとProtocol ---------------------- [Lisp Meet Up presented by Shibuya.lisp #46](https://lisp.connpass.com/event/45517/) Scheme回 === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * サイバーエージェントのエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # Class ------- * ここでは単に値の集合を表わす * `new` のように新しいインスタンスを作る機能はつけない * ほとんど型と同じ機能 * 唯一の機能 `instance?` を持つ === ``` scheme (instance? 3 ) ; = #t (instance? &#34;foo&#34; ) ; = #f ``` === # Classの実装 ------------- * 事実上述語があればいい * [詳細](https://github.</description>
    </item>
    
    <item>
      <title>Rustで非同期Thriftしたい</title>
      <link>//KeenS.github.io/slide/rustdehidoukithriftshitai/</link>
      <pubDate>Sat, 26 Nov 2016 13:07:29 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rustdehidoukithriftshitai/</guid>
      <description># Rustで非同期Thrift ---------------------- [歌舞伎座.tech#12「メッセージフォーマット/RPC勉強会」 - connpass](https://kbkz.connpass.com/event/40629/) === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * サイバーエージェントのエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === * X RPCライブラリを使う話 * O RPCライブラリを作る話 === # RPC ----- * Remote Procedure Call * リモートで呼べる * 言語跨げる * シリアライズフォーマットが決まれば大体出来る * Thrift, protobuf/gRPC, avro... * 大抵バイナリ + JSONに比べて2倍くらい効率がいい === # Thrift -------- * Facebook発(現apache)RPCフレームワーク * IDLから複数の言語向けのコードを吐ける * 対応言語多い * 新しい言語はthriftレポジトリフォークして追加 === # Thrift vs gRPC ---------------- \ | Thrift | gRPC ------------------------|:------:|:----: ベース | 自前 | HTTP/2 コード生成 | o | o プロトコルのアップデート | o | o 通信の多重化 | トランスポート次第 | o (HTTP/2) 認証 | x | o 例外 | ユーザ定義可能 | 事前定義のみ?</description>
    </item>
    
    <item>
      <title>Rustの話とリソースの話</title>
      <link>//KeenS.github.io/slide/rustnohanashitoriso_sunohanashi/</link>
      <pubDate>Sun, 20 Nov 2016 14:08:07 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rustnohanashitoriso_sunohanashi/</guid>
      <description># Rustの話とリソースの話 ---------------------- [RustのLT会！ Rust入門者の集い](https://rust.connpass.com/event/41467/) 2016-11-21 === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * 若者 * サイバーエージェントのエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます * [プログラミング言語Rust](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/)の翻訳 * [Join rust-jp on Slack!](http://rust-jp.herokuapp.com/) にもいます。 * [Rust その2 Advent Calendar 2016 - Qiita](http://qiita.com/advent-calendar/2016/rust-lang-2) === # 注意 ------ * たまにマニアックな話が出ますが気にせず無視して下さい * 「なんかRustすげー」って思ってもらえれば幸いです === # Rustとの出会い ---------------- * 元々Lisperだった * 他にはML, Ruby, JVM言語など === ![lis books](/images/rust-and-resource/lisp.jpg)=== 「Lisperは自分で処理系作って一人前」 === ![compiler books](/images/rust-and-resource/compiler.jpg) === # 苦悩 ------- * Cは低級すぎる * Javaは向いてない * C++は怖そう + 闇の軍団 + 縄文土器飛んできそう + あと **nullあるしメモリ破壊あるし** * MLは向いてるけどシステムプログラミングしづらい * ATS2, Golang, D.</description>
    </item>
    
    <item>
      <title>Scala 2.12.0変更点</title>
      <link>//KeenS.github.io/slide/scala_2_12_0henkouten/</link>
      <pubDate>Fri, 04 Nov 2016 13:19:01 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/scala_2_12_0henkouten/</guid>
      <description># Scala 2.12.0変更点 ---------------------- サイバーエージェント ScalaMeetUp === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * AI Studio Dev Group * Lisp, ML, Rust, Shell Scriptあたりを書きます === # サマリー ---------- 全部[公式ページ](http://www.scala-lang.org/news/2.12.0)に詳細あるよ * Java8向けの互換性向上したよ + トレイトがinterfaceに + 無名関数がlambdaに + SAMとScalaの関数が統合 * コンパイラが少し賢くなったよ + いくつかでinvokedynamicを使うように + 中間状態をやめた + 最適化をするように * ライブラリ改善した + EitherがRight Biasedに + Futureが強化 * 非互換いくつか === # トレイトがinterfaceに ----------------------- ``` scala trait Foo { def foo(): String = &#34;</description>
    </item>
    
    <item>
      <title>正しいScalaのコードが欲しい</title>
      <link>//KeenS.github.io/slide/tadashiiscalanoko_dogahoshii/</link>
      <pubDate>Wed, 05 Oct 2016 00:10:25 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/tadashiiscalanoko_dogahoshii/</guid>
      <description># 正しいScalaのコードが欲しい ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループ + Lisp, ML, Rust, Shell Scriptあたりを書きます + Scalaはあんまり === # Scalaを始めたばかりの頃の話 === ``` scala def revappend[A]( xs: List[A], ys: List[A]): List[A] = match xs { case Nil = Nil case x::xs_ = revappend(xs_, x::ys) } ``` === ``` scala def length(xs: List[_]): Int = xs match { case Nil = Nil case x::xs_ = 1 + length(xs_) } ``` === ``` scala def append[A]( xs: List[A], ys: List[A]): List[A] = xs match { case Nil = Nil case x::xs_ = x :: append(xs_, ys) } append(List(1, 2, 3), List(4, 5, 6)) // = List(1, 2, 3) ``` === # Scalaを始めたばかりの頃の話 ----------------------------- * 正しくないコードばかり書いてしまう + 他の言語の構文と混ぜてしまう + 型エラー + 実装ミス * 正しいScalaのコードが欲しい === # 正しさって？ ------------- * 構文が正しいコード?</description>
    </item>
    
    <item>
      <title>型クラスを越えて</title>
      <link>//KeenS.github.io/slide/katakurasuwokoete/</link>
      <pubDate>Sat, 16 Jul 2016 02:53:49 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/katakurasuwokoete/</guid>
      <description># 型クラスを越えて ---------------------- [歌舞伎座.tech#10「型クラス勉強会」](http://kbkz.connpass.com/event/32420/) === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # Rustとは ---------- * システムプログラミング言語 * GCなし！でもメモリ管理は自動 * **Zero-Cost Abstraction** * **Trait-Based Generics** * パターンマッチ、代数的データ型などなど * [プログラミング言語Rust](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/README.html) === # Rustのトレイト的なの ---------------- * 型に固有のメソッド + オブジェクト指向的な * トレイト + 型クラス === # 型クラスじゃない方 ------------------- ``` rust struct Person { name: String, } impl Person { // Static constructor fn new(name: String) - Self { Person{name: name} } // method fn hello(&amp;self) { println!</description>
    </item>
    
    <item>
      <title>Socket on SML#</title>
      <link>//KeenS.github.io/slide/socket_on_sml_/</link>
      <pubDate>Sat, 02 Jul 2016 15:25:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/socket_on_sml_/</guid>
      <description># Socket on SML&amp;#x23; ---------------------- [ML勉強会](http://connpass.com/event/32752/) 2016-07-09 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # HTTP on SML&amp;#x23;? ------------- * SML#にJSONサポートが入った + REST API簡単に叩けるのでは？ * SML#にFully Concurrent GCが入った + HTTPサーバ書くとレイテンシ抑えられて嬉しいのでは？ * スレッドも使えるしスループットも高い筈 * SML#でHTTPの機運 * しかしHTTPサポートはないので自前実装するしかない === # Socket on SML&amp;#x23;? ------------------ * HTTPサポートに必要 * Basisにはある (Optional) + SML#のBasisはサポートしてない * FFIあるしユーザランドで実装するか * [KeenS/SmlSharpSocketSupport](https://github.com/KeenS/SmlSharpSocketSupport) === # TCP/IP、ソケットなど --------------------------- * ソケットアドレス - 自分、相手の居場所。これがないと通信出来ない + 複数のアドレスファミリ(AF)がある + IP v4, IP v6, UNIXドメインなど。 * ソケット - 通信の仕組み。プログラムからはfdとして見える。 + AFやtype(stream/diagram)の属性を持つ * INet - インターネットドメインソケット + TCPとUDP + IP v4/v6アドレスで通信 === # 主要なstructure ----------------- * Socket * NetHostDB * INetSock * (UnixSock) === # [NetHostDB](http://sml-family.</description>
    </item>
    
    <item>
      <title>DOT/dottyについて調べてみた</title>
      <link>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</link>
      <pubDate>Tue, 24 May 2016 23:40:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</guid>
      <description># DOT/dottyについて調べてみた ---------------------- サイバーエージェント Scala Meet Up 2016-05-27 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループ + Lisp, ML, Rust, Shell Scriptあたりを書きます + Scala初心者 + Scala歴1年未満&amp;gt;&amp;lt; === # Scalaコンパイラ ---------------- * 型推論（特にimplicit）が遅い * コンパイルフェーズが多い + 中間オブジェクトが多くて遅くなる * 多くのクラスファイルを生成する + コンパイラのくせにディスクIOが多い * 気を抜いてると `Any` に推論される e.g.) `if(x) 1 else &#34;a&#34;` * そもそものScalaの設計に起因する点が多い + 抜本的変更が必要 === # Scala基礎 ----------- * Scalaが成立するのに最低限必要な機能って？ + e.g.) `case class` はなくても `class` だけでどうにかなる * 「最低限の機能」を減らせばコンパイラがシンプルになる + 他の機能はただのシンタックスシュガーになる + コンパイラのバグを減らせる + 機能追加時の矛盾確認が楽 * コア言語 === # Featherlight Scala --------------------- * Scalaのシンタックスシュガーを減らした感じ * 小さな言語 * 元のScalaはこれをベースに議論されてきた === # 形式言語理論 ------------- * 最低限必要な機能を形式的にモデル化 + 全ての動作は予め決められた「規則」に基く + 実際に書いて動かすものではない * 形式的にすることで「証明」とかが出来る + 「型検査に通れば実行時に型エラーが起きない」 + 「型検査が必ず終了する」 * 逆に、「このモデルだとこの機能は実現出来ない」とかも分かる === # Dependent Object Type ------ * Scalaのコアをモデル化したもの（要出典） * 形式言語 * ジェネリクスもなければクラスも継承もない、パッケージもない。 * 小さい言語ながら表現力豊か * 全ての値はオブジェクト。 + オブジェクトのフィールドとメソッドと型メンバーだけ + 型はそのまま * Path Dependent Type * サブタイピング === # About DOT --------- * 型付の健全性が証明された * System FSystem DDOT * existential typeを自然に表現出来る * 交差型と合併型 + `A extends B` - `A &amp; B` + 合併型は主に型推論の結果に出てくる === ```scala package scala.</description>
    </item>
    
    <item>
      <title>高速な継続ライブラリに向けて</title>
      <link>//KeenS.github.io/slide/kousokunakeizokuraiburarinimukete/</link>
      <pubDate>Sun, 08 May 2016 21:26:32 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/kousokunakeizokuraiburarinimukete/</guid>
      <description># 高速な継続ライブラリに向けて ---------------------- [継続勉強会](http://connpass.com/event/28150/) 2016-05-22 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # 継続欲しい ----------- * 色々な場面で便利 * Schemeで使い回してるのうらやましい * Common Lispでも使いたい * 現実には限定継続が欲しい + Common Lispには大域脱出はある === # 限定継続を使う例 ----------------- ## 非同期プログラミング * コールバック形式だと厳しい * 限定継続を使うと綺麗に書き直せる === # 限定継続を使う例 ----------------- ## ゲームのコルーチン * 複数のオブジェクトを制御するのにコルーチンが欲しい * cf [コルーチンをCommon Lispで簡単に定義 - さくらんぼのlambda日記](http://lambdasakura.hatenablog.com/entry/20111026/1319598590) === # 限定継続を使う例 ----------------- ## do記法 * モナドのdo記法は限定継続を使って実装出来る * [Operational monad in scheme](http://www.</description>
    </item>
    
    <item>
      <title>テストについて、Scalaと。</title>
      <link>//KeenS.github.io/slide/tesutonitsuite_scalato_/</link>
      <pubDate>Tue, 12 Apr 2016 22:31:51 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/tesutonitsuite_scalato_/</guid>
      <description># テストについて、Scalaと。 ---------------------- サイバーエージェント アドテクスタジオ ScalaMeetUp テスト回 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + 基盤開発グループでScalaで基盤開発してます + Lisp, ML, Rust, Shell Scriptあたりを書きます === # Scalaのテスト --------------- * ScalaTest + 機能豊富 + 複数のテストスタイルを選べる + 他のフレームワークとの統合がある * Specs2 + 普通に使いやすい * 他にもScalaCheck、JUnit、Gatlingなどなど === # ScalaTestのスタイルたち ----------- * FunSuite + xUnitっぽいらしい * FlatSpec + xUnitからBDDに移行した人向けらしい * FunSpec + RSpecっぽいBDD用の === # ScalaTestのスタイルたち ----------- * WordSpec + Specs2に似てる。 * FreeSpec + 何段にでもネスト出来る。自由。 * Spec + テスト=メソッド。速いらしい。 === # ScalaTestのスタイルたち ----------- * PropSpec + プロパティベースのテスト。ScalaCheckとの統合。 * FeatureSpec + シナリオテスト。 === # その他の機能 ------------- * mockitoのシュガー * Matcher DSL * 複数のランナー（複数のツールとの統合） === # Axionのテスト コード紹介を多めに === # 単体テスト --------------- * 普通の単体テストはWordSpec * ホーアの3つ組に基いて事前条件、コマンド、事後条件(不変条件)に分ける + 「{事前条件}が成り立つ時{コマンド}を実行し、停止するなら{事後条件(不変条件)}が成り立つ」の列挙 * [テストについて考えてみた | κeenのHappy Hacκing Blog](http://keens.</description>
    </item>
    
    <item>
      <title>SMLで函数型的正規表現マッチ</title>
      <link>//KeenS.github.io/slide/smldekansuukatatekiseikihyougenmatchi/</link>
      <pubDate>Tue, 29 Mar 2016 01:44:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/smldekansuukatatekiseikihyougenmatchi/</guid>
      <description># SMLで函数型的正規表現マッチ ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # 元ネタ -------- [関数型的正規表現マッチ | Preferred Research](https://research.preferred.jp/2010/11/regexp-play/) === # 正規表現 ---------- 必要最小限の要素は5つだけ 1. 空文字 2. アルファベット1つ 3. 正規表現のOR結合 4. 正規表現のAND結合 5. 正規表現の繰り返し === # SMLで表してみる ----------------- ``` sml datatype reg = Empty | Sym of t | Or of reg * reg | And of reg * reg | Rep of reg ``` === # 本当に大丈夫？ === # `/(a|b)*c/` ----------- ``` sml And(Rep(Or(Sym &#34;</description>
    </item>
    
    <item>
      <title>ビッグデータしないDrill、ローカルで快適に使うために</title>
      <link>//KeenS.github.io/slide/biggude_tashinaidrill_ro_karudekaitekinitsukautameni/</link>
      <pubDate>Sun, 06 Mar 2016 14:54:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/biggude_tashinaidrill_ro_karudekaitekinitsukautameni/</guid>
      <description># ビッグデータしないDrill、ローカルで快適に使うために ---------------------- [Tokyo Apache Drill Meetup](http://drill.connpass.com/event/27414/) 2016-03-22 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + Lisp, ML, Rust, Shell Scriptあたりを書きます + サイバーエージェントのエンジニア + アドテクスタジオ所属 + データエンジニアじゃなくてもデータを触ることはある === # なぜローカルか --------------- * ビッグデータ重い * 使いたいデータが絞れる時には大袈裟 + 「売り上げ上位1000のユーザの行動」とか * 同じようなクエリの重複 + 新しいテーブル作れないDBとかview作れないDBとか * 結果をRに渡したりとかが面倒 + CSVダウンロードがGUI === # キャッシュ的な ---------------- ``` +---------------------------------+ | BIG DATA (BigQuery, Spark, etc) | +---------------------------------+ ^ | ^ | | | | | | v | v +-------------------+ | ローカルキャッシュ | ＿人人人人人人人＿ ＞　突然のDrill　＜ ￣Y^Y^Y^Y^Y^Y￣  === # なぜ Drill ------------ * (デーモン立ち上げておけば)サクっと始められる * CSVをそのまま読める + Schema定義がいらない!</description>
    </item>
    
    <item>
      <title>Rustとは何か。どんな言語か。</title>
      <link>//KeenS.github.io/slide/rusttohananika_donnagengoka_/</link>
      <pubDate>Sun, 06 Mar 2016 05:27:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rusttohananika_donnagengoka_/</guid>
      <description># Rustとは何か。どんな言語か。 ---------------------- [異種プログラミング言語格闘勉強会](http://kbkz.connpass.com/event/26677/) 2016-03-20 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # Rustって? ---------- * システムプログラミング言語 * だけど函数型言語から影響を受けた * 安全かつ高速 * ゼロコスト抽象化 === ## システムプログラミング言語 --------------------------- * スレッドはネイティブ、Cとの相互呼び出し、小さなバイナリサイズ * ゲームエンジンとか作れる([piston](https://github.com/PistonDevelopers/piston)) * レンダリングエンジンとか作れる([Servo](https://github.com/servo/servo)) * Lチカとか出来る * OSとか作れる([Redox](https://github.com/redox-os/redox)) === ## 函数型言語的からの影響 ----------------------- 最近ではめずらしくなくなった * デフォルトイミュータブル * 代数的データ型 * コンビネータ * トレイト (型クラス) === ## 安全かつ高速 -------------- * データ競合が起きない + 所有権システム + だいたいコンパイル時Read Writeロック + Read only参照複数 or Write可能参照1つ * LLVMベースの強力な最適化 * スレッド周辺のAPIが揃ってる === ## ゼロコスト抽象化 ------------------ 省略 * [Rustのゼロコスト抽象化 | κeenのHappy Hacκing Blog](http://keens.</description>
    </item>
    
    <item>
      <title>ClojureでSSPを作った話</title>
      <link>//KeenS.github.io/slide/clojuredesspwotsukuttahanashi/</link>
      <pubDate>Mon, 22 Feb 2016 20:19:11 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/clojuredesspwotsukuttahanashi/</guid>
      <description># ClojureでSSPを作った話 ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # SSPとは ------- ※今回作ったものの話なので実際は少し違う * Supplier Side Platform * メディアからの広告リクエストを受けて表示権をオークションに掛け、落札された広告を表示する 0. 広告リクエストを受け取って 1. 各DSPに競りの通知を投げて 2. 入札を受け取って 3. 落札者と落札価格を決めて 4. 落札通知を出す === # アドテクコンペ --------------- * [ビジネスモデルもエンジニアリングも学べるアドテクスタジオの育成プログラムとは | 株式会社サイバーエージェント](https://www.cyberagent.co.jp/techinfo_detail/id=11380) * サイバーエージェントの学生向けインターン * 3日間、3、4人のチームで **DSP** を作る * 学生は7チーム、1チームあたり2000q/sを捌くことになってる * 学生のDSPを繋ぐための **SSP** が必要になったので作ることに。 ===   日本におけるアドテク市場とサイバーエージェントのアドテク事業について  from CyberAgent, Inc.</description>
    </item>
    
    <item>
      <title>HAMT ~ イミュータブルで高速なハッシュマップ ~</title>
      <link>//KeenS.github.io/slide/hamt/</link>
      <pubDate>Sun, 31 Jan 2016 16:17:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/hamt/</guid>
      <description># Hash-Array Mapped Trie ---------------------- ~ イミュータブルで高速なハッシュマップ ~ サイバーエージェント AdTech Scala Meetup LT大会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループの新卒 + Lisp, ML, Rust, Shell Scriptあたりを書きます === # scala.collections.immutable.HashMap ------------------------------------- * 今日の話題。これの実装をみていく。 * イミュータブル * キー-バリューペア * 値を追加する度に新たなハッシュマップを作る === # HashMap ---------------- * `O(1)`のアクセス効率 * 空間効率は悪い * ハッシュ関数が定義出来れば何でもキーに使える * 普通はミュータブルに使う + 大量のメモリをアロケートするのでコピーはつらい === # メモリ効率悪そう？ ------------------------- ```scala val hash = HashMap.empty + (3 - 1) // +---+---+---+---+---+---- // | / | 3 | / | / | / | .</description>
    </item>
    
    <item>
      <title>DSLとTagless Final</title>
      <link>//KeenS.github.io/slide/dsltotagless_final/</link>
      <pubDate>Sun, 13 Dec 2015 22:42:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/dsltotagless_final/</guid>
      <description># DSLとTagless Final ---------------------- サイバーエージェント アドテクスタジオ Scala Meet Up 2015-12-18 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + AMoAdの新卒エンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます - Scalaは初心者 ※ [Scala初心者の新卒が頑張ってLispを作ってみた](http://adtech.cyberagent.io/scalablog/2015/12/05/scala-lisp/) === # 注意 ------ * Scala初心者なのでScalaではなくScalaっぽい疑似コードで説明します + ~~コード例動かす時間が無かっただけ~~ * Scala初心者なのでScalaのコードは少なめに説明します === # DSLを作る ----------- 以下のようなHTTPなユーザをエミュレートするDSLを考える ``` scala val scenario = and( get(&#34;/&#34;), get(&#34;/users&#34;).andThen(res = post(&#34;/follow&#34;, first(users.getJsonData)))) val Right(_) = runScenario(scenario, &#34;user&#34;) ``` === # DSLを作る ----------- 普通は以下のようなAST作ってをラップする ``` scala trait ScenarioDSL sealed case class Get(url: String) extends ScenarioDSL sealed case class Post(url: String, data: JSON) extends ScenarioDSL sealed case class And(first, ScenarioDSL, second ScenarioDSL) extends ScenarioDSL sealed case class AndThen(first: ScenarioDSL, callBack: (Response) = ScenarioDSL) extends ScenarioDSL def get(url: String): ScenarioDSL= Get(url) .</description>
    </item>
    
    <item>
      <title>ClojureでDSPを作った話</title>
      <link>//KeenS.github.io/slide/clojurededspwotsukuttahanashi/</link>
      <pubDate>Tue, 27 Oct 2015 21:04:20 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/clojurededspwotsukuttahanashi/</guid>
      <description># ClojureでDSPを作った話 ---------------------- Lisp Meet Up #3 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # DSPとは -------- * Demand Side Platform * 広告主から広告を集めて広告の表示権を競り落し、適切な広告を出す 0. 広告主を集めて 1. 競りの通知を受け取って 2. 一番コスパが良さそうな広告を選んで 3. 入札して 4. 落札通知を受け取る 5. 落札したら広告を出す === # ひとりDSP ---------- * AdTech Studioの新卒研修 * 2ヶ月間、業務時間の20%を使ってDSPを作る + 実質8営業日 * 業務ロジックを理解することが目的 * 最後に新卒の作ったDSP同士で競争、利益が得点になる * 他には最終発表での得点も * **研修なので好きにやっていい** + Clojureで書くことに * サーバーの他は広告主データと学習用データが与えられる ===   日本におけるアドテク市場とサイバーエージェントのアドテク事業について  from CyberAgent, Inc.</description>
    </item>
    
    <item>
      <title>Internal of b11d</title>
      <link>//KeenS.github.io/slide/internal_of_b11d/</link>
      <pubDate>Mon, 19 Oct 2015 21:33:00 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/internal_of_b11d/</guid>
      <description># Internal of b11d ---------------------- サイバーエージェント新卒研修 ひとりDSP最終発表会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + AMoAdのサーバーサイド（？）エンジニア + 趣味でLisp, ML, Shell Scriptあたりを書きます + 仕事でScalaとShell Scriptあたりを書きます === # 今回作ったもの ---------------- * b11d (ぶらっくんどごーるど) * Clojure (compojure + middleware)製 + + NginX + MySQL + Supervisord * 出来る限りシンプルになるように作った + 310行 * デプロイその他はシェルスクリプト * 監視はmackerel === # シンプルということ ------------------- * アプリケーションは状態を持たない * IO以外副作用を持たない * つまり、キャッシュを持たない + キャッシュはパフォーマンス上の意味しかない + 早過ぎる最適化は諸悪の根源 * スケールアウトが容易 * compojureのミドルウェアを上手く使った === # シンプルということ2 -------------------- * データベースはだいたい第4正規形（ﾀﾌﾞﾝ） + 全てのカラムは`NOT NULL` + 広告主の所だけ拡張性を持たせるために第1正規形に落とした + 1広告主に対して複数の広告が持てるようになる * 外部キー制約も全部付ける * データが綺麗なのでアプリケーション側でのやることが少ない * 分析する時にも活きる筈 === # デプロイ --------- * 全てシェルスクリプトでオペレーション出来る * 手作業を無くしてミスを無くす + 「あれ？設定書き換えたのに反映されてない」 → 「再起動忘れてた」とかを防ぐ * ☆秘伝☆のシェルテクニック満載！ * アプリケーションが1jarに収まるのでデプロイが楽。 === # 監視 ------ * mackerelで色々モニタリング * Linux, NginX, MySQL, JVM, レスポンスステータス * ほとんどMackerelに乗っかることで本質的でないことに労力を割かない + 本質 = 業務ロジックを理解すること * アプリケーションの死活監視にはsupervisord + 本当はsystemdでやりたかったけどUbuntuのバージョンが古かった === # 落穂拾い ---------- * DBへの書き込みは非同期。Clojureなら簡単に書ける + `(go .</description>
    </item>
    
    <item>
      <title>ISUCONこれまでの流れ</title>
      <link>//KeenS.github.io/slide/isuconkoremadenonagare/</link>
      <pubDate>Fri, 04 Sep 2015 08:47:05 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/isuconkoremadenonagare/</guid>
      <description># ISUCONこれまでの流れ ---------------------- 雑に書き殴った === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + ISUCON3、 4の予選、本戦に出場（学生枠） === # ISUCON1 ブログ --------------- * node perl ruby * kazeburoの罠 * ブログのサイドバーが重いやつ * 割と親切なルール === # ISUCON2 チケット予約サイト --------------------------- * perl ruby node php java python * 席ランダムにしてなくてもベンチマーカー通っちゃう * 変更が1秒以内に反映されていること → 0.9秒毎に裏でバッチを回す * JOINが3連になってる所があってみんなそこに引っ掛かったがボトルネックはそこじゃない * ちょっとルールが雑になった === # ISUCON3予選 スニペット投稿サイト -------------------------------- * go node perl python ruby php * AWS1台 * Markdown変換がperl製の重いやつ * AWSだとプロセスのフォークも重い * titleの抜き出しも重い * チェッカーが甘くてVarnishを導入しただけで点数爆上がり * SQLの典型問題とかも * workloadに気付かなかった人多数 * 学生枠が出来た * ベンチマーカが通れば何でもアリな風潮 === # ISUCON3本戦 画像SNS -------------------- * go node perl python ruby * オンプレ5台 * 画像の変換が重い * 実は帯域もつらい * 画像のチェッカがあってチェッカが通れば画質を落としても良かった * 組長の罠 * ベンチマーカーに通れば何でもアリ * 複数サーバーでのファイルの共有にWebDAVが盲点 * 点数計算の罠に嵌まる人多数 + 基本点より追加点に目が眩む人がそれなりに * 推測するな計測せよ * nodeで初期パスワードが間違っているトラブル === # ISUCON4予選 銀行 -------------------------------------- * go node perl php python ruby * AWS1台 * ワークロードを桁外れに指定するとベンチマーカーが走り続けるバグ * ベンチマーカーにアクセスして行動パターンを解析した人が出る（その情報は使ってない。スポーツマンシップ。） * テンプレートエンジンをやめて静的ファイル * Go勢のon memory戦略が跋扈 * 「メモリに載せれば勝てるぜ」風潮 * 静的ファイルを返さない反則ギリギリのチューニング * ベンチマーカーのチューニング * Varnish潰し * アプリをC++で書き換えて予選突破したチームも出る === # ISUCON4本戦 動画広告 ---------------- * go perl php python ruby * オンプレ3台 * 最初からRedisに動画が載ってる * それ外したらスコア頭打ち(帯域がつまる) * ベンチマーク同士が干渉しあう * 実はCache-Controlをしたらスコアが爆上がり(上位2チームだけ気付いた) * 3位のチームは外向きと内向きの2枚のNICを使って団子状のスコアから頭1つだけ出た === #ISUCON5予選 ?</description>
    </item>
    
    <item>
      <title>SMLでPNGデコーダを作ろうとして分かったこと</title>
      <link>//KeenS.github.io/slide/smldepngdeko_dawotsukuroutoshitewakattakoto/</link>
      <pubDate>Fri, 04 Sep 2015 06:45:19 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/smldepngdeko_dawotsukuroutoshitewakattakoto/</guid>
      <description># SMLでPNGデコーダを作ろうとして分かったこと ------------------------------------------ サイバーエージェント アドテクスタジオ エンジニア月初会 === # About Me ---------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + AMoAdの新卒 + Lisp, ML, Shell Scriptあたりを書きます === うーむ。画像フォーマットの扱い一回くらい書いてみないとなーと思ってたけどやっぱり既存なんだよなー。Common LispかSMLあたりならフロンティアになれそう。
&amp;mdash; κeen (@blackenedgold) 2015, 9月 3 === @blackenedgold 仕様を理解するためにデコーダから実装するのがオススメです
&amp;mdash; ELD-R-ESH-2 (@eldesh) 2015, 9月 3 === @blackenedgold そんな詳しいわけではないんですが、jpegかpngがおすすめです。webpは動画コーデック由来で難しいと思います。tiffは画像コンテナみたいな立ち位置なので画像フォーマット感がないかなと。
&amp;mdash; ELD-R-ESH-2 (@eldesh) 2015, 9月 3 === 明日の朝までに SMLでpngデコーダを実装しよう === # Standard ML ------------- * ML系の函数型言語 * 文法はOCamlよりF#に似てる（というかF#が似せてきた） * 結構書き易い * 仕様は SML&#39;90とSML&#39;97がある * 仕様で言語のformal semanticsが定められてたりする * 要は研究向き + **ライブラリほぼなし** + **コミュニティほぼなし** === ＞　無理ゲー　＜ === # 一応フォーマットを調べる ------------------------ ``` +-----------------+ | Chunk | 画像はChunkの集合。 ++---------------++ Chunk自体は簡単なフォーマット || length | name || |+---------------+| || data || || .</description>
    </item>
    
    <item>
      <title>Method Drawでお手軽LGTM生成</title>
      <link>//KeenS.github.io/slide/method_drawdeotegarulgtmseisei/</link>
      <pubDate>Fri, 14 Aug 2015 00:55:37 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/method_drawdeotegarulgtmseisei/</guid>
      <description># Method Drawでお手軽LGTM生成 ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Method Draw ------------- * シンプルなSVG エディタ * オープンソース * [editor.method.ac](http://editor.method.ac/) === # デモ === # 以上 ------ Have a happy hacking life   </description>
    </item>
    
    <item>
      <title>構文解析にまつわる小話たち</title>
      <link>//KeenS.github.io/slide/koubunkaisekiarekore/</link>
      <pubDate>Sat, 08 Aug 2015 04:16:50 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/koubunkaisekiarekore/</guid>
      <description># 構文解析にまつわる小話たち ---------------------- [#peg_study](https://twitter.com/search?q=%23peg_study&amp;src=typd&amp;vertical=default&amp;f=tweets) === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバエージェントの新卒エンジニア + Lisp, ML, Shell Scriptあたりを書きます === # ウォームアップ === # 構文解析はバッドノウハウ ------------------------- * プログラム言語を使っているなら既にパーサはある + 文法も定義されてる * 目の前のパーサを使え + パーサAPIがある言語もある(Lispとか) * そうでなくても内部DSLを考えろ + 内部DSLで解決出来ないときだけ構文解析 === # 本質はAST ----------- * 結局はASTになればどんな文法でも同じ * 文法はただの外皮、欲しいのはAST * シンタックスシュガーは飾り + DRY出来るなら別 * S式を使え + ASTをそのまま書き下せる === # AST First ----------- * 最初にASTを考える。そして文法を考える * 何が欲しいのかイメージし易くなる * 構文解析はAST生成の自動化。普段してないことを自動化するのは愚か。 * 早めに間違いに気付ける + `+`は二項演算子。じゃあ `&amp;&amp;` は？ `=` は？ Note: Lispだと+は関数、andはマクロ、setqはスペシャルフォーム === # 構文解析の流れ === # 構文解析の流れ --------------- 1.</description>
    </item>
    
    <item>
      <title>Clojureおじさん</title>
      <link>//KeenS.github.io/slide/clojureojisan/</link>
      <pubDate>Mon, 22 Jun 2015 22:53:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/clojureojisan/</guid>
      <description># Clojureおじさん ---------------------- サイバーエージント新卒 第5回 Fresh勉強会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Clojure --------- * 2007年から * JVMで動くLisp系言語 * 函数型 * 動的型付き * 値は基本immutable * 遅延シーケンス * STMがあり、並列処理に強い === # Hello World ------------- ```clojure (println &#34;Hello, World&#34;) ``` === # JVM ------ ## Javaのコードをシームレスに呼べる * `obj.method()` ではなく `(.method obj)` * `Class.staticField` ではなく `Class/staticField` * `obj.</description>
    </item>
    
    <item>
      <title>Common Lisp処理系拡張の探求 SBCLのマルチスレッドサポート</title>
      <link>//KeenS.github.io/slide/common_lispshorikeikakuchounotankyuu_sbclnomaruchisureddosapo_to/</link>
      <pubDate>Sat, 20 Jun 2015 18:30:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/common_lispshorikeikakuchounotankyuu_sbclnomaruchisureddosapo_to/</guid>
      <description>### Common Lisp 処理系拡張の探求 SBCLのマルチスレッドサポート ---------------------- Lisp Meet Up #29 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # CLのマルチスレッド ---------------------------- ## [bordeaux-threads](https://trac.common-lisp.net/bordeaux-threads/wiki/ApiDocumentation) * 色々な処理系のマルチスレッドサポートの抽象レイヤー * デファクトスタンダード + スレッド + ロック + コンディションヴァリアル === # SBLCのマルチスレッド === # SBLCのマルチスレッド ---------------------------- * スレッド + スレッド内エラー * アトミック操作+ CAS* 排他制御（ロック） * セマフォ * コンディションヴァリアル * バリア * キュー* メールボックス* ゲート* frlock=== # アトミック操作 === # アトミック操作 ---------------- 複雑な動作は同じデータに並行に動かすと壊れうる ``` [var = 1] [incf] | [decf] [1][1] [2]---[var = 2] | | | [var = 0]+---+ go | | V V ``` === # frlock -------- * Fast Read Lock * またの名をRead-Write Lock * Read Lockは多重に取れる。Write Lockは1つしか取れない。 * 基本操作は`frlock-read`と`frlock-write` * 普通のlockと違って複数のReadが速くなる === # まとめ -------- * SBCLのマルチスレッドサポートはbordeaux-threadsよりもリッチ * 処理系の独自サポート面白い * 処理系に依存してしまってもいいんじゃないだろうか   </description>
    </item>
    
    <item>
      <title>ボトルネックのイイ話</title>
      <link>//KeenS.github.io/slide/botorunekkunoiihanashi/</link>
      <pubDate>Thu, 04 Jun 2015 00:03:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/botorunekkunoiihanashi/</guid>
      <description># ボトルネックのイイ話 ---------------------- サイバーエージェント15新卒 FRESH勉強会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # ボトルネック -------------  ボトルネック (bottleneck) とは、システム設計上の制約の概念。英語の「瓶の首」の意。一部（主に化学分野）においては律速（りっそく、「速さ」を「律する（制御する）」要素を示すために使われる）、また『隘路（あいろ）』と言う同意語も存在する。 === # Webアプリの主な登場人物 ------------------------ * リバースプロキシ * アプリケーションサーバ * データベース === ![relation of reverse proxy, app and DB](/images/webapp.png) === # レスポンスタイムとスループット ------------------------------ * レスポンスタイム + リクエストを投げてレスポンスが返ってくるまでの時間 + ユーザから見たメトリクス * スループット+ 一定時間内にシステムがどれだけのリクエストを捌けるか + 中の人から見たメトリクス === # スループット ------------- * スループットの最大 ≒ リソースの限界 + ネットワーク帯域 + ディスクIO + メモリ使用量 + CPU負荷 * リソースのどれか1つでも限界になったらそれ以上パフォーマンスは上がらない === # パフォマンスの目安 ------------------- * ネットワーク帯域: bpsで表わす。NICによるが 1Gbpsとか * CPU: パーセンテージで表わす。100xコア数が最大マシンに依る。 * メモリ: Bで表わす。ピンキリだが1GB ~ 128GBくらい？ * ディスクIO: Bpsで表わす。HDDなら 100Bpsとか。SSDなら10倍くらい。 テキトーに調べたので間違ってるかも === # 誰が何を --------- * リバースプロキシ: ネットワーク、メモリ、CPUなど * アプリケーションサーバl: CPU、メモリなど * データベース: CPU、ディスクIOなど === 「CPUは100%に行ってないのにアプリケーションが遅いんだよ」 === # 誤り ------ * ボトルネックはCPUとは限らない * 他のメトリクスも一緒に見るべき === # 推測するな。計測せよ --------------------- * 実際に測ってみないとどこがボトルネックか分からない * 何をしてどれくらいパフォーマンスが上がったのかも分からない + コストパフォーマンスも重要 === 「パフォーマンスが悪いからCPUをグレードアップしよう」 === # 誤り ------ * ボトルネックはCPUとは限らない * 例えばネットワーク帯域が詰まっているのにCPUを改善しても意味がない * 帯域が詰まってるならデータを減らす、NIC（マシン）を増やすなどをする === 「多分アプリケーションを高速化したよ」 === # 誤り ------ * 計測せずに高速化しても意味がない + テストの無いリファクタリングがただの破壊なのと同じ * 高速化した気になって実際はコードが汚なくなっただけの可能性もある === # ボトルネックは変わりうる ------------------------ * 一箇所をずっと改善してても意味がない * ある程度改善したら次のリソースの限界がきてるかもしれない === 「アプリケーションを10倍高速化したのにあんまり速くなってない」 === # 誤り ------ * 10倍くらい極端に高速化すると次のリソースがボトルネックになる * ディスクやネットワークの改善を考えるべき === # リソースの食い合い ------------------- * 1マシンで完結している場合、リソースの食い合いが発生しうる + リバースプロキシとアプリケーションがCPUを食い合うとか * この時、どのようにして解決するのが適切か？ === # 例題 ------ * アプリが80%くらいの負荷 * Rプロキシが20%くらいの負荷 === # 例題 ------ 1.</description>
    </item>
    
    <item>
      <title>Transducerについて</title>
      <link>//KeenS.github.io/slide/transducernitsuite/</link>
      <pubDate>Wed, 03 Jun 2015 22:29:50 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/transducernitsuite/</guid>
      <description># Transducerについて ---------------------- サイバーエージェント 朝の3分スピーチ === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Transducerって？ ------------------ * Clojure 1.7で入るフレームワーク * 関数のパイプライン化を簡単にする * 入力、出力には依存しない === # Reduce関数について ------------------- * `reduce: (&#39;a - &#39;b - &#39;a) &#39;a - &#39;b list` * `(&#39;a - &#39;b - &#39;a)` でシーケンスを集約する * `(reduce + 0 &#39;(1 2 3)) ;= 6` * 要はreduceは関数を使って集約する。 === # Transducerについて ------------------- * `transduce:((&#39;a - &#39;b - &#39;a) - (&#39;a - &#39;b - &#39;a)) (&#39;a - &#39;b - &#39;a) &#39;a - &#39;b list` * 集約関数を変換する関数もとる * `(transduce xf + 0 &#39;(1 2 3))` * transducerで集約する前に処理を挟める === # すごいところ ------------------------- ## コンポーサビリティ * `((&#39;a - &#39;b - &#39;a) - (&#39;a - &#39;b - &#39;a))` * 変換関数は入力と出力が同じ。 * つまり変換関数を合成出来る * ex) `(comp (filter odd?</description>
    </item>
    
    <item>
      <title>21世紀のエンジニアのためのHTTP/2入門</title>
      <link>//KeenS.github.io/slide/21seikinoenjinianotamenohttp_2nyuumon/</link>
      <pubDate>Mon, 18 May 2015 00:24:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/21seikinoenjinianotamenohttp_2nyuumon/</guid>
      <description># 21世紀のエンジニアのためのHTTP/2入門 ---------------------- サイバーエージェントFresh勉強会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # HTTPについて ------------- * 1990年誕生の骨董仕様 * Human Readableなテキストベース * パフォーマンスはあまり考慮してない === # HTTP/1.1の限界 --------------- * フォーマットがゆるふわでパースしづらい * 何度も似たようなヘッダをる + 割とネットワーク負荷が高い * 基本1コネクションにつき1ファイルの送受信 + 短命なコネクションをいくつも張ることになる + コネクションが&#34;ウォームアップ&#34;する前に切れる * Head of Line Blocking + 遅いコンテンツをダウンロードしてると他のコンテンツがダウンロード出来なくなる === ``` GET / HTTP/1.1 Host: localhost:8080 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.</description>
    </item>
    
    <item>
      <title>実装から理解するクロージャ</title>
      <link>//KeenS.github.io/slide/jissoukararikaisurukuro_ja/</link>
      <pubDate>Sun, 17 May 2015 01:33:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/jissoukararikaisurukuro_ja/</guid>
      <description># 実装から理解するクロージャ ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # クロージャとは？ ----------------- * 日本語にすると（関数）閉包 * 関数が外側のローカル変数を補足する * 補足されたローカル変数は無限の生存期間を持つ + ローカル変数は本来スコープを抜けると生存期間が終わる + 言い換えるとグローバル変数みたいになる + でもあくまでスコープはローカル === # コード例 --------- ```js function genpower(n){ var x = 1; return function(){ x *= n; return x; }; } var p = genpower(2); ``` === # コード例 ---------- ```js p() // = 2 p() // = 4 p() // = 8 x * 2 // x is not defined ``` === # コード例 ---------- * `p`が`n`と`x`を補足しているので関数を抜けた後も`x`と`n`は使える。 + 関数の仮引数もローカル変数。 * でもローカル変数なので外からは見えない。 === ``` +-----------------------+ | function genpower(n){ | | var x = 1; | | .</description>
    </item>
    
    <item>
      <title>勉強会駆動勉強で猛勉強</title>
      <link>//KeenS.github.io/slide/benkyoukaikudoubenkyoudetakeshibenkyou/</link>
      <pubDate>Wed, 06 May 2015 22:02:12 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/benkyoukaikudoubenkyoudetakeshibenkyou/</guid>
      <description># 勉強会駆動勉強で勉強 ---------------------- サイバーエージェント15卒FRESH勉強会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + 大学では非情報系の学部にいた + Lisp, ML, Shell Scriptあたりを書きます === # 勉強会駆動勉強 --------------- === # 勉強会駆動勉強 --------------- ## 方法 1. 勉強会を見付ける 2. (詳しくない内容について)トークを登録する 3. 期日までに勉強する 4. 期日までに資料を作る 5. 発表する === # 勉強会駆動勉強 --------------- ## ポイント * 自分でテーマを決めてる * 自分で期限を決めてる * 決めた期限は強制力がある * アプトプットする * 質問などでフィードバックがくる === # 勉強会駆動勉強 --------------- ## 身に付く力 * 素早く調べる力 * 要点を素早く見付ける力 * プレゼン資料の作成力 * プレゼン力 === # 例 === # 前回のRustの話 実は発表決めた時点ではRustを書いたことなかった !</description>
    </item>
    
    <item>
      <title>Common Lispで限定継続と遊ぶ</title>
      <link>//KeenS.github.io/slide/common_lispdegenteikeizokutoasobu_/</link>
      <pubDate>Sun, 26 Apr 2015 21:09:07 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/common_lispdegenteikeizokutoasobu_/</guid>
      <description># Common Lispで限定継続と遊ぶ ---------------------- [Lisp Meet Up #27](https://atnd.org/events/64988) === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Agenda -------- 0. cl-contの紹介 1. 限定継続の話 2. 限定継続の使い方の話 3. 限定継続の実装の話 === # CL-CONTの紹介 === # CL-CONT --------- * Common Lispの限定継続ライブラリ * 結構古くからあるっぽい * 割と色々なライブラリが使ってる === # CL-CONT --------- ![cl-cont dependers](/images/cl-cont-dependers.png) === # API ----- * 継続を区切るマクロ + `with-call/cc` + `defun/cc` + `lambda/cc` * 継続を取得するマクロ + `call/cc` + `let/cc` ※後で説明するので意味が分からなくても問題ないです。 === # 限定継続の話 === # 継続とは --------- * &#34;</description>
    </item>
    
    <item>
      <title>非同期処理の「その後」の話。goto、継続、限定継続、CPS、そしてコールバック地獄。</title>
      <link>//KeenS.github.io/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</link>
      <pubDate>Sat, 25 Apr 2015 23:44:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</guid>
      <description># 非同期処理の「その後」の話 ---------------------- ## goto、継続、限定継続、CPS、そしてコールバック地獄 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # 同期処理とは ------------- 通常、外部とやりとり(I/O)する時に待ち時間(ブロック)が発生する。 ![sync task image](/images/sync.png) === # 非同期処理とは --------------- 待ち時間に(ブロックせずに)別の処理をしようという発想。 ![async task image](/images/async.png) === # 非同期処理の裏側 ----------------- 処理Aと処理Bの他にいつどっちを動かすかを決めるスケジューラが存在することが多い ![async scheduler image](/images/async_scheduler.png) === # どうやって戻る問題 ------------------- * 一時停止した後「その後」の処理にどうやって戻るか ![cont image](/images/cont.png) === # 「その後」とは ----------- ```C ... fputc(c); // ここの処理でI/Oが入る // 再開する時にここに戻ってきたい printf(&#34;Work done&#34;); .</description>
    </item>
    
    <item>
      <title>静的なメモリ管理の話。リージョン推論とλ計算からRustまで</title>
      <link>//KeenS.github.io/slide/seitekinamemorikanrinohanashi.rijonsuirontolambdakeisankararustmade/</link>
      <pubDate>Tue, 21 Apr 2015 00:25:56 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/seitekinamemorikanrinohanashi.rijonsuirontolambdakeisankararustmade/</guid>
      <description># 静的なメモリ管理の話。リージョン推論とλ計算からRustまで ---------------------- サイバーエージェント新卒エンジニア勉強会 === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * 大学では非情報系学科。趣味のプログラマ。 + 非ガチ勢なので優しくして下さい=== # 強い静的メモリ管理の話をしよう ------------------------------ * まずは可能性の議論が必要 * 実現可能性 * 実用性 === # 可能性の議論 ------------- * プログラミング言語の理論 ≒ λ計算 * そもそもλ計算はメモリのことを考慮してない + GCがあるかのように記述される === # 可能性の議論 ------------- * λ計算にメモリ管理まで含めて理論を立てたものは存在する（静的なメモリ管理） + リージョンというものをベースにしている [参考](http://www.elsman.com/mlkit/pdf/popl94.pdf) * さらにリージョンを自動で推論する理論もある（強いメモリ管理） + リージョン推論という === # 軽くリージョンの話 ------------------- * 型と同じようにプログラム全体を伝わるメタデータ。 * データが保存される場所を指す。リージョンはいくつもある。 * リージョン推論でデータがどのリージョンに入るかが分かる * さらにリージョンのサイズもある程度予想がつくので静的に管理出来る * 関数などは引数のリージョンに対して多相になる「リージョン多相」などもある * この辺は[Martin Elsmanの論文たち](http://www.</description>
    </item>
    
    <item>
      <title>caveman2、ningle…Common LispのWeb周りのフレームワークを快適に使うためのたった1つのコト</title>
      <link>//KeenS.github.io/slide/caveman2-ningle...common-lispnowebmawarinofure-muwa-kuwokaitekinitsukautatta1tsunokoto/</link>
      <pubDate>Thu, 05 Mar 2015 13:18:44 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/caveman2-ningle...common-lispnowebmawarinofure-muwa-kuwokaitekinitsukautatta1tsunokoto/</guid>
      <description># caveman2、ningle、datafly…Common LispのWeb周りのフレームワークを快適に使うためのたった1つのコト ---------------------- Clack Meet Up #1 2015-03-05 @サムライト === ずっと俺のターン === # 問題 ------ Common Lispは case * Sensitive * Insensitive どっち? === # 問題 ------- あれ？ ```lisp (eql? &#39;CaseInsensitive &#39;caseinsensitive) ;= t ``` === # 問題 ------- リーダがデフォルトで大文字にするだけ ```lisp (eql? &#39;|CaseSensitive| &#39;|casesensitive|) ;= nil ``` === # Caveman2 --------- ```lisp @route GET &#34;/hello&#34; (defun say-hello (&amp;key (|name| &#34;Guest&#34;)) (format nil &#34;Hello, ~A&#34; |name|)) ``` === # Ningle -------- ```lisp (setf (ningle:route *app* &#34;</description>
    </item>
    
    <item>
      <title>既存のテンプレートエンジンの問題点と再設計</title>
      <link>//KeenS.github.io/slide/kizonnotenpure-toenjinnomondaitentosaisekkeiaruihaarrowsnitsuite/</link>
      <pubDate>Mon, 02 Mar 2015 23:36:03 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/kizonnotenpure-toenjinnomondaitentosaisekkeiaruihaarrowsnitsuite/</guid>
      <description>.red { color: red; }  # 既存のテンプレートエンジンの問題点と再設計、あるいはArrowsについて ----------------------------------------------------------------- Clack Meet Up #1 2015-03-05 @サムライト === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 野生のLisper + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます === # Template Engines === # Existing Architeture ---------------------- 0. (リクエスト) 1. アプリ 0. 引数を計算 1. テンプレートに引数を渡す 2. レスポンスをレンダリング 4. レスポンスをサーバに渡す 5. (レスポンス) === # Rendering? ---------------------- * 結合した文字列はクライアントに返ったらその後はゴミ + GCへ負荷がかかる (後述) * クライアントにとって1つの文字列である必要はない * むしろ返せる部分だけ先に返した方が得（後述） === # GC Pressure (SBCL) ----------------- * 世代別Copy GC * 結合した文字列は比較的大きい * `alloc_space`に入らない大きさならアロケートが遅い * GCを頻繁に起動してしまう * 16KBを越えると特別扱いされて遅い/メモリを喰う * LispのWebアプリはレスポンスタイムの分散が大きい（要出展） 参考: [SBCL GENCGC @ x86 Linux](http://cl-www.</description>
    </item>
    
    <item>
      <title>Semantic S式</title>
      <link>//KeenS.github.io/slide/semantic-sshi/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/semantic-sshi/</guid>
      <description># Semantic S式 --- 2014-11-27 κeen(@blackenedgold) # About Me ---------- ![κeenのアイコン](/images/icon.png) + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます # Semantic Web とは # [Semantic Web](http://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%9E%E3%83%B3%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A6%E3%82%A7%E3%83%96) ---------------- * W3C のティム・バーナーズ＝リーが提唱 * 文章の見た目を記述するんじゃなくて構造を記述しよう * そうすると機械がクローリングするの楽になるよね # Semantic S式とは # Semantic S式 -------------- * Shibuya.lispのκeenが提唱 (昨日思い付いた) * S式の見た目じゃなくて構造で括弧をつけよう * そうするとコーディングが楽になるよね # 良いところ ------------ 1. 意味が分かり易い 2. パースし易い 3. 編集が楽になる 4. 壊れにくい # 1. 意味が分かり易い # 1. 意味が分かり易い -------------------- ## 例1 * Clojure ```clojure (let [a 1 b 2] .</description>
    </item>
    
    <item>
      <title>claspを少し触ってみた</title>
      <link>//KeenS.github.io/slide/clasp/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/clasp/</guid>
      <description># claspを少し触ってみた ---------------------- Lisp Meet Up presented by Shibuya.lisp #21 2014-10-29 κeen(@blackenedgold) # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます # clasp ------- * Github: [drmeister/clasp](https://github.com/drmeister/clasp) * 2014-09-18に0.1リリース(現在0.11プレビューが出ている) * 今は0.11プレビューが出ている * ANSI Common Lisp準拠を目指す(現在80 ~90%) * ECLからのフォーク * LLVMベースのJIT([MCJIT](http://llvm.org/docs/MCJITDesignAndImplementation.html))搭載 * C++とLispで書かれている * C++との連携を意識 Note: C++との連携の部分を強調。今回は0.11プレビューでの話 # メモリ管理 ------------------ * Memory Pool Systemと Boehm GCから選べる * ビルドするときにどっちかを選ぶ # メモリ管理 ------------------ ## [Boehm GC](http://www.</description>
    </item>
    
    <item>
      <title>C6H6&#43;HNO3</title>
      <link>//KeenS.github.io/slide/c6h6-plus-hno3/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/c6h6-plus-hno3/</guid>
      <description># $\mathbf{C_6H_6+HNO_3}$ ------------------------ 関数型なんたらの集い  κeen(@blackenedgold) # picrinについて --------------- ![ピクリン酸の構造式](/images/picrin/picrin-structure.png) 化学式 $\mathbf{C_6H_3N_3O_7}$、示性式 $\mathbf{C_6H_2(OH)(NO_2)_3}$ で表される芳香族のニトロ化合物。 一般にはフェノールのニトロ化によって得られる。 Note: ニトロ化に硫酸を使うことを触れる。 ![picrinのロゴ](/images/picrin/picrin-logo-fin01-02.png) # About Me ---------- + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, ML, Shell Scriptあたりを書きます + [picrin](https://github.com/picrin-scheme/picrin)のコミッタです # picrinについて ---------------- * github: picrin-scheme/picrin * R7RS-small scheme 処理系 * 速い、軽い、高機能を目指す * 組み込み向けを意識 * 1年くらい開発 * κeenがコミットし始めてから半年弱 # picrinの プロジェクト構成 --------------------------- コア(benz)はC、ビルドツールはCMake。 ``` ├── contrib (nitros) ....... ├── docs ├── etc ├── extlib │ └── benz ├── piclib .</description>
    </item>
    
    <item>
      <title>Picrinのチューニングの話、もといGCの話</title>
      <link>//KeenS.github.io/slide/picrin-gc/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/picrin-gc/</guid>
      <description># Picrinのチューニングの話、もといGCの話 --- Lisp Meet Up presented by Shibuya.lisp #20 2014-09-29 κeen(@blackenedgold) # 自己紹介 --- + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます + [picrin](https://github.com/picrin-scheme/picrin)のコミッタです # picrin --- ![picrin](/images/picrin/picrin-logo-fin01-02.png) # picrin --- * R7RS compatibility * bytecode interpreter (based on stack VM) * internal representation by nan-boxing * conservative call/cc implementation (users can freely interleave native stack with VM stack) * exact GC (simple mark and sweep, partially reference count is used as well) * string representation by rope data structure # picrin --- * R7RS compatibility * bytecode interpreter (based on stack VM) * internal representation by nan-boxing * conservative call/cc implementation (users can freely interleave native stack with VM stack) * exact GC (simple mark and sweep, partially reference count is used as well) * string representation by rope data structure # picrin開発者の不満 --- * picrinの起動が遅い+ 2秒くらいかかる * picrinのテストが遅い+ 16秒くらいかかる # 少しGCの話 --- GC(ごみ集め)とは * 使われていないオブジェクトを自動的に解法する + メモリ管理に煩わせられないで済む + メモリーリークを防ぐ。 * 「使われていないオブジェクト」を判定するのはいくつかアルゴリズムがある # GCのアルゴリズム --- ## 主なGCのアルゴリズム * マーク&amp;amp;スイープ * 参照カウント * Copying GC # GCのアルゴリズム --- ## マーク&amp;amp;スイープ 1.</description>
    </item>
    
    <item>
      <title>Introduction to CIM</title>
      <link>//KeenS.github.io/slide/introduction-to-cim/</link>
      <pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/introduction-to-cim/</guid>
      <description># Introduction to CIM κeen(@blackenedgold) ## 突然ですが Common Lispのスクリプトファイルの実行方法知ってますか？ sbcl sbcl --script $file ecl ecl -shell $file ccl ccl -e $file -e &#39;(quit)&#39; ... シバン可搬性のあるスクリプトが書けない ## そこで、こんなの書きました ```sh case &#34;$LISP_IMPL&#34; in sbcl*) sbcl --script $1 ;; clisp*) clisp -on-error exit -i $1 ;; ecl*) ecl -shell $1 ;; ccl*) ... ``` ## でも問題がある * どの処理系をバックエンドに使うか * 処理系のパスをどう捜すか * そもそもどうやって使ってもらうか ## κeenの答え  処理系の管理までやってしまおう。  そうしたら一緒に使ってもらえる。 ＿人人人人人人＿ ＞　CIMの誕生　＜ ￣Y^Y^Y^Y^Y￣ ## CIMとは * Common Lisp Implementation Manager * ちむ * Rubyのrvmを強く意識 * Common Lisp処理系のインストール、切り替え、コマンドラインインターフェースなど。 * `cim`、 `cl`、 `ql`コマンドから成る * B Shell スクリプト製(マルチプラットフォーム対応のため) * 2013/10くらいからぼちぼち開発 ## `cim`コマンドについて インストール cim install sbcl バックエンドの切り替え cim use sbcl 現在情報 cim info CIMのアップデート cim get など。 ## `cl`コマンドについて * 最初に紹介したシェルスクリプトベース * コマンドラインからCommon Lispを使うことを重視 * シバン対応も。 * REPLは独自実装(デバッガを黙らせるのが主な目的) * オプションはrubyを意識 ## 少しシバンの話 ### だめな例 ```lisp #!</description>
    </item>
    
    <item>
      <title>授業で半年間moclを使ってみた</title>
      <link>//KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8/</link>
      <pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8/</guid>
      <description># 授業で半年間moclを使ってみた Shibuya.lisp TT #8 κeen(@blackenedgold) ## 自己紹介 + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます 一年前 ## [計算数学II](http://ks.ms.u-tokyo.ac.jp/) ![計算数学IIのホームページ](/images/shibuya_lisp_TT8/calculation_math.png) 自分でテーマを決めて半年間取り組む チーム[人造エイリアン](https://sites.google.com/site/2013ks2/home) ![チーム人造エイリアン](/images/shibuya_lisp_TT8/android_alien.png) ## Common Lisp でAndroid? ## [mocl](https://wukix.com/mocl) ![mocl home](/images/shibuya_lisp_TT8/mocl.png) ## What is mocl * iOS, Androidで動くCommon Lisp処理系 * LLVMをバックエンドに使う * Networking, Unicode, CLOS, and More. Run Countless CL Libraries. ## 買ってもらった(・ω・)v ![mocl home](/images/shibuya_lisp_TT8/mocl_ut.png) ## 注意 私が触ったのは1つ前のバージョンです。 一部5月のアップデートで改善されています。 ## How it Works ## コードサンプル 授業で私が作ったオセロのAIのコード ```java public BoardCanvas(Context context,int width, int height,int color ){ .</description>
    </item>
    
    <item>
      <title>Cloud 9の紹介</title>
      <link>//KeenS.github.io/slide/cloud-9/</link>
      <pubDate>Tue, 29 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/cloud-9/</guid>
      <description># Cloud 9の紹介 Lisp Meet Up #19 presented by Shibuya.lisp κeen(@blackenedgold) ## 自己紹介 + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます ## Lispがあまり使われない原因  認知度が低い 開発環境構築の難易度高い  ## Cloud 9について + WEBベースのIDEサービス + 40以上の言語に対応（らしい） + この間正式リリース + 1アカウント毎に1Docker環境与えられる + IDEはオープンソース + よく分かってない ## こんなん ## デモ ## 良いところ + 難易度低い + Lisp環境動く + Githubとの連携 + どこからでも同じ環境にアクセス + キーバインドはうれしい各宗教対応の {Mac, Windows}x{Default, Emacs, Vim, Sublime} ## 微妙なところ + シンタックスハイライト微妙 （せめてキーワード引数はどうにか） + 補完微妙 + インデント微妙 + swank使いたい 以上 何か質問あればどうぞ   </description>
    </item>
    
    <item>
      <title>(S式で書く(altJS)達)</title>
      <link>//KeenS.github.io/slide/sshi-deshu-kualtjs/</link>
      <pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/sshi-deshu-kualtjs/</guid>
      <description># (S式で書く(altJS)達) κeen(@blackenedgold) 天下一altJS武闘会(#tenka1altJS) @渋谷プライムプラザ四階 ## 自己紹介 + κeen + 東大数学科の4年生 + Twit : @blackenedgold + Github : KeenS + Blog : [κeenのHappy Hacκing Blog](http://KeenS.github.io/) + Shibuya.lispにいます。(2014-06〜運営になりました) + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます ## お品書き - (ボツ) Shen.js - (ボツ) Embedable Common Lisp with Emscripten - (ボツ) Picrin with Emscripten - (ボツ) オレオレaltJSの作り方の話 - ParenScript ## Shen.js Shenの公式ページより + パターンマッチ + λ計算ベース + マクロ + 遅延評価も可能 + 静的型検査 + 関数的なPrologの統合 + ビルトインコンパイラコンパイラ これのJS実装もある。 ## 例 ```lisp (define factorial 0 - 1 X - (* X (factorial (- X 1)))) ``` そもそもaltJSじゃない… ボツ ## ECL with Emscripten + ANSI Common Lisp準拠のCommon Lisp処理系 + LispをコンパイルしてCを吐く + Emscriptenでコンパイルすれば… `#include ` が悪さをしてコンパイル出来ない ボツ ## picrin + R7RS small準拠を目指すScheme処理系 + R7RS準拠の中では唯一Emscriptenで コンパイル出来るらしい + SDLもEmscriptenで動くらしいから 組み合わせればウハウハじゃね？ コンパイル出来ない… ( `va_args` は64bit x Clang3.</description>
    </item>
    
    <item>
      <title>言葉遣いの時代変遷を追う</title>
      <link>//KeenS.github.io/slide/nlp/</link>
      <pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/nlp/</guid>
      <description># 言葉遣いの時代変遷を追う 理学部数学科4年 金 舜琳 （きん すんりん） ## 概要 古いものから新しいものまであるリソースから単語を抽出し、使用頻度から単語の時代変遷を追う ## 手法 ## step1 青空か新聞から単語抽出抽出を行なう * 名詞、形容詞、語尾などが候補 * 青空は多様性がある/話し言葉もとれるが古いのしかない？ * 新聞は均質だからサンプル調査に向いてる？ ## step2  年代別に使用頻度上位数十〜百ぐらいを使用頻度順まとめてみる ## step3  似たような意味の単語で順位の入れ替わりが見受けられたら詳細に追ってみる とりあえず手動を考えている。発展課題的にプログラムでやっても良いかもしれない ##step4  変遷の背景を考えてみる 戦前/戦後とか分りやすいものとかなんとか   </description>
    </item>
    
  </channel>
</rss>