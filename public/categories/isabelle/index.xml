<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>κeenのHappy Hacκing Blog</title>
    <link>/categories/isabelle/index.xml</link>
    <description>Recent content on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="/categories/isabelle/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>正しいScalaのコードが欲しい</title>
      <link>/slide/tadashiiScalanoko_dogahoshii/</link>
      <pubDate>Wed, 05 Oct 2016 00:10:25 +0900</pubDate>
      
      <guid>/slide/tadashiiScalanoko_dogahoshii/</guid>
      <description>&lt;section data-markdown
    data-separator=&#34;\n===\n&#34;
    data-vertical=&#34;\n---\n&#34;
    data-notes=&#34;^Note:&#34;&gt;
&lt;script type=&#34;text/template&#34;&gt;
# 正しいScalaのコードが欲しい
----------------------

&lt;!-- .slide: class=&#34;center&#34; --&gt;
===
# About Me
---------
![κeenのアイコン](/images/icon.png) &lt;!-- .element: style=&#34;position:absolute;right:0;z-index:-1&#34; --&gt;

 + κeen
 + [@blackenedgold](https://twitter.com/blackenedgold)
 + Github: [KeenS](https://github.com/KeenS)
 + 基盤開発グループ
 + Lisp, ML, Rust, Shell Scriptあたりを書きます
   + Scalaはあんまり
===
# Scalaを始めたばかりの頃の話

&lt;!-- .slide: class=&#34;center&#34; --&gt;
===


``` scala
def revappend[A](
    xs: List[A],
    ys: List[A]): List[A] = match xs {
  case Nil =&gt; Nil
  case x::xs_ =&gt; revappend(xs_, x::ys)
}
```

===

``` scala
def length(xs: List[_]): Int = xs match {
  case Nil =&gt; Nil
  case x::xs_ =&gt; 1 + length(xs_)
}
```

===

``` scala
def append[A](
    xs: List[A],
    ys: List[A]): List[A] = xs match {
  case Nil =&gt; Nil
  case x::xs_ =&gt; x :: append(xs_, ys)
}

append(List(1, 2, 3), List(4, 5, 6))
// =&gt; List(1, 2, 3)

```

===
# Scalaを始めたばかりの頃の話
-----------------------------

* 正しくないコードばかり書いてしまう
  + 他の言語の構文と混ぜてしまう
  + 型エラー
  + 実装ミス
* 正しいScalaのコードが欲しい

===
# 正しさって？
-------------

* 構文が正しいコード?
* コンパイルが通るコード?
* バグのないコード？
  + テストが通るコード?

===
# 正しさって？
-----------

* 数学だったら？
* 数学なら証明されれば正しい
* プログラムの証明????

===
# Isabelle
----------

* 汎用証明支援系
* [Isabelle](https://isabelle.in.tum.de/)
* 結構昔からある
* 関数型言語 + 高階論理

===
# コード
--------

``` isabelle
datatype &#39;a list = Nil                 (&#34;[]&#34;)
  | Cons &#39;a &#34;&#39;a list&#34;    (infixr &#34;#&#34; 65)

primrec app :: &#34;&#39;a list =&gt; &#39;a list =&gt; &#39;a list&#34; (infixr &#34;@&#34; 65)
  where
  &#34;[] @ ys      = ys&#34; |
  &#34;(x # xs) @ ys = x # (xs @ ys)&#34;
```

===

# 証明
------

``` isabelle
lemma app_Nil2 [simp]: &#34;xs @ [] = xs&#34;
  apply(induct_tac xs)
  apply auto
  done

lemma app_assoc [simp]: &#34;(xs @ ys) @ zs = xs @ (ys @ zs)&#34;
  apply (induct_tac xs)
  apply auto
  done
```

===
# Extract
---------

```isabelle
export_code append
   in Scala
   module_name &#34;Example&#34;
   file &#34;Example.scala&#34;
```

===
# Scalaのコード
---------------

証明されたScalaのコードが手に入る

``` scala
object Example {

abstract sealed class list[A]
final case class Nila[A]() extends list[A]
final case class Cons[A](a: A, b: list[A]) extends list[A]

def append[A](x0: list[A], ys: list[A]): list[A] = (x0, ys) match {
  case (Nila(), ys) =&gt; ys
  case (Cons(x, xs), ys) =&gt; Cons[A](x, append[A](xs, ys))
}

} /* object Example */

```

===
# 余談
-------

他の言語にもextract出来る

```isabelle
export_code append
   in SML
   module_name &#34;Example&#34;
   file &#34;Example.sml&#34;
```


===
# まとめ
---------

* プログラムは証明出来るよ
* Isabelleで証明が出来るよ
* Isabelleで証明したら正しいScalaのコードが手に入るよ

&lt;/script&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Isabelleに入門した</title>
      <link>/blog/2016/01/12/isabelleninyuumonshita</link>
      <pubDate>Tue, 12 Jan 2016 22:23:45 +0900</pubDate>
      
      <guid>/blog/2016/01/12/isabelleninyuumonshita</guid>
      <description>&lt;p&gt;κeenです。連休中にIsabelleを少しばかり触ったのでその時のまとめを。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;isabelleって&#34;&gt;Isabelleって？&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://isabelle.in.tum.de/&#34;&gt;公式&lt;/a&gt;。定理証明支援系の一つ。SML処理系の1つ、Poly/MLで書かれている。
どうやらHOL(Higher Order Logic)に焦点を当てているようだが詳しいことは分かっていない。&lt;/p&gt;

&lt;p&gt;あと、Linuxが正式にはGNU/LinuxというようにIsabelleもIsabelle/Isar/HOLと言うべきらしいが、まだよく分かっていない。&lt;/p&gt;

&lt;h1 id=&#34;インストール&#34;&gt;インストール&lt;/h1&gt;

&lt;p&gt;公式サイトからダウンロード出来るが、後述のProofGeneralの関係上Isabelle2014をインストールする。&lt;/p&gt;

&lt;h1 id=&#34;エディタ設定&#34;&gt;エディタ設定&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ProofGeneral/PG&#34;&gt;ProofGeneral&lt;/a&gt;を使う。恐らくGitHub版を使った方がいい。設定は1行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(load (expand-file-name &amp;quot;/path/to/ProofGeneral/generic/proof-site&amp;quot;) nil t)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書くだけ。多分&lt;code&gt;prettify-symbol-mode&lt;/code&gt;も自動でonになる。(なってなかったらなんか適当に設定しておこう。global-prettify-symbols-modeとかで。)
Isabelleの古いドキュメントを見てるとX-Symbolsモードなるものが出てくるが、恐らく現在の&lt;code&gt;prettify-symbol-mode&lt;/code&gt;だと思う。&lt;/p&gt;

&lt;h1 id=&#34;はじめる&#34;&gt;はじめる&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;isabelle.in.tum.de/doc/tutorial.pdf&#34;&gt;この&lt;/a&gt;チュートリアルを進めている。まだ途中。タクティックも&lt;code&gt;tactic_ind&lt;/code&gt;と&lt;code&gt;auto&lt;/code&gt;しか知らない。&lt;/p&gt;

&lt;p&gt;とりあえず拡張子は.thyにしとくとEmacsが認識してくれる。&lt;/p&gt;

&lt;h1 id=&#34;所感&#34;&gt;所感&lt;/h1&gt;

&lt;p&gt;Coqを触ったことあるとそれなりにスムーズに入れた。ただしダブルクォートはキモい。
Coqも3つくらいの言語が混ってるらしいのでその内のGallinaの部分をクォートで囲っている感じなのだろうか。
クォートの部分はHOLがどうのこうの言ってた気がする。&lt;/p&gt;

&lt;p&gt;まだどんなことが出来るのか分からないのでCoqの方がマシじゃんという感想しかない。&lt;/p&gt;

&lt;h1 id=&#34;困ったところ&#34;&gt;困ったところ&lt;/h1&gt;

&lt;p&gt;チュートリアル中に数学記号が出てくる。∀とか∃とか¬とか。断りもなしにソースコード中にも。
最初、組版の都合上置き換えたのだろうとCoqのようにforall, exists, notと打っていたがエラーになった。じゃあ、とユニコードで打ってみてもエラーになった。
結局、TeXのようにコマンドを入力するとWYSIWYGのようにシンボルになるらしい。
さらにややこしいことにEmacsに特定のシーケンスでキーを入力するとそのコマンドを挿入してくれる機能がついている。&lt;/p&gt;

&lt;p&gt;とりあえず今のところ分かっているものをまとめる&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;見た目&lt;/th&gt;
&lt;th&gt;Emacsでの入力&lt;/th&gt;
&lt;th&gt;実際のタグ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;∀&lt;/td&gt;
&lt;td&gt;\forall&lt;/td&gt;
&lt;td&gt;&amp;lt;forall&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;∃&lt;/td&gt;
&lt;td&gt;\exists&lt;/td&gt;
&lt;td&gt;&amp;lt;exists&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;¬&lt;/td&gt;
&lt;td&gt;\not&lt;/td&gt;
&lt;td&gt;&amp;lt;not&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;∧&lt;/td&gt;
&lt;td&gt;\and, /&lt;/td&gt;
&lt;td&gt;&amp;lt;and&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;∨&lt;/td&gt;
&lt;td&gt;\or, \/&lt;/td&gt;
&lt;td&gt;&amp;lt;or&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;⇒&lt;/td&gt;
&lt;td&gt;\Rightarrow, =&amp;gt;&lt;/td&gt;
&lt;td&gt;&amp;lt;Rightarrow&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;→&lt;/td&gt;
&lt;td&gt;\rightarrow, -&amp;gt;&lt;/td&gt;
&lt;td&gt;&amp;lt;rightarrow&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;≡&lt;/td&gt;
&lt;td&gt;\equiv, ==&lt;/td&gt;
&lt;td&gt;&amp;lt;equiv&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;≠&lt;/td&gt;
&lt;td&gt;\noteq, ~=&lt;/td&gt;
&lt;td&gt;&amp;lt;noteq&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;なんかそれっぽい記号を連ねてみたら色々出てきた。けどユニコード入力出来ないから載せれないw。&lt;/p&gt;

&lt;p&gt;逆引きしたい。見た目からコマンドを知りたい。&lt;/p&gt;

&lt;p&gt;なんかまとまりないけどそんな所で。頭痛い。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>