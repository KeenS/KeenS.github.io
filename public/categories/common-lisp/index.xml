<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Common Lisp on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/common-lisp/</link>
    <description>Recent content in Common Lisp on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 17 Nov 2018 22:59:16 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/common-lisp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>言語処理系勉強会に参加してきた</title>
      <link>//KeenS.github.io/blog/2018/11/17/gengoshorikeibenkyoukainisankashitekita/</link>
      <pubDate>Sat, 17 Nov 2018 22:59:16 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/11/17/gengoshorikeibenkyoukainisankashitekita/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://connpass.com/event/104863/&#34;&gt;言語処理系勉強会 Vol.1 &lt;/a&gt;に参加してきました。そこでの@omochimetaruさんの&lt;a href=&#34;https://gist.github.com/omochi/58f374f2809fb1c9122d2b0b69948256&#34;&gt;SwiftのGenericsとProtocolの実装&lt;/a&gt;の話が面白かったので少し感想を。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lispの多値とその実装達</title>
      <link>//KeenS.github.io/slide/common_lispnotachitosonojissoutachi/</link>
      <pubDate>Thu, 15 Nov 2018 22:55:10 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/common_lispnotachitosonojissoutachi/</guid>
      <description># Common Lispの多値とその実装達 ---------------------- [言語処理系勉強会 Vol.1 - connpass](https://connpass.com/event/104863/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # 今日話すこと -------------- * 多値のこと * Common Lispの多値のこと * Common Lispの多値の実装のこと === # 引数と返り値の数 -----------------  .border-table { width: 100%; height: 100%; } .border-table tr, .border-table td, .border-table th { border: solid 1px #000; }  引数  単複 返り値単MLなど多数  複?</description>
    </item>
    
    <item>
      <title>Deprecating CIM</title>
      <link>//KeenS.github.io/blog/2017/01/29/deprecating_cim/</link>
      <pubDate>Sun, 29 Jan 2017 22:18:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/01/29/deprecating_cim/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m κeen. I have a sad news, I&amp;rsquo;ll stop the development of &lt;a href=&#34;https://github.com/KeenS/CIM&#34;&gt;CIM&lt;/a&gt; and no more updates for new lisp impls will be provided.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>高速な継続ライブラリに向けて</title>
      <link>//KeenS.github.io/slide/kousokunakeizokuraiburarinimukete/</link>
      <pubDate>Sun, 08 May 2016 21:26:32 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/kousokunakeizokuraiburarinimukete/</guid>
      <description># 高速な継続ライブラリに向けて ---------------------- [継続勉強会](http://connpass.com/event/28150/) 2016-05-22 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # 継続欲しい ----------- * 色々な場面で便利 * Schemeで使い回してるのうらやましい * Common Lispでも使いたい * 現実には限定継続が欲しい + Common Lispには大域脱出はある === # 限定継続を使う例 ----------------- ## 非同期プログラミング * コールバック形式だと厳しい * 限定継続を使うと綺麗に書き直せる === # 限定継続を使う例 ----------------- ## ゲームのコルーチン * 複数のオブジェクトを制御するのにコルーチンが欲しい * cf [コルーチンをCommon Lispで簡単に定義 - さくらんぼのlambda日記](http://lambdasakura.hatenablog.com/entry/20111026/1319598590) === # 限定継続を使う例 ----------------- ## do記法 * モナドのdo記法は限定継続を使って実装出来る * [Operational monad in scheme](http://www.</description>
    </item>
    
    <item>
      <title>readlineの作り方</title>
      <link>//KeenS.github.io/blog/2016/02/14/readlinenotsukurikata/</link>
      <pubDate>Sun, 14 Feb 2016 22:37:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/14/readlinenotsukurikata/</guid>
      <description>&lt;p&gt;κeenです。なんか伏線っぽいもの回収しといた方が良いかなと思ってLinuxっぽい話でも。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lispで高速行列演算</title>
      <link>//KeenS.github.io/blog/2016/02/04/common_lispdekousokugyouretsuenzan/</link>
      <pubDate>Thu, 04 Feb 2016 23:47:34 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/04/common_lispdekousokugyouretsuenzan/</guid>
      <description>&lt;p&gt;κeenです。Common Lispから線形代数ライブラリを使うポストで比較にCommon Lispのコードが出されていたのですがもう少し改良出来そうだったので少しばかり高速化してみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>マクロについて整理してみる</title>
      <link>//KeenS.github.io/blog/2015/07/04/makuronitsuiteseirishitemiru/</link>
      <pubDate>Sat, 04 Jul 2015 15:34:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/07/04/makuronitsuiteseirishitemiru/</guid>
      <description>&lt;p&gt;何故Lisperがマクロについて語るのか。Lisperと議論してみても満足のいく答を得た人はそんなにいないと思う。
それはLisper自身便利とは思っていても何が便利なのかを意識してなくて他人に上手く説明出来ないからじゃないかと思った。
ちょっと思いついた範囲でまとめてみる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>あなたの知らないShebang</title>
      <link>//KeenS.github.io/blog/2015/06/26/anatanoshiranaishebang/</link>
      <pubDate>Fri, 26 Jun 2015 23:24:44 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/06/26/anatanoshiranaishebang/</guid>
      <description>&lt;p&gt;κeenです。最近は何故かBlack君って呼ばれます。Shebangの書き方にはいくつかあって、それを利用したふと面白い方法を思い付いたので共有を。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lisp処理系拡張の探求 SBCLのマルチスレッドサポート</title>
      <link>//KeenS.github.io/slide/common_lispshorikeikakuchounotankyuu_sbclnomaruchisureddosapo_to/</link>
      <pubDate>Sat, 20 Jun 2015 18:30:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/common_lispshorikeikakuchounotankyuu_sbclnomaruchisureddosapo_to/</guid>
      <description>### Common Lisp 処理系拡張の探求 SBCLのマルチスレッドサポート ---------------------- Lisp Meet Up #29 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # CLのマルチスレッド ---------------------------- ## [bordeaux-threads](https://trac.common-lisp.net/bordeaux-threads/wiki/ApiDocumentation) * 色々な処理系のマルチスレッドサポートの抽象レイヤー * デファクトスタンダード + スレッド + ロック + コンディションヴァリアル === # SBLCのマルチスレッド === # SBLCのマルチスレッド ---------------------------- * スレッド + スレッド内エラー * アトミック操作+ CAS* 排他制御（ロック） * セマフォ * コンディションヴァリアル * バリア * キュー* メールボックス* ゲート* frlock=== # アトミック操作 === # アトミック操作 ---------------- 複雑な動作は同じデータに並行に動かすと壊れうる ``` [var = 1] [incf] | [decf] [1][1] [2]---[var = 2] | | | [var = 0]+---+ go | | V V ``` === # frlock -------- * Fast Read Lock * またの名をRead-Write Lock * Read Lockは多重に取れる。Write Lockは1つしか取れない。 * 基本操作は`frlock-read`と`frlock-write` * 普通のlockと違って複数のReadが速くなる === # まとめ -------- * SBCLのマルチスレッドサポートはbordeaux-threadsよりもリッチ * 処理系の独自サポート面白い * 処理系に依存してしまってもいいんじゃないだろうか   </description>
    </item>
    
    <item>
      <title>Common Lispで限定継続と遊ぶ</title>
      <link>//KeenS.github.io/slide/common_lispdegenteikeizokutoasobu_/</link>
      <pubDate>Sun, 26 Apr 2015 21:09:07 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/common_lispdegenteikeizokutoasobu_/</guid>
      <description># Common Lispで限定継続と遊ぶ ---------------------- [Lisp Meet Up #27](https://atnd.org/events/64988) === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Agenda -------- 0. cl-contの紹介 1. 限定継続の話 2. 限定継続の使い方の話 3. 限定継続の実装の話 === # CL-CONTの紹介 === # CL-CONT --------- * Common Lispの限定継続ライブラリ * 結構古くからあるっぽい * 割と色々なライブラリが使ってる === # CL-CONT --------- ![cl-cont dependers](/images/cl-cont-dependers.png) === # API ----- * 継続を区切るマクロ + `with-call/cc` + `defun/cc` + `lambda/cc` * 継続を取得するマクロ + `call/cc` + `let/cc` ※後で説明するので意味が分からなくても問題ないです。 === # 限定継続の話 === # 継続とは --------- * &#34;</description>
    </item>
    
    <item>
      <title>caveman2、ningle…Common LispのWeb周りのフレームワークを快適に使うためのたった1つのコト</title>
      <link>//KeenS.github.io/slide/caveman2-ningle...common-lispnowebmawarinofure-muwa-kuwokaitekinitsukautatta1tsunokoto/</link>
      <pubDate>Thu, 05 Mar 2015 13:18:44 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/caveman2-ningle...common-lispnowebmawarinofure-muwa-kuwokaitekinitsukautatta1tsunokoto/</guid>
      <description># caveman2、ningle、datafly…Common LispのWeb周りのフレームワークを快適に使うためのたった1つのコト ---------------------- Clack Meet Up #1 2015-03-05 @サムライト === ずっと俺のターン === # 問題 ------ Common Lispは case * Sensitive * Insensitive どっち? === # 問題 ------- あれ？ ```lisp (eql? &#39;CaseInsensitive &#39;caseinsensitive) ;= t ``` === # 問題 ------- リーダがデフォルトで大文字にするだけ ```lisp (eql? &#39;|CaseSensitive| &#39;|casesensitive|) ;= nil ``` === # Caveman2 --------- ```lisp @route GET &#34;/hello&#34; (defun say-hello (&amp;key (|name| &#34;Guest&#34;)) (format nil &#34;Hello, ~A&#34; |name|)) ``` === # Ningle -------- ```lisp (setf (ningle:route *app* &#34;</description>
    </item>
    
    <item>
      <title>既存のテンプレートエンジンの問題点と再設計</title>
      <link>//KeenS.github.io/slide/kizonnotenpure-toenjinnomondaitentosaisekkeiaruihaarrowsnitsuite/</link>
      <pubDate>Mon, 02 Mar 2015 23:36:03 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/kizonnotenpure-toenjinnomondaitentosaisekkeiaruihaarrowsnitsuite/</guid>
      <description>.red { color: red; }  # 既存のテンプレートエンジンの問題点と再設計、あるいはArrowsについて ----------------------------------------------------------------- Clack Meet Up #1 2015-03-05 @サムライト === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 野生のLisper + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます === # Template Engines === # Existing Architeture ---------------------- 0. (リクエスト) 1. アプリ 0. 引数を計算 1. テンプレートに引数を渡す 2. レスポンスをレンダリング 4. レスポンスをサーバに渡す 5. (レスポンス) === # Rendering? ---------------------- * 結合した文字列はクライアントに返ったらその後はゴミ + GCへ負荷がかかる (後述) * クライアントにとって1つの文字列である必要はない * むしろ返せる部分だけ先に返した方が得（後述） === # GC Pressure (SBCL) ----------------- * 世代別Copy GC * 結合した文字列は比較的大きい * `alloc_space`に入らない大きさならアロケートが遅い * GCを頻繁に起動してしまう * 16KBを越えると特別扱いされて遅い/メモリを喰う * LispのWebアプリはレスポンスタイムの分散が大きい（要出展） 参考: [SBCL GENCGC @ x86 Linux](http://cl-www.</description>
    </item>
    
    <item>
      <title>Common Lispのポータビリティとユニバーサリティ</title>
      <link>//KeenS.github.io/blog/2015/01/22/common-lisp-portability-and-univesality/</link>
      <pubDate>Thu, 22 Jan 2015 07:51:02 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/22/common-lisp-portability-and-univesality/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://clfreaks.org/post/108341635899/1-cim-vs-roswell&#34;&gt;clfreaks&lt;/a&gt;の収録時に他のLisperと話してて価値観というか目標を共有出来てないなと思ったのでここで心情を語る次第。今のCommon Lispの使われ方には問題がある。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>実用Common Lispを読んだ</title>
      <link>//KeenS.github.io/blog/2014/12/14/shi-yong-common-lispwodu-nda/</link>
      <pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/14/shi-yong-common-lispwodu-nda/</guid>
      <description>&lt;p&gt;以前&lt;a href=&#34;//KeenS.github.io/blog/2014/10/20/lisp-ja/&#34;&gt;Common Lispの勉強の手引の記事&lt;/a&gt;を書いたときに実用Common Lispの名を挙げたが読んだことはなかった。&lt;/p&gt;

&lt;p&gt;一応名前を挙げた責任として読んでみた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>割と処理系ポータブルなCommon Lisp実行可能ファイルを作る</title>
      <link>//KeenS.github.io/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru/</link>
      <pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru/</guid>
      <description>&lt;p&gt;κeenです。Lisp Advent Calendarはもう枠埋まっちゃったので普通にブログで。&lt;/p&gt;

&lt;p&gt;コマンドラインから実行可能なLispファイルをそれなりに多くの処理系で動くように作る話。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>claspがアップデートされたよ</title>
      <link>//KeenS.github.io/blog/2014/12/06/claspgaatupudetosaretayo/</link>
      <pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/06/claspgaatupudetosaretayo/</guid>
      <description>&lt;p&gt;このエントリーは&lt;a href=&#34;http://qiita.com/advent-calendar/2014/lisp&#34;&gt;Lisp Advent Calendar 2014&lt;/a&gt;6日目の記事です。&lt;br /&gt;
前: nobkzさんで &lt;a href=&#34;http://qiita.com/nobkz/items/2be2b6806237d8ea6e21&#34;&gt;lfe - (lisp (flavored (erlang)))について基本その1 - Qiita&lt;/a&gt;&lt;br /&gt;
後: 私で &lt;a href=&#34;//KeenS.github.io/blog/2014/12/07/h2onipicrinworong-kasu/&#34;&gt;H2Oにpicrinを溶かす | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;κeenです。アドベントカレンダーめっちゃ書いてますね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VOPで遊ぶ</title>
      <link>//KeenS.github.io/blog/2014/12/02/vopdeyou-bu/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/02/vopdeyou-bu/</guid>
      <description>&lt;p&gt;(:meta&lt;br /&gt;
 ((:this &amp;ldquo;&lt;a href=&#34;http://qiita.com/advent-calendar/2014/lisp&#34;&gt;Lisp Advent Calendar 2014&lt;/a&gt;の3日目の記事&amp;rdquo;)&lt;br /&gt;
  (:prev (:author &amp;ldquo;tk_riple&amp;rdquo; :title &lt;a href=&#34;http://compassoftime.blogspot.jp/2014/12/r7rs.html&#34;&gt;&amp;ldquo;時の羅針盤＠blog: R7RSポータブルライブラリを書く際の落とし穴&amp;rdquo;&lt;/a&gt;))&lt;br /&gt;
  (:next (:author &amp;ldquo;nobkz&amp;rdquo; :tite &amp;ldquo;&lt;a href=&#34;http://qiita.com/nobkz/items/68ee2adbc13caf3eec6f&#34;&gt;Shenの基礎その1 基本的な型 - Qiita&lt;/a&gt;&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;κeenです。さっきまでVOPで遊んでたので当初の予定を変更してVOPの話をします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>require, ASDF, quicklispを正しく使う</title>
      <link>//KeenS.github.io/blog/2014/11/30/quicklisp/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/11/30/quicklisp/</guid>
      <description>&lt;p&gt;κeenです。最近のCommon Lispのパッケージ管理は&lt;code&gt;ql:quickload&lt;/code&gt;しか知らないという方も多いのではないでしょうか。しかしそれだけでは機能が足りないこともあります。Common Lispには様々な管理システムがあるので整理しましょう。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lisp meet up #22でLTしてきた</title>
      <link>//KeenS.github.io/blog/2014/11/28/lisp-meet-up-number-22deltsitekita/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/11/28/lisp-meet-up-number-22deltsitekita/</guid>
      <description>&lt;p&gt;κeenです。先日 Lisp Meet Up #22 でLTしてきたので報告です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>claspを少し触ってみた</title>
      <link>//KeenS.github.io/slide/clasp/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/clasp/</guid>
      <description># claspを少し触ってみた ---------------------- Lisp Meet Up presented by Shibuya.lisp #21 2014-10-29 κeen(@blackenedgold) # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます # clasp ------- * Github: [drmeister/clasp](https://github.com/drmeister/clasp) * 2014-09-18に0.1リリース(現在0.11プレビューが出ている) * 今は0.11プレビューが出ている * ANSI Common Lisp準拠を目指す(現在80 ~90%) * ECLからのフォーク * LLVMベースのJIT([MCJIT](http://llvm.org/docs/MCJITDesignAndImplementation.html))搭載 * C++とLispで書かれている * C++との連携を意識 Note: C++との連携の部分を強調。今回は0.11プレビューでの話 # メモリ管理 ------------------ * Memory Pool Systemと Boehm GCから選べる * ビルドするときにどっちかを選ぶ # メモリ管理 ------------------ ## [Boehm GC](http://www.</description>
    </item>
    
    <item>
      <title>Common Lispの勉強をするには、あるいは情報を得るには</title>
      <link>//KeenS.github.io/blog/2014/10/20/lisp-ja/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/10/20/lisp-ja/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.8arrow.org/entry/2014/09/05/062028&#34;&gt;深町さんのブログ&lt;/a&gt;で日本語でCommon Lispの質問をする方法が載ってましたが質問じゃなくて単に情報を得たい、勉強をしたいという場合が書かれてなかったので勝手に補遺。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shibuya.lisp Tech Talk #8を運営&amp;LTしてきました</title>
      <link>//KeenS.github.io/blog/2014/09/16/lisp-tech-talk-8/</link>
      <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/09/16/lisp-tech-talk-8/</guid>
      <description>&lt;p&gt;κeenです。レポートに追われ試験があり合宿に行きで2週間以上空きましたが8/30にShibuya.lisp TT #8の運営をしつつLT枠での参加もしてきたので報告です。何かそこそこ大きなイベントの運営をされる方の参考になれば。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introduction to CIM</title>
      <link>//KeenS.github.io/slide/introduction-to-cim/</link>
      <pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/introduction-to-cim/</guid>
      <description># Introduction to CIM κeen(@blackenedgold) ## 突然ですが Common Lispのスクリプトファイルの実行方法知ってますか？ sbcl sbcl --script $file ecl ecl -shell $file ccl ccl -e $file -e &#39;(quit)&#39; ... シバン可搬性のあるスクリプトが書けない ## そこで、こんなの書きました ```sh case &#34;$LISP_IMPL&#34; in sbcl*) sbcl --script $1 ;; clisp*) clisp -on-error exit -i $1 ;; ecl*) ecl -shell $1 ;; ccl*) ... ``` ## でも問題がある * どの処理系をバックエンドに使うか * 処理系のパスをどう捜すか * そもそもどうやって使ってもらうか ## κeenの答え  処理系の管理までやってしまおう。  そうしたら一緒に使ってもらえる。 ＿人人人人人人＿ ＞　CIMの誕生　＜ ￣Y^Y^Y^Y^Y￣ ## CIMとは * Common Lisp Implementation Manager * ちむ * Rubyのrvmを強く意識 * Common Lisp処理系のインストール、切り替え、コマンドラインインターフェースなど。 * `cim`、 `cl`、 `ql`コマンドから成る * B Shell スクリプト製(マルチプラットフォーム対応のため) * 2013/10くらいからぼちぼち開発 ## `cim`コマンドについて インストール cim install sbcl バックエンドの切り替え cim use sbcl 現在情報 cim info CIMのアップデート cim get など。 ## `cl`コマンドについて * 最初に紹介したシェルスクリプトベース * コマンドラインからCommon Lispを使うことを重視 * シバン対応も。 * REPLは独自実装(デバッガを黙らせるのが主な目的) * オプションはrubyを意識 ## 少しシバンの話 ### だめな例 ```lisp #!</description>
    </item>
    
    <item>
      <title>授業で半年間moclを使ってみた</title>
      <link>//KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8/</link>
      <pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8/</guid>
      <description># 授業で半年間moclを使ってみた Shibuya.lisp TT #8 κeen(@blackenedgold) ## 自己紹介 + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます 一年前 ## [計算数学II](http://ks.ms.u-tokyo.ac.jp/) ![計算数学IIのホームページ](/images/shibuya_lisp_TT8/calculation_math.png) 自分でテーマを決めて半年間取り組む チーム[人造エイリアン](https://sites.google.com/site/2013ks2/home) ![チーム人造エイリアン](/images/shibuya_lisp_TT8/android_alien.png) ## Common Lisp でAndroid? ## [mocl](https://wukix.com/mocl) ![mocl home](/images/shibuya_lisp_TT8/mocl.png) ## What is mocl * iOS, Androidで動くCommon Lisp処理系 * LLVMをバックエンドに使う * Networking, Unicode, CLOS, and More. Run Countless CL Libraries. ## 買ってもらった(・ω・)v ![mocl home](/images/shibuya_lisp_TT8/mocl_ut.png) ## 注意 私が触ったのは1つ前のバージョンです。 一部5月のアップデートで改善されています。 ## How it Works ## コードサンプル 授業で私が作ったオセロのAIのコード ```java public BoardCanvas(Context context,int width, int height,int color ){ .</description>
    </item>
    
    <item>
      <title>Common LispでSIGINTを捉える</title>
      <link>//KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp/</link>
      <pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp/</guid>
      <description>&lt;p&gt;κeenです。もうすぐShibuya.lisp TT #8 ですね。今回はCIMのREPLの改善をしてたらSIGINTを補足しようとして詰まったので共有します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloud9の紹介とLispのセットアップ</title>
      <link>//KeenS.github.io/blog/2014/08/02/introduction-to-cloud9/</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/08/02/introduction-to-cloud9/</guid>
      <description>&lt;p&gt;κeenです。先日のLisp Meet Upで紹介した&lt;a href=&#34;https://c9.io&#34;&gt;Cloud9&lt;/a&gt;の詳解でも書きます。まあ、そんなに詳しくないんですけどね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #19でLTしてきました</title>
      <link>//KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19/</link>
      <pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19/</guid>
      <description>&lt;p&gt;κeenです毎月恒例の&lt;a href=&#34;https://atnd.org/events/53246&#34;&gt;Lisp Meet Up presented by Shibuya.lisp&lt;/a&gt;でLTしてきたのでレポートです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #16 でLTしてきました。</title>
      <link>//KeenS.github.io/blog/2014/04/25/lisp-meet-up-number-16/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/04/25/lisp-meet-up-number-16/</guid>
      <description>&lt;p&gt;κeenです。年度末/年度始めで色々あり、しばらく更新できてませんでしたが &lt;a href=&#34;http://atnd.org/events/49370&#34;&gt;Lisp Meet Up Presented by Shibuya.lisp #16&lt;/a&gt;に参加してきたのでレポートです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #14でLTしてきました</title>
      <link>//KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14/</link>
      <pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14/</guid>
      <description>&lt;p&gt;どうも、κeenです。Rubyをアップグレードしようとしたら&lt;code&gt;rvm&lt;/code&gt;が動かなくて、あれ？ってなったら私が&lt;code&gt;echo -&amp;gt; echo&lt;/code&gt;とかいう謎のsymlinkを作ってたせいでした。このブログはOctopressで作ってるのでその間更新遅れました。&lt;/p&gt;

&lt;p&gt;さて、毎月恒例 &lt;a href=&#34;http://atnd.org/events/47730&#34;&gt;Lisp Meet Up Presented by Shibuya.lisp #14&lt;/a&gt;でLTしてきたので報告です。今回は「Real World OCamlを読んだ感想」というタイトルです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CIMの解説をしてみる コマンド編</title>
      <link>//KeenS.github.io/blog/2014/01/27/cim-explanation/</link>
      <pubDate>Mon, 27 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/01/27/cim-explanation/</guid>
      <description>&lt;p&gt;先日LTで紹介したCIMが思いの外反響を呼んでる(Githubのstarが15)ので解説でもしてみます。&lt;/p&gt;

&lt;p&gt;コマンド編の次は実装編です。これでバグにエンカウントしたときの調査とか完璧ですね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #13でLTしてきました</title>
      <link>//KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13/</link>
      <pubDate>Fri, 24 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13/</guid>
      <description>&lt;p&gt;もう12時回ったので昨日になってしまいましたが &lt;a href=&#34;http://atnd.org/events/46746#comments&#34;&gt;Lisp Meet Up presented by Shibya.lisp #13&lt;/a&gt;に参加してLTしてきたので報告(?)エントリです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClackのHandlerの書き方</title>
      <link>//KeenS.github.io/blog/2013/12/06/lisp-advent-calendar-7/</link>
      <pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/12/06/lisp-advent-calendar-7/</guid>
      <description>&lt;p&gt;(この記事は &lt;a href=&#34;http://qiita.com/advent-calendar/2013/lisp&#34;&gt;Lisp Advent Calendar&lt;/a&gt; 7日目のためのエントリです。&lt;br /&gt;
 ( &lt;a href=&#34;http://meymao.hatenablog.com/entry/2013/12/06/140029&#34;&gt;6日目&lt;/a&gt; meymaoさんより「Lisperがクリスマスに贈るべきプレゼント三選」)&lt;br /&gt;
 ( &lt;a href=&#34;http://www.principia-m.com/ts/0081/index-jp.html&#34;&gt;8日目&lt;/a&gt; athos0220さんよりマクロとクロージャで作る並行プログラミング言語))&lt;/p&gt;

&lt;p&gt;ClackのHandlerの書き方についてちゃちゃっと解説します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ここ１ヶ月くらいの近況</title>
      <link>//KeenS.github.io/blog/2013/11/13/what-recent/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/11/13/what-recent/</guid>
      <description>&lt;p&gt;#isucon 参戦記がフォロワーの多い@tagomorisさんとか@nitro_idiotさんとかにツイートされて普段の数十倍のアクセスが来てテンション上がったので近況書きますね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shellyを使ってCommon LispファイルをExecutableにする</title>
      <link>//KeenS.github.io/blog/2013/09/26/shelly-script/</link>
      <pubDate>Thu, 26 Sep 2013 21:25:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/26/shelly-script/</guid>
      <description>&lt;p&gt;コマンドラインからCommon Lispの関数を実行できる &lt;a href=&#34;https://github.com/fukamachi/shelly&#34;&gt;Shelly&lt;/a&gt;を使ってCommon Lispファイルを実行形式にしてみました。Shellyは&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ shly + 1 2
3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;みたいに関数を実行できます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Common Lispスタイルガイド</title>
      <link>//KeenS.github.io/blog/2013/09/21/google-commonlisp-style-guide/</link>
      <pubDate>Sat, 21 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/21/google-commonlisp-style-guide/</guid>
      <description>&lt;p&gt;この度、 &lt;a href=&#34;http://google-styleguide.googlecode.com/svn/trunk/lispguide.xml&#34;&gt;Google Common Lispスタイルガイド&lt;/a&gt;が &lt;a href=&#34;http://google-common-lisp-style-guide-ja.cddddr.org/&#34;&gt;日本語に&lt;/a&gt;なりました。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>