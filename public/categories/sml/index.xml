<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SML on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/sml/</link>
    <description>Recent content in SML on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 02 Nov 2019 23:36:25 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/sml/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>代数的データ型とパターンマッチの補遺: 赤黒木</title>
      <link>//KeenS.github.io/blog/2019/11/02/daisuutekide_takatatopata_nmatchinohoi__akakuroki/</link>
      <pubDate>Sat, 02 Nov 2019 23:36:25 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2019/11/02/daisuutekide_takatatopata_nmatchinohoi__akakuroki/</guid>
      <description>&lt;p&gt;κeenです。
n月刊ラムダノートに書いた「代数的データ型とパターンマッチの基礎」のところで「パターンマッチがあるとこんなに便利になるよ」というのと紹介し忘れていたので勝手に補遺します。
まあ、紙面の都合もあって覚えていたとしても入りませんでしたね。
代数的データ型とパターンマッチの題材としては定番の赤黒木を紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>n月刊ラムダノートにパターンマッチについて寄稿しました</title>
      <link>//KeenS.github.io/blog/2019/11/02/ngekkanramudano_tonipata_nmatchinitsuitekikoushimashita/</link>
      <pubDate>Sat, 02 Nov 2019 16:10:02 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2019/11/02/ngekkanramudano_tonipata_nmatchinitsuitekikoushimashita/</guid>
      <description>&lt;p&gt;κeenです。
&lt;a href=&#34;https://www.lambdanote.com/collections/n/products/nmonthly-vol-1-no-3-2019&#34;&gt;n月刊ラムダノート Vol.1, No.3(2019)&lt;/a&gt;に代数的データ型とパターンマッチの基礎の章を寄稿しました。
どんな内容か、どうやって執筆までに至ったのかを話そうと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>タプル小話</title>
      <link>//KeenS.github.io/blog/2019/01/05/tapurukobanashi/</link>
      <pubDate>Sat, 05 Jan 2019 01:23:54 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2019/01/05/tapurukobanashi/</guid>
      <description>&lt;p&gt;κeenです。最近、Rustのタプルに「&lt;code&gt;tuple[0]&lt;/code&gt; じゃなくて &lt;code&gt;tuple.0&lt;/code&gt; のようにアクセスするのなんでだろ」というのをみかけてびっくりしたのでそれについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>関数適用、関数から評価するか？引数から評価するか？</title>
      <link>//KeenS.github.io/blog/2018/02/24/kansuutekiyou_kansuukarahyoukasuruka_hikisuukarahyoukasuruka/</link>
      <pubDate>Sat, 24 Feb 2018 01:26:59 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/02/24/kansuutekiyou_kansuukarahyoukasuruka_hikisuukarahyoukasuruka/</guid>
      <description>&lt;p&gt;κeenです。簡単にいうと「OCamlが関数の引数を右から評価する件について」。&lt;/p&gt;
&lt;p&gt;これは他人から聞いた話なのですがよく目にするので文章として纏めておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLのエコシステム（？）</title>
      <link>//KeenS.github.io/blog/2017/12/24/smlnoekoshisutemu___/</link>
      <pubDate>Sun, 24 Dec 2017 21:18:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/24/smlnoekoshisutemu___/</guid>
      <description>&lt;p&gt;κeenです。
どこかで紹介したつもりでしたが意外に書いてなかったのでSMLのツールとかそういうのを紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近のSML#の話題</title>
      <link>//KeenS.github.io/slide/saikinnosml_nowadai/</link>
      <pubDate>Mon, 17 Jul 2017 21:04:57 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/saikinnosml_nowadai/</guid>
      <description>κeen @blackenedgold Github: KeenS Idein Inc.のエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
話すこと   SML# 3.0。0以降立て続けにリリースが続いてる 最近の変更を追いきれないのでまとめて追う     ver. date     3.3.0 2017-06-20   3.2.0 2016-09-16   3.1.1 2016-07-15   3.1.0 2016-05-26   3.0.1 2016-04-04   3.0.0 2016-03-31   2.0.0 2014-04-04   1.2.0 2012-11-14    ===
そもそもSML#って？   SML &amp;lsquo;97 互換のコンパイラ  The Definition of Standard ML, Revised Self Hosted 2.</description>
    </item>
    
    <item>
      <title>SML#をUbuntu 16.10で動かす</title>
      <link>//KeenS.github.io/blog/2016/11/30/sml_woubuntu_16_10deugokasu/</link>
      <pubDate>Wed, 30 Nov 2016 15:18:58 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/11/30/sml_woubuntu_16_10deugokasu/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2016/ml&#34;&gt;ML Advent Calendar 2016 - Qiita&lt;/a&gt;の1日目の記事です。&lt;/p&gt;
&lt;p&gt;κeenです。小ネタを。Ubuntu 16.10でSML#を動かそうと思ったら動かなかったので動かします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLでモナド</title>
      <link>//KeenS.github.io/blog/2016/10/10/smldemonado/</link>
      <pubDate>Mon, 10 Oct 2016 11:05:38 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/10/10/smldemonado/</guid>
      <description>&lt;p&gt;κeenです。ML Workshop 2016でなんかSMLで型クラスする発表があったらしいので追ってみます。&lt;/p&gt;
&lt;p&gt;implicit parameterをexplicitに渡すのではなく、モジュールとファンクタを使った実装です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Socket on SML#</title>
      <link>//KeenS.github.io/slide/socket_on_sml_/</link>
      <pubDate>Sat, 02 Jul 2016 15:25:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/socket_on_sml_/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS サイバーエージェントのエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
HTTP on SML#?   SML#にJSONサポートが入った  REST API簡単に叩けるのでは？   SML#にFully Concurrent GCが入った  HTTPサーバ書くとレイテンシ抑えられて嬉しいのでは？   スレッドも使えるしスループットも高い筈   SML#でHTTPの機運 しかしHTTPサポートはないので自前実装するしかない  ===
Socket on SML#?   HTTPサポートに必要 Basisにはある (Optional)  SML#のBasisはサポートしてない   FFIあるしユーザランドで実装するか KeenS/SmlSharpSocketSupport  ===
TCP/IP、ソケットなど   ソケットアドレス - 自分、相手の居場所。これがないと通信出来ない  複数のアドレスファミリ(AF)がある IP v4, IP v6, UNIXドメインなど。   ソケット - 通信の仕組み。プログラムからはfdとして見える。  AFやtype(stream/diagram)の属性を持つ   INet - インターネットドメインソケット  TCPとUDP IP v4/v6アドレスで通信    ===</description>
    </item>
    
    <item>
      <title>SMLで函数型的正規表現マッチ</title>
      <link>//KeenS.github.io/slide/smldekansuukatatekiseikihyougenmatchi/</link>
      <pubDate>Tue, 29 Mar 2016 01:44:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/smldekansuukatatekiseikihyougenmatchi/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS サイバーエージェントのエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
元ネタ  関数型的正規表現マッチ | Preferred Research
===
正規表現  必要最小限の要素は5つだけ
 空文字 アルファベット1つ 正規表現のOR結合 正規表現のAND結合 正規表現の繰り返し  ===
SMLで表してみる  datatype reg = Empty | Sym of t | Or of reg * reg | And of reg * reg | Rep of reg ===
本当に大丈夫？ ===
/(a|b)*c/  And(Rep(Or(Sym &amp;quot;a&amp;quot;, Sym &amp;quot;b&amp;quot;)), Sym &amp;quot;c&amp;quot;) ===</description>
    </item>
    
    <item>
      <title>SML#のpthreadバインディング作った</title>
      <link>//KeenS.github.io/blog/2016/01/11/sml_nopthreadbaindingutsukutta/</link>
      <pubDate>Mon, 11 Jan 2016 00:57:20 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/11/sml_nopthreadbaindingutsukutta/</guid>
      <description>&lt;p&gt;κeenです。またしても深夜になってしまいましたがSML#のpthreadバインディングを作ったのでその報告を。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#とCプリプロセッサの連携</title>
      <link>//KeenS.github.io/blog/2015/12/26/sml_tocpuripurosessanorenkei/</link>
      <pubDate>Sat, 26 Dec 2015 20:09:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/26/sml_tocpuripurosessanorenkei/</guid>
      <description>&lt;p&gt;κeenです。Advent Calendarのためにネタやアイディアを用意したものの時間/場所的都合でAdvent Calendarとして出せなかったボツネタでも供養しようかと。
Advent Calendarが終わってしまったので投げやり気味ですね。
第3段はSML#とCプリプロセッサで連携する話。&lt;/p&gt;
&lt;p&gt;SML#のC FFIを使ってるとマクロで定義された値などを触りたくなるのですが、触れないのでどうにかしようかと。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#のオレオレREPLを作る話 初級</title>
      <link>//KeenS.github.io/blog/2015/12/26/sml_nooreorereplwotsukuruhanashi_shokyuu/</link>
      <pubDate>Sat, 26 Dec 2015 19:48:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/26/sml_nooreorereplwotsukuruhanashi_shokyuu/</guid>
      <description>&lt;p&gt;κeenです。Advent Calendarのためにネタやアイディアを用意したものの時間/場所的都合でAdvent Calendarとして出せなかったボツネタでも供養しようかと。
Advent Calendarが終わってしまったので投げやり気味ですね。
第2段はSML#のオレオレREPLを作る話の初級。&lt;/p&gt;
&lt;p&gt;SML#にはFFIがあり、任意のオブジェクトファイル/ライブラリをリンクしてC関数を呼び出すことが出来ますが、REPLで試そうとしてもREPLにリンクされていないので呼び出せません。
そこで呼び出したいオブジェクトファイルをリンクしたREPLを作れば捗るよね、という発想です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#に学ぶコンパイラ言語におけるREPLの実装方法</title>
      <link>//KeenS.github.io/blog/2015/12/12/sml_nimanabukonpairagengoniokerureplnojissouhouhou/</link>
      <pubDate>Sat, 12 Dec 2015 19:42:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/12/sml_nimanabukonpairagengoniokerureplnojissouhouhou/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/lang_dev&#34;&gt;言語実装 Advent Calendar 2015&lt;/a&gt;16日目の記事です。&lt;/p&gt;
&lt;p&gt;κeenです。かねてより気になっていたREPLの実装方法について、SML#のソースコードを読んだのでその話でもします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#でJITコンパイラを作る軽い話</title>
      <link>//KeenS.github.io/blog/2015/12/12/sml_dejitwotsukurukaruihanashi/</link>
      <pubDate>Sat, 12 Dec 2015 17:26:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/12/sml_dejitwotsukurukaruihanashi/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://www.adventar.org/calendars/848&#34;&gt;ML Advent Calendar 2015&lt;/a&gt;及び&lt;a href=&#34;http://qiita.com/advent-calendar/2015/lang_dev&#34;&gt;言語実装 Advent Calendar 2015&lt;/a&gt;15日目の記事です。&lt;/p&gt;
&lt;p&gt;κeenです。先日流れてきた&lt;a href=&#34;http://www.jonathanturner.org/2015/12/building-a-simple-jit-in-rust.html&#34;&gt;RustでJITコンパイラを作る話&lt;/a&gt;が面白かったのでSML#でもやってみます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#でDBに接続</title>
      <link>//KeenS.github.io/blog/2015/12/05/sml_dedbnisetsuzoku/</link>
      <pubDate>Sat, 05 Dec 2015 22:04:25 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/05/sml_dedbnisetsuzoku/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://www.adventar.org/calendars/848&#34;&gt;ML Advent Calendar&lt;/a&gt;6日目の記事です。&lt;br&gt;
次はdico_leque先生で、「ML中心にしつつ何か」です。&lt;/p&gt;
&lt;p&gt;κeenです。SMl#はDB接続及びSQLを言語レベルでサポートしていることが大きな特徴ですが詳細な方法についてはあまり情報がなく、
実際に利用するのは難しい状況にあります。そこで私がなんとかソースコードを読んで得られた知識を少し共有したいと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLでPNGデコーダを作ろうとして分かったこと</title>
      <link>//KeenS.github.io/slide/smldepngdeko_dawotsukuroutoshitewakattakoto/</link>
      <pubDate>Fri, 04 Sep 2015 06:45:19 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/smldepngdeko_dawotsukuroutoshitewakattakoto/</guid>
      <description>κeen @blackenedgold Github: KeenS AMoAdの新卒 Lisp, ML, Shell Scriptあたりを書きます  ===
===
===
=== 明日の朝までに
SMLでpngデコーダを実装しよう===
Standard ML   ML系の函数型言語 文法はOCamlよりF#に似てる（というかF#が似せてきた） 結構書き易い 仕様は SML&#39;90とSML&#39;97がある 仕様で言語のformal semanticsが定められてたりする 要は研究向き  ライブラリほぼなし コミュニティほぼなし    === ＞　無理ゲー　＜===
一応フォーマットを調べる  +-----------------+ | Chunk | 画像はChunkの集合。 ++---------------++ Chunk自体は簡単なフォーマット || length | name || |+---------------+| || data || || ... || |+---------------+| || CRC || ++---------------++ | Chunk | | ... | === 意外と単純？ ===</description>
    </item>
    
    <item>
      <title>TCOと例外ハンドル</title>
      <link>//KeenS.github.io/blog/2015/05/31/tcotoreigaihandoru/</link>
      <pubDate>Sun, 31 May 2015 21:02:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/31/tcotoreigaihandoru/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;//KeenS.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou&#34;&gt;先日のエントリー&lt;/a&gt;の最後でループ内で例外ハンドルをすると極端に遅くなるということを書きましたが、それについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>第一級ラベルを持たない言語におけるDirect Threaded VMの実装</title>
      <link>//KeenS.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou/</link>
      <pubDate>Fri, 29 May 2015 20:26:41 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou/</guid>
      <description>&lt;p&gt;こんにちは。κeenです。このブログでちょくちょく出てくるDirect Threaded VMについて。
SMLのようにgotoがない言語だとDT VMの実装出来ないよなー、と思ってた所、ふとアイディアが浮かんだのでそれについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLを書くLisperの悩み</title>
      <link>//KeenS.github.io/blog/2015/05/03/smlwokakulispernonayami/</link>
      <pubDate>Sun, 03 May 2015 13:23:17 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/03/smlwokakulispernonayami/</guid>
      <description>&lt;p&gt;SMLばっかり書いてたら「お前Lisperじゃないだろ」って怒られたとかそういう話ではなく。&lt;/p&gt;
&lt;p&gt;ML系の言語は関数は1つの引数しかとれません。じゃあ複数の値を受け取りたい時はどうするかというと 1. 値を組(タプル)にして受け取る 2. 関数を返す関数((を返す関数)*)にして1つづつ受け取る の2種類の方法があります。
それに纏わる話。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#をMacでビルドする</title>
      <link>//KeenS.github.io/blog/2015/04/29/smlsharpwomacdebirudosuru/</link>
      <pubDate>Wed, 29 Apr 2015 16:09:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/29/smlsharpwomacdebirudosuru/</guid>
      <description>&lt;p&gt;κeenです。SML#2.0.0を文鎮と化していたMBAにインストールしたのでメモをば。&lt;/p&gt;
&lt;p&gt;基本は&lt;a href=&#34;http://d.hatena.ne.jp/keita44_f4/20140412/1397279451&#34;&gt;よんたさんの記事&lt;/a&gt;をMacに翻訳した感じです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLSharpを使ってSMLのon-the-flyエラーチェック</title>
      <link>//KeenS.github.io/blog/2015/04/23/smlsharpwotsukattesmlnoon-the-flyerrorchekkingu/</link>
      <pubDate>Thu, 23 Apr 2015 23:01:17 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/23/smlsharpwotsukattesmlnoon-the-flyerrorchekkingu/</guid>
      <description>&lt;p&gt;κeenです。最近SMLを結構書いてるのですが中置演算子が乱立する言語はLisperにはつらくて、しょっちゅうコンパイルエラーを出します。
そこでSML#をflymakeで動かしてOn The Flyにエラーチェックをします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLSharpでFFIバインディングを書く時の知見</title>
      <link>//KeenS.github.io/blog/2015/04/19/smlsharpdeffibaindinguwokakutokinochiken/</link>
      <pubDate>Sun, 19 Apr 2015 13:51:33 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/19/smlsharpdeffibaindinguwokakutokinochiken/</guid>
      <description>&lt;p&gt;κeenです。最近頻繁にSML#を使ってます。SML#のメイン機能の1つであるC連携ですが、ちょっと複雑なことをやろうとするとテクニックが必要になるので共有します。&lt;/p&gt;
&lt;p&gt;Twitterとかにコメントや突っ込みお願いします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLのファンクタに少し踏み込んだ</title>
      <link>//KeenS.github.io/blog/2015/04/12/smlnofankutanisukoshifumikonda/</link>
      <pubDate>Sun, 12 Apr 2015 19:49:41 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/12/smlnofankutanisukoshifumikonda/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://github.com/bleis-tift/SmlSharpContrib&#34;&gt;SmlSharpContrib&lt;/a&gt;にコントリビュートしてます。そこでファンクタを使う用事があったのですが少し踏み込んだ使い方をしようとしたらハマったのでメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mlyaccを使ってみてハマったところ</title>
      <link>//KeenS.github.io/blog/2015/01/31/mlyaccwotsukattemitehamattatokoro/</link>
      <pubDate>Sat, 31 Jan 2015 11:55:51 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/31/mlyaccwotsukattemitehamattatokoro/</guid>
      <description>&lt;p&gt;κeenです。前回の&lt;a href=&#34;//KeenS.github.io/blog/2014/12/10/mllexwoshi-tutemiru/&#34;&gt;mllexの記事&lt;/a&gt;の続きです。今回はmlyaccを使ってみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mllexを使ってみる。あるいはlexユーザーに対するmllexの解説</title>
      <link>//KeenS.github.io/blog/2014/12/10/mllexwoshi-tutemiru/</link>
      <pubDate>Wed, 10 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/10/mllexwoshi-tutemiru/</guid>
      <description>&lt;p&gt;このエントリーは&lt;a href=&#34;http://qiita.com/advent-calendar/2014/ml&#34;&gt;ML Advent Calendar 10日目&lt;/a&gt;の記事です。&lt;br&gt;
前 &lt;a href=&#34;http://h-sakurai.hatenablog.com/entry/2014/12/09/144655&#34;&gt;OCamlで作ったgoma言語 - h_sakurai&#39;s diary&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ふと思い立ってPrologのコンパイラかインタプリタかを作ってみようとして、その第一段でlexerに着手しました。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>