<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/scala/</link>
    <description>Recent content in Scala on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 04 Nov 2016 13:19:01 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala 2.12.0変更点</title>
      <link>//KeenS.github.io/slide/scala_2_12_0henkouten/</link>
      <pubDate>Fri, 04 Nov 2016 13:19:01 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/scala_2_12_0henkouten/</guid>
      <description># Scala 2.12.0変更点 ---------------------- サイバーエージェント ScalaMeetUp === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * AI Studio Dev Group * Lisp, ML, Rust, Shell Scriptあたりを書きます === # サマリー ---------- 全部[公式ページ](http://www.scala-lang.org/news/2.12.0)に詳細あるよ * Java8向けの互換性向上したよ + トレイトがinterfaceに + 無名関数がlambdaに + SAMとScalaの関数が統合 * コンパイラが少し賢くなったよ + いくつかでinvokedynamicを使うように + 中間状態をやめた + 最適化をするように * ライブラリ改善した + EitherがRight Biasedに + Futureが強化 * 非互換いくつか === # トレイトがinterfaceに ----------------------- ``` scala trait Foo { def foo(): String = &#34;</description>
    </item>
    
    <item>
      <title>正しいScalaのコードが欲しい</title>
      <link>//KeenS.github.io/slide/tadashiiscalanoko_dogahoshii/</link>
      <pubDate>Wed, 05 Oct 2016 00:10:25 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/tadashiiscalanoko_dogahoshii/</guid>
      <description># 正しいScalaのコードが欲しい ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループ + Lisp, ML, Rust, Shell Scriptあたりを書きます + Scalaはあんまり === # Scalaを始めたばかりの頃の話 === ``` scala def revappend[A]( xs: List[A], ys: List[A]): List[A] = match xs { case Nil = Nil case x::xs_ = revappend(xs_, x::ys) } ``` === ``` scala def length(xs: List[_]): Int = xs match { case Nil = Nil case x::xs_ = 1 + length(xs_) } ``` === ``` scala def append[A]( xs: List[A], ys: List[A]): List[A] = xs match { case Nil = Nil case x::xs_ = x :: append(xs_, ys) } append(List(1, 2, 3), List(4, 5, 6)) // = List(1, 2, 3) ``` === # Scalaを始めたばかりの頃の話 ----------------------------- * 正しくないコードばかり書いてしまう + 他の言語の構文と混ぜてしまう + 型エラー + 実装ミス * 正しいScalaのコードが欲しい === # 正しさって？ ------------- * 構文が正しいコード?</description>
    </item>
    
    <item>
      <title>DOT/dottyについて調べてみた</title>
      <link>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</link>
      <pubDate>Tue, 24 May 2016 23:40:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</guid>
      <description># DOT/dottyについて調べてみた ---------------------- サイバーエージェント Scala Meet Up 2016-05-27 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループ + Lisp, ML, Rust, Shell Scriptあたりを書きます + Scala初心者 + Scala歴1年未満&amp;gt;&amp;lt; === # Scalaコンパイラ ---------------- * 型推論（特にimplicit）が遅い * コンパイルフェーズが多い + 中間オブジェクトが多くて遅くなる * 多くのクラスファイルを生成する + コンパイラのくせにディスクIOが多い * 気を抜いてると `Any` に推論される e.g.) `if(x) 1 else &#34;a&#34;` * そもそものScalaの設計に起因する点が多い + 抜本的変更が必要 === # Scala基礎 ----------- * Scalaが成立するのに最低限必要な機能って？ + e.g.) `case class` はなくても `class` だけでどうにかなる * 「最低限の機能」を減らせばコンパイラがシンプルになる + 他の機能はただのシンタックスシュガーになる + コンパイラのバグを減らせる + 機能追加時の矛盾確認が楽 * コア言語 === # Featherlight Scala --------------------- * Scalaのシンタックスシュガーを減らした感じ * 小さな言語 * 元のScalaはこれをベースに議論されてきた === # 形式言語理論 ------------- * 最低限必要な機能を形式的にモデル化 + 全ての動作は予め決められた「規則」に基く + 実際に書いて動かすものではない * 形式的にすることで「証明」とかが出来る + 「型検査に通れば実行時に型エラーが起きない」 + 「型検査が必ず終了する」 * 逆に、「このモデルだとこの機能は実現出来ない」とかも分かる === # Dependent Object Type ------ * Scalaのコアをモデル化したもの（要出典） * 形式言語 * ジェネリクスもなければクラスも継承もない、パッケージもない。 * 小さい言語ながら表現力豊か * 全ての値はオブジェクト。 + オブジェクトのフィールドとメソッドと型メンバーだけ + 型はそのまま * Path Dependent Type * サブタイピング === # About DOT --------- * 型付の健全性が証明された * System FSystem DDOT * existential typeを自然に表現出来る * 交差型と合併型 + `A extends B` - `A &amp; B` + 合併型は主に型推論の結果に出てくる === ```scala package scala.</description>
    </item>
    
    <item>
      <title>テストについて、Scalaと。</title>
      <link>//KeenS.github.io/slide/tesutonitsuite_scalato_/</link>
      <pubDate>Tue, 12 Apr 2016 22:31:51 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/tesutonitsuite_scalato_/</guid>
      <description># テストについて、Scalaと。 ---------------------- サイバーエージェント アドテクスタジオ ScalaMeetUp テスト回 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + 基盤開発グループでScalaで基盤開発してます + Lisp, ML, Rust, Shell Scriptあたりを書きます === # Scalaのテスト --------------- * ScalaTest + 機能豊富 + 複数のテストスタイルを選べる + 他のフレームワークとの統合がある * Specs2 + 普通に使いやすい * 他にもScalaCheck、JUnit、Gatlingなどなど === # ScalaTestのスタイルたち ----------- * FunSuite + xUnitっぽいらしい * FlatSpec + xUnitからBDDに移行した人向けらしい * FunSpec + RSpecっぽいBDD用の === # ScalaTestのスタイルたち ----------- * WordSpec + Specs2に似てる。 * FreeSpec + 何段にでもネスト出来る。自由。 * Spec + テスト=メソッド。速いらしい。 === # ScalaTestのスタイルたち ----------- * PropSpec + プロパティベースのテスト。ScalaCheckとの統合。 * FeatureSpec + シナリオテスト。 === # その他の機能 ------------- * mockitoのシュガー * Matcher DSL * 複数のランナー（複数のツールとの統合） === # Axionのテスト コード紹介を多めに === # 単体テスト --------------- * 普通の単体テストはWordSpec * ホーアの3つ組に基いて事前条件、コマンド、事後条件(不変条件)に分ける + 「{事前条件}が成り立つ時{コマンド}を実行し、停止するなら{事後条件(不変条件)}が成り立つ」の列挙 * [テストについて考えてみた | κeenのHappy Hacκing Blog](http://keens.</description>
    </item>
    
    <item>
      <title>HAMT ~ イミュータブルで高速なハッシュマップ ~</title>
      <link>//KeenS.github.io/slide/hamt/</link>
      <pubDate>Sun, 31 Jan 2016 16:17:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/hamt/</guid>
      <description># Hash-Array Mapped Trie ---------------------- ~ イミュータブルで高速なハッシュマップ ~ サイバーエージェント AdTech Scala Meetup LT大会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループの新卒 + Lisp, ML, Rust, Shell Scriptあたりを書きます === # scala.collections.immutable.HashMap ------------------------------------- * 今日の話題。これの実装をみていく。 * イミュータブル * キー-バリューペア * 値を追加する度に新たなハッシュマップを作る === # HashMap ---------------- * `O(1)`のアクセス効率 * 空間効率は悪い * ハッシュ関数が定義出来れば何でもキーに使える * 普通はミュータブルに使う + 大量のメモリをアロケートするのでコピーはつらい === # メモリ効率悪そう？ ------------------------- ```scala val hash = HashMap.empty + (3 - 1) // +---+---+---+---+---+---- // | / | 3 | / | / | / | .</description>
    </item>
    
    <item>
      <title>DSLとTagless Final</title>
      <link>//KeenS.github.io/slide/dsltotagless_final/</link>
      <pubDate>Sun, 13 Dec 2015 22:42:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/dsltotagless_final/</guid>
      <description># DSLとTagless Final ---------------------- サイバーエージェント アドテクスタジオ Scala Meet Up 2015-12-18 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + AMoAdの新卒エンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます - Scalaは初心者 ※ [Scala初心者の新卒が頑張ってLispを作ってみた](http://adtech.cyberagent.io/scalablog/2015/12/05/scala-lisp/) === # 注意 ------ * Scala初心者なのでScalaではなくScalaっぽい疑似コードで説明します + ~~コード例動かす時間が無かっただけ~~ * Scala初心者なのでScalaのコードは少なめに説明します === # DSLを作る ----------- 以下のようなHTTPなユーザをエミュレートするDSLを考える ``` scala val scenario = and( get(&#34;/&#34;), get(&#34;/users&#34;).andThen(res = post(&#34;/follow&#34;, first(users.getJsonData)))) val Right(_) = runScenario(scenario, &#34;user&#34;) ``` === # DSLを作る ----------- 普通は以下のようなAST作ってをラップする ``` scala trait ScenarioDSL sealed case class Get(url: String) extends ScenarioDSL sealed case class Post(url: String, data: JSON) extends ScenarioDSL sealed case class And(first, ScenarioDSL, second ScenarioDSL) extends ScenarioDSL sealed case class AndThen(first: ScenarioDSL, callBack: (Response) = ScenarioDSL) extends ScenarioDSL def get(url: String): ScenarioDSL= Get(url) .</description>
    </item>
    
    <item>
      <title>#関数型なんたら で喋ってきた</title>
      <link>//KeenS.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita/</link>
      <pubDate>Sun, 26 Oct 2014 17:14:10 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita/</guid>
      <description>κeenです。昨日函数型なんたらの集いに参加してきたので報告/感想です。 会場提供はドワンゴということでトークはニコ生に流された模様。ちらっと覗いてみたらLinuxでも見れましたね。いつのまにかFlashのバグ直ってたんですね。 とはいえ私自身のトーク中のコメントが見れなかったのであまり意味はないのですが…
プレミアム会員は放送後7日は生放送の内容を見れるそうですね。見れる方々はコチラからどうぞ。次回からはタイムシフト予約しておこう。
話した内容 C6H6+HNO3というタイトルで、picrinのbenzとnitrosについて。本当はnitrosの依存関係解決器sulfuricを完成させてそれについて話し、nitroを書こう!って言う予定だったんですが着手が遅れて完成しないまま発表になりました。
普段関数型言語のヒトは型やらモナドで殴ってる印象があったのでマクロで殴ろうと思ったのですがマクロの話のところで焦ってしまって話が飛んでしまい、殴れずに終わりました。
ガチの組み込み屋さんから組み込み機器で動作検証したのかとの質問がありましたがそもそも持ってないです。そろそろ1.0が出ると思うのでそのあたりでやります。
GCがconservativeかとの質問に対して「はい」と答えてしまいましたが間違いでした。 conservativeなのはcall/ccでした。GCはexactですね。ドキュメントに載ってます。
wasabizの名前に反応した人が多かったようですね。やっぱ有名人なのかぁ。
興味深かった話 エンジニアとモナド またモナドで殴る話かと思ったら全然違いました。トップダウンで設計するときにそれぞれを小さなDSLに分割してそれらをモナドで実装し、モナド変換子で組み合わせると良いよねとのこと。タスクアサインもモナド単位になるし分かり易い。スピードのために実際には単相化すると良いとか現実的な話をしてて非常に良かったです。
Lispで考えるとこうはいかないなと思います。トップダウンで設計するのが他の言語以上に向いてない気がします。というか、ボトムアップに向きすぎてる。小っさく始めて抽象が欲しければマクロを書いて…って。オブジェクト指向で作るにしてもオブジェクトとメソッドが分離してるのでボトムアップと相性が良い。この辺はポールグレアムの「ハッカーと画家」に詳しいです。
shapelessの紹介 興味を持ったのはshaplessそのものではなくてヘテロなリストやヘテロなハッシュに型をつける話。{ 1 =&amp;gt; &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot; =&amp;gt; 2}に型がつくのは面白すぎます。「高度に多相化された静的型は動的型と区別がつかなくなる」っぽかったです。
パターンマッチいろいろ 議論を呼んだ発表。パターンマッチを拡張する話。例えば年月日に対してYMD(y, 12 25)でクリスマスならそのときの年を取り出せるだとかさらにアンドを使えばHMSも一緒にマッチ出来るだとか。 そこからEgisonに話が飛んでEgisonの例のようにポーカーの役をScalaでパターンマッチする例の紹介。
議論を呼んだというのはパターンマッチにガードが吸収されてる件ですね。データ型のコンストラクタとエクストラクタが一対一対応してこそパターンマッチは真価を発揮する派vsパターンマッチの表現力が高ければ高い方が良い派の対立ですね。さらに前者は型の表現力が足りてないのなら型をもっと複雑にすべき派とガードを付けて網羅性の証明をすれば良い派に分かれます。私はパターンマッチには表現力があればあるほど良いよね派。
これはそもそもパターンに対する立場の違いがある気がするんですよね。私はパターンマッチは同じデータに対する条件判定のシンタックスシュガーとして捉えています。マッチと束縛を一緒に行なうのは便利なのとパフォーマンスのため。ガードが必要なのはパターンの表現力が足りないため。だからパターンがリッチならリッチな方が良い。そもそもLispでは網羅性のチェックは期待出来ませんので。そもそもの話動的言語はコンパイル時の検査をあきらめてその代わり表現力を得ようという思想ですからね。
パターンが複雑になるとメモリが爆発するとの指摘がありましたがそれに直面した人がいるらしく、パターンによる分岐の枝を実行時に伸ばしていくようなパターンマッチライブラリも存在します。（Lispは実行時にもマクロが動いていて、実行時にコードを生成することも可能なのです。）
懇親会その他 名古屋の型々方々と色々喋れました。偶々でこれきさん、みずぴーさんと同じテーブルに座り、昼御飯も一緒に。普段休日出勤してる印象が強く、名古屋に行かないと会えないと思っていたブレイスさんといよさんも一緒でした。でこれき先生はやっぱり大先生だった。
よんたさんにSML#のコードリーディング会開いて下さいって言ったら良いよって言ってもらいました。そろそろ64bit版も出るそうなのでリリース記念コードリーディング会&amp;amp;芋煮会やろうって話になりました。
OCamlのユニコードライブラリを作ってる方とも話しました。内部でropeで持ってるらしく、その話を聞きました。ropeのユニコード化はどうやら普通に文字列をUTF-8で保持し、ropeに文字列長のフィールドを保たせるだけで良いよう。ただ、picrinはCとの連携のためちょくちょくCの文字列に変換してまた新たにropeを作って、とするので若干勝手というかボトルネックが違いそう。
Schemeのネイティブコンパイラを作ってる方とも話しました。Schemeの実装について喋ったり、GCについて喋ったり。GCについては興味深いことを聴いたのでもう1本エントリー書きます。あとはプロセス代数とかモデル検査とか。
まとめ 楽しかった。どうしてもLispは関数型とはあまり言われない（し、私も関数型言語とは思ってない）のでLisperが少なかったのですが私自身はMLも好きなので楽しめました。GCとTaPLとHaskellとScalaとEgisonに対するモチベーションが上がりました。
最後に開催して下さった主催の方々、会場を提供して下さったドワンゴ様、ありがとう御座いました。</description>
    </item>
    
  </channel>
</rss>