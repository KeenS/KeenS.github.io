<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/rust/</link>
    <description>Recent content in Rust on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 20 Jul 2019 18:15:56 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RustのErrorとFailureのベンチマーク見たことある？</title>
      <link>//KeenS.github.io/blog/2019/07/20/rustnoerrortofailurenobenchima_kumitakotoaru_/</link>
      <pubDate>Sat, 20 Jul 2019 18:15:56 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2019/07/20/rustnoerrortofailurenobenchima_kumitakotoaru_/</guid>
      <description>&lt;p&gt;κeenです。最近ちょくちょく標準ライブラリの &lt;code&gt;Error&lt;/code&gt; とfailureライブラリの &lt;code&gt;Fail&lt;/code&gt; が比べられる（というより &lt;code&gt;Fail&lt;/code&gt; を推奨する）のが増えてきたようです。
個人的にちょっと気になってる点があって、みんなそれを抜きに議論してるようなので少しお話します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RustのFutureとそのRunnerを作ってみた</title>
      <link>//KeenS.github.io/blog/2019/07/07/rustnofuturetosonorunnerwotsukuttemita/</link>
      <pubDate>Sun, 07 Jul 2019 12:26:32 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2019/07/07/rustnofuturetosonorunnerwotsukuttemita/</guid>
      <description>&lt;p&gt;κeenです。Rust 1.36.0がリリースされましたね。
ここで標準ライブラリにFutureが入ったので試しに実装してみます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shinjuku.rs #4 でライブコーディングしてきた</title>
      <link>//KeenS.github.io/blog/2019/05/22/shinjuku_rs__4deraibuko_dingushitekita/</link>
      <pubDate>Wed, 22 May 2019 00:04:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2019/05/22/shinjuku_rs__4deraibuko_dingushitekita/</guid>
      <description>&lt;p&gt;κeenです。勉強会参加報告を書くのも久しぶりですね。&lt;a href=&#34;https://forcia.connpass.com/event/124988/&#34;&gt;RustのLT会 Shinjuku.rs #4 @FORCIA &lt;/a&gt;でライブコーディングしてきたのでそれを書き留めておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「実践Rust入門」を書いたよ</title>
      <link>//KeenS.github.io/blog/2019/04/21/jissenrustnyuumon_wokaitayo/</link>
      <pubDate>Sun, 21 Apr 2019 21:41:32 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2019/04/21/jissenrustnyuumon_wokaitayo/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://gihyo.jp/book/2019/978-4-297-10559-4&#34;&gt;実践Rust入門 言語仕様から開発手法まで(技術評論社)&lt;/a&gt;を書いた(3人で共著)のでどういう本なのか解説します。
5/8発売です。電子版もありますよ。Gihyo Digital PublishingだとPDFが手に入るので人気らしいです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustから扱うAWS API</title>
      <link>//KeenS.github.io/slide/rustkaraatsukauaws_api/</link>
      <pubDate>Tue, 12 Mar 2019 00:23:17 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rustkaraatsukauaws_api/</guid>
      <description># Rustから扱うAWS API ---------------------- [Shinjuku.rs #3 @FORCIA ](https://forcia.connpass.com/event/117142/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * GitLab: [blackenedgold](https://gitlab.com/blackenedgold) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # AWSとは --------- * https://aws.amazon.com/jp/ *  アマゾン ウェブ サービス（AWS）は、信頼性と拡張性に優れたクラウドコンピューティングサービスを低料金で提供して(中略)います。 * クラウドサービス = オンデマンドの利用 + **API** (私見) * AWSは豊富なサービスとそれを叩けるAPIが用意されている === ![AWSのサービス一覧](/images/rusoto/AWSのサービス一覧.png) === # AWS SDK --------- * AWSが公式にAPIバインディングを用意してくれている * 残念ながらRustは入ってない ![AWS SDKの一覧](/images/rusoto/AWS_SDKの一覧.png) === # Rusoto -------- * [ドキュメント](https://rusoto.</description>
    </item>
    
    <item>
      <title>GitLab CIでRustのCIとクロスコンパイル: お手軽編</title>
      <link>//KeenS.github.io/blog/2019/02/03/gitlab_ciderustnocitokurosukonpairu__otegaruhen/</link>
      <pubDate>Sun, 03 Feb 2019 22:31:10 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2019/02/03/gitlab_ciderustnocitokurosukonpairu__otegaruhen/</guid>
      <description>&lt;p&gt;κeenです。ちょっとづつGitLabを使っていこうとしてます。
RustでCIとクロスビルドができたので紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>void</title>
      <link>//KeenS.github.io/slide/void/</link>
      <pubDate>Wed, 16 Jan 2019 08:35:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/void/</guid>
      <description># void ---------------------- [Shinjuku.rs #2 @FORCIA](https://forcia.connpass.com/event/110888/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * GitLab: [blackenedgold](https://gitlab.com/blackenedgold) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # 発散型 -------- * `!` * [ドキュメント](https://doc.rust-jp.rs/the-rust-programming-language-ja/1.6/book/functions.html#%E7%99%BA%E6%95%A3%E3%81%99%E3%82%8B%E9%96%A2%E6%95%B0) + 標準ライブラリだと [exit](https://doc.rust-lang.org/std/process/fn.exit.html) とか + 他には無限ループ、パニック、 `return`/`continue` など * 呼び出し元に制御が返らない * どんな型にもなれる === # 発散型 -------- ``` rust use std::process::exit; // pub fn exit(code: i32) - ! let hoge: i32 = exit(0); let fuga: () = exit(0); ``` === # `match` と型 -------------- * `match` の返り値は腕の型で決まる * 発散型と他の型の組み合わせだと他の型になる ``` rust let piyo: i32 = match 0 { // !</description>
    </item>
    
    <item>
      <title>タプル小話</title>
      <link>//KeenS.github.io/blog/2019/01/05/tapurukobanashi/</link>
      <pubDate>Sat, 05 Jan 2019 01:23:54 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2019/01/05/tapurukobanashi/</guid>
      <description>&lt;p&gt;κeenです。最近、Rustのタプルに「&lt;code&gt;tuple[0]&lt;/code&gt; じゃなくて &lt;code&gt;tuple.0&lt;/code&gt; のようにアクセスするのなんでだろ」というのをみかけてびっくりしたのでそれについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My wishilist for Rust 2019</title>
      <link>//KeenS.github.io/blog/2019/01/01/my_wishilist_for_rust_2019/</link>
      <pubDate>Tue, 01 Jan 2019 20:50:13 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2019/01/01/my_wishilist_for_rust_2019/</guid>
      <description>&lt;p&gt;The rest of this article is written in Japanese. For those who don&amp;rsquo;t understand Japanese, auto translation tools may help you.
I&amp;rsquo;m writing my blog in Japanese because I put importance on Japanese community and the situation &amp;ldquo;information is available in mother tongue&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;κeenです。 #rust2019 の投稿として自分の考えをまとめます。自動翻訳で翻訳しやすいように1文1文を短めに書きます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのマクロでネストした呼び出しを実現するために</title>
      <link>//KeenS.github.io/blog/2018/12/25/rustnomakurodenesutoshitayobidashiwojitsugensurutameni/</link>
      <pubDate>Tue, 25 Dec 2018 16:20:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/12/25/rustnomakurodenesutoshitayobidashiwojitsugensurutameni/</guid>
      <description>&lt;p&gt;このエントリは &lt;a href=&#34;https://qiita.com/advent-calendar/2018/rust2&#34;&gt;Rustその2 Advent Calendar 2018&lt;/a&gt;の19日目のの記事です。時空を遡って書いています。&lt;/p&gt;

&lt;p&gt;κeenです。&lt;/p&gt;

&lt;p&gt;マクロのためのユーティリティマクロを書いていると呼び出しをネストしたくなりますが、簡単には実現できないのでそれについて。
あるいは&lt;a href=&#34;https://keens.github.io/blog/2018/02/17/makurokurabu_rustshibu/&#34;&gt;過去記事&lt;/a&gt;の前半と後半のギャップについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustで強めに型をつけるPart 3: Session Type</title>
      <link>//KeenS.github.io/blog/2018/12/15/rustdetsuyomenikatawotsukerupart_3__session_type/</link>
      <pubDate>Sat, 15 Dec 2018 05:48:48 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/12/15/rustdetsuyomenikatawotsukerupart_3__session_type/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;https://qiita.com/advent-calendar/2018/rust2&#34;&gt;Rustその2 Advent Calendar 2018&lt;/a&gt; 8日目の記事を時空を遡って書いています。&lt;/p&gt;

&lt;p&gt;κeenです。寝れないので空いてる日の分を埋めに行きます。次はSession Type。完全に趣味に走ったので実用性はないです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustで強めに型をつけるPart 2: Type Level State Machine</title>
      <link>//KeenS.github.io/blog/2018/12/15/rustdetsuyomenikatawotsukerupart_2__type_level_state_machine/</link>
      <pubDate>Sat, 15 Dec 2018 05:10:47 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/12/15/rustdetsuyomenikatawotsukerupart_2__type_level_state_machine/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;https://qiita.com/advent-calendar/2018/rust2&#34;&gt;Rustその2 Advent Calendar 2018&lt;/a&gt; 7日目の記事を時空を遡って書いています。&lt;/p&gt;

&lt;p&gt;κeenです。寝れないので空いてる日の分を埋めに行きます。次はType Level State Machine。あるいはやりすぎてない方のBuilderバターン。
&lt;a href=&#34;https://keens.github.io/blog/2017/02/09/rustnochottoyarisuginabuilderpata_n/&#34;&gt;過去記事&lt;/a&gt;で当たり前のように書いたコードをもう少し丁寧に説明します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustで強めに型をつけるPart 1: New Type Pattern</title>
      <link>//KeenS.github.io/blog/2018/12/15/rustdetsuyomenikatawotsukerupart_1__new_type_pattern/</link>
      <pubDate>Sat, 15 Dec 2018 04:15:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/12/15/rustdetsuyomenikatawotsukerupart_1__new_type_pattern/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;https://qiita.com/advent-calendar/2018/rust2&#34;&gt;Rustその2 Advent Calendar 2018&lt;/a&gt; 6日目の記事を時空を遡って書いています。&lt;/p&gt;

&lt;p&gt;κeenです。頭痛い。寝れない。寝れないので空いてる日の分を埋めに行きます。
「Rustで強めに型をつける」シリーズではある程度有名なテクニックを紹介しようかと思います。
みんな当たり前のように書くと知らない人はいつまで経っても知る機会が無いですからね。まずはNew Type Patternから。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのモジュールの使い方 2018 Edition版</title>
      <link>//KeenS.github.io/blog/2018/12/08/rustnomoju_runotsukaikata_2018_editionhan/</link>
      <pubDate>Sat, 08 Dec 2018 01:54:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/12/08/rustnomoju_runotsukaikata_2018_editionhan/</guid>
      <description>&lt;p&gt;このエントリーは&lt;a href=&#34;https://qiita.com/advent-calendar/2018/rust&#34;&gt;Rust Advent Calendar 2018&lt;/a&gt;7日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。Rust 2018が来ましたね。最近本業も副業(?)も大詰めで中々時間がとれずAdvent Calendarに遅刻してしまいました。
それはさておき、私は&lt;a href=&#34;https://keens.github.io/blog/2017/01/15/rustnomoju_runokirikata/&#34;&gt;Rustのモジュールの使い方&lt;/a&gt;を過去に書きました。
この記事は中々好評だったようですが、状況が変わりまして2018 Editionでモジュールが大幅に変更され、分かりやすくなりました。
巷に2018での変更点は多く喧伝されていますが2015との差分ばかりで、今からモジュールシステムを学ぶ方はまず複雑な2015を理解してから差分を読んで、簡単な2018を理解しないといけなくなっています。
そこで2018からはじめて学習する方向けにモジュールシステムの解説をしようと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust around you</title>
      <link>//KeenS.github.io/slide/rust_around_you/</link>
      <pubDate>Sun, 07 Oct 2018 12:38:57 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rust_around_you/</guid>
      <description># Rust around you ---------------------- [第51回 情報科学若手の会](https://wakate.org/2018/07/28/51th-general/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # Rust ------ * 安全なC++ * ML/Haskellみたいな機能 + タプル + 代数的データ型 + トレイト + 式指向 === ![](/images/rust_kappa.jpg) みなさんの脳にRustを叩き込みます === # Rustは色々な領域で使われている ------------------------------- * OS * ネットワーク * ブラウザ * コンパイラ * WebAssembly * マイコン * VCS === # Rustは色々な領域で使われている ------------------------------- * CLI * ウェブアプリケーション * DB * ゲーム * 暗号通貨 * GPU === # OS ----- * [redos](https://gitlab.</description>
    </item>
    
    <item>
      <title>Rustでenumのタイプエイリアスでヴァリアントもエイリアスして欲しい問題のワークアラウンドとか</title>
      <link>//KeenS.github.io/blog/2018/09/17/rustdeenumnotaipueiriasudevariantomoeiriasushitehoshiimondainowa_kuaraundotoka/</link>
      <pubDate>Mon, 17 Sep 2018 16:16:34 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/09/17/rustdeenumnotaipueiriasudevariantomoeiriasushitehoshiimondainowa_kuaraundotoka/</guid>
      <description>&lt;p&gt;κeenです。何度か「Rustでenumのタイプエイリアスしたときにヴァリアントもエイリアスして欲しい」という話を聞くので自分なりにどうにか出来ないかなと考えたやつをまとめます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>isucon7予選のアプリをRustに移植したから解説するね</title>
      <link>//KeenS.github.io/blog/2018/09/02/isucon7yosennoapuriworustniishokushitakarakaisetsusurune/</link>
      <pubDate>Sun, 02 Sep 2018 05:53:50 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/09/02/isucon7yosennoapuriworustniishokushitakarakaisetsusurune/</guid>
      <description>&lt;p&gt;κeenです。こういう流れがあったので移植しました。
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;keenさんが「2028年、Rust でイケてる web application framework はこれだ！」みたいな記事を書くとと &amp;quot;余力&amp;quot; が生まれるかもしれません…！！&lt;/p&gt;&amp;mdash; FUJI Goro (@&lt;strong&gt;gfx&lt;/strong&gt;) &lt;a href=&#34;https://twitter.com/__gfx__/status/1034362116633812992?ref_src=twsrc%5Etfw&#34;&gt;2018年8月28日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cargoのどこがいいのか</title>
      <link>//KeenS.github.io/blog/2018/08/26/cargonodokogaiinoka/</link>
      <pubDate>Sun, 26 Aug 2018 21:49:51 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/08/26/cargonodokogaiinoka/</guid>
      <description>&lt;p&gt;κeenです。久しぶりのブログですね。
&lt;a href=&#34;https://llevent.connpass.com/event/95443/&#34;&gt;LLイベント&lt;/a&gt;に行ってきたらパッケージマネージャの話がありました。
その懇親会でcargoについて振られたんですがタイミングがなくて喋れなかったのでブログに書いておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのこれまでとこれから</title>
      <link>//KeenS.github.io/slide/rustnokoremadetokorekara/</link>
      <pubDate>Sat, 25 Aug 2018 16:09:33 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rustnokoremadetokorekara/</guid>
      <description># Rustこれまでとこれから---------------------- [Learn Languages 2018 in ODC (LL2018) ](https://llevent.connpass.com/event/95443/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [ちゅーんさんだよー](https://shindanmaker.com/789932) * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア + Rustで開発してるよ * Lisp, ML, Rust, Shell Scriptあたりを書きます === # 今日話すこと ------------- * X Rustの勉強法 * X Rust言語の紹介 * O Rustの歩み * O Rustの開発体制 === # Rustとは ---------- * システムプログラミング言語 * 安定性、信頼性が売り * 2015年に[1.0リリース](https://blog.rust-lang.org/2015/05/15/Rust-1.0.html) + ~~いつまで20年ものの言語使ってるの~~ * 大体の便利な言語機能を取り入れてる * 所有権システムにより **GCがない** * コンパイラが `free` を自動挿入 === ```rust // ジェネリクス+トレイト境界 // move セマンティクス fn dup(t: T) - (T, T) { // タプルあるよ (t.</description>
    </item>
    
    <item>
      <title>Rustと3種のDSL</title>
      <link>//KeenS.github.io/slide/rustto3tanenodsl/</link>
      <pubDate>Sun, 01 Jul 2018 21:58:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rustto3tanenodsl/</guid>
      <description># Rustと3種のDSL ---------------------- [Running Rust in Production](https://d-cube.connpass.com/event/90317/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # DSLとは  Lispでは，プログラムをただプログラミング言語に従って書くことはしない． プログラミング言語を自分の書くプログラムに向けて構築するのだ  -- Paul Graham (On Lispより) === # DSLとは ---------- * ドメイン特化言語 * 自分の解きたい問題に合わせてミニ言語を作る + 関心に集中 + 言語を設計することでドメインへの考察が深まる * 2種類ある + 内部DSL: ホスト言語の式でそれっぽく作る + 外部DSL: 外部化してパーサから作る * まずは内部DSLを検討しよう === # DSLの使いどころ ---------------- * だいたい以下の条件 + 素直に書くと記述が多い + 細かなバリエーションがあって関数一つにはまとめられない + → スイートスポットがDSL * 典型的にはビジネスロジックとか === # Actcast --------- * Idein社で開発中のサービス * IoTデバイスを管理する + 人、管理グループ、デバイス、アプリケーションなどエンティティが多め * APIはOpen API(旧Swagger)を使う * まだ開発中 + 一緒に開発してくれる人募集してます!</description>
    </item>
    
    <item>
      <title>nom勘所</title>
      <link>//KeenS.github.io/slide/nomkandokoro/</link>
      <pubDate>Tue, 26 Jun 2018 16:02:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/nomkandokoro/</guid>
      <description># nom勘所 ---------------------- [Rust LT](https://rust.connpass.com/event/88656/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # nom ----- * [GitHub](https://github.com/Geal/nom) * マクロベースのパーサコンビネータ * ゼロコピー、速い、バイト指向 === # nomの使い方 ------------ * [ドキュメント](https://docs.rs/nom/4.0.0/nom/)に大量にパーツがあるので分かりづらい * 基本的なパーツは以下 + `named!` - パーサを定義 + `do_parse!` - 連接 + `alt(_complete)!` - 選択 + `tag!` - トークン + `map!` - 型変換 * 1データ型1パーサくらいの感覚 * あとは必要に応じて覚える + 似たような実装を探して真似る === # 例: 四則演算 ------------- まずは列挙型を定義 ```rust #[derive(Debug, Clone, PartialEq)] enum Expr { BinOp(BinOp), Number(Number), } ``` === # 例: 四則演算 ------------- 対応するパーサを`alt!</description>
    </item>
    
    <item>
      <title>rayonの真価は分割統治にアリ</title>
      <link>//KeenS.github.io/blog/2018/04/08/rayonnoshinkahabunkatsutouchiniari/</link>
      <pubDate>Sun, 08 Apr 2018 22:50:43 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/04/08/rayonnoshinkahabunkatsutouchiniari/</guid>
      <description>&lt;p&gt;κeenです。やや釣りっぽいタイトルですがRustのデータ並列ライブラリの&lt;a href=&#34;https://github.com/rayon-rs/rayon&#34;&gt;rayon&lt;/a&gt;について。イテレータを並列に計算できるだけでなく&lt;code&gt;join&lt;/code&gt;で自分で並列処理を書くこともできるんだよという記事です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cargo asmでRustのメモリ周り最適化をチェック</title>
      <link>//KeenS.github.io/blog/2018/04/04/cargo_asmderustnomemorimawarisaitekikawochekku/</link>
      <pubDate>Wed, 04 Apr 2018 06:00:57 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/04/04/cargo_asmderustnomemorimawarisaitekikawochekku/</guid>
      <description>&lt;p&gt;κeenです。
Rustはたとえば&lt;code&gt;Box&lt;/code&gt;を使っていても必ずしもヒープにアロケートされる訳ではないなど、メモリの扱いを多少最適化してるらしいです。
しかし何がどう最適化されるのかは実際にコードを書いてみて実験しないとわからないことが多いので実験してみます。&lt;/p&gt;

&lt;p&gt;rust 1.25.0です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DieselでSELECT NULLする</title>
      <link>//KeenS.github.io/blog/2018/02/26/dieseldenullwosentakusuru/</link>
      <pubDate>Mon, 26 Feb 2018 15:51:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/02/26/dieseldenullwosentakusuru/</guid>
      <description>&lt;p&gt;κeenです。個人メモ。dieselでリテラルの&lt;code&gt;NULL&lt;/code&gt;を&lt;code&gt;SELECT&lt;/code&gt;したいケースでの書き方。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>マクロクラブ Rust支部</title>
      <link>//KeenS.github.io/blog/2018/02/17/makurokurabu_rustshibu/</link>
      <pubDate>Sat, 17 Feb 2018 15:15:07 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/02/17/makurokurabu_rustshibu/</guid>
      <description>&lt;p&gt;マクロ・クラブのルール&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;マクロを書くな&lt;/li&gt;
&lt;li&gt;それがパターンをカプセル化する唯一の方法ならば、マクロを書け&lt;/li&gt;
&lt;li&gt;例外: 同等の関数に比べて、 呼び出し側が楽になるならば、マクロを書いても構わない&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>改めましてRocksDBさん</title>
      <link>//KeenS.github.io/blog/2018/02/08/aratamemashiterockdbsan/</link>
      <pubDate>Thu, 08 Feb 2018 04:22:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/02/08/aratamemashiterockdbsan/</guid>
      <description>&lt;p&gt;κeenです。寝れない。&lt;a href=&#34;https://keens.github.io/blog/2018/02/05/hello__rocksdb/&#34;&gt;前回のエントリ&lt;/a&gt;でRocksDBのことを勘違いしていたようだったので改めてRocksDBについて書きます。&lt;/p&gt;

&lt;p&gt;個人的理解をメモした雑多な記述です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello, RocksDB</title>
      <link>//KeenS.github.io/blog/2018/02/05/hello__rocksdb/</link>
      <pubDate>Mon, 05 Feb 2018 00:00:00 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/02/05/hello__rocksdb/</guid>
      <description>&lt;p&gt;κeenです。進捗ダメです。最近全然コード書いてないのでたまには手を動かすかということでRocksDBにHello Worldしてみます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustに何が欲しいだろう</title>
      <link>//KeenS.github.io/blog/2018/01/05/rustninanigahoshiidarou/</link>
      <pubDate>Fri, 05 Jan 2018 22:20:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/01/05/rustninanigahoshiidarou/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://blog.rust-lang.org/2018/01/03/new-years-rust-a-call-for-community-blogposts.html&#34;&gt;New Year&amp;rsquo;s Rust: A Call for Community Blogposts&lt;/a&gt;の一環のつもりです。
恐らく英語の記事が望まれてるんだろうなと思いつつも試しに日本から声を上げてみます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのバイナリが大きい理由</title>
      <link>//KeenS.github.io/blog/2017/12/18/rustnobainarigaookiiriyuu/</link>
      <pubDate>Mon, 18 Dec 2017 23:21:32 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/18/rustnobainarigaookiiriyuu/</guid>
      <description>&lt;p&gt;κeenです。方々で言われる話ですがRustコンパイラの吐くバイナリはそこそこ大きいです。
この理由を自分で納得してなかったので追います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust &amp; Swagger</title>
      <link>//KeenS.github.io/slide/rust___swagger/</link>
      <pubDate>Mon, 18 Dec 2017 19:35:19 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rust___swagger/</guid>
      <description># Rust &amp; Swagger ---------------------- [【増席】RustのLT会！ Rust入門者の集い #4 ](https://rust.connpass.com/event/72649/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # Swagger ---------- * [The World&#39;s Most Popular API Tooling](https://swagger.io/) * JSON APIの定義からドキュメントとコードを生成 === # rust-server ------------- * 最近Rustのサポートが[入った](https://github.com/swagger-api/swagger-codegen/pull/6613) * 軽くデモ + [petstore](http://petstore.swagger.io/) * [issue](https://github.com/swagger-api/swagger-codegen/issues)なげよう   </description>
    </item>
    
    <item>
      <title>diesel小ネタ集</title>
      <link>//KeenS.github.io/blog/2017/12/16/dieselshounetashuu/</link>
      <pubDate>Sat, 16 Dec 2017 16:40:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/16/dieselshounetashuu/</guid>
      <description>&lt;p&gt;κeenです。これは&lt;a href=&#34;https://qiita.com/advent-calendar/2017/rust-lang&#34;&gt;Rust Advent Calendar 2017&lt;/a&gt;の記事です。
RustのORM、クエリビルダ、マイグレーションツールのdieselについて。
dieselについては&lt;a href=&#34;http://diesel.rs/guides/getting-started/&#34;&gt;公式チュートリアル&lt;/a&gt;を読めばだいたい使い始められるのですが、それだけでは足りないのでいくつか持ちネタを書きます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>クレートを公開する前に埋めておくべきメタデータ</title>
      <link>//KeenS.github.io/blog/2017/12/03/kure_towokoukaisurumaeniumeteokubekimetade_ta/</link>
      <pubDate>Sun, 03 Dec 2017 23:14:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/03/kure_towokoukaisurumaeniumeteokubekimetade_ta/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://qiita.com/advent-calendar/2017/rust-lang-2&#34;&gt;Rustその2 Advent Calendar 2017&lt;/a&gt;3日目の記事です。&lt;/p&gt;

&lt;p&gt;クレートを&lt;code&gt;cargo publish&lt;/code&gt;する前に何すればいいんだっけと毎回なるので備忘録
publishするまでの手順自体は&lt;a href=&#34;https://keens.github.io/blog/2016/01/31/rustnopakke_jiwocrates_ionitourokusuru/&#34;&gt;過去記事&lt;/a&gt;を参考にして下さい&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ironのレスポンスの中身を覗き見るライブラリを雑に作った</title>
      <link>//KeenS.github.io/blog/2017/12/02/ironnoresuponsunonakamiwonozokimiruraiburariwozatsunitsukutta/</link>
      <pubDate>Sat, 02 Dec 2017 17:23:53 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/02/ironnoresuponsunonakamiwonozokimiruraiburariwozatsunitsukutta/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://qiita.com/advent-calendar/2017/rust-lang-2&#34;&gt;Rustその2 Advent Calendar 2017&lt;/a&gt;2日目の記事です。
タイトルのままです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RustのDI</title>
      <link>//KeenS.github.io/blog/2017/12/01/rustnodi/</link>
      <pubDate>Fri, 01 Dec 2017 21:10:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/01/rustnodi/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://qiita.com/advent-calendar/2017/rust-lang-2&#34;&gt;Rustその2 Advent Calendar 2017&lt;/a&gt;が空いてたので小ネタをば。1日目の記事です。
&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E4%BE%9D%E5%AD%98%E6%80%A7%E3%81%AE%E6%B3%A8%E5%85%A5&#34;&gt;Dependency Injection&lt;/a&gt;の話。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustで高速な標準出力</title>
      <link>//KeenS.github.io/blog/2017/10/05/rustdekousokunahyoujunshutsuryoku/</link>
      <pubDate>Thu, 05 Oct 2017 20:36:33 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/10/05/rustdekousokunahyoujunshutsuryoku/</guid>
      <description>&lt;p&gt;κeenです。Rustで何も考えずに標準出力に吐いてると遅いよねーって話です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ステートマシン抽象化としてのFuture</title>
      <link>//KeenS.github.io/blog/2017/07/02/sute_tomashinchuushoukatoshitenofuture/</link>
      <pubDate>Sun, 02 Jul 2017 12:31:07 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/07/02/sute_tomashinchuushoukatoshitenofuture/</guid>
      <description>&lt;p&gt;κeenです。最近Futureと一口にいってもいくつか種類があるなと気付いたのでRustの&lt;a href=&#34;https://github.com/alexcrichton/futures-rs&#34;&gt;&lt;code&gt;futures-rs&lt;/code&gt;&lt;/a&gt;に実装されているFutureの挙動を紐解こうと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ジェネリクス勉強会補足</title>
      <link>//KeenS.github.io/blog/2017/06/24/jienerikusubenkyoukaihosoku/</link>
      <pubDate>Sat, 24 Jun 2017 23:22:16 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/06/24/jienerikusubenkyoukaihosoku/</guid>
      <description>&lt;p&gt;κeenです。本日&lt;a href=&#34;https://connpass.com/event/56773/?utm_campaign=event_participate_to_owner&amp;amp;utm_source=notifications&amp;amp;utm_medium=email&amp;amp;utm_content=title_link&#34;&gt;ジェネリクス勉強会&lt;/a&gt;で発表したのですがいくつか拾いきれないコメントがあったのでここでお返事書きます&lt;/p&gt;

&lt;p&gt;発表スライドは&lt;a href=&#34;https://keens.github.io/slide/jienerikusu_disupatchi_omoteura/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ジェネリクス ディスパッチ 表裏</title>
      <link>//KeenS.github.io/slide/jienerikusu_disupatchi_omoteura/</link>
      <pubDate>Sat, 17 Jun 2017 22:25:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/jienerikusu_disupatchi_omoteura/</guid>
      <description># ジェネリクス ディスパッチ 表裏 ---------------------- [ジェネリクス勉強会 - connpass](https://connpass.com/event/56773/?utm_campaign=event_participate_to_owner&amp;utm_source=notifications&amp;utm_medium=email&amp;utm_content=title_link) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # はじめに ----------- * 例にはJavaとRustを使います + それ以外にあまり詳しくない + たまにScalaが出てくるかも * 主に裏側で何が起きてるかに焦点を当てます * 一般的な手法の比較と言語固有実装の比較がやや混じります + 実例重視 * 言語や機能を選ぶときの知識が増えればよし === # ジェネリクス -------------- * 型でパラメータ化された何か * パラメータ化する方法にいくつか方式が + 任意の型に対応する実装にする - Java + 使う型毎に実体をつくる - 型が引数になるイメージ - Rust * 便宜上前者をポインタ方式、後者をテンプレート方式と呼ぶ === # 関数ジェネリクス ----------------- * Javaコード ``` java public class Generics { public static void main(String[] args) { Generics g = new Generics(); System.</description>
    </item>
    
    <item>
      <title>Rustでエラーが出てないのにファイルに書き出せないときは</title>
      <link>//KeenS.github.io/blog/2017/06/13/rustdeera_gadetenainonifairunikakidasenaitokiha/</link>
      <pubDate>Tue, 13 Jun 2017 22:53:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/06/13/rustdeera_gadetenainonifairunikakidasenaitokiha/</guid>
      <description>&lt;p&gt;κeenです。随分前から書こうと思いつつ先送りになっていた小ネタです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのトランザクション抽象化ライブラリ作った</title>
      <link>//KeenS.github.io/blog/2017/06/06/rustnotoranzakushonchuushoukaraiburaritsukutta/</link>
      <pubDate>Tue, 06 Jun 2017 18:20:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/06/06/rustnotoranzakushonchuushoukaraiburaritsukutta/</guid>
      <description>&lt;p&gt;κeenです。最近&lt;a href=&#34;https://github.com/KeenS/transaction-rs&#34;&gt;KeenS/transaction-rs: The transaction abstraction library and its executors for rust&lt;/a&gt;というライブラリをリリースしたのでそれについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust風にデザインパターン23種</title>
      <link>//KeenS.github.io/blog/2017/05/06/rustkazenidezainpata_n23tane/</link>
      <pubDate>Sat, 06 May 2017 21:59:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/05/06/rustkazenidezainpata_n23tane/</guid>
      <description>&lt;p&gt;κeenです。
GoFのデザインパターンは有名ですが、言語機能によっては単純化できたりあるいは不要だったりするのでRust風に書き換えたらどうなるか試してみます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cargoのサブプロジェクトとreplace</title>
      <link>//KeenS.github.io/blog/2017/04/05/cargonosabupurojiekutotoreplace/</link>
      <pubDate>Wed, 05 Apr 2017 20:46:26 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/04/05/cargonosabupurojiekutotoreplace/</guid>
      <description>&lt;p&gt;κeenです。最近Cargoのreplace機能を使おうとしてハマったのでメモを残しておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>関数型プログラマからみたRust</title>
      <link>//KeenS.github.io/blog/2017/04/04/kansuugatapuroguramakaramitarust/</link>
      <pubDate>Tue, 04 Apr 2017 21:38:57 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/04/04/kansuugatapuroguramakaramitarust/</guid>
      <description>&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;C++からRustに入った人あたりから「関数型言語から来た人のRustの感想を知りたい」とたまに言われるのでいつかブログ書こうか。&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/848900720573075458&#34;&gt;2017年4月3日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust in Production</title>
      <link>//KeenS.github.io/slide/rust_in_production/</link>
      <pubDate>Wed, 22 Mar 2017 19:57:28 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rust_in_production/</guid>
      <description># Rust in Production ---------------------- [Rust プログラマーミートアップ / Rust programmers&#39; meetup - connpass](https://rust.connpass.com/event/49304/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * 若者 * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # Rust採用までの流れ -------------------- Ω＜「κeen君継続的ベンチマークサーバ作って」Ω＜「GitHubにpushする度ベンチマーク走る感じで」Ω＜「GPUとRaspberry Piでベンチマークするから」Ω＜「全部任せるね」⸜( ¯⌓¯ )⸝「Rustで書くか」やったこととか知見とかトピック毎にかいつまんで話します === # Rustのメリット --------------- * κeenが馴れてる * 社員の半分くらい書ける * Linux, Mac, Raspberry Piで動く * テスト書かなくてもそんなにバグらなそう * 将来のために小さいところでノウハウ溜めていきたい * シングルバイナリで楽に動きそう * **単純に使いたかった** * ※今回は速度や安全性は必要ない === # コンポーネント --------------- * CLIクライアント + 各自の手元やCIサーバから起動 * アグリゲータ + ワーカに仕事を投げ、結果を受け取る + ジョブ管理 * ワーカ + GPUマシンやRSPiなどでベンチマーク + 結果をアグリゲータに返す * ブラウザ + ベンチマーク結果の閲覧 === # プロジェクト構成 ------------------- * [ワークスペース](http://doc.</description>
    </item>
    
    <item>
      <title>仕事でdiesel使ってみた</title>
      <link>//KeenS.github.io/slide/shigotodedieseltsukattemita/</link>
      <pubDate>Wed, 01 Mar 2017 10:57:38 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/shigotodedieseltsukattemita/</guid>
      <description># 仕事でdiesel使ってみた ---------------------- [RustのLT会！ Rust入門者の集い #2 - connpass](https://rust.connpass.com/event/48826/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # [diesel.rs](diesel.rs) ![dieselのwebページ](/images/diesel/diesel-web.png) === # diesel --------- * RustのORM * スキーマからコード自動生成 * diesel_codegen * クエリビルダ * マイグレーション管理 * PostgreSQL, MySQL, SQLiteサポート === # 準備 ------- * [docker-composeでmysql &amp; postgreSQL をサクッと起動 - Qiita](http://qiita.com/astrsk_hori/items/1e683a7a2f2b7189cb6e) ``` cargo install diesel_cli echo DATABASE_URL=postgres://username:password@localhost/hoge  .</description>
    </item>
    
    <item>
      <title>RustのちょっとやりすぎなBuilderパターン</title>
      <link>//KeenS.github.io/blog/2017/02/09/rustnochottoyarisuginabuilderpata_n/</link>
      <pubDate>Thu, 09 Feb 2017 23:03:45 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/02/09/rustnochottoyarisuginabuilderpata_n/</guid>
      <description>&lt;p&gt;κeenです。Rustでちょっとやりすぎだけど使う側の自由度が高くて安全なBuilderパターンを思い付いたので紹介しますね。&lt;/p&gt;

&lt;p&gt;※2017-02-11T13:18:58Z+09:00 最下部に追記しました&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのモジュールの使い方</title>
      <link>//KeenS.github.io/blog/2017/01/15/rustnomoju_runokirikata/</link>
      <pubDate>Sun, 15 Jan 2017 20:52:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/01/15/rustnomoju_runokirikata/</guid>
      <description>&lt;p&gt;κeenです。たまにRustのモジュールが分かりづらいとの声を聞くので解説しますね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>気付いたらRustの環境構築がかなり楽になってた</title>
      <link>//KeenS.github.io/blog/2016/12/29/kizuitararustnokankyoukouchikugakanarirakuninatteta/</link>
      <pubDate>Thu, 29 Dec 2016 11:52:55 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/29/kizuitararustnokankyoukouchikugakanarirakuninatteta/</guid>
      <description>&lt;p&gt;κeenです。ここのところRustの開発ツール回りでリリースが続いてセットアップが楽になってるようだったので最新の情報をお届けします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのライフタイムを使ったスコープ解析</title>
      <link>//KeenS.github.io/blog/2016/12/24/rustnoraifutaimuwotsukattasuko_pukaiseki/</link>
      <pubDate>Sat, 24 Dec 2016 22:51:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/24/rustnoraifutaimuwotsukattasuko_pukaiseki/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/rust-lang-2&#34;&gt;Rust その2 Advent Calendar 2016 - Qiita&lt;/a&gt;の25日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。大トリに小ネタで申し訳ないのですが最近書いたコードでちょっと便利だなと思ったテクニックを紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustの所有権、ライフタイム、参照、型、しがらみ</title>
      <link>//KeenS.github.io/blog/2016/12/14/rustnoshoyuuken_raifutaimu_sanshou_kata_shigarami/</link>
      <pubDate>Wed, 14 Dec 2016 11:19:12 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/14/rustnoshoyuuken_raifutaimu_sanshou_kata_shigarami/</guid>
      <description>&lt;p&gt;κeenです。Rustには所有権やらライフタイムやら参照やらがあって型システムが面倒ですよね。線形（アフィン）と言われてるのに「あれ？」と思う部分もあるので詳しく探っていこうと思います。&lt;/p&gt;

&lt;p&gt;尚、この記事は型システムに興味のある人向けです。単にRustを書きたい方に有用な情報があるかは分かりません。&lt;/p&gt;

&lt;p&gt;2016-212-14T15:28Z09:00 加筆訂正しました。diffは&lt;a href=&#34;https://github.com/KeenS/KeenS.github.io/commit/f86c03a3793fde1787a9c0eb47f8efda305c2be4&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのstructとtraitって似てるよね</title>
      <link>//KeenS.github.io/blog/2016/12/03/rustnostructtotraittteniteruyone/</link>
      <pubDate>Sat, 03 Dec 2016 22:06:18 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/03/rustnostructtotraittteniteruyone/</guid>
      <description>&lt;p&gt;κeenです。関連型について考えてたらtraitがstructに見えてきたので一筆。小ネタです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのプロセス</title>
      <link>//KeenS.github.io/blog/2016/12/02/rustnopurosesu/</link>
      <pubDate>Fri, 02 Dec 2016 17:52:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/02/rustnopurosesu/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/rust-lang-2&#34;&gt;Rust その2 Advent Calendar 2016 - Qiita&lt;/a&gt;3日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。Rustの&lt;a href=&#34;https://doc.rust-lang.org/std/process/index.html&#34;&gt;&lt;code&gt;std::process&lt;/code&gt;&lt;/a&gt;の扱い方を紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>新しいコンパイラバックエンドcretonne</title>
      <link>//KeenS.github.io/blog/2016/12/02/atarashiikonpairabakkuendocretonne/</link>
      <pubDate>Fri, 02 Dec 2016 14:00:11 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/02/atarashiikonpairabakkuendocretonne/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/lang_dev&#34;&gt;言語実装 Advent Calendar 2016 - Qiita&lt;/a&gt;3日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。先日、Rustの開発者フォーラムに新しいバックエンドして&lt;a href=&#34;https://github.com/stoklund/cretonne&#34;&gt;cretonne&lt;/a&gt;が&lt;a href=&#34;https://internals.rust-lang.org/t/possible-alternative-compiler-backend-cretonne/4275&#34;&gt;提案されていました&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;ちょっと気になったのでそれを紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustでバイト列を扱う時のtips</title>
      <link>//KeenS.github.io/blog/2016/12/01/rustdebaitoretsuwoatsukautokinotips/</link>
      <pubDate>Thu, 01 Dec 2016 14:29:33 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/01/rustdebaitoretsuwoatsukautokinotips/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/rust-lang-2&#34;&gt;Rust その2 Advent Calendar 2016 - Qiita&lt;/a&gt;2日目の記事です。&lt;/p&gt;

&lt;p&gt;Rustはシステムプログラミング言語なのでバイト列をあれこれしたいことがあると思います。その時にイテレータでバイト列を舐める以外にも色々方法があるなと気付いたので。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustで非同期Thriftしたい</title>
      <link>//KeenS.github.io/slide/rustdehidoukithriftshitai/</link>
      <pubDate>Sat, 26 Nov 2016 13:07:29 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rustdehidoukithriftshitai/</guid>
      <description># Rustで非同期Thrift ---------------------- [歌舞伎座.tech#12「メッセージフォーマット/RPC勉強会」 - connpass](https://kbkz.connpass.com/event/40629/) === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * サイバーエージェントのエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === * X RPCライブラリを使う話 * O RPCライブラリを作る話 === # RPC ----- * Remote Procedure Call * リモートで呼べる * 言語跨げる * シリアライズフォーマットが決まれば大体出来る * Thrift, protobuf/gRPC, avro... * 大抵バイナリ + JSONに比べて2倍くらい効率がいい === # Thrift -------- * Facebook発(現apache)RPCフレームワーク * IDLから複数の言語向けのコードを吐ける * 対応言語多い * 新しい言語はthriftレポジトリフォークして追加 === # Thrift vs gRPC ---------------- \ | Thrift | gRPC ------------------------|:------:|:----: ベース | 自前 | HTTP/2 コード生成 | o | o プロトコルのアップデート | o | o 通信の多重化 | トランスポート次第 | o (HTTP/2) 認証 | x | o 例外 | ユーザ定義可能 | 事前定義のみ?</description>
    </item>
    
    <item>
      <title>Rustの関連型の使いどころ</title>
      <link>//KeenS.github.io/blog/2016/11/22/rustnokanrenkatanotsukaidokoro/</link>
      <pubDate>Tue, 22 Nov 2016 18:26:47 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/11/22/rustnokanrenkatanotsukaidokoro/</guid>
      <description>&lt;p&gt;κeenです。昨日は&lt;a href=&#34;https://rust.connpass.com/event/41467/&#34;&gt;RustのLT会！ Rust入門者の集い - connpass&lt;/a&gt;に参加してきました。
そこで&lt;a href=&#34;http://qiita.com/tacke_jp/items/9c7617971dc341146c0f&#34;&gt;関連型に関する発表&lt;/a&gt;があったので感化されて私も一筆。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustの話とリソースの話</title>
      <link>//KeenS.github.io/slide/rustnohanashitoriso_sunohanashi/</link>
      <pubDate>Sun, 20 Nov 2016 14:08:07 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rustnohanashitoriso_sunohanashi/</guid>
      <description># Rustの話とリソースの話 ---------------------- [RustのLT会！ Rust入門者の集い](https://rust.connpass.com/event/41467/) 2016-11-21 === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * 若者 * サイバーエージェントのエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます * [プログラミング言語Rust](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/)の翻訳 * [Join rust-jp on Slack!](http://rust-jp.herokuapp.com/) にもいます。 * [Rust その2 Advent Calendar 2016 - Qiita](http://qiita.com/advent-calendar/2016/rust-lang-2) === # 注意 ------ * たまにマニアックな話が出ますが気にせず無視して下さい * 「なんかRustすげー」って思ってもらえれば幸いです === # Rustとの出会い ---------------- * 元々Lisperだった * 他にはML, Ruby, JVM言語など === ![lis books](/images/rust-and-resource/lisp.jpg)=== 「Lisperは自分で処理系作って一人前」 === ![compiler books](/images/rust-and-resource/compiler.jpg) === # 苦悩 ------- * Cは低級すぎる * Javaは向いてない * C++は怖そう + 闇の軍団 + 縄文土器飛んできそう + あと **nullあるしメモリ破壊あるし** * MLは向いてるけどシステムプログラミングしづらい * ATS2, Golang, D.</description>
    </item>
    
    <item>
      <title>Rustの型レベルLispっぽいの作った</title>
      <link>//KeenS.github.io/blog/2016/11/06/rustnokatareberulispppoinotsukutta/</link>
      <pubDate>Sun, 06 Nov 2016 11:49:43 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/11/06/rustnokatareberulispppoinotsukutta/</guid>
      <description>&lt;p&gt;κeenです。ふとした気紛れでRustの型レベルLispっぽいの作りました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのクロージャ3種を作って理解する</title>
      <link>//KeenS.github.io/blog/2016/10/10/rustnokuro_ja3tanewotsukutterikaisuru/</link>
      <pubDate>Mon, 10 Oct 2016 16:48:43 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/10/10/rustnokuro_ja3tanewotsukutterikaisuru/</guid>
      <description>&lt;p&gt;κeenです。Rustのクロージャ、3種類もあって複雑ですよね。
こういう複雑なものはRustの気持になって考えれば理解出来たりします。ということで手でクロージャを作って理解してみましょう。&lt;/p&gt;

&lt;p&gt;尚、これはRustの1.12.0-stableと1.14.0-nightly (6e8f92f11 2016-10-07)で実験しています。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustでシェル作った</title>
      <link>//KeenS.github.io/blog/2016/09/04/rustdeshierutsukutta/</link>
      <pubDate>Sun, 04 Sep 2016 16:26:20 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/09/04/rustdeshierutsukutta/</guid>
      <description>&lt;p&gt;κeenです。
先日、先輩社員と話してるとシェルを作る話になりました。
だいたいのコンピュータサイエンスの学生なら学部生の頃に課題でシェルを作りますが数学科にいた私は作ったことありませんでした。
でも、その時「今ならシェルなんて作ろうと思えばすぐに作れますよ」なんて言っちゃったのでなんか作りました。
まあ、習作程度の雑なものです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustの所有権/ミュータビリティの分割</title>
      <link>//KeenS.github.io/blog/2016/06/19/rustnoshoyuuken_myu_tabiriteinobunkatsu/</link>
      <pubDate>Sun, 19 Jun 2016 20:42:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/06/19/rustnoshoyuuken_myu_tabiriteinobunkatsu/</guid>
      <description>&lt;p&gt;κeenです。昔所有権/ミュータビリティを分割したくなったけどぱっと方法が思いつかなくて困ったことがあるので今更ながら備忘録として残しておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>multirustが非推奨になったようなのでrustupに移行する</title>
      <link>//KeenS.github.io/blog/2016/06/12/multirustgahisuishouninattayounanoderustupniikousuru/</link>
      <pubDate>Sun, 12 Jun 2016 15:23:06 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/06/12/multirustgahisuishouninattayounanoderustupniikousuru/</guid>
      <description>&lt;p&gt;κeenです。どうやらもうそろそろRustのツールチェーン管理はmultirustじゃなくてrustupを使った方が良さそうなので移行しようと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cargo-profilerを試す</title>
      <link>//KeenS.github.io/blog/2016/05/14/cargo_profilerwotamesu/</link>
      <pubDate>Sat, 14 May 2016 20:59:13 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/05/14/cargo_profilerwotamesu/</guid>
      <description>&lt;p&gt;κeenです。先日Rustのニュースに流れてきたcargo profilerを試してみます。
元の紹介記事はこちら&lt;a href=&#34;http://www.suchin.co/2016/05/11/Introducing-Cargo-Profiler/&#34;&gt;Introducing Cargo Profiler · suchin&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;GitHubレポジトリはこちら&lt;a href=&#34;https://github.com/pegasos1/cargo-profiler&#34;&gt;pegasos1/cargo-profiler: cargo subcommand to profile binaries&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RustでベアメタルRaspberry PiのLチカ</title>
      <link>//KeenS.github.io/blog/2016/05/04/rustdebeametaruraspberry_pinolchika/</link>
      <pubDate>Wed, 04 May 2016 11:43:26 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/05/04/rustdebeametaruraspberry_pinolchika/</guid>
      <description>&lt;p&gt;κeenです。GWもくもく会で机の片隅で埃被ってたRSPiのベアメタルを触ってみたのでその成果報告を。
ベアメタルについて知らない人でも読めるように書きます。そしてアセンブラもCも出てきませんし、半田付けも必要ありません。
Rustしか使いません。&lt;/p&gt;

&lt;p&gt;Rustは分かるけどLチカは全く知らない、けど興味のある方は是非読んでみて下さい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustとは何か。どんな言語か。</title>
      <link>//KeenS.github.io/slide/rusttohananika_donnagengoka_/</link>
      <pubDate>Sun, 06 Mar 2016 05:27:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rusttohananika_donnagengoka_/</guid>
      <description># Rustとは何か。どんな言語か。 ---------------------- [異種プログラミング言語格闘勉強会](http://kbkz.connpass.com/event/26677/) 2016-03-20 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # Rustって? ---------- * システムプログラミング言語 * だけど函数型言語から影響を受けた * 安全かつ高速 * ゼロコスト抽象化 === ## システムプログラミング言語 --------------------------- * スレッドはネイティブ、Cとの相互呼び出し、小さなバイナリサイズ * ゲームエンジンとか作れる([piston](https://github.com/PistonDevelopers/piston)) * レンダリングエンジンとか作れる([Servo](https://github.com/servo/servo)) * Lチカとか出来る * OSとか作れる([Redox](https://github.com/redox-os/redox)) === ## 函数型言語的からの影響 ----------------------- 最近ではめずらしくなくなった * デフォルトイミュータブル * 代数的データ型 * コンビネータ * トレイト (型クラス) === ## 安全かつ高速 -------------- * データ競合が起きない + 所有権システム + だいたいコンパイル時Read Writeロック + Read only参照複数 or Write可能参照1つ * LLVMベースの強力な最適化 * スレッド周辺のAPIが揃ってる === ## ゼロコスト抽象化 ------------------ 省略 * [Rustのゼロコスト抽象化 | κeenのHappy Hacκing Blog](http://keens.</description>
    </item>
    
    <item>
      <title>リージョンとRustの返り値</title>
      <link>//KeenS.github.io/blog/2016/03/02/ri_jontorustnokaerichi/</link>
      <pubDate>Wed, 02 Mar 2016 00:05:03 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/03/02/ri_jontorustnokaerichi/</guid>
      <description>&lt;p&gt;Rustにおいては返り値ポインタで返すよりもそのまま返して、受け取る側でポインタで受け取るかそのまま受け取るかを指定するのが良い選択肢だ、といっています。
しかし初めて見る時にはどうしてそんなことが出来るのかわからず、びっくりしますよね。
それをRustがリージョンを使ってメモリ管理をしていると分かればどうなっているのか分かったのですこしばかり。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのゼロコスト抽象化</title>
      <link>//KeenS.github.io/blog/2016/03/01/rustnozerokosutochuushouka/</link>
      <pubDate>Tue, 01 Mar 2016 23:32:12 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/03/01/rustnozerokosutochuushouka/</guid>
      <description>&lt;p&gt;κeenです。今日Twitter上でのやりとりから少し面白いことが分かったのでそれについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RustのHigher-Kinded type Trait</title>
      <link>//KeenS.github.io/blog/2016/02/28/rustnohigherkinded_type_trait/</link>
      <pubDate>Sun, 28 Feb 2016 14:40:59 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/28/rustnohigherkinded_type_trait/</guid>
      <description>&lt;p&gt;κeenです。少し前の話になりますがRustの関連型を駆使してHigher Kinded type Trait（高階型トレイト）を実現してしまったものが出回ってたのでそれについて。
本来RustはHKTをサポートしていませんが不思議なことに実装出来てしまっているのです。&lt;/p&gt;

&lt;p&gt;HKTについて微塵も知らない方にも分かるように解説していきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのパッケージをcrates.ioに登録する</title>
      <link>//KeenS.github.io/blog/2016/01/31/rustnopakke_jiwocrates_ionitourokusuru/</link>
      <pubDate>Sun, 31 Jan 2016 14:43:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/31/rustnopakke_jiwocrates_ionitourokusuru/</guid>
      <description>&lt;p&gt;κeenです。技術の話題を書くのは久し振りですね。今日初めてRustのパッケージのセントラルレポジトリ、&lt;a href=&#34;crates.io&#34;&gt;crates.io&lt;/a&gt;にパッケージを登録したのでその流れを共有します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustといえどリソースの解放は注意</title>
      <link>//KeenS.github.io/blog/2016/01/08/rusttoiedoriso_sunokaihouhachuui/</link>
      <pubDate>Fri, 08 Jan 2016 00:50:31 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/08/rusttoiedoriso_sunokaihouhachuui/</guid>
      <description>&lt;p&gt;κeenです。深夜にですが小ネタを。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのロガーを作る</title>
      <link>//KeenS.github.io/blog/2015/12/26/rustnoroga_wotsukuru/</link>
      <pubDate>Sat, 26 Dec 2015 19:18:31 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/26/rustnoroga_wotsukuru/</guid>
      <description>&lt;p&gt;κeenです。Advent Calendarのためにネタやアイディアを用意したものの時間/場所的都合でAdvent Calendarとして出せなかったボツネタでも供養しようかと。
Advent Calendarが終わってしまったので投げやり気味ですね。
第1段はRustのロガーを作る話。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2015/rust-lang&#34;&gt;Rust Advent Calendar&lt;/a&gt;の&lt;a href=&#34;//KeenS.github.io/blog/2015/11/14/rustdechiisanatsu_ruwotsukuttemiru/&#34;&gt;初日&lt;/a&gt;でロガーはfacadと実装に分かれてると書きましたが、実装を作る話ですね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近作ってるLispの話</title>
      <link>//KeenS.github.io/blog/2015/12/20/saikintsukutterulispnohanashi/</link>
      <pubDate>Sun, 20 Dec 2015 22:40:16 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/20/saikintsukutterulispnohanashi/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/lisp&#34;&gt;Lisp Advent Calendar 2015&lt;/a&gt;21日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。最近あまりLispを書いてなくてネタがないので最近作ってるLispの話でもしようかと。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>travisとappveyorでクロスプラットフォームなCIする話</title>
      <link>//KeenS.github.io/blog/2015/12/20/travistoappveyerdekurosupurattofo_munacisuruhanashi/</link>
      <pubDate>Sun, 20 Dec 2015 22:19:21 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/20/travistoappveyerdekurosupurattofo_munacisuruhanashi/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/rust-lang&#34;&gt;Rust Advent Calendar 2015&lt;/a&gt;20日目の記事です。
日付を覚え間違っていて、締切ギリギリに書いてます。&lt;/p&gt;

&lt;p&gt;κeenです。ものすごい小ネタですがRustでCIする話でも。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustでの日本語の扱い</title>
      <link>//KeenS.github.io/blog/2015/12/13/rustdenonihongonoatsukai/</link>
      <pubDate>Sun, 13 Dec 2015 17:14:18 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/13/rustdenonihongonoatsukai/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/rust-lang&#34;&gt;Rust Advent Calendar&lt;/a&gt; 14日目の記事です&lt;br /&gt;
前:gifnksmさんの &lt;a href=&#34;http://gifnksm.hatenablog.jp/entry/2015/12/13/204655&#34;&gt;kcovを使ってRustプログラムのカバレッジを測定する - gifnksmの雑多なメモ&lt;/a&gt;&lt;br /&gt;
後:nacika_insさんのtimeこわい&lt;/p&gt;

&lt;p&gt;κeenです。当初の予定より小ネタになってしまいましたがRustでの日本語の扱いについて書こうかと。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cargoの使い方</title>
      <link>//KeenS.github.io/blog/2015/11/29/cargonotsukaikata/</link>
      <pubDate>Sun, 29 Nov 2015 23:25:54 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/11/29/cargonotsukaikata/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/rust-lang&#34;&gt;Rust Advent Calendar 2015&lt;/a&gt; 3日目の記事です。&lt;br /&gt;
前 &lt;a href=&#34;//KeenS.github.io/blog/2015/11/29/rustdechiisanatsu_ruwotsukuttemiru_kouhen_/&#34;&gt;Rustで小さなツールを作ってみる(後編)&lt;/a&gt;&lt;br /&gt;
次  szkttyさん インデックス構文によるアクセスを実装する&lt;/p&gt;

&lt;p&gt;κeenです。Rustを使うにはCargoを使う必要がありますが、&lt;code&gt;cargo help&lt;/code&gt;を見てもあまり情報が載っていないので少しばかり書きましょう。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustで小さなツールを作ってみる(後編)</title>
      <link>//KeenS.github.io/blog/2015/11/29/rustdechiisanatsu_ruwotsukuttemiru_kouhen_/</link>
      <pubDate>Sun, 29 Nov 2015 13:54:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/11/29/rustdechiisanatsu_ruwotsukuttemiru_kouhen_/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/rust-lang&#34;&gt;Rust Advent Calendar 2015&lt;/a&gt; 2日目の記事です。&lt;br /&gt;
前 &lt;a href=&#34;//KeenS.github.io/blog/2015/11/14/rustdechiisanatsu_ruwotsukuttemiru/&#34;&gt;Rustで小さなツールを作ってみる(前編)&lt;/a&gt;&lt;br /&gt;
次 &lt;a href=&#34;//KeenS.github.io/blog/2015/11/29/cargonotsukaikata/&#34;&gt;Cargoの使い方&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;κeenです。昨日の記事で作りかけだったIRCの生ログのDBへのインポートの続きです。今日はDBへのインポートをやります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustで小さなツールを作ってみる(前編)</title>
      <link>//KeenS.github.io/blog/2015/11/14/rustdechiisanatsu_ruwotsukuttemiru/</link>
      <pubDate>Sat, 14 Nov 2015 23:57:43 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/11/14/rustdechiisanatsu_ruwotsukuttemiru/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/rust-lang&#34;&gt;Rust Advent Calendar 2015&lt;/a&gt; 1日目の記事です。&lt;br /&gt;
次 &lt;a href=&#34;//KeenS.github.io/blog/2015/11/29/rustdechiisanatsu_ruwotsukuttemiru_kouhen_/&#34;&gt;Rustで小さなツールを作ってみる(後編)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;κeenです。Rust Advent Calendar初日ということで軽い話から。
小さなツールって何だよって感じですが手元にIRCの生ログが大量にあるのでそれをDBにインポートしてみましょう。
あまりRustに向いた仕事じゃなさそうですが手始めとして。&lt;/p&gt;

&lt;p&gt;前編でログのパースを、後編でDBへのインポートをやります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一時ファイルの作り方</title>
      <link>//KeenS.github.io/blog/2015/11/08/ichijifairunotsukurikata/</link>
      <pubDate>Sun, 08 Nov 2015 21:40:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/11/08/ichijifairunotsukurikata/</guid>
      <description>&lt;p&gt;Rustに&lt;a href=&#34;https://github.com/Stebalien/tempfile&#34;&gt;tempfile&lt;/a&gt;というライブラリがある。その名の通りテンポラリファイルを作るライブラリだ。
必要に迫られてそのライブラリにPRを送ろうとして実装を読んだのだが普段あまり意識しなかったテンポラリファイルの作り方を知ったのでちょっと解説してみる。&lt;/p&gt;

&lt;p&gt;Rustはほぼそのままの使い心地でCのライブラリを呼べるのでCが分かる人になら伝わると思う。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rust初心者へのガイド</title>
      <link>//KeenS.github.io/blog/2015/09/23/rustwokakutokinochiken/</link>
      <pubDate>Wed, 23 Sep 2015 22:43:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/09/23/rustwokakutokinochiken/</guid>
      <description>&lt;p&gt;シルバーウィークの進捗が芳しくなかったので雑な記事書いてお茶を濁しとく。rustをそれなりに（といっても1000行くらい）書いて溜まった知見をとりあえず出す。rust1.3時点。&lt;/p&gt;

&lt;p&gt;最初の方で熱く語ってるが多くの人にとって欲しい情報は下の方にあると思う。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustでstructのmutableなfieldあれこれ</title>
      <link>//KeenS.github.io/blog/2015/06/14/rustdestructnomutablenafieldarekore/</link>
      <pubDate>Sun, 14 Jun 2015 17:53:11 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/06/14/rustdestructnomutablenafieldarekore/</guid>
      <description>&lt;p&gt;κeenです。人々にRustを薦めておきながら本人は昨日ようやく入門しました。その時に困ったことをメモ。タイトルがルー語になってますが気にしない。&lt;/p&gt;

&lt;p&gt;因みにこれはRust 1.0の情報です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>静的なメモリ管理の話。リージョン推論とλ計算からRustまで</title>
      <link>//KeenS.github.io/slide/seitekinamemorikanrinohanashi.rijonsuirontolambdakeisankararustmade/</link>
      <pubDate>Tue, 21 Apr 2015 00:25:56 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/seitekinamemorikanrinohanashi.rijonsuirontolambdakeisankararustmade/</guid>
      <description># 静的なメモリ管理の話。リージョン推論とλ計算からRustまで ---------------------- サイバーエージェント新卒エンジニア勉強会 === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * 大学では非情報系学科。趣味のプログラマ。 + 非ガチ勢なので優しくして下さい=== # 強い静的メモリ管理の話をしよう ------------------------------ * まずは可能性の議論が必要 * 実現可能性 * 実用性 === # 可能性の議論 ------------- * プログラミング言語の理論 ≒ λ計算 * そもそもλ計算はメモリのことを考慮してない + GCがあるかのように記述される === # 可能性の議論 ------------- * λ計算にメモリ管理まで含めて理論を立てたものは存在する（静的なメモリ管理） + リージョンというものをベースにしている [参考](http://www.elsman.com/mlkit/pdf/popl94.pdf) * さらにリージョンを自動で推論する理論もある（強いメモリ管理） + リージョン推論という === # 軽くリージョンの話 ------------------- * 型と同じようにプログラム全体を伝わるメタデータ。 * データが保存される場所を指す。リージョンはいくつもある。 * リージョン推論でデータがどのリージョンに入るかが分かる * さらにリージョンのサイズもある程度予想がつくので静的に管理出来る * 関数などは引数のリージョンに対して多相になる「リージョン多相」などもある * この辺は[Martin Elsmanの論文たち](http://www.</description>
    </item>
    
  </channel>
</rss>