<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>型クラス on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/%E5%9E%8B%E3%82%AF%E3%83%A9%E3%82%B9/</link>
    <description>Recent content in 型クラス on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 16 Jul 2016 02:53:49 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/%E5%9E%8B%E3%82%AF%E3%83%A9%E3%82%B9/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>型クラスを越えて</title>
      <link>//KeenS.github.io/slide/katakurasuwokoete/</link>
      <pubDate>Sat, 16 Jul 2016 02:53:49 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/katakurasuwokoete/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS サイバーエージェントのエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
Rustとは   システムプログラミング言語 GCなし！でもメモリ管理は自動 Zero-Cost Abstraction Trait-Based Generics パターンマッチ、代数的データ型などなど プログラミング言語Rust  ===
Rustのトレイト的なの   型に固有のメソッド  オブジェクト指向的な   トレイト  型クラス    ===
型クラスじゃない方  struct Person{name: String,}implPerson{// Static constructor fn new(name: String)-&amp;gt; Self{Person{name: name}}// method fn hello(&amp;amp;self){println!(&amp;#34;Hello, {}&amp;#34;,self.name);}}===
letperson=Person::new(&amp;#34;κeen&amp;#34;);person.hello();===
多相型と制約  struct Temp&amp;lt;T&amp;gt;(T);impl&amp;lt;T: Celsius&amp;gt;Temp&amp;lt;T&amp;gt;{fn fromCelsius(t: isize)-&amp;gt; Self{Temp(Celsius(t))}}impl&amp;lt;T: Fahrenheit&amp;gt;Temp&amp;lt;T&amp;gt;{fn fromFahrenheit(t: isize)-&amp;gt; Self{Temp(Fahrenheit(t))}}===</description>
    </item>
    
  </channel>
</rss>