<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compiler on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/compiler/</link>
    <description>Recent content in Compiler on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 16 Sep 2018 01:26:15 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/compiler/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Inside Pattern Matchings</title>
      <link>//KeenS.github.io/slide/inside_pattern_machings/</link>
      <pubDate>Sun, 16 Sep 2018 01:26:15 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/inside_pattern_machings/</guid>
      <description># Inside Pattern Matchings ---------------------- [ML Day #2](https://ml-lang.connpass.com/event/94284/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [ちゅーんさんだよー](https://shindanmaker.com/789932) * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます ===  ( ^o^)パターンマッチって便利だなー ( ˘⊖˘) 。o(待てよ？なんでこんなに簡単にコードが書けるんだ) |コンパイラ|┗(☋｀ )┓三 ( ◠‿◠ )☛そこに気づいたか・・・消えてもらう ▂▅▇█▓▒░(’ω’)░▒▓█▇▅▂うわああああああ  === # 発表について ------------- * 元ネタ [Optimizing Pattern Matching](http://pauillac.inria.fr/~maranget/papers/opat/) (Fabrice Le Fessant, Luc Maranget) * 自作SMLコンパイラにパターンマッチを入れようとしたら難しかった + 「コードを生成」が割と厄介 + 次の中間言語の設計に影響を与える - というか専用の中間言語作るくらいの心意気が必要 === # 発表について ------------- * 既存手法を調べたら非自明だった + → 既存手法の紹介だけでも価値がありそう + → 発表するか + (本当は実装までしたかったけど進捗だめです) * 変数束縛の話はしない + ワイルドカードで我慢して === # パターンについて ------------------ * パターンは値の集合にマッチする * ワイルドカードパターンがある * 直積にマッチするときは _横_ に伸びる * 直和にマッチするときは _縦_ に伸びる * パターンをネストするときは _奥_ に伸びる * パターンが _網羅的_ であるかに関心がある * 複数マッチする場合は最初のものにマッチする === # 例 ---- ``` standard-ml case (lx, ly) of ([], _) = 1 | (_, []) = 2 | (x::xs, y::ys) = 3 ``` === # パターンマッチの実装 --------------------- * いくつか方法がある + 素朴なifのチェーン + decision tree + backtracking automata * それぞれメリットデメリットがある === # ifのチェーン ------------- ``` C if (lx == [] &amp;&amp; true) { return 1; } else if (true &amp;&amp; ly == []) { return 2; } else if (lx == (::) &amp;&amp; ly == (::)) { // discriminantとデータは別 x = lx.</description>
    </item>
    
    <item>
      <title>WebAssemblyとコンパイラとランタイム</title>
      <link>//KeenS.github.io/slide/webassemblytokonpairatorantaimu/</link>
      <pubDate>Thu, 16 Feb 2017 15:46:21 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/webassemblytokonpairatorantaimu/</guid>
      <description># WebAssemblyとコンパイラとランタイム ---------------------- [emscripten night !! #3 - connpass](https://emsn.connpass.com/event/48100/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # 何の話 --------- * WebAssemblyをバックエンドに使う言語を作りたい * [KeenS/webml: An ML like toy language compiler](https://github.com/KeenS/webml) * 既に発表したものの補足記事的な + [コンパイラの人からみたWebAssembly | κeenのHappy Hacκing Blog](https://keens.github.io/slide/konpairanoninkaramitaWebAssembly/) + ある程度再度説明します === # アジェンダ ------------ * なぜWebAssembly * コンパイラ * コード生成 * ランタイム === # なぜWebAssembly === # なぜWebAssembly ---------------- * なんかバイナリでテンション上がる * ポータブルでコンパクトで速い * 機能的にJSを越えるかもしれない…？ * コンパイラがブラウザで動くと言語導入のハードル下がる + 気軽に試せる + コンパイラだけでなく吐いたコードもブラウザで動かしたい === # WASM over LLVM ---------------- * 既存のJS環境と協調する + JSとの相互呼び出しとか * **non-determinismが少ない** * 細かいアラインメント考える必要がない * **API安定しそう** === # WASM over asm.</description>
    </item>
    
    <item>
      <title>コンパイラの人からみたWebAssembly</title>
      <link>//KeenS.github.io/slide/konpairanoninkaramitawebassembly/</link>
      <pubDate>Sun, 22 Jan 2017 13:35:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/konpairanoninkaramitawebassembly/</guid>
      <description># コンパイラの人からみたWebAssembly ---------------------- [コンパイラ勉強会 - connpass](https://connpass.com/event/46850/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # アジェンダ ------------ * WebAssemblyの概要 * 具体的な話 * WebAssembly吐こうとした話 === # WebAssemblyの概要 === # JavaScript ------------- * ブラウザ上で動くスクリプト言語 * 動的型付 * 高級 * GCとかある * 今までブラウザで動く唯一の言語だった * 遅い + 各ブラウザJITなどで補強 === # [asm.js](http://asmjs.org/) ------------ * プラウザ上で動く言語 * 低級 * GCなし * JSのサブセット + asm.</description>
    </item>
    
  </channel>
</rss>