<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Asciidoc on </title>
    <link>/categories/asciidoc/</link>
    <description>Recent content in Asciidoc on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 24 Jan 2015 10:58:29 +0000</lastBuildDate>
    <atom:link href="/categories/asciidoc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AsciiDocを使ってお手軽manページ生成</title>
      <link>/post/generate-manpage/</link>
      <pubDate>Sat, 24 Jan 2015 10:58:29 +0000</pubDate>
      
      <guid>/post/generate-manpage/</guid>
      <description>

&lt;p&gt;コマンドラインツールを作ってるみなさん、man書いてますか？コマンドラインツールを使う人は時代の変化に取り残された遺物なのでWebにドキュメント置いても読んでくれませんよ。&lt;/p&gt;

&lt;p&gt;いや、私のようにmanだけを頼りにツールを使う人もいるのでちゃんと書いて下さいね。面倒だって?AsciiDocを使えば簡単に書けますよ!&lt;/p&gt;

&lt;h1 id=&#34;manとは:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;Manとは&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;man hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で見れるやつですね。&lt;/p&gt;

&lt;h2 id=&#34;troff:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;troff&lt;/h2&gt;

&lt;p&gt;manはtroffというフォーマットで書く必要があります。どんな感じかというと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-troff&#34;&gt;.ie n \{\
\h&#39;-04&#39;\(bu\h&#39;+03&#39;\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
use the latest sbcl
.RE
.sp
.if n \{\
.RS 4
.\}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はい。人間が書くものではないですね。なので別の形式(AsciiDoc)から変換することを考えます。&lt;/p&gt;

&lt;h2 id=&#34;セクションナンバー:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;セクションナンバー&lt;/h2&gt;

&lt;p&gt;コマンド（など）はセクションに分かれています。manを書くときに必要になる知識なので覚えておきましょう。コマンドラインから使うものの他、Cの関数やコンフィグファイルについての項目もあります。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般コマンド&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;システムコール&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ライブラリ関数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;デバイス&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ファイルフォーマット（コンフィグファイル）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ゲーム&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;その他&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;システムメンテナンス(sudoとか)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;カーネル&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;一般デベロッパが使うのは1、5、6、8あたりでしょうか。6のゲームには普通のゲームの他、phase of moon、盈虚(えいきょ、月齢のこと)を表示する&lt;code&gt;pom&lt;/code&gt;コマンドなどがあります。&lt;/p&gt;

&lt;p&gt;manを書くときにはmanを必ずどこかのセクションに割り当てます。&lt;/p&gt;

&lt;p&gt;manを使う時は&lt;code&gt;man hoge&lt;/code&gt;だと全てのセクションのhogeのmanを捜しますが&lt;code&gt;man 1 hoge&lt;/code&gt;だとセクション1のみから捜します。割とセクション1と2で同名のmanがあることがあるので重宝します。また、そのような混同を防ぐためにコマンドやシステムコールの後には括弧書きでセクションナンバーを書くのが慣習です。manならman(1)のように。&lt;/p&gt;

&lt;p&gt;因みに&lt;code&gt;man n intro&lt;/code&gt;とするとセクションナンバーnの説明が見れます。&lt;/p&gt;

&lt;h1 id=&#34;asciidoc:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;AsciiDoc&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.methods.co.nz/asciidoc/&#34;&gt;AsciiDoc Home Page&lt;/a&gt;
MarkdownとかrSTとかの類いです。リーダブルなAsciiなDocを書いて色々な形式に変換出来ます。HTMLやDocBookなどの形式に変換出来ます。普通にそのままのテキストでも十分リーダブルだと思います。拡張子は.txtを使います。そのままでも読めるんだぜオーラが出てますね。&lt;/p&gt;

&lt;p&gt;有名どころだとgitが使ってるとか。バッククォートをあまり使わないので個人的にはリーダブルさが他より高い気がします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://powerman.name/doc/asciidoc&#34;&gt;ここ&lt;/a&gt;にチートシートがあるのでだいたいはそこを見てもらえば良いのですが、例を出すと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asciidoc&#34;&gt;TITLE
=====
keen mail@address
0.0.1, 2015-01-24

Header
------
[source, lisp]
(write-line &amp;quot;Hello, World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;な感じです。
タイトル、=で下線のあとにファイルの属性がきます。Author、Mail、Revision、Dateはよく使うのでこのようにリーダブルに書けます。他の属性は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:attr: value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように書く必要があります。Authorなどもこのように書いても構いません。&lt;/p&gt;

&lt;p&gt;独特なのがパラグラフ毎にマークアップしていくところですね。パラグラフの区切は空行です。上の&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asciidoc&#34;&gt;[source, lisp]
(write-line &amp;quot;Hello, World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにパラグラフの前にマークアップコマンドを置けます。1パラグラフに収まらないものは例えばソースコードなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asciidoc&#34;&gt;----
(defun hello (name)
  (format t &amp;quot;Hello, ~a~%&amp;quot; name))

(hello &amp;quot;κeen&amp;quot;)
----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように&lt;code&gt;-&lt;/code&gt;4つで囲む、などの記法もあります。&lt;/p&gt;

&lt;h1 id=&#34;manのフォーマット:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;manのフォーマット&lt;/h1&gt;

&lt;p&gt;さて、話戻ってmanのフォーマットです。みなさん見慣れてるかと思いますが、manは最初はNAME、SYNOPSIS、DESCRIPTIONのセクションが並ぶことを要求します。&lt;/p&gt;

&lt;h1 id=&#34;asciidocからman生成:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;AsciiDocからman生成&lt;/h1&gt;

&lt;p&gt;manが一定のフォーマットを要求するのでAsciiDoc側も一定のフォーマットで書いてやる必要があります。&lt;/p&gt;

&lt;p&gt;NAME、SYNOPSIS、DESCRIPTIONは勿論のこと、タイトルが「コマンド名(n)」となっている必要があります。コマンド名にはスペースが入ってはいけません。gitのようにサブコマンドに分かれているものはハイフンで繋ぐようです。nはセクションナンバーですね。&lt;/p&gt;

&lt;p&gt;NAMEについて捕捉しておくと、NAMEの書式も決まっていて、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;command-name - one line description
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のフォーマットである必要があります。&lt;code&gt;apropos(1)&lt;/code&gt;で表示するためでしょうね、きっと。&lt;/p&gt;

&lt;h2 id=&#34;例:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;例&lt;/h2&gt;

&lt;p&gt;実際に私が書いたものを載せますね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asciidoc&#34;&gt;cim-use(1)
==========
keen(@blackenedgold) 3han5chou7@gmail.com
:man manual: CIM Manual

NAME
----
cim-use -  Use specified impl as &#39;cl&#39; command&#39;s backend.

SYNOPSIS
--------
[verse]
cim use &amp;lt;impl[-version]&amp;gt; [--default]

DESCRIPTION
-----------

Use &amp;lt;impl&amp;gt; as background for cl command. It also affects bare lisp command.
If version is not given, use latest version.
If --default is given, use the specified implementation at initial state.

EXAMPLES
--------
* use the latest sbcl
----
$ cim use sbcl
$ sbcl --version
SBCL 1.1.14
----

* use old sbcl
----
$ cim use sbcl-1.1.10
$ sbcl --version
SBCL 1.1.10
----

* use ccl-1.9 and set it default
----
$ cim use ccl-1.9 --default
----

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:man manual:の属性はヘッダに表示されるものです。&lt;/p&gt;

&lt;p&gt;んで変換は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a2x  --doctype manpage --format manpage filename.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;。&lt;/p&gt;

&lt;p&gt;これ、ファイル名に関らずcim-use.1というファイルを生成します。&lt;/p&gt;

&lt;p&gt;んでファイルの内容は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;man ./cim-use.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で見れます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CIM-USE(1)			  CIM Manual			    CIM-USE(1)



NAME
       cim-use - Use specified impl as &#39;cl&#39; command&#39;s backend.

SYNOPSIS
       cim use &amp;lt;impl[-version]&amp;gt;	[--default]

DESCRIPTION
       Use &amp;lt;impl&amp;gt; as background	for cl command.	It also	affects	bare lisp
       command.	If version is not given, use latest version. If	--default is
       given, use the specified	implementation at initial state.

EXAMPLES
       o   use the latest sbcl

	   $ cim use sbcl
	   $ sbcl --version
	   SBCL	1.1.14

       o   use old sbcl

	   $ cim use sbcl-1.1.10
	   $ sbcl --version
	   SBCL	1.1.10

       o   use ccl-1.9 and set it default

	   $ cim use ccl-1.9 --default

AUTHOR
       keen(@blackenedgold) 3han5chou7@gmail.com
	   Author.



				  01/21/2015			    CIM-USE(1)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他の例だと、&lt;a href=&#34;https://github.com/git/git/tree/master/Documentation&#34;&gt;gitのドキュメント&lt;/a&gt;を見るとよさそうです。あそこはWEB用にもビルドしてるのでAsciiDocのコンフィグ書いてWEBとmanで条件分岐するマクロとかも書いてます。変態ですね。&lt;/p&gt;

&lt;h1 id=&#34;ビルド:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;ビルド&lt;/h1&gt;

&lt;p&gt;私は以下のようなスクリプトを書いてビルドしてます。並列ビルド、タイムスタンプセンシティブビルド対応。DOC_ROOTはデファルトでそのスクリプトが置いてあるディレクトリです。環境変数で制御出来ます。make.shって名前で保存したなら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ DOC_ROOT=your/root ./make.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように。その他AUTO_POLLなども設定出来ます。必要ならお使い下さい。&lt;a href=&#34;https://github.com/KeenS/CIM&#34;&gt;CIM&lt;/a&gt;の配布物に含まれるのでBSDライセンスです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh

: ${DOC_ROOT:=$(cd $(dirname $0); pwd)}
: ${MAN_DIR:=${DOC_ROOT}/man/man1}
: ${AUTO_POLL:=false}
: ${POLL_INTERVAL:=5}

txt2man(){
    if [ ! -e &amp;quot;${MAN_DIR}/$(basename $1 .txt).1&amp;quot; ] || [ &amp;quot;$1&amp;quot; -nt &amp;quot;${MAN_DIR}/$(basename $1 .txt).1&amp;quot; ]; then
        echo &amp;quot;Building $1&amp;quot;
        if a2x -v  --doctype manpage --format manpage -D &amp;quot;${MAN_DIR}&amp;quot; &amp;quot;$1&amp;quot; &amp;gt; &amp;quot;log/$(basename $1 .txt).log&amp;quot; 2&amp;gt;&amp;amp;1
        then
            echo &amp;quot;O Built $1&amp;quot;
        else
            echo &amp;quot;X Bulid failed: $1. See log/$(basename $1 .txt).log&amp;quot;
            return 1
        fi
    fi
}

cd &amp;quot;${DOC_ROOT}&amp;quot;
while &amp;quot;${AUTO_POLL}&amp;quot;; do
      for f in *.txt; do
          txt2man &amp;quot;$f&amp;quot; &amp;amp;
      done

      wait
      if  &amp;quot;${AUTO_POLL}&amp;quot;; then
          sleep &amp;quot;${POLL_INTERVAL}&amp;quot;
      fi
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;運用:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;運用&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;man&lt;/code&gt;はMANPATH環境変数を元にmanを捜します。捜すのはMANPATH直下ではなく、セクションナンバー1なら/man/path/man1/name.1を捜します。それっぽいところに置きましょう。&lt;/p&gt;

&lt;p&gt;因みにFreeBSDではちょっと面倒です。詳しくは&lt;code&gt;manpath(1)&lt;/code&gt;を見て下さい。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;manpageは重要&lt;/li&gt;
&lt;li&gt;だけど手で書くものではない&lt;/li&gt;
&lt;li&gt;AsciiDoc使うと便利!&lt;/li&gt;
&lt;li&gt;便利なスクリプト用意しといたよ&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>