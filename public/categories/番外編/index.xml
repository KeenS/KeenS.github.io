<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>κeenのHappy Hacκing Blog</title>
    <link>/categories/%E7%95%AA%E5%A4%96%E7%B7%A8/index.xml</link>
    <description>Recent content on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="/categories/%E7%95%AA%E5%A4%96%E7%B7%A8/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Idein Incに入社しました</title>
      <link>/blog/2017/01/06/idein_incninyuushashimashita</link>
      <pubDate>Fri, 06 Jan 2017 20:53:12 +0900</pubDate>
      
      <guid>/blog/2017/01/06/idein_incninyuushashimashita</guid>
      <description>&lt;p&gt;κeenです。本日を以ちまして&lt;a href=&#34;http://idein.jp/&#34;&gt;Idein Inc.&lt;/a&gt;に入社したので報告します。&lt;/p&gt;

&lt;p&gt;退職エントリは&lt;a href=&#34;http://keens.github.io/blog/2016/11/30/saiba_e_jientowotaishokushimashita/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;経緯&#34;&gt;経緯&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Lisp Meet Upで社長の&lt;a href=&#34;https://twitter.com/9_ties&#34;&gt;@9_ties&lt;/a&gt;さんと知り合う&lt;/li&gt;
&lt;li&gt;その他勉強会で何度か一緒になってよく喋るようになる&lt;/li&gt;
&lt;li&gt;オフィス訪問に誘われて行ったら入社を誘われる（7月末）&lt;/li&gt;
&lt;li&gt;入社することにする（9月半ば）&lt;/li&gt;
&lt;li&gt;入社（現在）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;わさびずとideinに遊びに来たよ。噂のpi zero&lt;br&gt;クラスタとかPEZYとかあった。熱い。 &lt;a href=&#34;https://t.co/MEc7qdosrk&#34;&gt;pic.twitter.com/MEc7qdosrk&lt;/a&gt;&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/759655196628615168&#34;&gt;2016年7月31日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;結構前から水面下で話は進んでました。&lt;/p&gt;

&lt;p&gt;割と「PEZYに行くの？」という質問が多かったのですが中らずとも遠からずといったところでしょうか。PEZY Computingとも取引があったりする会社です。&lt;/p&gt;

&lt;h1 id=&#34;どんな会社&#34;&gt;どんな会社？&lt;/h1&gt;

&lt;p&gt;私が7人目（バイトを抜いたら6人目）の社員になる、少数精鋭なスタートアップです。全社員に1つのチャットで連絡が取れます。
この規模ながらフルタイムのリサーチャがいるなど、かなり技術寄りな会社です。創業者も全員技術者です。社員の中ではクソザコクラスになるので明日から人権があるか心配ですがどうにか上手くやっていきます。&lt;/p&gt;

&lt;p&gt;今3期目とのことです。&lt;/p&gt;

&lt;p&gt;社長に「なんて紹介したらいいですか」って言ったら「うーん、困るなぁ」と言われました（苦笑。
Big Pictureとしてはコンピュテーショナルセンサーを使って世の中に起きているあらゆる事象をソフトウェアで扱えるようにしたい、というもの。ざっくり言ってしまえばIoTの会社になるんですかね。
でもじゃあ電子工作ばっかやってるのかというとそういう訳でもなくて、例えばカメラから得られた画像から色々な情報を抜き出すために機械学習やらディープラーニングやらをやっていたり、さらにそれをセンサーデバイス（Rasp Piとか）上で走らせるために効率化したりとソフトウェア技術のウェイトがかなり大きいです。&lt;/p&gt;

&lt;p&gt;例えばニューラルネットワークの学習済みデータを最適化（軽量化）してさらにコンパイル（！！）して組込みデバイス上でも満足な速度で動かすための技術開発なんかをやっています。&lt;/p&gt;

&lt;p&gt;あるいはセンサーから取得したデータを使えるプラットフォームなんかも。&lt;/p&gt;

&lt;h1 id=&#34;どんな仕事するの&#34;&gt;どんな仕事するの？&lt;/h1&gt;

&lt;p&gt;私の仕事もそういう文脈からきていて、例えばニューラルネットをコンパイルしてRasp PiのGPUで動かすだとか、あるいはもうちょっと特化したデバイス（ぼかしてる）のためのコンパイラを作るだとかの仕事になります。
自分で書いておきながらやっぱり「ニューラルネットをコンパイルする」っていう字面がパワーある。
今、（学習ではなくて予測に）使われているのはほとんどがモデルと実行器が分けらています。要はインタプリタなのでそれをコンパイルしてあげて高速に実行するというのが可能なんですね。&lt;/p&gt;

&lt;p&gt;会社全体としてはデバイスの開発も一応やりつつ、データを処理するための技術開発、共同研究、技術開発も含めた受託案件、あるいは開発した技術を使った受託案件なんかもやっています。
かなり技術開発への投資が強いイメージですが、今期は黒字予定と案外バランスの取れた運営をしているようです（結構色々な会社が興味を持ってくれているようです。
センサーだとかの文脈になるのでお客さんはハードウェアの会社が多いようです。&lt;/p&gt;

&lt;h1 id=&#34;初日の感想は&#34;&gt;初日の感想は？&lt;/h1&gt;

&lt;p&gt;会社が移転した（前のオフィスだと私のスペースがなかった）のでほとんど環境構築でした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;環境構築してる &lt;a href=&#34;https://t.co/6HLHbnOmi6&#34;&gt;pic.twitter.com/6HLHbnOmi6&lt;/a&gt;&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/817252587703414789&#34;&gt;2017年1月6日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;オフィス引っ越し中 &lt;a href=&#34;https://t.co/MnrNUxxUP7&#34;&gt;pic.twitter.com/MnrNUxxUP7&lt;/a&gt;&lt;/p&gt;&amp;mdash; y͛amaday͛ (@yamaday) &lt;a href=&#34;https://twitter.com/yamaday/status/817203674036305921&#34;&gt;2017年1月6日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;落ち着いたあとはQiita::Teamを全部読んでました。社長も技術者なので事業プランや資金計画（売り上げ）なんかもQiita::Teamに上がってるのが新鮮でした。&lt;/p&gt;

&lt;p&gt;社員に2名ほどRustをやってる人がいて「κeen君来たし仕事でRust使っていくかー」みたいな感じになりました。使えそうな案件があったら積極的に使っていきたいですね。&lt;/p&gt;

&lt;h1 id=&#34;結びに&#34;&gt;結びに&lt;/h1&gt;

&lt;p&gt;前回転職祝いを沢山頂いたので今回は例のURLは控えさせて頂きます。
前回送りそびれたのでどうしてもという方は&lt;a href=&#34;http://keens.github.io/blog/2016/11/30/saiba_e_jientowotaishokushimashita/&#34;&gt;退職エントリ&lt;/a&gt;の方から辿って頂けると幸いです。&lt;/p&gt;

&lt;p&gt;また、Ideinではエンジニアを募集しています&lt;/p&gt;

&lt;blockquote&gt;
&lt;h1 id=&#34;募集職種&#34;&gt;募集職種&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ソフトウェアエンジニア（画像処理）
画像処理に関する基本的な知識を持っている方（画像処理の実装経験がある方歓迎）&lt;/li&gt;
&lt;li&gt;ソフトウェアエンジニア（バックエンド）
分散システムの構築やDevOpsに興味があり、最新の技術の動向を追っている方。場合によっては自ら実装が出来る方&lt;/li&gt;
&lt;li&gt;ソフトウェアエンジニア（フロントエンド）
最新の技術動向に明るく、移り変わりの激しい技術のコンテキストを理解して吸収でき、UXを考慮した実装が出来る方&lt;/li&gt;
&lt;li&gt;ソフトウェアエンジニア（組み込み）
計算機を低いレイヤーまで理解し、ハードウェアの仕様を読み解いて必要機能の実装が出来る方&lt;/li&gt;
&lt;li&gt;ソフトウェアエンジニア（言語処理系）
計算機アーキテクチャや数値計算アルゴリズムに精通しており、最適化コンパイラやプログラミング環境をフルスクラッチで実装出来る方&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下のスキルセットを持っている方を歓迎します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++, Python, Haskell,Rust, etc&amp;hellip;&lt;/li&gt;
&lt;li&gt;Git（分散VCS）&lt;/li&gt;
&lt;li&gt;DevOps関連技術(Docker,Ansible,etc&amp;hellip;)&lt;/li&gt;
&lt;li&gt;GPU&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;すべての職種に一貫して、現在のスキルセットよりは以下に挙げるような事柄への知識や興味を優先します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アルゴリズムとデータ構造&lt;/li&gt;
&lt;li&gt;計算機&lt;/li&gt;
&lt;li&gt;プログラミング言語&lt;/li&gt;
&lt;li&gt;ソフトウェア工学&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;待遇-給与&#34;&gt;待遇・給与&lt;/h1&gt;

&lt;p&gt;社保完備 月収60万円〜（正社員）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因みに私はポテンシャル採用されたタイプで「壁に当たっても自分で調べて乗り越えていけそう」だとか「コンパイラを書いてると心が折れそうになる瞬間があるけどそこで折れないような人が大事だ」とか言われました。頑張ります。&lt;/p&gt;

&lt;p&gt;ということで皆様の応募お待ちしております！！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2017年注目していきたい技術</title>
      <link>/blog/2017/01/01/2017nenchuumokushiteikitaigijutsu</link>
      <pubDate>Sun, 01 Jan 2017 22:12:01 +0900</pubDate>
      
      <guid>/blog/2017/01/01/2017nenchuumokushiteikitaigijutsu</guid>
      <description>&lt;p&gt;κeenです。毎年これやっていく。個人的に注目していきたい技術と飛び込んでみたい技術書いく。&lt;/p&gt;

&lt;p&gt;あくまで個人的な内容。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;webassembly-http-webassembly-org&#34;&gt;&lt;a href=&#34;http://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;ブラウザ上で動く仮想アセンブラ。ブラウザ上でのJSの高速実行はブラウザでの至上命題である。
JIT技術を各ブラウザベンダが切磋琢磨していたがそれでも限界があるので&lt;a href=&#34;http://asmjs.org/&#34;&gt;asm.js&lt;/a&gt;なんかが産まれた。
これは例えば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function geometricMean(start, end) {
  start = start|0; // start has type int
  end = end|0;     // end has type int
  return +exp(+logSum(start, end) / +((end - start)|0));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように&lt;code&gt;x|0&lt;/code&gt;と書くと&lt;code&gt;x&lt;/code&gt;が整数であることを表わす、などとしてJSのサブセットで型情報も付与出来るようにしたものだ。冗長なので人の手で書くことは意図していない。
これはある程度上手くいって、&lt;a href=&#34;https://github.com/kripken/emscripten&#34;&gt;emscripten&lt;/a&gt;のようにLLVMからjsへのコンパイラでも使われている。&lt;/p&gt;

&lt;p&gt;それでもまだ問題がある。1つに、JSよりも冗長な記法を使っているためファイルが嵩張る点。ロード時間やパース時間が長くなる。そもそも人の手で掛かないならバイナリフォーマットでもいい筈だ。
そしてもう1つに低レベルな処理、例えばSIMDなんかは扱えない点。&lt;/p&gt;

&lt;p&gt;WebAssemblyはこれらを解決する。仮想的な機械語でバイナリフォーマットがあるので低レベルなことが（将来）出来てコンパクトになっている。
計算モデルはスタックベースのマシンになっている。メモリや関数テーブルなどもある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(module
  (type (;0;) (func (param i32 i32) (result i32)))
  (func (;0;) (type 0) (param i32 i32) (result i32)
    get_local 0
    get_local 1
    i32.add)
  (export &amp;quot;addTwo&amp;quot; (func 0)))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;多くの人にとってWebAssemblyは意識して関るものではなく、emscriptenの吐くコードが効率的になる、程度のものだろう。
私はコンパイラを作る人なので意識する必要がある。
WebAssemblyにはundefined behaviourがないだとかThread API、 SIMD APIなどが入る予定だとかがあるのでLLVM経由で吐くよりも直接吐いた方が面白い。&lt;/p&gt;

&lt;p&gt;少し追っていきたい。&lt;/p&gt;

&lt;h1 id=&#34;quic-https-www-chromium-org-quic&#34;&gt;&lt;a href=&#34;https://www.chromium.org/quic&#34;&gt;QUIC&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;HTTP/2のための代替TCP。HTTP/2はもうリリースされてるので次はQUICを。
HTTP/2は1コネクションを複数のstreamに分割するが、stream内での到達順序保障は必要なもののstream同士ではそれが不要なのでTCPの到達順序保障が過剰要求になってしまう。
それを緩めるためにUDPベースでプロトコルを作ったのがQUIC。まあ、他にも色々改善点はあるが。&lt;/p&gt;

&lt;p&gt;これも基本的にはあまり追う必要はないが、自分の使いたい言語で実装がなかったら自分で実装することになる。
まだその辺の環境が整っていないので今後どうなるか注視する必要がある。&lt;/p&gt;

&lt;h1 id=&#34;idris-http-www-idris-lang-org&#34;&gt;&lt;a href=&#34;http://www.idris-lang.org/&#34;&gt;Idris&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;依存型のある言語。今年もRustに忙しい可能性があるが、ちょっとIdrisに興味が湧いた。
常々「多相があって正格評価で高階関数を簡単に扱えてサブタイピングのない、C FFIやThreadを扱える言語」を捜していて、それがATS2だったりSML#だったりRustだったりした。
最近はRustに落ち着いたが、今度は低レベルな部分、「C FFIやThreadを扱える」がなくてもいいから依存型が入ってる言語が欲しくなった。ATS2は置いといてIdrisかなーと。&lt;/p&gt;

&lt;p&gt;生の依存型だとつらいかな、と思っていたらtacticもあるようだったので機会があればやってみたい。&lt;/p&gt;

&lt;p&gt;CF &lt;a href=&#34;http://wkwkes.hatenablog.com/entry/2016/12/17/000000&#34;&gt;プログラミング言語 idris - wkwkesのやつ&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;lean-http-leanprover-github-io&#34;&gt;&lt;a href=&#34;http://leanprover.github.io/&#34;&gt;Lean&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;MSRで開発されている定理証明支援系。よく「Coqでいいじゃん」「Agdaは？」と訊かれるが、&lt;a href=&#34;https://leanprover.github.io/theorem_proving_in_lean/index.html&#34;&gt;オンラインチュートリアル&lt;/a&gt;が良さげだったのと、Emacsから使えるのと、
&lt;a href=&#34;https://kha.github.io/2016/07/22/formally-verifying-rusts-binary-search.html&#34;&gt;RustからLeanへのトランスレートをやっている&lt;/a&gt;人がいたので興味湧いた。
そもそもCoqをある程度やってからにしろとは自分でも思う。&lt;/p&gt;

&lt;h1 id=&#34;coq-https-coq-inria-fr&#34;&gt;&lt;a href=&#34;https://coq.inria.fr/&#34;&gt;Coq&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;定理証明支援系。去年も上がっていたが、今年は酉年なので。「Agdaは？」。知らん。&lt;/p&gt;

&lt;h1 id=&#34;finagle-https-twitter-github-io-finagle&#34;&gt;&lt;a href=&#34;https://twitter.github.io/finagle/&#34;&gt;Finagle&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;RPCのクライアント/サーバフレームワーク。RPCをやる時にいくつか問題が出る。
1つはペイロードがRPC毎に違うのでフレームワークが定まりづらい点。
もう1つはロードバランシングがしづらい点。
ロードバランシングの方に言及しておくと、RPCをやる時は大抵コネクションを張りっぱなしなのでTCPロードバランサが使えない。
例えば順番にサーバを起動していくと最初に上がったサーバにコネクションが集中して以後バランスされない。&lt;/p&gt;

&lt;p&gt;これを解決するのがFinagleで、クライアントが全てのサーバにコネクションを貼って、クライアントサイドでロードバランシングをする。
さらにクライアントが複数のサーバを知っているのでサーバがエラーを返したら別のサーバにリクエストを投げることも出来る。
ペイロードの話は多相型で解決する。パーサとかその辺も含めたフレームワークになっている。&lt;/p&gt;

&lt;h1 id=&#34;tokio-https-github-com-tokio-rs-tokio&#34;&gt;&lt;a href=&#34;https://github.com/tokio-rs/tokio&#34;&gt;Tokio&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;FinagleのRust版。Rustは非同期IOに強いと思っているのでTokioがリリースされたらそこら辺のHTTPフレームワークも非同期化するのではと思っている。&lt;/p&gt;

&lt;h1 id=&#34;tidb-https-github-com-pingcap-tidb&#34;&gt;&lt;a href=&#34;https://github.com/pingcap/tidb&#34;&gt;TiDB&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;分散スケール可能なSQL DB。Rust製。&lt;a href=&#34;https://research.google.com/pubs/pub41344.html&#34;&gt;Google F1&lt;/a&gt;を参考に作られているらしい。
ストレージエンジン自体は&lt;a href=&#34;http://rocksdb.org/&#34;&gt;RocksDB&lt;/a&gt;を使っていて、その上に分散合意、MVCC、トランザクションを載せてさらにそれにSQLレイヤー、MySQLプロトコルレイヤーを載せている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pingcap.github.io/blog/assets/img/how-we-build-tidb-2.png&#34; alt=&#34;TiDBのアーキテクチャ画像&#34; /&gt;&lt;/p&gt;

&lt;p&gt;アーキテクチャについては上の画像を引用した&lt;a href=&#34;https://pingcap.github.io/blog/2016/10/17/how-we-build-tidb/&#34;&gt;この記事&lt;/a&gt;が詳しい。&lt;/p&gt;

&lt;h1 id=&#34;tantivy-https-github-com-tantivy-search-tantivy&#34;&gt;&lt;a href=&#34;https://github.com/tantivy-search/tantivy&#34;&gt;tantivy&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;全文検索エンジンライブラリ。Rust製。アーキテクチャやアルゴリズムは&lt;a href=&#34;http://lucene.apache.org/core/&#34;&gt;Apache Lucene&lt;/a&gt;を参考に作られているらしいのでだいたいそのレイヤーのライブラリと思ってもらえれば。&lt;/p&gt;

&lt;p&gt;Rust製なのでインデックスの構築が速いのが一つの特徴。今後、自前でElastic SearchやApache Solrのようなレイヤーを作るのかLuceneの置き換えを狙ってJava APIを提供するのかは不明。&lt;/p&gt;

&lt;p&gt;注目したい理由はベースで使っている&lt;a href=&#34;https://github.com/BurntSushi/fst&#34;&gt;fstライブラリ&lt;/a&gt;の&lt;a href=&#34;http://blog.burntsushi.net/transducers/&#34;&gt;紹介記事&lt;/a&gt;が気に入ったから。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2016年注目していきたかった技術の振り返りと個人的振り返り</title>
      <link>/blog/2016/12/31/2016nenchuumokushiteikitakattagijutsunofurikaeritokojintekifurikaeri</link>
      <pubDate>Sat, 31 Dec 2016 16:57:48 +0900</pubDate>
      
      <guid>/blog/2016/12/31/2016nenchuumokushiteikitakattagijutsunofurikaeritokojintekifurikaeri</guid>
      <description>&lt;p&gt;κeenです。年始に&lt;a href=&#34;http://keens.github.io/blog/2016/01/01/2016nenchuumokushiteikitaigijutsu/&#34;&gt;2016年注目していきたい技術 | κeenのHappy Hacκing Blog&lt;/a&gt;ってのを書いたので雑に振り返ります。あと個人的な一年の総括を。&lt;/p&gt;

&lt;p&gt;※個人メモなので雑多な記述が多いです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;apache-drill-https-drill-apache-org&#34;&gt;&lt;a href=&#34;https://drill.apache.org/&#34;&gt;Apache Drill&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;ちょっとづつ進化してるようだけどそこまで広まってる気配なし。因みに自分はチーム移動で使う用事がなくなったのであんまり使ってない&lt;/p&gt;

&lt;h1 id=&#34;rust-https-www-rust-lang-org-en-us&#34;&gt;&lt;a href=&#34;https://www.rust-lang.org/en-US/&#34;&gt;Rust&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;めっちゃ使った。大分進化してる。&lt;a href=&#34;https://rust.connpass.com/event/35122/&#34;&gt;ハンズオン&lt;/a&gt;のチュータやったり&lt;a href=&#34;https://rust.connpass.com/event/41467/&#34;&gt;LT会&lt;/a&gt;の玄人枠で発表したりもした。あと年明けに&lt;a href=&#34;https://rust.connpass.com/event/43893/&#34;&gt;ハンズオン第2回&lt;/a&gt;のチュータやる。&lt;/p&gt;

&lt;h1 id=&#34;apache-kafka-http-kafka-apache-org&#34;&gt;&lt;a href=&#34;http://kafka.apache.org/&#34;&gt;Apache Kafka&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;めっちゃ使った。便利。道具箱の中身が増えた。便利。&lt;/p&gt;

&lt;h1 id=&#34;floki-https-github-com-arthurprs-floki&#34;&gt;&lt;a href=&#34;https://github.com/arthurprs/floki&#34;&gt;Floki&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;5月で開発停止したっぽい。残念。&lt;/p&gt;

&lt;h1 id=&#34;robots-https-github-com-gamazeps-robots&#34;&gt;&lt;a href=&#34;https://github.com/gamazeps/RobotS&#34;&gt;RobotS&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;開発は続いてるようだけど流行ってはない。うーん、アクターいけると思ったんだけどなぁ。&lt;/p&gt;

&lt;h1 id=&#34;redox-http-www-redox-os-org&#34;&gt;&lt;a href=&#34;http://www.redox-os.org/&#34;&gt;Redox&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;開発は継続中。&lt;a href=&#34;https://github.com/redox-os/redox/releases&#34;&gt;ISOのリリース&lt;/a&gt;とかもあったしそれなりに進歩はしてる。多分もうちょっとウォッチ期間が必要。&lt;/p&gt;

&lt;h1 id=&#34;ats2-http-www-ats-lang-org&#34;&gt;&lt;a href=&#34;http://www.ats-lang.org/&#34;&gt;ATS2&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;使ってない。一回コンパイラのバグ踏んじゃって萎えてその後はRustばっか使ってる。面白いんだけどなぁ…&lt;/p&gt;

&lt;h1 id=&#34;r-https-www-r-project-org&#34;&gt;&lt;a href=&#34;https://www.r-project.org/&#34;&gt;R&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;チーム移動で用事がなくなったのであまり使ってない。
一応それなりには使ったけどあんまりRのこと覚えきれてない。例えるならEmacs初心者がEmacs Lispのスニペットをコピペでどうにか使ってるくらい。&lt;/p&gt;

&lt;h1 id=&#34;異常検知&#34;&gt;異常検知&lt;/h1&gt;

&lt;p&gt;チーム移動で(ry&lt;/p&gt;

&lt;h1 id=&#34;coq-https-coq-inria-fr&#34;&gt;&lt;a href=&#34;https://coq.inria.fr/&#34;&gt;Coq&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;それなりにやった。&lt;a href=&#34;http://proofcafe.org/sf/&#34;&gt;ソフトウェアの基礎&lt;/a&gt;のサブタイプまでやった。ProofGeneralのバグは&lt;a href=&#34;https://github.com/ProofGeneral/PG&#34;&gt;GitHubにある方のProofGeneral&lt;/a&gt;を使ったら解決した。あと&lt;a href=&#34;https://twitter.com/search?q=%23readcoqart&amp;amp;src=typd&amp;amp;lang=ja&#34;&gt;#readcoqart&lt;/a&gt;にも何度か参加した。&lt;/p&gt;

&lt;h1 id=&#34;isabelle-https-isabelle-in-tum-de&#34;&gt;&lt;a href=&#34;https://isabelle.in.tum.de/&#34;&gt;Isabelle&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;一応チュートリアルを少しやった。あと&lt;a href=&#34;https://keens.github.io/slide/tadashiiScalanoko_dogahoshii/&#34;&gt;社内勉強会で発表&lt;/a&gt;もした。Isabelle 2014までしかProofGeneralで使えないのでちょっと厳しくなってやらなくなった。つらい。&lt;/p&gt;

&lt;p&gt;いい加減Emacs以外のプラットフォームも使えるようにならないとなー。&lt;/p&gt;

&lt;h1 id=&#34;fortran&#34;&gt;Fortran&lt;/h1&gt;

&lt;p&gt;やってない。1ﾐﾘも触ってない。本当はある程度入門したらFortranコンパイラでも作るかって気分だったけど&lt;a href=&#34;http://no-maddojp.hatenablog.com/entry/2016/12/01/023624&#34;&gt;つらいらしい&lt;/a&gt;のでやらなくてよかった&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;じゃ、個人的総括。まず、個人ブログはこのエントリ含めて48。週1ペース守れなかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/01/01/2016nenchuumokushiteikitaigijutsu&#34;&gt;2016年注目していきたい技術&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/01/01/ATS2nokangaseiridekita&#34;&gt;ATS2の観が整理出来た&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/01/08/Rusttoiedoriso_sunokaihouhachuui&#34;&gt;Rustといえどリソースの解放は注意&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/01/11/SML_nopthreadbaindingutsukutta&#34;&gt;SML#のpthreadバインディング作った&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/01/12/Isabelleninyuumonshita&#34;&gt;Isabelleに入門した&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/01/17/dokugakudepuroguraminguwoyattekitanakadeyokattagijutsushowoageteiku&#34;&gt;独学でプログラミングをやってきた中で良かった技術書50選&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/01/17/puroguraminguwodokugakusurutokikosoinputtowofuyashitahougaii&#34;&gt;プログラミングを独学する時こそインプットを増やした方がいい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/01/27/Lisp_Meetup3shuunenniyosete&#34;&gt;Lisp Meetup3周年に寄せて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/01/31/Rustnopakke_jiwocrates_ionitourokusuru&#34;&gt;Rustのパッケージをcrates.ioに登録する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/02/04/Common_Lispdekousokugyouretsuenzan&#34;&gt;Common Lispで高速行列演算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/02/10/Nexus_5niUbuntu_Touchnoinsuto_ru&#34;&gt;Nexus 5にUbuntu Touchのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/02/14/DVCSnomoderu_aruihaPijulnitsuite&#34;&gt;分散VCSのモデル、あるいはPijulについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/02/14/readlinenotsukurikata&#34;&gt;readlineの作り方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/02/24/Bind_Addressnoimigayouyakuwakatta&#34;&gt;Bind Addressの意味がようやく分かった&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/02/27/druidtoiuriarutaimude_tabunsekitsu_ruwoshitta&#34;&gt;druidというリアルタイムデータ分析ツールを知った&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/02/28/RustnoHigherKinded_type_Trait&#34;&gt;RustのHigher-Kinded type Trait&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/03/01/Rustnozerokosutochuushouka&#34;&gt;Rustのゼロコスト抽象化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/03/01/tesutonitsuitekangaetemita&#34;&gt;テストについて考えてみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/03/02/ri_jontoRustnokaerichi&#34;&gt;リージョンとRustの返り値&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/04/04/Mirahkanrentsu_rumatome&#34;&gt;Mirah関連ツールまとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/04/14/lxc_2_0_0gariri_susaretarashii&#34;&gt;LXDがリリースされたらしい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/05/04/RustdebeametaruRaspberry_PinoLchika&#34;&gt;RustでベアメタルRaspberry PiのLチカ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/05/14/cargo_profilerwotamesu&#34;&gt;cargo-profilerを試す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/06/12/multirustgahisuishouninattayounanoderustupniikousuru&#34;&gt;multirustが非推奨になったようなのでrustupに移行する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/06/19/Rustnoshoyuuken_myu_tabiriteinobunkatsu&#34;&gt;Rustの所有権/ミュータビリティの分割&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/07/02/Container_Desgin_Patterns&#34;&gt;Container Desgin Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/07/13/shierugeijuuhachihan&#34;&gt;シェル芸十八般&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/08/02/watashigako_dowokakutokitesutohakakanai&#34;&gt;私がコードを書くときテストは書かない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/08/11/mirah_0_2gariri_susaremashita&#34;&gt;mirah 0.2がリリースされました。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/09/04/Rustdeshierutsukutta&#34;&gt;Rustでシェル作った&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/09/29/Pijulnoinsuto_ruganan_idotakainodekaisetsusuru&#34;&gt;Pijulのインストールが難易度高いので解説する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/10/10/Rustnokuro_ja3tanewotsukutterikaisuru&#34;&gt;Rustのクロージャ3種を作って理解する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/10/10/SMLdemonado&#34;&gt;SMLでモナド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/10/31/VMwarenoUbuntuwo16_10nishitarakidoushinakunatta&#34;&gt;VMwareのUbuntuを16.10にしたら起動しなくなった&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/11/06/RustnokatareberuLispppoinotsukutta&#34;&gt;Rustの型レベルLispっぽいの作った&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/11/22/Rustnokanrenkatanotsukaidokoro&#34;&gt;Rustの関連型の使いどころ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/11/30/SML_woUbuntu_16_10deugokasu&#34;&gt;SML#をUbuntu 16.10で動かす&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/11/30/saiba_e_jientowotaishokushimashita&#34;&gt;サイバーエージェントを退職しました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/12/01/4nenkantsuzuitaShibuya_lispnoLispMeetUp&#34;&gt;4年間続いたShibuya.lispのLispMeetUp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/12/01/Rustdebaitoretsuwoatsukautokinotips&#34;&gt;Rustでバイト列を扱う時のtips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/12/01/makuroyakonpairapuraguinnojissouhouhou&#34;&gt;マクロやコンパイラプラグインの実装方法色々&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/12/02/Rustnopurosesu&#34;&gt;Rustのプロセス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/12/02/atarashiikonpairabakkuendocretonne&#34;&gt;新しいコンパイラバックエンドcretonne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/12/03/Rustnostructtotraittteniteruyone&#34;&gt;Rustのstructとtraitって似てるよね&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/12/14/Rustnoshoyuuken_raifutaimu_sanshou_kata_shigarami&#34;&gt;Rustの所有権、ライフタイム、参照、型、しがらみ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/12/24/Rustnoraifutaimuwotsukattasuko_pukaiseki&#34;&gt;Rustのライフタイムを使ったスコープ解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/12/29/kizuitaraRustnokankyoukouchikugakanarirakuninatteta&#34;&gt;気付いたらRustの環境構築がかなり楽になってた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/blog/2016/12/31/2016nenchuumokushiteikitakattagijutsunofurikaeritokojintekifurikaeri&#34;&gt;2016年注目していきたかった技術の振り返りと個人的振り返り&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;スライドは15。月1以上のペースだった。意外。ほとんど社内のScala勉強会で発表してるっぽい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/slide/HAMT&#34;&gt;HAMT ~ イミュータブルで高速なハッシュマップ ~&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/ClojuredeSSPwotsukuttahanashi&#34;&gt;ClojureでSSPを作った話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/Rusttohananika_donnagengoka_&#34;&gt;Rustとは何か。どんな言語か。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/biggude_tashinaiDrill_ro_karudekaitekinitsukautameni&#34;&gt;ビッグデータしないDrill、ローカルで快適に使うために&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/SMLdekansuukatatekiseikihyougenmatchi&#34;&gt;SMLで函数型的正規表現マッチ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/tesutonitsuite_Scalato_&#34;&gt;テストについて、Scalaと。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/kousokunakeizokuraiburarinimukete&#34;&gt;高速な継続ライブラリに向けて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/DOT_dottynitsuiteshirabetemita&#34;&gt;DOT/dottyについて調べてみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/Socket_on_SML_&#34;&gt;Socket on SML#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/katakurasuwokoete&#34;&gt;型クラスを越えて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/tadashiiScalanoko_dogahoshii&#34;&gt;正しいScalaのコードが欲しい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/Scala_2_12_0henkouten&#34;&gt;Scala 2.12.0変更点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/Rustnohanashitoriso_sunohanashi&#34;&gt;Rustの話とリソースの話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/RustdehidoukiThriftshitai&#34;&gt;Rustで非同期Thriftしたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/Schemedeclasstoprotocol&#34;&gt;SchemeでClassとProtocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その他外部に投稿したものは13。これも併わせたらブログはギリギリ週1ペースかな。仕事関連だったり仕事中に思い付いてブログにアクセス出来ないのでQiitaに投げたものが多い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/blackenedgold/items/3b068769736e671805f0&#34;&gt;Rustのドキュメントの翻訳プロジェクトを開始します。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/blackenedgold/items/382704cc54c8e42819d0&#34;&gt;正規表現の先読み/後読みを「絞り込み」と理解してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/blackenedgold/items/c9e60e089974392878c8&#34;&gt;一瞬でシェルスクリプト作れるシェル関数作った - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/blackenedgold/items/3231c8adec40b350cf33&#34;&gt;sedの-iオプションの非互換 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/blackenedgold/items/4945a6eb5cceeb154b24&#34;&gt;Rustでサイコロで同じ目が100回連続で実際に出るか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/blackenedgold/items/4f91a174e0f63ee42699&#34;&gt;POSIXシェルで変数がセットされているか検査するイディオム - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://adtech.cyberagent.io/techblog/archives/1095&#34;&gt;ICFP及び関連イベント参加レポート – Haskell Day – | Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://adtech.cyberagent.io/techblog/archives/1099&#34;&gt;ICFP及び関連イベント参加レポート – ICFP併設ワークショップ – | Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://adtech.cyberagent.io/techblog/archives/1118&#34;&gt;ICFP及び関連イベント参加レポート – ICFP 1日目 – | Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://adtech.cyberagent.io/techblog/archives/1125&#34;&gt;ICFP及び関連イベント参加レポート – ICFP 2日目 – | Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://adtech.cyberagent.io/techblog/archives/1158&#34;&gt;ICFP及び関連イベント参加レポート – ICFP 3日目 – | Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://adtech.cyberagent.io/techblog/archives/1200&#34;&gt;ICFP及び関連イベント参加レポート – 併設ワークショップ2日目 – | Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://adtech.cyberagent.io/techblog/archives/1380&#34;&gt;ICFP及び関連イベント参加レポート – 併設ワークショップ3日目 – | Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さて、OSSだと雑なスニペットとかもGitHubに上げてるのでカウントが難しいけど、主だったものだと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/incubator-airflow&#34;&gt;airflow&lt;/a&gt;の&lt;a href=&#34;https://github.com/apache/incubator-airflow/blob/master/airflow/contrib/operators/ssh_execute_operator.py&#34;&gt;SSH Execute Operator&lt;/a&gt;を書いた&lt;/li&gt;
&lt;li&gt;Apache Drillの&lt;a href=&#34;https://github.com/KeenS/sql-drill.el&#34;&gt;Emacs Mode&lt;/a&gt;作った（リリースしてない）&lt;/li&gt;
&lt;li&gt;Rustの&lt;a href=&#34;https://github.com/KeenS/file_logger&#34;&gt;file_logger&lt;/a&gt;作った&lt;/li&gt;
&lt;li&gt;file_loggerと一緒に使うために&lt;a href=&#34;https://github.com/KeenS/rotate_file&#34;&gt;rotate_file&lt;/a&gt;作った（リリースしてない）&lt;/li&gt;
&lt;li&gt;インターン向けに作った&lt;a href=&#34;https://github.com/KeenS/s7p&#34;&gt;SSP&lt;/a&gt;を公開した。&lt;/li&gt;
&lt;li&gt;SML#の&lt;a href=&#34;https://github.com/KeenS/smlsharp_pthread&#34;&gt;pthreadバインディング&lt;/a&gt;作った。多分64bitで動かない。&lt;/li&gt;
&lt;li&gt;SML#の&lt;a href=&#34;https://github.com/KeenS/SmlSharpSocketSupport&#34;&gt;socketサポー&lt;/a&gt;作った。まだメモリ管理回りで処理系とのやりとりに上手くいってないので完成してない。&lt;/li&gt;
&lt;li&gt;Rustで&lt;a href=&#34;https://github.com/KeenS/igaguri&#34;&gt;シェル&lt;/a&gt;作った。雑に動く。&lt;/li&gt;
&lt;li&gt;Tokioの&lt;a href=&#34;https://github.com/KeenS/tokio-thrift&#34;&gt;Thrift対応&lt;/a&gt;フレームワーク作成中。Tokio側がリリースされたらこちらもリリース出来るくらいの進捗でやっていきたい。&lt;/li&gt;
&lt;li&gt;Rust公式ドキュメントの&lt;a href=&#34;https://github.com/rust-lang-ja/the-rust-programming-language-ja&#34;&gt;翻訳&lt;/a&gt;一応1.6は完了。今1.14まで来てるので更新せねば…。&lt;/li&gt;
&lt;li&gt;なんか適当な&lt;a href=&#34;https://github.com/KeenS/webml&#34;&gt;ML風言語のコンパイラ&lt;/a&gt;作り始めた。年内にコード吐くまでやりたかったけど最後の数日サボってしまったので間に合わない。&lt;/li&gt;
&lt;li&gt;コンパイラのために&lt;a href=&#34;[KeenS/WebAssembler-rs](https://github.com/KeenS/WebAssembler-rs)&#34;&gt;WebAssemblyをインメモリで吐くライブラリ&lt;/a&gt;作った。ブラウザでコンパイラ動かしたい時に使う。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;かな。&lt;a href=&#34;https://github.com/KeenS/cl-fast-cont&#34;&gt;限定継続ライブラリ&lt;/a&gt;みたいに途中で放置してるやつとか&lt;a href=&#34;https://github.com/KeenS/rust_os&#34;&gt;チュートリアル読んでOS作ってるやつ&lt;/a&gt;とかは入れてないので「活動」って意味だともう少し広いけど社会貢献はしてない。&lt;/p&gt;

&lt;p&gt;仕事も含めたGitHubの草はこんなもん。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://t.co/MVQag8h6qU&#34;&gt;pic.twitter.com/MVQag8h6qU&lt;/a&gt;&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/814449614967357440&#34;&gt;2016年12月29日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;引越しだとかICFPとかの週はほとんどコミット出来てないのでもうちょっと頑張りたい。あと顕著に土日にサボってるのもどうにかしたい。&lt;/p&gt;

&lt;p&gt;割と飽きっぽいというか他のものに浮気しがちというか適当に手を付けては壁に当たった/第一目標達成したあたりで次にいっちゃうので継続性がない。継続した方が社会貢献になるんだよなー。&lt;/p&gt;

&lt;p&gt;読書は正確にいつ買ったか覚えてないので正確じゃないけど、流し読みしたものも含めれば&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/4535782148/&#34;&gt;線型論理入門&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4621063243/&#34;&gt;圏論の基礎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4535787204/&#34;&gt;圏論の歩き方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/052103311X/&#34;&gt;Compiling with Continuations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4798114685/&#34;&gt;最新コンパイラ構成技法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4798134201/&#34;&gt;ガベージコレクション 自動的メモリ管理を構成する理論と実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4798045365/&#34;&gt;独自CPU開発で学ぶコンピュータのしくみ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4797382228/&#34;&gt;暗号技術入門 第3版 秘密の国のアリス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4798141100/&#34;&gt;その数式、プログラムできますか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4873116856/&#34;&gt;戦略的データサイエンス入門 ―ビジネスに活かすコンセプトとテクニック&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4061529153/&#34;&gt;ノンパラメトリックベイズ 点過程と統計的機械学習の数理 (機械学習プロフェッショナルシリーズ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4061529099/&#34;&gt;劣モジュラ最適化と機械学習 (機械学習プロフェッショナルシリーズ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4061529021/&#34;&gt;深層学習 (機械学習プロフェッショナルシリーズ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4061529080&#34;&gt;異常検知と変化検知 (機械学習プロフェッショナルシリーズ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/479813161X/&#34;&gt;実践ドメイン駆動設計 (Object Oriented SELECTION)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4048679880&#34;&gt;The Art of Multiprocessor Programming 並行プログラミングの原理から実践まで&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;多分こんなもん。機械学習プロフェッショナルシリーズは去年読んだのも含んでるかもしれない。あんまり覚えてない。論文も挙げようと思ったけど面倒になったからいいや。十数綴から二十綴くらいじゃないかな。&lt;/p&gt;

&lt;p&gt;社会的には1回社内でチーム移動になって1回退職した。Shibuya.lispの運営から引退を発表して、rust-lang-ja（有志の翻訳コミュニティ？）の中の人になった。&lt;/p&gt;

&lt;p&gt;まだ社会人になって2年も経ってなくて情報科学/工学の基礎もないので基礎を付けるために勉強してるフェーズかなぁといったところ。
来年は専門性の高い仕事になるので今年以上に勉強が必要になりそう。多分本より論文に比重が傾く。&lt;/p&gt;

&lt;p&gt;年明けにまた注目していきたい技術書く。毎年書いていったら面白いかもしれない。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>サイバーエージェントを退職しました</title>
      <link>/blog/2016/11/30/saiba_e_jientowotaishokushimashita</link>
      <pubDate>Wed, 30 Nov 2016 15:51:38 +0900</pubDate>
      
      <guid>/blog/2016/11/30/saiba_e_jientowotaishokushimashita</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://www.adventar.org/calendars/1638&#34;&gt;Ex CyberAgent Developers Advent Calendar 2016 - Adventar&lt;/a&gt;1日目の記事です。
元サイバーエージェントの人がわいわいやります。&lt;/p&gt;

&lt;p&gt;κeenです。二年弱勤めたサイバーエージェントを退職したのでその旨について。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;サイバーエージェントの思い出&#34;&gt;サイバーエージェントの思い出&lt;/h1&gt;

&lt;p&gt;サイバーエージェントに興味をもつきっかけになったのも入社することになったのも学生の頃からずっと参加し続けていた&lt;a href=&#34;https://lisp.connpass.com&#34;&gt;LispMeetUp&lt;/a&gt;でした。
LispMeetUpでは長らく会場としてCAのセミナールームを使わせてもらっていました。
そこでエンジニアに対して気軽に施設を提供するCAや社員の&lt;a href=&#34;https://twitter.com/potix2&#34;&gt;@potix2&lt;/a&gt;さんを知って、そのまま@potix2さんの手引でCAに入社する運びとなりました。
「面接でLispは口にしない方が良い。100%落ちる。」なんて言ってた割にはLisp繋りで入社しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://keens.github.io/blog/2015/04/10/cyberagentninyuushashimashita/&#34;&gt;CyberAgentに入社しました | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;新卒で入社してからは3ヶ月ほど研修でした。
最初の2週間ほどあるビジネス職も含めた全体研修ではなるほど、ここがCAかと思いました。しかしエンジニア研修からは見慣れた光景に戻って静かに研修を受けてました。
エンジニア研修は割と長めにあるので同期のエンジニア同士の顔を覚える余地はありました。勉強会なんかもやりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://keens.github.io/slide/seitekinamemorikanrinohanashi/&#34;&gt;静的なメモリ管理の話。リージョン推論とλ計算からRustまで | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://keens.github.io/slide/benkyoukaikudoubenkyoudetakeshibenkyou/&#34;&gt;勉強会駆動勉強で猛勉強 | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://keens.github.io/slide/21seikinoenjinianotamenoHTTP_2nyuumon/&#34;&gt;21世紀のエンジニアのためのHTTP/2入門 | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなど。Linux, C, Python, Go, Java, Web, iOS, フレームワーク, Android, チーム開発なんかをやりました。Python, Go, iOSあたりは自分じゃやらなかったので面白かったです。&lt;/p&gt;

&lt;p&gt;研修中は割と時間があったので他にも色々なことをやってました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://keens.github.io/blog/2015/05/06/tarballbe_sunokeiryoubakkuapputsu_rutsukutta/&#34;&gt;tarballベースの軽量バックアップツール&amp;rsquo;Sheltar&amp;rsquo;を作った | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keens.github.io/blog/2015/05/26/onigmowosaidai49_kousokukashitahanashi/&#34;&gt;Onigmoを最大49%高速化した話 | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://keens.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou/&#34;&gt;第一級ラベルを持たない言語におけるDirect Threaded VMの実装 | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この他にも研修期間中にブログエントリ十数本書いていたようです。下の代からは研修の内容が変わって忙しそうでした。&lt;/p&gt;

&lt;p&gt;研修のあとの配属は@potix2さんのいる&lt;a href=&#34;https://adtech.cyberagent.io/&#34;&gt;アドテクスタジオ&lt;/a&gt;のAMoAdでした。トレーナの清水さんを始めとしてチームの皆さんにお世話になりました。
AMoAdはその昔、外注していたシステムを巻き取ったものなのでやることが一杯あって、JavaやScalaを書いたり自動化をやったりしました。&lt;/p&gt;

&lt;p&gt;Scalaは全然いたことがなかったので練習がてら作ったのがこれでした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://adtech.cyberagent.io/scalablog/2015/12/05/scala-lisp/&#34;&gt;Scala初心者の新卒が頑張ってLispを作ってみた | Scala Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これのおかげで型クラスがただのimplpcit parameterに見えるようになったのでそれなりに収穫はあったな、と思ってます。&lt;/p&gt;

&lt;p&gt;AMoAdに限らずアドテクスタジオのエンジニアのボリュームゾーンは30代半ばなのでだいたい一回り近く年の離れたエンジニアに暖かく囲まれながら仕事をしていました。
どんな雰囲気なの？とたまに訊かれますがエンジニアが集う部署なのでだいたい工学部を想像して頂けたらと思います。&lt;/p&gt;

&lt;p&gt;さて、年が明けて2016年の1月になると、@potix2さんが新しいグループを立ち上げることになって別のグループに移動してしまいました。長らくお世話になりました。
と思いきや自分もそのグループに移動になったので相変わらずお世話になることになりました。基盤開発グループってところでした。仕事と仕事の境目は一瞬仕事がない期間が産まれたりしますが、その隙を使って始めたのがRustのドキュメントの翻訳です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/blackenedgold/items/3b068769736e671805f0&#34;&gt;Rustのドキュメントの翻訳プロジェクトを開始します。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたらしいチームでは社内向けマイクロサービスのようなものを作ることになりました。
私ともう一人ベテランのエンジニア(&lt;a href=&#34;https://twitter.com/atty303&#34;&gt;@atty303&lt;/a&gt;)でやる筈でしたが私のような雑草と違ってベテランは中々元のチームを抜けられないので1ヶ月ほど私一人でコードを書いてました。
Scalaにも馴れてない新卒一人で。1ヶ月後に&lt;a href=&#34;https://twitter.com/atty303&#34;&gt;@atty303&lt;/a&gt;さんがジョインすると、コードは書かずにインフラをやるとのことでした。なのでコードを書くのはやっぱり私一人。&lt;/p&gt;

&lt;p&gt;私が苦戦しつつコードを書いている間にconsulやnomad、terraform、dockerなんかでインフラが構築されていき、たまに朝来たら自分のコードが消えていたり（「君のコード書き直しといたよ」）して確か5月頃リリースだったような。&lt;/p&gt;

&lt;p&gt;因みにdockerを多く使うのにdocker-machineだと不便なのでUbuntuマシンが欲しいって言ったら却下されました。セキュリティ的に無理でした。結局VMでUbuntuを使ってました（使ってます）。&lt;/p&gt;

&lt;p&gt;リリースしてからは要求性能も満たしそこまで大きな障害もなく平和に暮らしました。めでたしめでたし。Ubuntuは使えなかったけど。&lt;/p&gt;

&lt;p&gt;まあ、あとは新卒研修を担当したり&lt;a href=&#34;https://www.cyberagent.co.jp/recruit/fresh/program_detail/id=11303&amp;amp;season=2016&#34;&gt;インターン&lt;/a&gt;を担当したり社内ハッカソンをやったりゼミでドローンを飛ばしたり新卒のトレーナーをやったりライブラリの選書をやってコンパイラの本を大量に入荷したりと本業以外も色々やってました。長くなるのでこの辺は省きますね。&lt;/p&gt;

&lt;h1 id=&#34;退職に際して&#34;&gt;退職に際して&lt;/h1&gt;

&lt;p&gt;よく、「合わなかったの？」と言われますがそんなことはないです。（少くとも）アドテクスタジオはエンジニアにとっては非常に働きやすい場所でしたし&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cyberagent.co.jp/features/detail/id=12837&#34;&gt;adtech studio - Photo Tour｜FEATURES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CAの一般的イメージはそういう部分だけ切り取ってメディアに出してるんだと思います。
エンジニアから見たら先述の通り工学部のような雰囲気です。Ubuntuは使えないけど。サーバもMacやWindowsで動いてるんですかね。&lt;/p&gt;

&lt;p&gt;むしろCAに入って良かったなと思える部分は一杯あって、ベテランのエンジニアに色々教えて貰ったりだとかVMwareのライセンスを買ってくれたりだとか&lt;a href=&#34;https://adtech.cyberagent.io/techblog?s=icfp&#34;&gt;ICFPに行かせてもらったり&lt;/a&gt;だとか。&lt;/p&gt;

&lt;p&gt;同期エンジニアの繋りというのもすごい良くて、得意分野も部署も（今となっては）会社も色々にある60人ほどいるエンジニアとの人脈が無条件に作れるというのは新卒で入らないと出来ないなと思います。
困ったことがあったら同期Slackに投げると数分で解決します。&lt;/p&gt;

&lt;p&gt;最後は雑草が枯れるように誰にも気付かれないように消えていくつもりでしたがそうもいかず、大勢の方々に送り出して頂きました。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;集合写真&#34; src=&#34;/images/ca/mall.jpg&#34; style=&#34;width: 100%&#34;&gt;&lt;/p&gt;

&lt;p&gt;私の周りにいるのがお世話になった開発責任者やトレーナー、トレーニーなどですね。&lt;/p&gt;

&lt;p&gt;色紙とプレゼントも頂きました。ありがとうございます。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;プレゼントの写真&#34; src=&#34;/images/ca/presents.jpg&#34; style=&#34;width: 100%&#34;&gt;&lt;/p&gt;

&lt;p&gt;退職の旨は業務上必要な方以外には知らせてなかったのでまさか色紙が来るとは思ってませんでした。
多分関係しそうな人にDMを送って集めたんだと思います。ありがとうございます。
プレゼントは麻の模様の風呂敷です。
私はカバン代わりにPCを入れるにも旅行に行くにも風呂敷を使う人です:)&lt;/p&gt;

&lt;p&gt;そして女性エンジニアの方(&lt;a href=&#34;https://twitter.com/iyunoriue&#34;&gt;@iyunoriue&lt;/a&gt;)からFOUNDRYの詰め合わせも頂きました。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;FOUNDRYの写真&#34; src=&#34;/images/ca/foundry.jpg&#34; style=&#34;width: 100%&#34;&gt;&lt;/p&gt;

&lt;p&gt;スイーツが好きなので非常に嬉しいです。ありがとうございます。抹茶と合いそう。&lt;/p&gt;

&lt;p&gt;また、退職に合わせて色々なものも引退することになりました。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Shibuya.lispの現運営が引退するので &lt;a href=&#34;https://twitter.com/hashtag/lispmeetup?src=hash&#34;&gt;#lispmeetup&lt;/a&gt; がなくなります。引き継いでくれる方を募集しています。残りはClojure回、CL回です。Schemeは今月が最後でした。&lt;a href=&#34;https://t.co/o4vv9DRFal&#34;&gt;https://t.co/o4vv9DRFal&lt;/a&gt;&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/803599706475507716&#34;&gt;2016年11月29日&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;そろそろ私も野生のLisper引退した方がいい。&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/803601106693521408&#34;&gt;2016年11月29日&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;お世話になった方々本当にありがとうございました。&lt;/p&gt;

&lt;h1 id=&#34;次の話と退職理由&#34;&gt;次の話と退職理由&lt;/h1&gt;

&lt;p&gt;とりあえず12月中は有給消化で、1月から働きます。給料はまあまあ上がります。どうやらコンパイラ関係の仕事をしそうです。
世の中そんな仕事があるのか自分でも半信半疑ですがあるようです。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;そういえばICFPのときにкeenさんと話して「えっコンパイラが書けるシゴトあると思ってんの!?」と冗談半分で言われたな．&lt;/p&gt;&amp;mdash; gfn (@bd_gfngfn) &lt;a href=&#34;https://twitter.com/bd_gfngfn/status/780057500485681153&#34;&gt;2016年9月25日&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;私のことを知ってる方なら「コンパイラの仕事があるから」で十分退職理由として納得頂けると思います。
技術的にも人生的にもチャレンジングですがまだ20代前半なので後先考えずに行動してもどうにかなるかな、とか思ってます。
地味に社内でRustも使われているようなのでそこも狙っていこうと思います。
あ、こういうのもやってます。興味のある方はお願いします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2016/lang_dev&#34;&gt;言語実装 Advent Calendar 2016 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/advent-calendar/2016/rust-lang-2&#34;&gt;Rust その2 Advent Calendar 2016 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次の仕事についてはまた入社してから書こうと思いますが、ひとまずの報告として渋谷からは離れます。本郷キャンパスに近いところに引っ越す予定です。付近の人はなんか誘って下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://amzn.asia/0JcDzIf&#34;&gt;http://amzn.asia/0JcDzIf&lt;/a&gt;&lt;/p&gt;

&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;お疲れ様でした&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meetup3周年に寄せて</title>
      <link>/blog/2016/01/27/lisp_meetup3shuunenniyosete</link>
      <pubDate>Wed, 27 Jan 2016 23:40:11 +0900</pubDate>
      
      <guid>/blog/2016/01/27/lisp_meetup3shuunenniyosete</guid>
      <description>&lt;p&gt;κeenです。昨日、&lt;a href=&#34;http://lisp.connpass.com/event/25546/&#34;&gt;Lisp Meetup #36&lt;/a&gt;が行なわれました。1回テックトークを挟んでるのでこれでちょうど丸3年、毎月Lisp Meetupが行われたことになります。

Lisp Meetupは&lt;a href=&#34;http://shibuya.lisp-users.org/&#34;&gt;Shibuya.lisp&lt;/a&gt;が基本、毎月開催している草の根活動で、Lisper同士の交流を目的として主に希望者によるトークをメインとした会です。&lt;/p&gt;

&lt;p&gt;毎月Common Lisp、Clojure、Scheme回でローテーションしていて、近頃はScheme回にSchemerが来ないことからScheme回を減らして運用されています。
最初に述べた通りLisp Meetupだけで36回、丸3年活動してきました。ここ最近は定員にギリギリまで人が集まるくらいの盛況で何よりです。
ここまで継続したことを祝って記念ステッカーを作りました。私はほとんど何もしてませんが。@potix2さんに感謝。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;今日のLisp Meet Upは3周年記念ですね。先程ステッカー届きました。 &lt;a href=&#34;https://t.co/IRKkKVnkeU&#34;&gt;pic.twitter.com/IRKkKVnkeU&lt;/a&gt;&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/691875297940148224&#34;&gt;2016, 1月 26&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;私が初めて参加したのは第7回から、運営になったのが1年後の第19回から(の筈)。
2年半サイバーエージェントの会場に通って気付いたらサイバーエージェントの社員になって、一勉強会がここまで大きく人生に影響するのかと感慨に耽る次第です。
何を大袈裟に、と思うかもしれませんがプログラミング経験が調子に乗ってきた時とLisp Meetupに参加し始めた時期が重なるので個人的には感慨に耽るだけのものがあるのです。&lt;/p&gt;

&lt;p&gt;さて、他のメジャーな言語の勉強会でも中々聞かない3周年ともなるとまた別種の問題も出てくる訳です。
その1つが「固定化」問題です。1度もLisp Meetupに来たことのない方はこう思う訳です: 何度も回を重ねる内にメンバーが固定化されて一見さんお断りな雰囲気になってるんじゃないかと。
実際のところLisp Meetupにはそんな雰囲気はなく、何度も来てる人もいれば久しぶりに来た人、最近よく来る人、初めて来る人色々いる訳です。
実情がどうあれ、お尻の数字が大きいだけで一番来て欲しい初心者が来なくなるならと、一度は名前を変えて連番をリセットしようかとも話されましたが結局今のLisp Meetupのままでいます。
Lisp Meetupといえば私のようによく分からない発表をしてても暖かく受け入れてくれる優しい人達の集りなのですが、とはいえ外から見て「初めての勉強会でLisp Meetupは怖い」などと言われると中々考えることがあります。
まあ、それでも初心者や初参加の人は毎回数人は来てるのでこれ以上増やそうとするとこれより大きな会場を確保する必要があって中々ハードルは高いのですが。初心者は大歓迎ということは伝えておこうかと思います。&lt;/p&gt;

&lt;p&gt;さて、次回はClojure回です。そろそろScheme回を…と思ったのですが発表者が集りそうにないので見送られました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;少し気の早い話ですが来月2月の &lt;a href=&#34;https://twitter.com/hashtag/lispmeetup?src=hash&#34;&gt;#lispmeetup&lt;/a&gt; でSchemeをテーマにするとしたらみなさんどうですか&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/688627343112278017&#34;&gt;2016, 1月 17&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;3月には開催しようかと話し合われている最中なのでSchemer各位、SICP読書中の各位は準備をして開催して欲しいオーラを出して頂けると開催決定の後押しになります。&lt;/p&gt;

&lt;p&gt;ということで来月以降もLisp Meetupをよろしくお願いします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>独学でプログラミングをやってきた中で良かった技術書50選</title>
      <link>/blog/2016/01/17/dokugakudepuroguraminguwoyattekitanakadeyokattagijutsushowoageteiku</link>
      <pubDate>Sun, 17 Jan 2016 16:48:28 +0900</pubDate>
      
      <guid>/blog/2016/01/17/dokugakudepuroguraminguwoyattekitanakadeyokattagijutsushowoageteiku</guid>
      <description>&lt;p&gt;今まで読んできた技術書の中で良かったものを挙げていく。
そろそろ本棚が溢れるので捨てる前に書き留めておく。
あとはGitHub PagesがアフィOKとのことなので試してみようかと。50冊分（以上）アフィがあるのでページが重いがご容赦を。&lt;/p&gt;

&lt;p&gt;私は独学でプログラミングを始めたので情報系専攻の人には何をそんなという本も混っているだろうが価値は人それぞれ違う。

一応私自身について語っておくと学生時代はプログラミングに興味を持ちつつも数学科に進んだ。
しかしそこでもプログラミングへの興味は薄れず、色々本を読んだり同学年の情報科学科の真似をしたりしていた。
今思えば日本の精鋭たる東大情報科学科の人達に勝てる筈もなかったのだが学生時代に我武者羅になれたのは悪い経験ではなかった。
私が興味があったのは主にプログラミング言語そのもの、特にLispとその周辺。&lt;/p&gt;

&lt;h1 id=&#34;何故本か&#34;&gt;何故本か&lt;/h1&gt;

&lt;p&gt;挙げていく前に1つだけ。Webに大量に情報がある今、何故本かについて説明したい。簡潔に言うと&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文章が推敲されていて読み易い&lt;/li&gt;
&lt;li&gt;1つの情報ソースに多彩な内容が載っている&lt;/li&gt;
&lt;li&gt;巨大な情報の中で一貫性が取れている&lt;/li&gt;
&lt;li&gt;出版されている以上ある程度内容に責任を持って書かれている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どれもWebの情報は断片的で無責任に書かれているような書き方だが凡そ間違ってはいないと思う。
私のブログだってよく間違いが書いてある（そして申し訳ないことに面倒くさがって修正しないままのことも多々ある）。
本屋に足を運んでパラパラ捲って気に入った本を買うのが一番確実な情報収集の仕方だと思う。勿論本だけでは足りないことも多いが。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;では、本を挙げていく。順不同で、本棚を見ながらあれこれ挙げることにする。&lt;/p&gt;

&lt;h1 id=&#34;1-作りながら学ぶruby入門&#34;&gt;1. 作りながら学ぶRuby入門&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00GJGOPU0&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;この本は私がプログラミングを学び始めた時にお世話になった。初心者には0からアプリケーションを作るまでのノウハウがない。それを丁寧に教えてくれる。
よく「プログラミングを始めたいんですがどうやって覚えました？」と聞かれるが、毎度この本と下記の逆引きを勧めている。&lt;/p&gt;

&lt;p&gt;もしかしたらRubyのバージョンが古くてサンプルコードが動かないかもしれない。&lt;/p&gt;

&lt;h1 id=&#34;2-ruby逆引きハンドブック&#34;&gt;2. Ruby逆引きハンドブック&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4863540221&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;私の人生を変えたともいうべき1冊。プログラミングを英作文に例えるならこの本は和英辞典にあたる。
そして初心者にとっては「○○したいから□□する」は「へー。○○したいという需要があるんだ、そして□□で出来るんだ」と同時に2つを教えてくれる。
この1冊前部読むことでRubyを書くときの手札を確認出来た。&lt;/p&gt;

&lt;p&gt;惜しいことにこの本も少し古くなってきた。&lt;/p&gt;

&lt;h1 id=&#34;3-メタプログラミングruby&#34;&gt;3. メタプログラミングRuby&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873117437&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Rubyをやるならこの本を一度は読んだ方がいい。&lt;code&gt;method_missing&lt;/code&gt;などRubyコミュニティでは非常に重要なテクニックが載っている。私は初版を読んだが第2版が出ているようだ。&lt;/p&gt;

&lt;h1 id=&#34;4-emacsテクニックバイブル&#34;&gt;4. Emacsテクニックバイブル&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4774143278&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;るびきちさんの本を紹介したのでついでにこの本も。Emacsの便利な使い方から人気プラグインまで様々に解説されている。Emacsを使い熟したい方にお勧めする(そして私のように帰ってこれなくなるといい。)。
今ではいくつか動かない/入手出来ないプラグインはあるものの基本的な使い熟すための指南というか思想は色褪せない。&lt;/p&gt;

&lt;h1 id=&#34;5-emacs-lispテクニックバイブル&#34;&gt;5. Emacs Lispテクニックバイブル&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4774148970&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;同じくるびきちさんの本。コピペだけでinit.elを書くのが嫌な人、片手間程度でもEmacs Lispを書く人にお勧めする。私もこの本を境にして片手間程度にEmacs Lispを書くようになった。
さらにComon Lisperである私にはCommon Lispマクロの解説が非常に分かりやすくて参考になった。&lt;/p&gt;

&lt;h1 id=&#34;6-入門vi&#34;&gt;6. 入門vi&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873110831&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;例え熟練のEmacsユーザでもviは使えた方がいい。サーバに入った時にviしか使えないこともある。
Emacsをインストールしようにもインストールするための設定をviで書く必要がある。
nanoもあるが、リッチテキストエディタに馴れた手にはviの方が馴染む。&lt;/p&gt;

&lt;p&gt;そういう人に、この本は良い。Vim入門のようにごてごてしてなくて欲しい情報だけが書いてある。&lt;/p&gt;

&lt;h1 id=&#34;7-実践common-lisp&#34;&gt;7. 実践Common Lisp&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274067211&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;私はほぼRubyでプログラミングに入門したが&lt;a href=&#34;http://docs.ruby-lang.org/ja/2.0.0/doc/spec=2fintro.html&#34;&gt;RubyはLispを参考に作られたと言われたら&lt;/a&gt;その原典たるLispにも興味が出るのは自然の流れ。当然私もCommon Lispを始めた。
Common Lispに入門するにあたって一番お世話になった一冊。早見表もあれば関数の解説もあり、実践の名の通りアプリケーションを作るところまでいける。
Common Lispといえばまずこの本をお勧めする。&lt;/p&gt;

&lt;h1 id=&#34;8-land-of-lisp&#34;&gt;8. Land of Lisp&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873115876&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;オライリーの中でも異色の表紙で有名なこの本。このエイリアンはオライリーの本が出る前からLisp界隈で活躍していたりする。
モチーフは「他言語プログラマから見たLisper」なのでLisperのペットというようりはLisper自身。&lt;/p&gt;

&lt;p&gt;閑話休題。この本は実践Common Lispよりも易しいというか丁寧で、分かりやすく書いてある。
そしてちょこちょこゲームを作りながら進んでいくので飽きない。手を動かしたい人には本書を、後のリファレンスとしても役立てたい人には先の実践Common Lispをお勧めする。&lt;/p&gt;

&lt;h1 id=&#34;9-on-lisp&#34;&gt;9. On Lisp&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274066371&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;大半がマクロについて書かれているPaul Grahamのマクロの本。Common Lisp中級者向けの必読書。
Common Lispを使っていてマクロを書く必要が出てきたあたりでこの本を読むといいと思う。
変数捕捉の問題から逆に変数を捕捉させるアナフォリックマクロの話、マクロを使って作る継続と非決定性計算などなどが載っている。&lt;/p&gt;

&lt;p&gt;他言語プログラマでも非衛生的なマクロを持つ言語を使うならこの本を読むと良いと思う。私の知る限り世界で一番マクロに詳しい本だ。&lt;/p&gt;

&lt;p&gt;マクロの本とはいったがLisp流のボトムアッププログラミングを指南していたりオブジェクトシステムやパッケージについての解説があったりと中々役に立つ指南書でもある。
また、名言も多いのでLisp界隈でよく言われる元ネタを知りたい時にもいい。&lt;/p&gt;

&lt;p&gt;訳者が高校生の時に訳し始めたので日本語はやや読みづらい。Webで無料で公開されていたりする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/&#34;&gt;On Lisp&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;10-let-over-lambda&#34;&gt;10. LET OVER LAMBDA&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4434201581&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;過激な本。LOLの名で呼ばれる。Land of LispはLoL。一歩間違うと命を落しかねないので注意。「Common Lispこそが史上最高の言語だ」のスタンスで進んでいく。
LET OVER LAMBDA(lambdaの上のlet)とは、ラムダでletで作った変数を捕捉する話、クロージャの話をメインに据えている。
サーカスのようなプログラミングテクニックもあるかと思えば割と便利なツール、あるいはパフォーマンスチューニングについてなども載っていて、飽きない本。&lt;/p&gt;

&lt;p&gt;余談だが某所で「Land of Lispは聖典」と言われていたが本当にバイブル的な意味では先のOn Lisp、宗教的な意味ではこのLET OVER LAMBDAが聖典になると思う。&lt;/p&gt;

&lt;h1 id=&#34;11-real-world-ocaml&#34;&gt;11. Real World OCaml&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=144932391X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Lispが函数型言語と言われいると他の函数型言語にも興味が出る。OCamlに半ば足を突っ込んでる時にこの本が公開されて読んだ。&lt;a href=&#34;https://realworldocaml.org/&#34;&gt;Webで草稿が公開されている&lt;/a&gt;。
普通に初心者に易しい内容だしコマンドラインのパースとか非同期プログラミングとかもあり充実満足な内容。
さらにランタイムシステムやコンパイラプラグインなどの深い話もあってOCaml上級者にも役に立つらしい（私はまだ初級者）。
数少ないOCaml書籍。オライリーでは唯一？&lt;/p&gt;

&lt;p&gt;このノリでReal World Standard MLとか出ないかな、出ないよな。Standard MLの書籍少ない…。これくらい？&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4320120248&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;12-プログラミングerlang&#34;&gt;12. プログラミングErlang&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274067149&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;どうせなら他の函数型言語も試してみるといい。例えばErlangとか。これは飛行機本として有名なErlangの入門書。Erlang作者のJoe Armstrongが著している。
Erlangのアクターモデルについて何も知らなくても恐れる必要はない。この本がついている。全くの初心者からErlangの考え方、ETS、DETS、OTP、Mnesiaなどを学べる。&lt;/p&gt;

&lt;h1 id=&#34;13-すごいerlangゆかいに学ぼう&#34;&gt;13. すごいErlangゆかいに学ぼう!&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274069125&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Erlang界隈では先の飛行機本が定本らしいが私はこのすごいE&amp;reg;本の方が肌に合った。ノリ良く進むしEUnitやDialyzerなどについても解説してある。
Erlang最高！なノリだが「うまい話ばかりじゃないですよ」とちゃんと現実も見ている。&lt;/p&gt;

&lt;h1 id=&#34;14-７つの言語-７つの世界&#34;&gt;14. ７つの言語 ７つの世界&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274068579&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;さらにプログラミング言語に興味を持ったならこの本を読むといい。様々な言語を広く浅くやっている。
普通のプログラマなら言語の10くらい書けるものだがCライクな言語10個書けたところで大したことはない。
比してこの本はそれぞれにパラダイムの違う言語を7つ紹介している。Ruby、Io、Prolog、Scala、Erlang、Clojure、Haskell。
Ioなんかは中々知っている人は少ないのではないだろうか。そういう言語に3日だけ触れてみるのも悪くない。&lt;/p&gt;

&lt;h1 id=&#34;15-java言語で学ぶデザインパターン入門&#34;&gt;15. Java言語で学ぶデザインパターン入門&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4797327030&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;人は、あまりに分かり易い解説を読むと初めてでも既知のように感じる。この本はそういう体験をさせてくれる。
プログラマとして生きる以上知っておかないといけないデザインパターンについて非常に分かりやすく丁寧に解説してある。
著者が物書きもしている結城先生なので日本語も非常に読み易い。&lt;/p&gt;

&lt;p&gt;大きな本だが解説を丁寧にするために膨らんでいるだけなので臆せず読んで欲しい。&lt;/p&gt;

&lt;h1 id=&#34;16-java言語で学ぶデザインパターン入門-マルチスレッド編&#34;&gt;16. Java言語で学ぶデザインパターン入門 マルチスレッド編&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4797331623&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;マルチスレッドプログラミングは複雑で、書いてる本人すら状況を把握しづらい。
先にこの本を読んで基本的な考え方を身に付けているかいないかは大きく響く。
分かりやすい解説に加えて図解もあるので頭の中で動きをイメージしやすい。&lt;/p&gt;

&lt;h1 id=&#34;17-プログラミングコンテストチャレンジブック&#34;&gt;17. プログラミングコンテストチャレンジブック&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4839941068&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;いわゆる蟻本。プログラミングコンテストに興味がなくてもこの本は良い本だ。
様々なアルゴリズムの解説とその実践が出来る。そしてグラフ関連のアルゴリズムに詳しい。
私がアルゴリズムに興味を持つきっかけになった一冊。&lt;/p&gt;

&lt;h1 id=&#34;18-アルゴリズムイントロダクション&#34;&gt;18. アルゴリズムイントロダクション&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=476490408X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;アルゴリズムやデータ構造に詳しくなりたいのならこの本をお勧めする。
相当数のアルゴリズムやデータ構造が載っているばかりか、ちゃんと計算量の解析なんかもしている。しっかりと「考え方」が身につく本である。
練習問題も豊富にある。中々分厚いが辞書と思えば妥当でもある。&lt;/p&gt;

&lt;p&gt;ただ、内容は堅いのでかなりとっつきにくい。さらに、載っているのは疑似コードなので実際に試したいならそれなりに頭を使って自分の言語に翻訳する必要がある。&lt;/p&gt;

&lt;p&gt;アルゴリズムやデータ構造に関して、触りだけでいいならこの本がある。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4797306947&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;随分前に借りて読んだ本で、本棚にも並んでないので記憶が朧げだがプログラミング初学者~初心者に丁度いいくらいの内容だったと思う。&lt;/p&gt;

&lt;h1 id=&#34;19-purely-functional-data-structures&#34;&gt;19. Purely Functional Data Structures&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=0521663504&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;この本はアルゴリズムイントロダクションの延長にあると言える。
最初に「ならし計算量」(償却計算量)を導入したあと、いくつかのデータ構造を下限オーダの操作のまま簡潔に関数的に実装していく。古い本なので恐らくは多くの人に馴染のないStandard MLで書かれているが簡潔な実装は一目瞭然、SMLを知らなくても読めるだろう。
その後遅延評価を導入して、上手く高速化する話、償却しなくても下限の計算量を維持出来る話、データ構造に「ひずみ」を溜めない話なんかが出てくる。&lt;a href=&#34;http://qiita.com/search?q=%E7%B4%94%E7%B2%8B%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0&amp;amp;sort=rel&#34;&gt;Qiitaに一部の解説がある&lt;/a&gt;のでこれを読んで興味が湧いた人は買うといいと思う。&lt;/p&gt;

&lt;h1 id=&#34;20-関数プログラミング-珠玉のアルゴリズムデザイン&#34;&gt;20. 関数プログラミング 珠玉のアルゴリズムデザイン&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274050645&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;この本を読んだ時、衝撃を受けた。まず、内容が難しくて理解が及ばなかった。先述のアルゴリズムイントロダクションを読んだ上でだ。
そしてそれ以上に衝撃だったのが複雑なアルゴリズムをHaskellを使って驚くほど簡潔に実装していた点だ。
アルゴリズムを下限のオーダーで実装するのを前提として、「運算」を使って定数倍の高速化を試みる。魔法のようだった。&lt;/p&gt;

&lt;p&gt;比較的小さな本だが内容は見た目の3倍はあると思って読んだ方がいい。&lt;/p&gt;

&lt;p&gt;函数型言語を触る人なら必ず読んだ方がいい。難しいので完全に理解は出来なくてもこういう世界があることは知っておきたい。&lt;/p&gt;

&lt;h1 id=&#34;21-人間に勝つコンピュータ将棋の作り方&#34;&gt;21. 人間に勝つコンピュータ将棋の作り方&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4774153265&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;LispはかつてAIの言語として表舞台に立った。ならばLisperとしてAIは知っておきたい。当時まだ探索初心者だった私にとってこの本は色々ためになった。
min maxやnega max、αβ木探索なんかは初めて知ったし評価関数のパラメータを機械学習で決めるのも初耳だった。
読み物程度で詳しい技術の話は載ってないがAIに興味を持っていた私には面白い本だった。&lt;/p&gt;

&lt;h1 id=&#34;22-コンピュータ囲碁&#34;&gt;22. コンピュータ囲碁&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4320123271&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;将棋AIが人間に勝つようになって、そろそろ別のゲームか、と思い始めてこの本を手に取った。
先の本とはうってかわってつぶさな実装が載っている。将棋とは違ったモンテカルロ法のアプローチが新鮮で面白い。
モンテカルロ法の探索を知らないのなら一度は読むと良いかもしれない。&lt;/p&gt;

&lt;p&gt;最近では画像認識によく使われるCNNを使った手法なんかもあるようだが今の囲碁AIはどうなっているのだろうか。&lt;/p&gt;

&lt;h1 id=&#34;23-やさしいインタープリタの作り方入門&#34;&gt;23. やさしいインタープリタの作り方入門&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=487783219X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Lisperは一生に一度は自分のLispを作ると言われている。ならば、とこの本を手に取った。
プログラミング言語がどう動いているのかも知らない初心者には丁度良い内容だった。&lt;/p&gt;

&lt;p&gt;一応言うと私はこの本を参考にインタプリタを作った訳ではなくサラサラと眺めて概略だけを知った。
図書館で借りた本だったのでゆっくり読む時間がなかった。&lt;/p&gt;

&lt;h1 id=&#34;24-やさしいコンパイラの作り方入門&#34;&gt;24. やさしいコンパイラの作り方入門&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4877832203&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;私が作りたいのはインタプリタだったが姉妹本ということで一緒に借りて読んだ。
感想はインタプリタと同じ。今Amazonのレビューを見ると酷評されていたのでゆっくり読むには向いてない本なのかもしれない。&lt;/p&gt;

&lt;h1 id=&#34;25-コンパイラ-原理-技法-ツール&#34;&gt;25. コンパイラ―原理・技法・ツール&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=478191229X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;いわゆるドラゴンブック。コンパイラの定本。もう少しコンパイラに詳しくなろうと手にとった。著者達が構文解析の専門家のようで、本の半分くらいが構文解析に割かれている。
さらっと正規言語(正規表現)についても載っていたりする。私みたいにLispを作りたい人には複雑な構文解析の話は退屈だったが後半の翻訳や最適化の話は非常に面白かった。
中々堅いというか難しい本ではあるが、馴染めるならこれ以上のものはない一冊。&lt;/p&gt;

&lt;p&gt;余談だが著者のエイホはAhoと綴る。I am AHOというとめちゃくちゃコンパイラ出来る人と思われるだろう。&lt;/p&gt;

&lt;p&gt;因みにドラゴンブックと並び語られる本にタイガーブックがあるが私はまだ読んだことがない。その内読まねばと思っている。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4798114685&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;26-コンパイラの構成と最適化&#34;&gt;26. コンパイラの構成と最適化&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4254121776&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;ドラゴンブックよりも最適化についてページを割いている本。人によりけりだがドラゴンブックよりもこの本を勧める人が多い。私もそれが妥当だと思う。
文体はさしてドラゴンブックと変わらないが変にカタカナ文字を日本語にしておらず(インタプリタ、コンパイラを解釈系、翻訳系と訳すなど)読み易い。&lt;/p&gt;

&lt;h1 id=&#34;27-きつねさんでもわかるllvm&#34;&gt;27. きつねさんでもわかるLLVM&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4844334158&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;理論の話が出来ても現実のコンパイラを作るのは難しい。その1つにコードを吐く部分が泥臭い点がある。
LLVMを使えればそういう泥臭さを軽減出来る。さらにLLVMは低レベルな最適化もやってくれるのでコンパイラを作る時の手間をかなり省かせてくれる。&lt;/p&gt;

&lt;p&gt;LLVMは巨大だがこの本を読めばどこで何をやってるのか、LLVM IRがどんなものかは分かるようになる。
さらにパスやバックエンドなどそれぞれのプラグインの書き方も載っているので色々な切り口からLLVMを使いたい人にも役に立つ。
少なくともこの本を読まずしてLLVMが分からないと言ってはいけない。分かってなくて分かりたいなら読むべき。&lt;/p&gt;

&lt;p&gt;ところでLLVMといえばもう一冊あるがこちらはClangのためのLLVMといった感じでClangをハックしたい人向けな内容になっている。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4883379310&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;28-言語実装パターン&#34;&gt;28. 言語実装パターン&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873115329&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;パーサジェネレータのANTLRの開発者が著した本。実際にいくつかDSLなどを作りながら進むのでエンジニア向けなのかもしれない。
一度借りて読んだ後本棚に置きたいなと思いつつまだ買っていない。&lt;/p&gt;

&lt;h1 id=&#34;29-正規表現技術入門&#34;&gt;29. 正規表現技術入門&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4774172707&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;一度&lt;a href=&#34;//KeenS.github.io/blog/2015/05/10/seikihyougengijutsunyuumonwoyonda/&#34;&gt;書評を書いた&lt;/a&gt;。
Webではまず得られない正規表現のまとまった情報が得られる。
ドラゴンブックでも扱われている正規言語だがこちらの方がコードを交えながら解説するので詳しくて分かりやすい。&lt;/p&gt;

&lt;p&gt;Onigmoのコードが載っているのでそれを見て&lt;a href=&#34;//KeenS.github.io/blog/2015/05/26/onigmowosaidai49_kousokukashitahanashi/&#34;&gt;最適化し&lt;/a&gt;、最終的には&lt;a href=&#34;http://qiita.com/blackenedgold/items/2ec4d8bfaf220409609d&#34;&gt;パッチがRubyに取り込まれる&lt;/a&gt;までの流れが出来た私にとっての思い出の1冊でもある。&lt;/p&gt;

&lt;p&gt;語彙が足りなくて申し訳ないが素晴しいの一言に付きる。&lt;/p&gt;

&lt;h1 id=&#34;30-型システム入門-プログラミング言語と型の理論&#34;&gt;30. 型システム入門 −プログラミング言語と型の理論−&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274069117&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;コンパイラを作っていて外せないのが型システムの話題。それについて深く扱っているのがこの本。いわゆるTaPL。
初めて読んだ時、λだけで様々な関数を実装していくのが不思議でならなかったし、不動点コンビネータにも感動した。
2回目に読んだ時にはもう少し余裕があって操作的意味論も追えた。
次に読む時はもう少し深くまで読みたい。少くとも手を動かす必要はあるだろう。&lt;/p&gt;

&lt;p&gt;有名な定本ではあるが理論の本なのでどういうことを論じているか分からないまま読める本ではない。
しかし本棚に置いておくと「あれ？System F_ωってどんなシステムだっけ？」などとなった時にサッと引けて便利ではある。&lt;/p&gt;

&lt;h1 id=&#34;31-プログラミング言語の基礎概念&#34;&gt;31. プログラミング言語の基礎概念&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4781912850&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;TaPLよりも軽くやりたいならこの本がある。TaPLに比べてずいぶん（物理的にも）軽く、要点を押えた内容で入り易い。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sampou.connpass.com/&#34;&gt;読書会も開かれている&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この本とTaPLの中間というかもう少しプログラミング言語の意味論に焦点を当てたものとしてWeb上だがソフトウェアの基礎がある。Coqの練習がてら手を動かすと良い。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://proofcafe.org/sf/&#34;&gt;ソフトウェアの基礎&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こちらも&lt;a href=&#34;http://readcoqart.connpass.com/&#34;&gt;読書会が開かれている&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;32-計算機プログラムの構造と解釈&#34;&gt;32. 計算機プログラムの構造と解釈&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=489471163X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;もう少しエンジニア寄りのコンピュータサイエンスの本ならこれがある。
言わずと知れた名著、いわゆるSICP(しっくぴー)。表紙から魔導師本などとも言われる。計算機科学への深い洞察を与える。
訳が堅いとも言われるが大学生の教科書なんてみんな同じようなものだ。解析概論に比べたら読み易い。
初心者にプログラミングを教える時に適当な例を挙げるのに困ることがよくあるが、この本の題材の選び方は完璧だと思う。
理解の妨げになる余分な脂肪は落として完璧なまでに簡潔にしつつも関心を失わせない興味深いものを取り上げている。
題材のプログラミング言語としてSchemeが選ばれているが、そこも正解だと思う。Scheme自身にも余計な脂肪がない。&lt;/p&gt;

&lt;p&gt;最初のレベルはプログラミング初心者に合わせてあるが中身は計算機科学なのでストイックな初心者がゆっくり読むかある程度レベルをつけてから読むのが良いと思う。&lt;/p&gt;

&lt;h1 id=&#34;33-linuxプログラミングインターフェース&#34;&gt;33. Linuxプログラミングインターフェース&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=487311585X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;普段OSのインタフェースがどうなってるかなんてプログラミング言語が隠蔽してくれるが、自分でプログラミング言語、Lispを作ろうと思ったら知る必要がある。
そういう時にこの本は役に立つ。&lt;/p&gt;

&lt;p&gt;C言語の良い所の1つにmanが充実している点が挙げられるが、この本はmanの編集者が著した本だ。
しかもmanよりも詳しくて、Linuxに出てくる概念のつぶさな説明、それぞれのインターフェースの細かな違い、早見表、違いを実感出来るコード例、Linuxに限らないコードの可搬性の話などなど枚挙に暇がない。&lt;/p&gt;

&lt;p&gt;今回挙げる中でも随一の重量を誇るが一番お勧めしたい一冊。無人島に1冊だけ持っていくとしたらこの本を選ぶ。&lt;/p&gt;

&lt;h1 id=&#34;34-operating-systems&#34;&gt;34. Operating Systems&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4894717697&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;やはりOS上でLispを動かす以上OSについては避けて通れない。&lt;/p&gt;

&lt;p&gt;これはいわゆるMINIX本で、UNIXライクな小さなOS、MINIXを題材にOSについて論じる。
私は英語版を読んだが日本のAmazonに出回ってないようなので日本語版のリンクを挙げておく。
MINIXを題材とはいいつつも副題にDesign and Implementationとあるが、Implementationの部分でMINIXのコードリーディングが挟まる程度。Designの部分はMINIXに限らない一般的なことを論じる。&lt;/p&gt;

&lt;p&gt;IOについて、プロセスについて、メモリ管理についてなどなど、普段のプログラミングで使っているのに詳しくないのなら一度は読むべきだ。&lt;/p&gt;

&lt;p&gt;特に、IPC(プロセス間コミュニケーション)の部分はOS関係なく役に立つ。&lt;/p&gt;

&lt;p&gt;OSについてなら最近だと定本ではあるがMINIX本よりこちらの方が良いと勧められたことがあるがまだ読んでいない。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B014I57BEA&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B014RTDMFY&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B014RTDPJM&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;4部構成らしいが、なぜかvolum4が見当らない。&lt;/p&gt;

&lt;h1 id=&#34;35-computer-organization-and-design&#34;&gt;35. Computer Organization and Design&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=0124077269&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;やはりCPU上でLispを動かす以上CPUについては避けて通れない。&lt;/p&gt;

&lt;p&gt;これも名著。いわゆるパタヘネ。副題にThe Hardware/Software Interfaceとある通り、ハードウェアとソフトウェアの境界を行ったり来たりして進んでいく。
コンピュータの中身なんて丸で知らない初心者でも読めて、CPUの構造や(MIPS)アセンブラを知ることが出来る。
本を通してCPUの構造を解説しつつその知識を使って行列計算を高速化していく。それで最後は200倍まで速くなる。高速なコードを書きたい人は是非読むと良い。&lt;/p&gt;

&lt;p&gt;また、この本は最新のCPU事情を追い掛けることも目的としていて、頻繁に改訂されている。
古くからある本だがこの第5版には大規模データセンターやモバイルデバイスでのCPUについても論じられている。&lt;/p&gt;

&lt;p&gt;尚、日本語版もあるが私は読んでないのでコメントは控える。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4822298426&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4822298434&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;余談だが、最初にパタヘネと間違えてヘネパタ、CPUを作る人向けの本を買ってしまったので勿体なくて読んだが私には早すぎたようだった。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=012383872X&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;こちらも日本語版があるらしい。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4798126233&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;36-データマイニング入門&#34;&gt;36. データマイニング入門&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4489020457&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;LispをやるならAI、AIでは機械学習が使われいるということから簡単な入門書を選んだ。
最初、これを選んだ時にはそこまで深く考えた訳ではないのだが後にこれ以上の入門書に出会ったことがない。
取り上げるトピックや理論と実践の配分、理論の踏み込み具合、図、などなど絶妙である。&lt;/p&gt;

&lt;p&gt;他にも統計や機械学習の入門書は色々に読んだが全てこの本の前には霞んでしまったのでこれしか挙げられない。&lt;/p&gt;

&lt;h1 id=&#34;37-エンジニアのための-データ可視化-実践-入門&#34;&gt;37. エンジニアのための データ可視化[実践]入門&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4774163260&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;この本の通称何なのだろう。3D円グラフ本？あんちべ本？あんちべ本はこれか。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4627817711&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;小中学校の社会や算数で習ったグラフの発展といったところ。しかし世の中思った以上に可視化の手法があって驚きが多かった。
データを可視化することがあるなら一度手を止めてこの本を読むだけの価値がある。&lt;/p&gt;

&lt;p&gt;詳しくは著者のブログを見るといい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://antibayesian.hateblo.jp/entry/2014/02/16/235830&#34;&gt;エンジニアのためのデータ可視化実践入門という本を書いた - あんちべ！&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;38-詳解-シェルスクリプト&#34;&gt;38. 詳解 シェルスクリプト&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873112672&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Lispの処理系マネージャをシェルスクリプトで書き始めたのが大学3年生のこと。そのあたりでこの本を買った。
シェルスクリプトを書くときには是非この本をお勧めする。便利コマンドやTipsの他にシェルの引数の評価順序、互換性の話などこの本くらいでしか扱ってないような情報が多数載っている。
シェルのテキストベース、行指向の考え方を身につけることが出来る。私も知人からはシェルスクリプトの人と認識されているがその知識の根底にあるのはこの本。&lt;/p&gt;

&lt;h1 id=&#34;39-bsd-hacks&#34;&gt;39. BSD Hacks&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873112184&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;古き良きBSDハッカーに思いを馳せたいならこの本を読むといい。FreeBSDを主としているがNetBSDやOpenBSDについての注釈もある。「telnetでメールを読む」など個人的にはすごい好きな本なのだが恐らく今の時代に需要はない。&lt;/p&gt;

&lt;h1 id=&#34;40-マスタリングnginx&#34;&gt;40. マスタリングNginx&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873116457&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;NginXのパラメータやビルドオプションについて詳しい説明がある。
説明だけでなく、「CPUネックの時はワーカ数をコアと同じだけ、IOネックの時はコア数の1.5~2倍にするといい」など、パラメータ設定の目安もある。
NginXを扱うことがあるなら是非読んだ方がいい。そんなに分量はないので隙間時間に目を通せる。&lt;/p&gt;

&lt;p&gt;最近はnginx実践入門が話題だがまだ読んでいないので何も紹介出来ない。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4774178667&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;41-初めてのsql&#34;&gt;41. 初めてのSQL&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873112818&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;今更この本を挙げると笑われそうだが初学者の私には役に立った。SQLは割とノリで書けるところはあるが、GROUP BYなんかは知らないと書けない。&lt;/p&gt;

&lt;h1 id=&#34;42-sqlアンチパターン&#34;&gt;42. SQLアンチパターン&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873115892&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;こういう本は中々ない。いわゆる勘所みたいなのを書いてある。
ちゃんと、アンチパターンを挙げるだけでなくじゃあ代わりにどうしたら上手く解決出来るのか、とかアンチパターンとは言ったがこういう場合は使っていいだとか建設的な議論がされている。
ここで挙げられているアンチパターンには実際に問題が明みになるまでアンチパターンと気付けないようなものも少なくなく、この本で予習するかしないかで生死が分かれる。
テーブル設計のミスは中々に致命的である。&lt;/p&gt;

&lt;h1 id=&#34;43-理論から学ぶデータベース実践入門&#34;&gt;43. 理論から学ぶデータベース実践入門&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4774171972&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;アンチパターンは超絶実践的な話だったがこちらは理論の話。リレーション代数や正規形の話、インデックスのアルゴリズムなど。第4正規形だとか関数従属性だとかが分からないならこの本を読むといい。&lt;/p&gt;

&lt;p&gt;型がある人がやるから型破りとはいう実用上正規形を崩すにせよがまずはこの本で理論的に綺麗なテーブル設計を知ると良いと思う。&lt;/p&gt;

&lt;h1 id=&#34;44-redis入門&#34;&gt;44. Redis入門&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4048917358&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Redisの機能を使いつつアプリケーションをいくつか作っていく。最初読んだ時に割と「そこまでRedisでやるのか」と思った。
入門とはいいつつもシャーディングやLuaによるスクリプティングなども取り扱っており、中々読み応えがある。&lt;/p&gt;

&lt;h1 id=&#34;45-7つのデータベース-7つの世界&#34;&gt;45. 7つのデータベース 7つの世界&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4274069087&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;先に7つの言語 7つの世界を挙げたがこの本も良書だ。むしろ私はこちらの方が好きだ。&lt;/p&gt;

&lt;p&gt;PostgreSQL、 Riak、 Redis、 HBase、 MongoDB、 CouchDB、 Neo4j。思うに、プログラミング言語に比べてデータベースは重くて気軽には試せない。
それを考えると7つというのは非常に大きな数字だ。色々なデータベースを知って適材適所使おうと思うならこの本こそ最適だ。&lt;/p&gt;

&lt;h1 id=&#34;46-適応的分散アルゴリズム&#34;&gt;46. 適応的分散アルゴリズム&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4320122518&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;この本は昔図書館で借りて読んだ。なんとなく名前だけに惹かれて借りた。そして退屈だなと思いつつ読み終わって返した。
しかしそれから幾許か。分散データベースやアクターモデルなんかが頻繁に出てくるようになってよくこの本を思い出す。&lt;/p&gt;

&lt;p&gt;ノードとノードの間にどれだけ遅延があるかも分からないメッセージが届かないかもしれないノードが故障しているかもしれない、あるいは間違った情報を送ってくるかもしれない。
そんな中で合意形成したりリーダを選出したりマルチリードマルチライトなメモリを作ったりと面白いことを議論してある。&lt;/p&gt;

&lt;p&gt;次本屋で見付けたら絶対書いたい。そんな本。&lt;/p&gt;

&lt;h1 id=&#34;47-parallel-and-concurrent-programming-in-haskell&#34;&gt;47. Parallel and Concurrent Programming in Haskell&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B00DWJ1BIG&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Hey Hey Haskell本(?)。和訳も出ている。&lt;/p&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4873116899&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;http://community.haskell.org/~simonmar/pcph/&#34;&gt;オンラインで読める&lt;/a&gt;のでそれで読んだ。
内容がHaskellと密結合しているのでなんとなくでもHaskellを読めないとこの本も読めない。&lt;/p&gt;

&lt;p&gt;個々のプログラミング言語の機能の1つとして並列/並行のAPIについて述べられていることはあるがここまで様々に扱っているのは見たことがない。
よく「これ以上詳しく書こうとすると本が一冊書けてしまう」と流される部分を実際に本一冊書いてしまったような内容。&lt;/p&gt;

&lt;p&gt;並列/並行プログラミングに興味があるならHaskellを読めるようになってこの本を読むと良いと思う。&lt;/p&gt;

&lt;h1 id=&#34;48-reactive-messaging-patterns-with-the-actor-model&#34;&gt;48. Reactive Messaging Patterns with the Actor Model&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=B011S8YC5G&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;デザインパターンのアクター版。Akkaを題材に扱っている。
これこそ「人類が既に解決している問題」であり、Akkaを使うにあたって読むといいと思う。
Akkaに固有の話もあるが大部分はBeamVMを始めとした他のアクターシステムにも共通する内容になる。&lt;/p&gt;

&lt;p&gt;Akkaを使う各社で読書会が開かれてその内和訳が出るところまで見えた。&lt;/p&gt;

&lt;h1 id=&#34;49-unicode標準入門&#34;&gt;49. Unicode標準入門&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4798100307&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;自分の作ったLispでマルチバイト文字を扱おうと思うとUnicodeについては避けて通れない。
バイト列とエンコーディングとコードポイントと文字集合と文字とグリフとフォントと、これらの違いと関係について分かってないのならUnicodeについて勉強した方がいい。
ただでさえ複雑なUnicodeなのに基本の概念が分かってないのなら話にならない。&lt;/p&gt;

&lt;p&gt;扱っているのがUnicode3.0とやや古いものの基本的な部分は変わらない。というか、最近のUnicodeのバージョンアップは文字集合が拡大されているだけと思ってるんだけど合ってるかな？&lt;/p&gt;

&lt;h1 id=&#34;50-セキュリティコンテストチャレンジブック&#34;&gt;50. セキュリティコンテストチャレンジブック&lt;/h1&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=httpkeensgith-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4839956480&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;セキュリティコンテストに興味がなくてもこの本は役に立つ。
プログラマなら「こういうコードを書くと脆弱性になる」とは知っていても実際にどういう攻撃が可能なのか知っている人はそんなにいないのではないか。
この本を読めば少しは分かるようになる。話題もバイナリ解析からネットワーク、Web、SQLと色々ある。&lt;/p&gt;

&lt;p&gt;ところで今目次をみたら酷い誤植があった。やたらバイナリ解析したいらしい。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;お気に入りの本を挙げていったら50冊近くあったのでキリ良く50冊にした。
思ったよりも50冊は多くて、日曜日の半分が潰れたが色々吐き出せてよかった。&lt;/p&gt;

&lt;p&gt;みんなアフィ踏んでね！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミングを独学する時こそインプットを増やした方がいい</title>
      <link>/blog/2016/01/17/puroguraminguwodokugakusurutokikosoinputtowofuyashitahougaii</link>
      <pubDate>Sun, 17 Jan 2016 13:38:03 +0900</pubDate>
      
      <guid>/blog/2016/01/17/puroguraminguwodokugakusurutokikosoinputtowofuyashitahougaii</guid>
      <description>&lt;p&gt;巷でよく「アウトプットを増やせ」というのを聞くが個人的な意見としてインプットを増やした方が良いと思っているのでそれについて書く。

&lt;a href=&#34;//KeenS.github.io/blog/2014/12/18/du-xue-falsepuroguramingu/&#34;&gt;以前&lt;/a&gt;少し書いたことがあるが、私はプログラミングを独学で学んだ。
その時インプットがメインでほとんどアウトプットをしてこなかった。今でもそれは正解だったと思っている。何故か？
答えは簡単で、「学ぶ」ということは情報を仕入れる、要はインプットのことを指しているからだ。それに独学でない人、つまり情報学科なんかにいる人は死ぬほど勉強している訳でちょろっと勉強したくらいでは到底太刀打ち出来ない。&lt;/p&gt;

&lt;p&gt;全くアウトプットが必要ないかというとそうとも思っていない。アウトプットの瞬間に今まで仕入れた知識が自分に定着するからだ。
インプットとアウトプットどれくらいの比率でやればいいのかというと「インプットが溢れ出した時」にアウトプットすればいいと思っている。&lt;/p&gt;

&lt;p&gt;ただ目だけで追った情報は自分の中ではぼんやりしていて形を成していない。
コードなり文書なりの形にアウトプットする時に同時に自分の中で形を成す。あるいは半知半解の部分が明みになって理解の手向けとなる。
そのぼんやりとしたものが形を成す瞬間が一番成長しているように感じるのでよく「アウトプットを増やせ」と言われるのではと思っている。
しかしそれはぼんやりとした情報が定着しているだけであって知識が増えている訳ではない。アウトプットの時に定着するものは今までのインプットに比例する。インプットがなければアウトプットの時の成長もない。
かといって定着させることなく情報を仕入れ続けると不安になる。あるいは、仕入れた知識を試してみたくなる。そういう時にアウトプットすればいいと思っている。
私はそれを「インプットが溢れた」と呼んでいる。&lt;/p&gt;

&lt;p&gt;もう1つインプットを増やした方が良いと思っているのは大抵の問題は人類は既に解決しているからだ。無理にアウトプットしようと1時間掛けて悩むよりも10分掛けて解決法を学んだ方が手っ取り早い。
プログラミングを独学しようと思うと莫大な時間が必要になる。独学に取れる時間が有限ならば短時間で解決出来る方法を選ぶべきだ。
問題解決能力なんて手札が揃ってから考えればいい。碌な手札も持ってないのにそれで解決しようとするのは無理がある。まずは手札を揃えるべきだ。世の中のプログラマと同じ手札を揃えないとそもそも同じ土俵で戦えない。&lt;/p&gt;

&lt;p&gt;ここで1つ言及しておきたいのが毎日ブログ問題だ。「毎日技術ブログを書き続けろ。つらくてもいいから続けろ。続けた先に見えるものがある。」なんて言われることがある。あれはあまり良くないと思っている。
本当に初学者の時は毎日くらいの頻度でインプットが溢れるかもしれない。しかしその期間は長くは続かない。ちゃんと学んで成長していればインプットのバッファも大きくなる。
すぐに1日の勉強量ではインプットが溢れなくなる。そうなった時にも毎日ブログを書く意味はない。ブログを書くのにも時間が取られるのを忘れてはいけない。ブログを書く達人になりたいのでもなければ時間を使う意味はさしてない。
それよりは平日に進めて土日で仕上げて日曜の夜にそれについてブログを書く、とかの計画的なサイクルを回した方が良い。あるいはもっと長いスパンで。&lt;/p&gt;

&lt;p&gt;1つ、インプットばかりしていると懸念が生じる。それは実用上の問題ではなく自己満足とか成果とかの問題、精神上の問題だ。
何かを学ぶ以上成果が欲しくなる。特に実学なら実用的な成果が欲しくなる。学んではいるものの目に見える成果がないと不安になる。
例えば職のためにプログラミングを始めた人なら切実に成果が欲しいだろう。これについては私は今のところ有効な解決策を見付けていない。
目標のある人はどれだけ目標に近付いているかで測れるかもしれないが私には目標がなかった。
同じくらいの習熟度の人と比べるのが良さそうだが、独学同士相手を見付けるのは中々難しい。同学年の情報科学科の人と比べると正規軍に徒手空拳で挑むようなもので話にならない(そういう経験がある)。
時折たまに溢れ出たアウトプットを眺めてちゃんと前に進んでいるんだと自分に言い聞かせてきた。
不思議と、就職に関してもそれでどうにかなった。目に見える形にはなっていなくても面接などで話すと分かるのだろう。結局、不安は不安のまま抱え続けるしかなかった。独学とはそういうものなのかもしれない。&lt;/p&gt;

&lt;p&gt;私も大学生でプログラミングに目覚めて今丁度丸4年。去年の4月からプログラマとして働いているが未だインプットの足りなさをひしひしと感じる。働きながら勉強を続けるが中々時間がとれない。
時間のある学生の時にもうちょっと効率的にインプットを増やしていたらと思う。そういう後悔をする人を一人でも減らそうと思ってこういう記事を書いてみた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2016年注目していきたい技術</title>
      <link>/blog/2016/01/01/2016nenchuumokushiteikitaigijutsu</link>
      <pubDate>Fri, 01 Jan 2016 20:09:36 +0900</pubDate>
      
      <guid>/blog/2016/01/01/2016nenchuumokushiteikitaigijutsu</guid>
      <description>&lt;p&gt;2016年個人的に注目したいというか力を入れたいというか成行を見守りたいというか、そんな技術達を書き連ねていく。ものによっては「何を今更」と思うかもしれないがあくまで私にとって、だ。&lt;/p&gt;

&lt;p&gt;順不同。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;apache-drill&#34;&gt;Apache Drill&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://drill.apache.org/&#34;&gt;公式&lt;/a&gt;。様々なデータソースに対してANSI SQLでクエリを投げれるやつ。
ビッグデータの時代にETL無しで迅速にデータを分析出来るようにするために開発されてるらしい。&lt;/p&gt;

&lt;p&gt;様々なデータソースというのは本当に凄くて、CSVとJSONをJOIN出来たりする。
あるいはTSVの生ログとRDBにあるマスタデータをJOIN出来たりする。
個人的にはデータベースから抽出したCSVにクエリを投げたい時に便利かな、と思って注目してる。viewや一時テーブルを作る権限がないデータベースだってある。&lt;/p&gt;

&lt;p&gt;あるいは、Zookeeperを使って分散モードで実行も出来るのでBigQueryみたいなのをオンプレ環境で動かすのにも使えるようだ。
その時はデータフォーマットは&lt;a href=&#34;https://drill.apache.org/docs/parquet-format/&#34;&gt;Parquet&lt;/a&gt;で保存すると速いらしい。&lt;/p&gt;

&lt;h1 id=&#34;rust&#34;&gt;Rust&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;公式&lt;/a&gt;。言わずもがな。去年の5月に1.0が出て、今年で一周年を迎える。そろそろ安全なシステムプログラミング言語としての地位を築いて欲しい。
今までは安全なシステムプログラミング言語が不在で、不適切にも関らずJavaで代用されることが多かったように思える。&lt;/p&gt;

&lt;p&gt;やっぱりGCがあると安定性に心配が残るし、フルマネージングなランタイムシステムを持ってると他のランタイム、例えばlibuvなんかと相性が悪い。&lt;/p&gt;

&lt;p&gt;かといってC++やCだと安全でない。システムが巨大になった時にデバッグがつらくなる。&lt;/p&gt;

&lt;p&gt;Rustには是非Javaより速くて実行が安定しててC++よりも安全でCよりも抽象力があってマルチスレッドを使い始めても開発効率が落ちない言語として活躍して欲しい。&lt;/p&gt;

&lt;h1 id=&#34;kafka&#34;&gt;Kafka&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://kafka.apache.org/&#34;&gt;公式&lt;/a&gt;。「ただのキュー」と言ってしまえばそれまでだが高トラフィックを捌ける信頼性の高いキューだ。
OSのキャッシュを上手く使ってるだとかJavaだからといって富豪的プログラミングをしてないだとか分かってる人が作った感じがしてすごくいい。&lt;/p&gt;

&lt;p&gt;fluentdとかでデータを流すにしてもバックプレッシャーをやりたい、流す先が落ちてた時の事を考えたい、バッチじゃなくてストリーム（ミニバッチでもいいけど）でやりたい、とかの要望に応えてくれる。&lt;/p&gt;

&lt;h1 id=&#34;floki&#34;&gt;floki&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/arthurprs/floki&#34;&gt;Github&lt;/a&gt;。Rustで作られているキュー。
kafkaに言及しているがRedisプロトコルをベースとしていて、色々コマンドがあるようなのでkafkaとは少し毛色が違いそう。&lt;/p&gt;

&lt;p&gt;別にこれが次世代キューだ！なんて思ってる訳ではなくてRustで作られたミドルウェアがどうなっていくのか興味があるので観察対象に入っている。&lt;/p&gt;

&lt;h1 id=&#34;robots&#34;&gt;RobotS&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gamazeps/RobotS&#34;&gt;Github&lt;/a&gt;。RustのActor System。ほぼakkaの移植みたいだ。&lt;/p&gt;

&lt;p&gt;Rustにアクターシステムが必要かは置いておいて、アクターシステムをRustの上に作るのは正解だと思ってる。
何故ならJVMや.NETのようにStop The Worldはないし、Erlangとは比べものにならないくらい速い。
さらに、もしかしたらだが、Rustなら所有権があるのでうまくすればメッセージを送るのにメモリコピーが起きないかもしれない。
まあ、Go使えばいいじゃんと言えばそれまでである。&lt;/p&gt;

&lt;h1 id=&#34;redox&#34;&gt;Redox&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.redox-os.org/&#34;&gt;公式&lt;/a&gt;。Rustで開発されているOS。まだまだ開発途上だがゆくゆくはMINIXくらいの地位は築いて欲しい。
コマンドは全然ないのにGUIは動いていたりZFSをサポートしていたりする。開発者は「本気でやってる」と言っていたのでそれなりのものは出来るんだろうと期待している。&lt;/p&gt;

&lt;p&gt;コマンド群は、Rustでcoreutilsを書き直そうという&lt;a href=&#34;https://github.com/uutils/coreutils&#34;&gt;coreutils&lt;/a&gt;というプロジェクトがある。それを使えると面白いんじゃないかと思っている。
こういう時ってまずはRustのコンパイラの移植をしないといけないのかな？よく分かってない。&lt;/p&gt;

&lt;h1 id=&#34;ats2&#34;&gt;ATS2&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ats-lang.org/&#34;&gt;公式&lt;/a&gt;。線形型が肌で感じられる体になりたい。そのために修行したい。&lt;/p&gt;

&lt;p&gt;SML likeなシンタックスなので学習コストが低い。依存型の部分もCoqに似てる気がするのでそこも学習コストが低い。つまり線形型の学習に集中出来る。
ほとんど実用ではなく修行のために学習したい。もしかしたらアプリケーションくらい作れるのでは、とも思っている。
あとCとの相互連携が出来るのも良い。&lt;/p&gt;

&lt;h1 id=&#34;r&#34;&gt;R&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.r-project.org/&#34;&gt;公式&lt;/a&gt;。最近データを扱うことが多くなった。そういう時に簡単に可視化が出来るこの言語は素晴しい。
まだほとんどコピペでしか動かしてないが、ちょこっとした分析くらいなら自分の手で書けるようになりたい。&lt;/p&gt;

&lt;h1 id=&#34;異常検知&#34;&gt;異常検知&lt;/h1&gt;

&lt;p&gt;機械学習というとぼんやりしてるので絞ってみる。時系列データにスパイクがあったり、集団から外れた値があるのを検出する。
これが出来れば職人が手作業で検査していたものを自動化出来る。こういうのをやってみたいなぁとぼんやり願ってはいるがまだ遠い。&lt;/p&gt;

&lt;h1 id=&#34;coq&#34;&gt;Coq&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://coq.inria.fr/&#34;&gt;公式&lt;/a&gt;。&lt;a href=&#34;http://proofcafe.org/sf/&#34;&gt;ソフトウェアの基礎&lt;/a&gt;をずっとやっていたが、ProofGeneralのバグなのか、とある証明を食わせるとProofGeneralがフリーズするようになって以来途絶えている。
バグを直すか回避策を見付けるかして先に進みたい。こちらが終わったら次は&lt;a href=&#34;http://www.amazon.co.jp/Interactive-Theorem-Proving-Program-Development/dp/3540208542&#34;&gt;CoqArt&lt;/a&gt;がある。
&lt;a href=&#34;https://twitter.com/search?q=%23readcoqart&amp;amp;src=typd&amp;amp;lang=ja&#34;&gt;#readcoqart&lt;/a&gt;にも行く行く詐欺をしてるので行かねば。&lt;/p&gt;

&lt;h1 id=&#34;isabelle&#34;&gt;Isabelle&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://isabelle.in.tum.de/&#34;&gt;公式&lt;/a&gt;。SMLユーザとしてはCoqをやるならIsabelleもやらないとな、と思っている。
&lt;a href=&#34;http://qiita.com/myuon_myon/items/11bb5bfc2e274fdaea7c&#34;&gt;ここ&lt;/a&gt;によるとCoqとはまた違った証明のやりかたらしいのでそういう意味でもやる意味あるのかな、とか。
Coqが終わってさらに手が空いてたら、くらい。&lt;/p&gt;

&lt;h1 id=&#34;prolog&#34;&gt;Prolog&lt;/h1&gt;

&lt;p&gt;修行の1つとしてPrologをやりたい。というか、作りたい。その前にまずはPrologを書けるようになりたい。
少しやってみているが、GNU PrologもSWI PrologもただのPrologとしか呼ばれていなくて情報を見付けるのに苦難している。
Lispみたくそれっぽい見た目と挙動をしていたらPrologを主張出来るのだろう。&lt;/p&gt;

&lt;p&gt;今気になっているのは制約ソルバとPrologの関係。
もし制約ソルバでPrologを実装出来るなら実装をサボれるし制約ソルバを触ってみれる。ただ、制約ソルバがチューリング完全な気がしないので使えるとしても部分的な気がする。&lt;/p&gt;

&lt;h1 id=&#34;fortran&#34;&gt;Fortran&lt;/h1&gt;

&lt;p&gt;神託の言語。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;κeen が 2016 年に新たに学ぶべき言語は『Fortran』です。&amp;#10;&lt;a href=&#34;https://twitter.com/hashtag/1year1lang?src=hash&#34;&gt;#1year1lang&lt;/a&gt;&amp;#10;&lt;a href=&#34;https://t.co/sDP4Kk2Vfx&#34;&gt;https://t.co/sDP4Kk2Vfx&lt;/a&gt;&amp;#10;&amp;#10;うっ。。ぐ。。。&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/682535448124637184&#34;&gt;2015, 12月 31&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;まあ、ベクトル計算楽そうだし機械学習の手習いついでにアルゴリズムを実装してみるのも悪くないのかな、と思えてきた。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;思ったより言語の話題が多かった。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CyberAgentに入社しました</title>
      <link>/blog/2015/04/10/cyberagentninyuushashimashita</link>
      <pubDate>Fri, 10 Apr 2015 19:55:59 +0900</pubDate>
      
      <guid>/blog/2015/04/10/cyberagentninyuushashimashita</guid>
      <description>&lt;p&gt;κeenです。少し遅くなりましたが4/1付で所属が変わったので報告です。

タイトルにあるように、株式会社サイバーエージェントに入社しました。こう言うとよく「あれ？サムライトじゃないの？」「もっとストイックな所に行くと思ってた」と言われます。サムライトについては特に関係はないです。エンジニア2人と知り合いなだけです。Common Lispだけが幸せの基準じゃありません。
それにキラキラ女子のイメージが強いかもしれませんがサイバーエージェント、結構ストイックですよ？&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/lXs96toe-B8&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;因みに昨日までで全体研修が終わり、月曜から技術研修が始まります。技術研修を受けずに早期配属される同期や果ては&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1504/03/news134.html&#34;&gt;社長になる同期&lt;/a&gt;も居る中のんびり6月末まで研修を受けます。フロント周りはからっきしなのでこれを機にその辺も勉強しようかと。&lt;/p&gt;

&lt;p&gt;研修はグループワークが多かったのですが一緒のチームにいて優秀だなと思える人に何人も会ってきたしバックグラウンドを訊いてみて尖ってるエンジニアも一杯いたので正式配属されるのが楽しみです。私もそれなりに尖ってるつもりだったのですが精進が足りませんね。&lt;/p&gt;

&lt;p&gt;まあ、マイペースに歩んでいきます&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;よし、来年Clojureおじさんになろう&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/489246490724810752&#34;&gt;2014, 7月 16&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>面接でLispを口にして落ちない企業、私気になります！</title>
      <link>/blog/2015/02/10/mensetsudelispwokuchinishiteochinaikigyouwatashikininarimasu</link>
      <pubDate>Tue, 10 Feb 2015 08:01:35 +0000</pubDate>
      
      <guid>/blog/2015/02/10/mensetsudelispwokuchinishiteochinaikigyouwatashikininarimasu</guid>
      <description>&lt;p&gt;κeenです。先日の記事がやたら拡散しました。その中で&lt;/p&gt;

&lt;p&gt;「面接でLispは口にしない方が良い。100%落ちる。」&lt;/p&gt;

&lt;p&gt;の一文がえらく気に入られたようです。Lispの風評被害を防ぐために1つアンケートにご協力下さい。

このスプレッドシートです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1dUUOSpKqPK_tMqboxzAfPaL1eAEVwAdYy4AP_5HWeVw/edit?usp=sharing&#34;&gt;面接でLispを口にして落ちない企業調査表 - Google スプレッドシート&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「うちの会社は面接でLispを口にしても落ちないぜ」って方はお手隙ならば書いて下さると嬉しいです。単純な興味目的のゆるふわなアンケートです。調査項目は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;会社名&lt;/li&gt;
&lt;li&gt;会社のURL&lt;/li&gt;
&lt;li&gt;書いた人(本名、スクリーンネーム、なんかのIDかは任意。IDにすると連絡がとれて便利かも)&lt;/li&gt;
&lt;li&gt;コメント、会社のアピールなど(長文可、任意)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で。&lt;/p&gt;

&lt;p&gt;利用規約(？)は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;社員が書く。会社に全く書かない人は勝手に書かない。&lt;/li&gt;
&lt;li&gt;改竄を防ぐために一度書いたら同じ人しか編集してはいけない。同じ会社の人でもダメ。&lt;/li&gt;
&lt;li&gt;どっかのメディアに掲載されても怒らない。&lt;/li&gt;
&lt;li&gt;メディア側は改竄なしでリスト全部を引用し、引用した日時も付記する。あるいはURLにリンクを張る。二次引用は禁止する。&lt;/li&gt;
&lt;li&gt;問題が生じたら管理者(@blackenedgold)がこのスプレッドシートを非公開にする。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こんなもんですかね。ゆるふわアンケートなので書く側もゆるふわな気持でお願いします。&lt;/p&gt;

&lt;h1 id=&#34;補足&#34;&gt;補足&lt;/h1&gt;

&lt;h1 id=&#34;面接でlispは口にしない方が良い-100-落ちる-について補足&#34;&gt;「面接でLispは口にしない方が良い。100%落ちる。」について補足&lt;/h1&gt;

&lt;p&gt;振り返ってみるとそんなことはありませんでした。就活のある時点までは確かに真で、次の面接でLispを口にしなかったら落ちなかったのでそんなイメージになってました。
しかしよく考えたら私が内定頂いたところはむしろ全部Lispのおかげで内定頂きました。こっちの情報の方が大事だった。拝承。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>就活について思ったことをここに書き記す</title>
      <link>/blog/2015/02/07/shuukatsunitsuiteomottakotowokokonikakishirusu</link>
      <pubDate>Sat, 07 Feb 2015 14:27:58 +0000</pubDate>
      
      <guid>/blog/2015/02/07/shuukatsunitsuiteomottakotowokokonikakishirusu</guid>
      <description>&lt;p&gt;私は今4年生なので去年の今頃は就活なんてものをしていた。下の代から若干日程が変わっているがそろそろ就活ムードが出てきているのでなんか吐いておく。思い出かもしれないし愚痴かもしれないし毒かもしれない。経験かもしれないし他人の代弁かもしれない。後輩の役に立つかもしれないし人事の方に向けたメッセージかもしれない。&lt;/p&gt;

&lt;p&gt;念のために書いておくが私はIT系の会社のプログラマ、エンジニア職ばかり応募していた。他の業界、職種に当て嵌まるとは限らない。

注意&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;良かった企業は名前を出す、悪かった企業はここには名前を書かない方針にする。悪かった企業の具体名が知りたかったら&lt;a href=&#34;https://twitter.com/blackenedgold&#34;&gt;@blackenedgold&lt;/a&gt;に訊いて下さい。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;リクナビ-メール&#34;&gt;リクナビ、メール&lt;/h1&gt;

&lt;p&gt;周りの流れに乗せられてリクナビに登録することになる。個人情報を大量に打ち込む。すると大量のメールが届く。正直、情報量はゼロに近い。メールは受信しないにチェックした方が良い。&lt;/p&gt;

&lt;p&gt;リクナビの価値は3割くらいがポータルサイトとしての価値、残り7割くらいがリクナビ経由でしか募集してない企業にエントリーするためだけのもの。そういう企業にエントリーしないならリクナビにはあまり近寄らない方が良い。リクナビのサイトは非常に良く出来ていて、不安を煽る情報を的確に伝えてくる。本当にその辺の企業のサイトに爪の垢を煎じて飲ませてやりたいくらいに良く出来ている。&lt;/p&gt;

&lt;p&gt;一応何社かはリクナビ経由で知ってエントリーした。一々個人情報を手打することなくワンクリックでエントリー出来るのは負担を軽減してくれる。統一されたUIで情報を見れるのにはそれなりの価値はある。でもあまり齧りつきすぎると毒に冒される。2週間程放置しておくと「企業からの特別オファー」なる量産メッセージが1000通くらい溜まる。&lt;/p&gt;

&lt;p&gt;Twitterや勉強会で社員と知り合って採用情報などを得られるならそっちを頼った方が良い。Twitterに流れてくる情報の方が有用。&lt;/p&gt;

&lt;h1 id=&#34;説明会&#34;&gt;説明会&lt;/h1&gt;

&lt;p&gt;エントリーに必須でない限り行かなかった。少なくともIT系企業ならWebページの採用情報が一番情報が充実して然るべきだ。&lt;/p&gt;

&lt;h1 id=&#34;マイページ-エントリーシート-性格診断&#34;&gt;マイページ、エントリーシート、性格診断&lt;/h1&gt;

&lt;p&gt;リクナビ経由でエントリーしても結局は企業毎のマイページなるものに登録し、そこで情報を得ないといけない。エントリーシートの提出や面接の登録など。&lt;/p&gt;

&lt;h2 id=&#34;マイページ&#34;&gt;マイページ&lt;/h2&gt;

&lt;p&gt;IT系の企業ならまずはそのマイページが評価基準になる。外注としても最低限のラインというのがある筈だ。マイページ登録にもまた個人情報を大量に打ち込む。まずエントリー時点でそこまで情報が必要なのか、とか大量の情報を入力させるに当たってどこまでUXを考えてるかとか。&lt;/p&gt;

&lt;h3 id=&#34;事例1-とあるグローバル人材を求める企業&#34;&gt;事例1 とあるグローバル人材を求める企業&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;入力項目の説明に日本語と英語を併記していた。半分はゴミ情報なので酷く見づらかった&lt;/li&gt;
&lt;li&gt;最初に出身大学が国内か海外かのラジオボタンがあった。その次に出身大学を選ぶウィザードがあった。ウィザードの最初の質問は「出身大学は国内ですか？海外ですか？」のラジオボタン。&lt;/li&gt;
&lt;li&gt;住所と郵便番号も同じようなウィザードだった。住所をウィザードで選んでいくと郵便番号が自動で入力される。その次の項目は住所を手入力だった。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;事例2-yahoo-japan&#34;&gt;事例2 Yahoo! JAPAN&lt;/h3&gt;

&lt;p&gt;具体的には覚えてないけど入力補完があった。郵便番号を入力すると住所も自動で入力された。一番使い易かった。&lt;/p&gt;

&lt;h3 id=&#34;事例3-ワークスアプリケーションズ-テクノロジスペシャリスト採用&#34;&gt;事例3 ワークスアプリケーションズ テクノロジスペシャリスト採用&lt;/h3&gt;

&lt;p&gt;そもそもマイページは必要なかった。エントリーには2〜3個のフォーム入力と返信用のメールアドレスのみで良かった。最高。&lt;/p&gt;

&lt;p&gt;次にマイページの内容。クッキーを焼いて「こんにちはn回目の訪問ですね」なんてやってたら即切る。大抵対応ブラウザも書いてあるからそこも見る。モダンブラウザはサポート外とか言ってたら渋い顔になる。私の就活後半は丁度Windows XPのサポートが切れた時期なのでその辺でまだIE 6のサポートをしてたらやっぱり渋い顔になる。対応OSがWindowsとOS Xとか書いてたらキレる。IT系でLinuxユーザは相手にしないだと？&lt;/p&gt;

&lt;h2 id=&#34;エントリーシート&#34;&gt;エントリーシート&lt;/h2&gt;

&lt;p&gt;割と企業の個性が出る。熱意とか意気込みとかはコピペなりでどうにでもなってしまうので適当に書く。そればっか訊いてくるところはエントリーをやめる。書くのに手間が書かるのにまともな基準で評価されてるか分からないから。簡単に詐称可能でしょ…&lt;/p&gt;

&lt;p&gt;これまでの実績とかを訊いてきたらGithubアカウントとかTwitterアカウントとかブログとか大会実績とか過去のLT資料とかを張る。興味のある分野を書く。大抵Markdown形式で書いたがどこもプレビューで改行エスケープをしてなかったので箇条書きが酷く見辛かった。字数は気にしない。&lt;/p&gt;

&lt;h2 id=&#34;性格診断&#34;&gt;性格診断&lt;/h2&gt;

&lt;p&gt;最悪の体験。まず、Windows+IEかOS X+Safariにしか対応してない。単に対応してないだけじゃなくてご丁寧にUAを見てそれ以外を弾く。IT系ならLinuxユーザも居るだろうに。そして内容だが、似たような質問を何度も繰り返す。ただでさえWindowsを使わされてイライラさせられているのに更に追い討ちを掛けてくる。さっきも答えただろ、と悪態をつきながら地獄の20分に耐えることになる。SAN値がほぼ0になる。あれをやらせてる人事の方々は一回体験してみた方が良いと思いますよ。その上であの性格診断が必要か判断して下さい。どっかの企業で性格診断無視してたら普通にそのまま選考進んだ。マジで存在価値が分かならい。&lt;/p&gt;

&lt;h2 id=&#34;筆記試験&#34;&gt;筆記試験&lt;/h2&gt;

&lt;p&gt;SPだっけ？IS？なんかそんなやつ。一回だけ受けた。さんすうとこくごの問題をひたすら解く。英語もあったっけ？覚えてないや。指定の会場じゃないと受けられないし順番待ちがあるしクソみたいな問題しか出ないし2回目は受けたくない。何の判断に使われるかもイマイチ分からない。必要ないなら止めて欲しい。&lt;/p&gt;

&lt;p&gt;それではなくて情報技術/科学に関する問題を出してきたところがあった。LINE。カバー範囲が広く、全ての問題に正当することは要求しない。回答を見て適正を決めて次の面接官を決めてたらしい。非常に良い。出来れば問題用紙を持ち帰らせてくれれば後学に使えたのにと思った。問題使い回してるのかな？&lt;/p&gt;

&lt;h2 id=&#34;プログラミング課題&#34;&gt;プログラミング課題&lt;/h2&gt;

&lt;p&gt;課してくるところは少なかった。楽しいプログラミングかと思いきやそうでもなかった。&lt;/p&gt;

&lt;h3 id=&#34;事例1&#34;&gt;事例1&lt;/h3&gt;

&lt;p&gt;言語指定があった。Java。しかもJavaで解くには凡そ不向きな問題。つながりのある複数の問題だったのに1問につき1ファイル指定で共通する機能をクラスに切り出すことも許されなかった。因みにお題は「共通化を考えながら解け」。&lt;/p&gt;

&lt;h3 id=&#34;事例2&#34;&gt;事例2&lt;/h3&gt;

&lt;p&gt;仕様があいまいだった。「与えられた入力に対して」。入力はどう与えられるの？標準入力？コマンドライン引数？関数の引数？どれでも良いならそう書いて欲しい。さらに悪いことに時間指定があった。4時間。それは良いんだけど40分くらいで解いて提出したらログインセッションが切れてた。もう一回ログインしたらもう一回課題を受けれた。既に手元に回答は準備してあるので即座に提出したら普通に受理された。よくわからない。ちなみにその企業は唯一エントリーシートで落ちた。&lt;/p&gt;

&lt;h1 id=&#34;面接&#34;&gt;面接&lt;/h1&gt;

&lt;p&gt;自分の話じゃないけどエントリーしまくってた友人は交通費で破産しかけてた。交通費は出してくれると嬉しいけど手続面倒だよねー。Skype面接とか？自分は近場の企業を、それも少数だけにしかエントリーしない方針で凌いだ。1つ落ちたら1つ新たにエントリーした。&lt;/p&gt;

&lt;p&gt;スーツはあまり着たくない。特にIT系なら勤務も私服だし面接も私服OKなところが多い。服装に言及がないとかスーツ必須とかだと悪目立ちする。服装に言及がないときは募集ページのプログラマが私服かどうかで判断していた。一回、募集ページは私服なのに面接官はスーツを着ていることがあった。面接だから、とのこと。学生相手にそこまで気を遣う必要はないと思うのだがお作法なのだろうか。あとエレベータホールまで見送りにきてさらにエレベータの扉が閉まるまで深々と御辞儀されるのも恐縮だ。&lt;/p&gt;

&lt;p&gt;内容はまあいいや。変な質問をされたことはない。こちら一人に対して面接官3人とか4人とかは圧迫感があって嫌だった。あ、一回「スクリプト言語でもディスクIOバウンドやネットワークIOバウンドなら高速なアプリケーションを書ける」と言ったら面接官に「は？」って言われたのが気になった。CPUバウンドじゃないならアーキテクチャの問題だからむしろアプリを簡単に書き換えられるLLで記述すべきでしょ。因みにその面接で落ちた。&lt;/p&gt;

&lt;p&gt;面接でLispは口にしない方が良い。100%落ちる。&lt;/p&gt;

&lt;p&gt;最後に質問はあるかと聞かれる。そんなものはない。エントリーした時点で公開情報で十分納得してある。内定が出たら即座に決めるつもりだ。もう情報は必要ない。面接が早く終われば授業に間に合うかもしれない。早く帰してくれ。聞ける場を用意してくれるのは非常に良いことなんだが質問の内容で評価するのは止めてほしい。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;その他の事も色々言いたい。&lt;/p&gt;

&lt;h1 id=&#34;時間&#34;&gt;時間&lt;/h1&gt;

&lt;p&gt;なんか大学生なんだから暇でしょみたいな雰囲気になってる。そんな訳はない。普通に授業がある。遊んでる大学生はごく一部だ。少なくともうちの大学だと遊べるのは1、2年までで3、4年からが勉強の本番になる。空き時間はレポートなりゼミの準備なりバイトなりサークルなりのために空けてある。面接と往復の時間を考えたら授業を1つ2つ犠牲にする必要がある。一応空いてる時間を訊いてくるがこちらが指定しても「それだとこちらが都合が悪いので他を指定して下さい」となって結局授業を潰すことになる。面接にしろ試験にしろ無駄なステップは省いて欲しい。学生の本分は勉強だ。&lt;/p&gt;

&lt;h1 id=&#34;時刻&#34;&gt;時刻&lt;/h1&gt;

&lt;p&gt;機械送信のメッセージの他に手動で送られてくるメールや電話がある。あれの時間は結構気にする。まず、電話はやめて欲しい。電話で連絡取るにしても掛け直すときは前回とは時間帯をずらすとかしてほしい。学生なのだから毎日時間割ベースで活動している。電話をとれない時間帯は固定されている。前日と同じ、電話をとれない時間に電話が掛かってきたら正直バカなの？と思ってしまう。&lt;/p&gt;

&lt;p&gt;あと遅い時間や休日に連絡が来るとあまり良い顔にはならない。困る訳じゃなくて社員がその時間に活動しているということは残業や休出があるということだ。出来ればそういう会社は避けたい。&lt;/p&gt;

&lt;h1 id=&#34;ob訪問&#34;&gt;OB訪問&lt;/h1&gt;

&lt;p&gt;ある企業でマイページ作ったらOB(というか同じ大学出身なだけの全く関係のない社員)と会う場をセッティングされそうになった。しかし相手は人事。話をしたいとしたらエンジニアだ。人事の方には興味はない。無駄な時間は使いたくない。&lt;/p&gt;

&lt;h1 id=&#34;エントリーする企業の決め方&#34;&gt;エントリーする企業の決め方&lt;/h1&gt;

&lt;p&gt;Twitterや勉強会で知った人とかあるいは興味の湧くスライドを書いた人とかの会社を採用ページを見るところから始める。募集要項を見て気に入れば他のPRページも見る。気に入ればエントリーする。あとはGithub採用やってるところはとりあえず出す。他は名前知ってる有名企業とか。&lt;/p&gt;

&lt;p&gt;見るところは勤務形態の自由さ、年収、技術力。技術職なのだから自分の技術力を発揮出来てそれが評価されてまた仕事でスキルアップ出来る所が良い。&lt;/p&gt;

&lt;p&gt;自分の技術力を発揮出来るというのはつまらない規約で制限されないか。スーツ着用とかありえない。合理的理由が全くない。袖のボタンがキーボードに引っかかって作業し辛い。環境を自分の好きに選べるか。椅子、ディスプレイ、キーボード、OS、エディタ等々。バランスボールがオフィスにあると評価が上がる。&lt;/p&gt;

&lt;p&gt;評価されるというのは具体的には年収。札束で頬を引っ張たけばエンジニアは集まる。&lt;/p&gt;

&lt;p&gt;技術力は恐らく会社のWebページでは評価出来ない。中のエンジニアを勉強会で知った、スライドを見た、有名OSSのコミッタが居る、会社のGithubレポジトリの内容。鮎の友釣みたいにエンジニアを自由にさせておけば他のエンジニアも集まる。技術力を求めるのは自分のスキルアップという積極的な理由もあるし、クソコードをレビューしたくないという消極的な理由もある。&lt;/p&gt;

&lt;p&gt;割と年収が決め手だったりする。初任給は高く見えるように書いておいた方が良い。見た目は低くても手当てを入れると手取りがそれなりになるなら参考年収とかを書くと分かり易い。&lt;/p&gt;

&lt;p&gt;因みに会社の将来性は気にしてない。転職が盛んな職種なのだから傾いたら出ていく。&lt;/p&gt;

&lt;p&gt;正直経団連の企業は上の条件を満たしていそうにないので目も呉れてない。向こうも私のような人は求めてないだろうし多分棲み分けが出来てる。主にベンチャーを見ていた。&lt;/p&gt;

&lt;h1 id=&#34;コーディング面接&#34;&gt;コーディング面接&lt;/h1&gt;

&lt;h2 id=&#34;事例1-1&#34;&gt;事例1&lt;/h2&gt;

&lt;p&gt;面接で予告なくコーディングがあった。まあ、それは良い。与えられた環境はWindows XP + Eclipseだった。その時点で既にXPのサポートは切れてた。椅子蹴っ飛ばして帰ろうかと思った。一応受けたけどEmacs入ってないしqwertyだしjp配列だしCaps Lockのままだしなんか数分に1回警告が出て邪魔されるし最悪だった。環境固定はありえないなと思った。&lt;/p&gt;

&lt;h2 id=&#34;事例2-pixiv&#34;&gt;事例2 pixiv&lt;/h2&gt;

&lt;p&gt;抜き打ちでホワイトボードコーディングをやった。リファレンスや補完が無くても書ける程度の問題だったし「多分この問題はここを訊いてると思うんですが…」「おぉ？！」とか盛り上がってたし楽しかった。シェル芸も披露した。上がり性の人にはつらいのかもしれないけど個人的には積極的にやって欲しい。&lt;/p&gt;

&lt;h2 id=&#34;事例3&#34;&gt;事例3&lt;/h2&gt;

&lt;p&gt;採用フローにオンサイトのプログラミング試験があるところがあった。用意される環境はMac ProとJava 7とEclipseとJava 7のリファレンスだったかな？リファレンスが用意されてる時点でお察しと思うがインターネット接続禁止。なんでや。ググり力が一番大事でしょ。あと環境固定は最悪だって。それ見て受けるのやめた。&lt;/p&gt;

&lt;h1 id=&#34;github採用&#34;&gt;Github採用&lt;/h1&gt;

&lt;p&gt;積極的にやってほしい。こちらの負担は軽いから。が、エンジニアへの負担がどれほどなのか分からない。あと(学部生なら)Githubを覚え始める頃と就活を始める頃が重なると思うので「これから伸びる」も考慮してくれると嬉しいなー。自分のGithubアカウントが充実し出したのは就活が終わってからだった。&lt;/p&gt;

&lt;p&gt;一定期間アカウントを観察して行動を見て決めるのなら期間を考えて欲しい。観察期間と試験期間が重なって観察期間中1コミットも出来ないことがあった。&lt;/p&gt;

&lt;p&gt;採用側のコストが低いなら一番推奨されるべき。&lt;/p&gt;

&lt;h1 id=&#34;プロコン採用&#34;&gt;プロコン採用&lt;/h1&gt;

&lt;p&gt;あまり感心しない。&lt;a href=&#34;//KeenS.github.io/blog/2014/12/18/saiensugaenziniaringu/&#34;&gt;前にもポエム書いた&lt;/a&gt;ようにあれはサイエンスであってエンジニアの採用に有用とは思わない。むしろプロコン採用をやってるところはその辺分かってなさそうで評価が下がる。勿論、動画コーデックの開発をしているドワンゴのようにそういう人材が実際に必要なところはその限りではない。そういうところは積極的にアピールしてくれると誤認が少なくて助かる。&lt;/p&gt;

&lt;p&gt;一応言うとプログラマの中から適性のあるプログラマを見出す方法としては感心しない、と言っている。プログラマ志望の中からプログラム書けるプログラマを見出す方法としてはアリなんじゃないですかね。世の中プログラムの書けないプログラマがどの程度居るのか分かりませんが。&lt;/p&gt;

&lt;h1 id=&#34;isucon-http-isucon-net-採用&#34;&gt;&lt;a href=&#34;http://isucon.net&#34;&gt;ISUCON&lt;/a&gt;採用&lt;/h1&gt;

&lt;p&gt;めっちゃやって欲しい。インフラ系の即戦力って結構稀だと思います。はい。&lt;/p&gt;

&lt;p&gt;因みに私は1件だけオファーがありました。その頃は自分にそのオファーに見合うだけの技術があるとは思ってなくて、深く考えずに断っちゃいましたけど。今考えるとそこで内定貰って「ISUCONで内定貰ったぜ！ヒャッハ〜」って言ってれば流れ変わったのかな。&lt;/p&gt;

&lt;h1 id=&#34;アカリク-https-acaric-jp-採用&#34;&gt;&lt;a href=&#34;https://acaric.jp/&#34;&gt;アカリク&lt;/a&gt;採用&lt;/h1&gt;

&lt;p&gt;自分は行ってないけどめっちゃ良さそう。推奨されるべき。&lt;/p&gt;

&lt;h1 id=&#34;インターン&#34;&gt;インターン&lt;/h1&gt;

&lt;p&gt;一番毒吐きたいところ。&lt;/p&gt;

&lt;p&gt;優秀な学生をインターンで獲得すると言っている企業をちらほら見掛ける。ふざけている。優秀な学生がインターンをしてる暇があると思ってるのか？やはりここにも学生なんだから暇でしょという雰囲気を感じる。&lt;/p&gt;

&lt;p&gt;参考に普通の学生たる私の3年生の時の夏休みの日程を挙げる。8月1日から強化錬、間を空けずに合宿、2日休んで合宿、すぐさま試験準備、試験、直後に帰省。東京に戻ってきたのは9月30日。夏休み中の休みは合宿の合間の2日のみ。&lt;/p&gt;

&lt;p&gt;色々突っ込みたいだろうが予想されるものには反論しておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;夏休みの真ん中に試験がある大学にいるのが悪い&lt;/li&gt;

&lt;li&gt;&lt;p&gt;これは私からはどうしようもない。高校生の時にそこまで考える人はいないだろう。悪いというならうちの大学を切り捨てればいい。1学年3000人居る。因みに私は夏休みの前半はサークルに勤しんでいたが本来ならそれら全てを試験勉強に充てる。お察しの通り私の試験の出来は良くなかった。その期間にインターンに行きたがる人はそう多くないだろう。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;サークル3つやってるのが悪い&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;私の場合サークルばかりだが他の人でもサークルの他にバイト2つ3つ掛け持ちとかはザラにある。しかもその内の少なくとも1つは大抵教育系なので夏期講習で忙しい。夏期講習で働けなかった分の皺寄せで他のバイトも日程がつまる。夏休みに知人に会うと10連勤明けで死んだ目をしている。サークルやバイトの他にも高校の部活絡みだとか学外活動だとか要因は色々ある。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;就活のためならサークルを犠牲にすればいい&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;副将をやってるとそうもいかない。参加者ではなく主催者になる。それとも主催者の責務を放り出すような人を採りたいのか？副将になったのが悪いという批判も当を得てない。なぜならサークルの同期は9人いて3人が主副将になる。1/3だ。流石に1/3が外れ値と言う人はいないだろう。それに優秀な人こそ責任者になりやすい筈だ。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;インターンでお金貰えるんだからバイトは辞めるなり休むなりすれば良いのでは&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;そうも言ってられない。最近のバイトは中々辞めさせてくれないし、休むと言っても勝手にシフトを入れてくる。辞めるには1ヶ月、2ヶ月前に辞意を伝えておかないといけない。インターンにも選考はある訳で、確実に行けると決まるのは夏休み直前だったりする。あるか無いか分からないもののためにリスクは冒したくない。それに一時収入のために定常収入を失う訳にはいかない。辞めるかも、なんて言葉が勝手にシフトを入れてくるような所に通用する訳がない。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;帰省は個人の都合では&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;そうでもない。多くの大学生は親の扶養下にある。定期的に家族に挨拶をしないと東京で生かしてもらえない。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;空きの2日を使ってインターンに行けば良いのでは&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;インターンが2日で済むのは文系の話だ。理系ならば最低でも2週間、普通1ヶ月。2ヶ月のものもよく見掛ける。学んで動いて成果を出すには2日は短かすぎる。空きの2日どころか合宿をすっぽかしたところでインターンには行けない。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;普通の学生じゃなくて優秀な学生の話をしているんだ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;確かに。ここに書いたのは普通の学部生の日程だ。しかし優秀な人は他人より多くのことをこなすから優秀なのではないか？ならば優秀な人はさらに忙しいのではないか？私の周りの(私が思う)優秀な人は忙しそうにしている。忙しいとは言ってないが暇と言ってるのは見たことない。
院生のスケジュールは研究室次第だろう。何とも言えない。やる事やってるなら他は関知しない、というところもあれば夏休みにもコアタイムのある研究室もあると聞く。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;勿論、ここに書いたことが全ての学生に当て嵌る訳ではない。中には夏休みに時間のある人もいる。だがその人がインターンに行くか、という問題もある。優秀な人は優れた指導教官の下に居る筈だ。その指導教官の下を離れてまでインターンに行く価値があるか。あるいは優秀ならば指導教官がいなくても自ら学べる人は多い。本人の自主学習速度を上回る体験を提供出来るか。優秀な人は職が欲しいなら先のアカリクなどで座して待つだけでやってくる。内定直結は別に魅力ではない。&lt;/p&gt;

&lt;p&gt;私がここまで毒を吐いたのはインターンそのものではない。時間のある学生を集めてインターンを開きたいならそれはそれで良し。両者得をすることがあるだろう。毒を吐いているのはインターンで優秀な学生を獲得すると言っている企業、採用プロセスにインターンを組み込む企業だ。少数、時間のある優秀な学生もいるだろうが多くの優秀な人を自らフィルタしていることに気付かないのか。&lt;/p&gt;

&lt;h1 id=&#34;最後に&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;常体で書いた上に普段使わない汚ない言葉遣い、自分の価値観に合わないものを全力で否定する内容だったので酷く毒毒しいエントリになってしまった。飽くまで個人の日記で毒を吐いただけなので皆さんマジレスしないで下さいね。&lt;/p&gt;

&lt;p&gt;企業は利益のために採用活動をするのに対して大学生はその露命をつなぐために就職活動をする。立場上も身分上も大学生が下手に出るべきだが上から目線な記述が散見される。ここは一つ個人の日記ということで赦して下さい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>低レベルなことがしたい</title>
      <link>/blog/2014/09/18/low-level-languages</link>
      <pubDate>Thu, 18 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/09/18/low-level-languages</guid>
      <description>&lt;p&gt;低レベルなことがしたい。もうちょっと具体的に言うと、DBMを書きたい。コンパイラを書きたい。ただ動くだけじゃなくて効率的な実装がしたい。CPUの歓声が聞きたい。そのためにもバイナリを簡単に扱える言語が良い。マシン語が透けて見える言語が良い。いっそインラインアセンブラが欲しい。システムコールがスムーズに出来る(≒ C をスムーズに呼べる)言語が良い。どんな言語が適任か。

因みにコンパイラはLLVMをバックエンドに使う予定。何の言語のコンパイラかは決めてない。SMLのサブセットかmini Camlかその辺？&lt;/p&gt;

&lt;p&gt;まず考えられるのはダイレクトにマシン語が見えるアセンブラ。でも移植性が無いからボツ。じゃあ他には？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LLVMアセンブラ&lt;/li&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;SML&lt;/li&gt;
&lt;li&gt;Haskell&lt;/li&gt;
&lt;li&gt;OCaml&lt;/li&gt;
&lt;li&gt;ATS&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;D&lt;/li&gt;
&lt;li&gt;Rust&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりかな？と思う。Common Lispはバイナリの扱いは案外いけるが流石に効率的な実装は難しい。ガチガチに型宣言つけていくくらいならそもそも静的型付けで型推論のある言語を使った方が良い。その意味ではHylasに期待したけど今はまだメンテナンス中。多分完成したら使う。&lt;/p&gt;

&lt;p&gt;Nimrodなる言語もあるらしいがあまり聞かないのでスルー。&lt;/p&gt;

&lt;p&gt;因みにこの中で自分が普通に書けるのはCとJava。OCamlもまあまあ。HaskellはRWH読んだっきりでアウトプットはしてない。C++とSMLはHello World + α程度。他はサンプルコード眺めてHello Worldしたかしてないかくらい。&lt;/p&gt;

&lt;h2 id=&#34;llvmアセンブラ&#34;&gt;LLVMアセンブラ&lt;/h2&gt;

&lt;p&gt;移植性のあるアセンブラ。アセンブラとは言ってもモジュールシステムもある、関数もある。一度学んでおくと便利な気はする。ただ、多少Cの呼び出しが面倒。メンテナンス性が悪そう。総合して悪くはない、程度かな。&lt;/p&gt;

&lt;h2 id=&#34;c&#34;&gt;C&lt;/h2&gt;

&lt;p&gt;Cの呼び出し易さにおいて他の追随を許さない言語。高級アセンブラの別名の通りマシン語も透けて見える。というか、書こうとしているDBMのプロトタイプはCで書かれている。だが、既にpicrinでCを書いているし、今回やりたいのとは違う気がするのでおやすみ。&lt;/p&gt;

&lt;h2 id=&#34;c-1&#34;&gt;C++&lt;/h2&gt;

&lt;p&gt;LLVM自体C++で書かれているしbetter Cな側面もあるし今回の目的に一番合致しそうな言語。ではあるんだけどあまり好きになれない。一度はやっておかなきゃいけないんだろうけど…。一旦保留で。&lt;/p&gt;

&lt;h2 id=&#34;java&#34;&gt;Java&lt;/h2&gt;

&lt;p&gt;安心と信頼のJava。30億のデバイスで走るJava。バイナリの扱いは上々だけど今回は使いたくない。理由は、必要上の理由ではなく論理的な理由でオブジェクトを作らなきゃいけない点。メモリ管理が出来ない点。ポインタを扱えない点。抽象性のための犠牲なんだろうけど今回は抽象性ではなく効率をとりたい。&lt;/p&gt;

&lt;p&gt;ただ、後で習作としてDBMをJavaで書き直すのはありかもしれない。JavaというかMirahだろうけど。&lt;/p&gt;

&lt;h2 id=&#34;sml&#34;&gt;SML&lt;/h2&gt;

&lt;p&gt;Standard ML。人工知能御三家のうち唯一静的型付けの言語。Haskellerがモナドモナドうるさい所為で隠れがちだがML系の言語は意外とバイナリの扱いも出来る気がする。記号処理に向いてるからとコンパイラを書こうとしたときにバイナリ扱えないと片手落ちだからかな。実際SML、OCaml、Haskellは全てセルフホストコンパイラがある。&lt;/p&gt;

&lt;p&gt;SMLの中でも今回検討してるのはSML#とMLton。どちらもCとの相互呼出がある。しかも1行書くだけ。だが複雑な構造体とかはどうしようね。&lt;/p&gt;

&lt;p&gt;SML#は分割コンパイルがあるしSML#自身LLVMバックエンドなのでLLVMバインディングもある。が、MLtonに比べて数倍遅く、まだ64bit対応もしてない。MLtonは速くて機能も豊富。だが分割コンパイルは無いっぽい？&lt;/p&gt;

&lt;p&gt;一応コンパイラはこれらのどちらかで書くかな、と考えている。&lt;/p&gt;

&lt;h2 id=&#34;haskell&#34;&gt;Haskell&lt;/h2&gt;

&lt;p&gt;ML系の言語の中では一番人気でライブラリ豊富。言語自体はすごい好きなんだけどコミュニティが初心者をモナドで殴りにいく印象が強いのであまり好きになれない。あと参考コードとしてGHCのコードは読む気にはなれない。SMLで書いててつらくなったらトライしてみるかな。その時は(a)jhcを使うのかな？&lt;/p&gt;

&lt;h2 id=&#34;ocaml&#34;&gt;OCaml&lt;/h2&gt;

&lt;p&gt;LLVMやるならOCamlらしい(?)。が、C書いててライブラリの豊富さに気付いてSML#やってCとの相互呼出に惹かれた身には少しもの足りなくなってきた。うーん。迷う。&lt;/p&gt;

&lt;h2 id=&#34;ats&#34;&gt;ATS&lt;/h2&gt;

&lt;p&gt;元Depenent ML。低レベルなことが出来るMLらしい。しかし一々証明しながらプログラム書く気はしない。もうちょっと情報が欲しい。&lt;/p&gt;

&lt;h2 id=&#34;go&#34;&gt;Go&lt;/h2&gt;

&lt;p&gt;最近中々の人気を見せるGo。一応コンパイルの速いシステム記述言語との触れ込みだがWeb系で多い気がする。なんとなーく自分のやりたいことと違う方向向いてる言語な気がする。Goで書かれたDBMもあるけど。Cとの連携はトリッキーだがヘッダからラッパ自動生成してくれるのは気に入った。DBM書く候補には入れとく&lt;/p&gt;

&lt;h2 id=&#34;d&#34;&gt;D&lt;/h2&gt;

&lt;p&gt;やりたいこと的には多分一番合ってる言語。でもネタ言語感が拭えないのがなんとも。あと思ったよりCの呼び出しが面倒だった。一応心には留めておく。&lt;/p&gt;

&lt;h2 id=&#34;rust&#34;&gt;Rust&lt;/h2&gt;

&lt;p&gt;まだまだ未熟な印象な言語。だがMozillaが本気で作ってるっぽいので期待も出来そう。メモリ管理も自分でやらせてくれるみたいだしDBMはこれでいこうかなと思ってる。でもCとの連携はつらそう。うーん。メモリモデルの関係上ヘッダから自動生成は出来ないのは分かるんだけどどうにかならんのですかね。&lt;/p&gt;

&lt;p&gt;まあ、これだけつらつら書いておいてもCIMもpicrinもcl21も面倒看なきゃいけないしcl21-datacollectionsも復活させないといけないしちゃんと出来るんですかね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近況</title>
      <link>/blog/2014/07/13/jin-kuang</link>
      <pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/07/13/jin-kuang</guid>
      <description>&lt;p&gt;κeenです。書く書くいってた近況です。思ったよりあります。
&lt;/p&gt;

&lt;h1 id=&#34;5月&#34;&gt;5月&lt;/h1&gt;

&lt;h2 id=&#34;関数型言語lt大会-http-connpass-com-event-5795-でltしてきた&#34;&gt;&lt;a href=&#34;http://connpass.com/event/5795/&#34;&gt;関数型言語LT大会&lt;/a&gt;でLTしてきた&lt;/h2&gt;

&lt;p&gt;みんなすごいH本を読み終わったくらいの実力の人達かなって思ってゆるめに準備していったらプロばっかで爆死しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;発表スライド&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/34529429&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/blackenedgold/functional-lt&#34; title=&#34;(define)なしで再帰関数を定義する&#34; target=&#34;_blank&#34;&gt;(define)なしで再帰関数を定義する&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/blackenedgold&#34; target=&#34;_blank&#34;&gt;blackenedgold&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/667778&#34;&gt;togetter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因みにここで初めて@wasabiz氏と面会しました。&lt;/p&gt;

&lt;h2 id=&#34;picrin-https-github-com-wazabiz-picrin-にコミットを始める&#34;&gt;&lt;a href=&#34;https://github.com/wazabiz/picrin&#34;&gt;picrin&lt;/a&gt;にコミットを始める&lt;/h2&gt;

&lt;p&gt;wasabiz氏に会ってからC言語の勉強がてらpicrinのソースでも読んでみるかってなって紆余曲折あってコミットしはじめました。&lt;/p&gt;

&lt;p&gt;主には&lt;a href=&#34;https://code.google.com/p/chibi-scheme/&#34;&gt;chibi scheme&lt;/a&gt; のテストケースのインポートとそれによって判明したバグフィクスあたりですね。あとは最近ようやく&lt;a href=&#34;https://gmplib.org/&#34;&gt;GMP&lt;/a&gt;と&lt;a href=&#34;http://www.mpfr.org/&#34;&gt;MPFR&lt;/a&gt; のポートが動いたのでプルリク投げました。今は山葵寿司からレビューを受けて直す作業ですね。&lt;/p&gt;

&lt;h2 id=&#34;lisp-meet-up-17-http-atnd-org-events-50865-に参加した&#34;&gt;&lt;a href=&#34;http://atnd.org/events/50865&#34;&gt;Lisp Meet Up #17&lt;/a&gt;に参加した&lt;/h2&gt;

&lt;p&gt;Scheme回なのに人も発表も多かったので私はLTは控えました。実際時間ギリギリまでLTやってましたし。レポートは&lt;a href=&#34;http://shibuya.lisp-users.org/&#34;&gt;公式ページ&lt;/a&gt;に上ってます。&lt;/p&gt;

&lt;p&gt;処理系の話が複数聞けたのは有益でしたね。&lt;/p&gt;

&lt;h1 id=&#34;6月&#34;&gt;6月&lt;/h1&gt;

&lt;h2 id=&#34;shibuya-lisp-http-shibuya-lisp-users-org-の運営になった&#34;&gt;&lt;a href=&#34;http://shibuya.lisp-users.org/&#34;&gt;Shibuya.lisp&lt;/a&gt;の運営になった&lt;/h2&gt;

&lt;p&gt;毎回参加してたら声かかりました。動画周りの担当です。頑張ります。&lt;/p&gt;

&lt;h2 id=&#34;天下一altjs武闘大会-http-connpass-com-event-6402-でltしてきた&#34;&gt;&lt;a href=&#34;http://connpass.com/event/6402/&#34;&gt;天下一altJS武闘大会&lt;/a&gt;でLTしてきた&lt;/h2&gt;

&lt;p&gt;今回は#functionalLTで爆死した反省からLispを前面に押し出しました。発表もEmacs上で行なったり。その結果「最高に怖い」なんて言われてたのでまあ、成功だったんじゃないですかね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/KeenS/f3deeca6295d7454cb17&#34;&gt;発表資料スライド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/sshi-deshu-kualtjs.html&#34;&gt;スライドをreveal.jsに変換したもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/678010&#34;&gt;togetter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因みに&lt;a href=&#34;http://atnd.org/events/52355&#34;&gt;Lisp Meet Up #18&lt;/a&gt;はサークルの用事で逃しました&lt;/p&gt;

&lt;h1 id=&#34;7月&#34;&gt;7月&lt;/h1&gt;

&lt;p&gt;進捗ダメです。このブログに&lt;a href=&#34;/slide/&#34;&gt;スライドページ&lt;/a&gt;つけたりしました。reveal.jsです。&lt;/p&gt;

&lt;p&gt;いちおうOctopressのプラグイン的な感じなってはいるんですが、レイアウトやインクルードファイルも追加してて面倒なので公開してません。このブログのテーマ(cleanpress)以外で動くかも分かりませんし。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>