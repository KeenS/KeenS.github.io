<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>番外編 on κeenのHappy Hacκing Blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/categories/E795AAE5A496E7B7A8/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Thu, 18 Sep 2014 00:00:00 UTC</updated>
    
    <item>
      <title>低レベルなことがしたい</title>
      <link>http://localhost:1313/blog/2014/09/18/low-level-languages</link>
      <pubDate>Thu, 18 Sep 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2014/09/18/low-level-languages</guid>
      <description>

&lt;p&gt;低レベルなことがしたい。もうちょっと具体的に言うと、DBMを書きたい。コンパイラを書きたい。ただ動くだけじゃなくて効率的な実装がしたい。CPUの歓声が聞きたい。そのためにもバイナリを簡単に扱える言語が良い。マシン語が透けて見える言語が良い。いっそインラインアセンブラが欲しい。システムコールがスムーズに出来る(≒ C をスムーズに呼べる)言語が良い。どんな言語が適任か。&lt;/p&gt;

&lt;p&gt;因みにコンパイラはLLVMをバックエンドに使う予定。何の言語のコンパイラかは決めてない。SMLのサブセットかmini Camlかその辺？&lt;/p&gt;

&lt;p&gt;まず考えられるのはダイレクトにマシン語が見えるアセンブラ。でも移植性が無いからボツ。じゃあ他には？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LLVMアセンブラ&lt;/li&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;SML&lt;/li&gt;
&lt;li&gt;Haskell&lt;/li&gt;
&lt;li&gt;OCaml&lt;/li&gt;
&lt;li&gt;ATS&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;D&lt;/li&gt;
&lt;li&gt;Rust&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりかな？と思う。Common Lispはバイナリの扱いは案外いけるが流石に効率的な実装は難しい。ガチガチに型宣言つけていくくらいならそもそも静的型付けで型推論のある言語を使った方が良い。その意味ではHylasに期待したけど今はまだメンテナンス中。多分完成したら使う。&lt;/p&gt;

&lt;p&gt;Nimrodなる言語もあるらしいがあまり聞かないのでスルー。&lt;/p&gt;

&lt;p&gt;因みにこの中で自分が普通に書けるのはCとJava。OCamlもまあまあ。HaskellはRWH読んだっきりでアウトプットはしてない。C++とSMLはHello World + α程度。他はサンプルコード眺めてHello Worldしたかしてないかくらい。&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;LLVMアセンブラ&lt;/h2&gt;

&lt;p&gt;移植性のあるアセンブラ。アセンブラとは言ってもモジュールシステムもある、関数もある。一度学んでおくと便利な気はする。ただ、多少Cの呼び出しが面倒。メンテナンス性が悪そう。総合して悪くはない、程度かな。&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;C&lt;/h2&gt;

&lt;p&gt;Cの呼び出し易さにおいて他の追随を許さない言語。高級アセンブラの別名の通りマシン語も透けて見える。というか、書こうとしているDBMのプロトタイプはCで書かれている。だが、既にpicrinでCを書いているし、今回やりたいのとは違う気がするのでおやすみ。&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;C++&lt;/h2&gt;

&lt;p&gt;LLVM自体C++で書かれているしbetter Cな側面もあるし今回の目的に一番合致しそうな言語。ではあるんだけどあまり好きになれない。一度はやっておかなきゃいけないんだろうけど…。一旦保留で。&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Java&lt;/h2&gt;

&lt;p&gt;安心と信頼のJava。30億のデバイスで走るJava。バイナリの扱いは上々だけど今回は使いたくない。理由は、必要上の理由ではなく論理的な理由でオブジェクトを作らなきゃいけない点。メモリ管理が出来ない点。ポインタを扱えない点。抽象性のための犠牲なんだろうけど今回は抽象性ではなく効率をとりたい。&lt;/p&gt;

&lt;p&gt;ただ、後で習作としてDBMをJavaで書き直すのはありかもしれない。JavaというかMirahだろうけど。&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;SML&lt;/h2&gt;

&lt;p&gt;Standard ML。人工知能御三家のうち唯一静的型付けの言語。Haskellerがモナドモナドうるさい所為で隠れがちだがML系の言語は意外とバイナリの扱いも出来る気がする。記号処理に向いてるからとコンパイラを書こうとしたときにバイナリ扱えないと片手落ちだからかな。実際SML、OCaml、Haskellは全てセルフホストコンパイラがある。&lt;/p&gt;

&lt;p&gt;SMLの中でも今回検討してるのはSML#とMLton。どちらもCとの相互呼出がある。しかも1行書くだけ。だが複雑な構造体とかはどうしようね。&lt;/p&gt;

&lt;p&gt;SML#は分割コンパイルがあるしSML#自身LLVMバックエンドなのでLLVMバインディングもある。が、MLtonに比べて数倍遅く、まだ64bit対応もしてない。MLtonは速くて機能も豊富。だが分割コンパイルは無いっぽい？&lt;/p&gt;

&lt;p&gt;一応コンパイラはこれらのどちらかで書くかな、と考えている。&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Haskell&lt;/h2&gt;

&lt;p&gt;ML系の言語の中では一番人気でライブラリ豊富。言語自体はすごい好きなんだけどコミュニティが初心者をモナドで殴りにいく印象が強いのであまり好きになれない。あと参考コードとしてGHCのコードは読む気にはなれない。SMLで書いててつらくなったらトライしてみるかな。その時は(a)jhcを使うのかな？&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;OCaml&lt;/h2&gt;

&lt;p&gt;LLVMやるならOCamlらしい(?)。が、C書いててライブラリの豊富さに気付いてSML#やってCとの相互呼出に惹かれた身には少しもの足りなくなってきた。うーん。迷う。&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;ATS&lt;/h2&gt;

&lt;p&gt;元Depenent ML。低レベルなことが出来るMLらしい。しかし一々証明しながらプログラム書く気はしない。もうちょっと情報が欲しい。&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Go&lt;/h2&gt;

&lt;p&gt;最近中々の人気を見せるGo。一応コンパイルの速いシステム記述言語との触れ込みだがWeb系で多い気がする。なんとなーく自分のやりたいことと違う方向向いてる言語な気がする。Goで書かれたDBMもあるけど。Cとの連携はトリッキーだがヘッダからラッパ自動生成してくれるのは気に入った。DBM書く候補には入れとく&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;D&lt;/h2&gt;

&lt;p&gt;やりたいこと的には多分一番合ってる言語。でもネタ言語感が拭えないのがなんとも。あと思ったよりCの呼び出しが面倒だった。一応心には留めておく。&lt;/p&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;Rust&lt;/h2&gt;

&lt;p&gt;まだまだ未熟な印象な言語。だがMozillaが本気で作ってるっぽいので期待も出来そう。メモリ管理も自分でやらせてくれるみたいだしDBMはこれでいこうかなと思ってる。でもCとの連携はつらそう。うーん。メモリモデルの関係上ヘッダから自動生成は出来ないのは分かるんだけどどうにかならんのですかね。&lt;/p&gt;

&lt;p&gt;まあ、これだけつらつら書いておいてもCIMもpicrinもcl21も面倒看なきゃいけないしcl21-datacollectionsも復活させないといけないしちゃんと出来るんですかね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>近況</title>
      <link>http://localhost:1313/blog/2014/07/13/jin-kuang</link>
      <pubDate>Sun, 13 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2014/07/13/jin-kuang</guid>
      <description>

&lt;p&gt;κeenです。書く書くいってた近況です。思ったよりあります。&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;5月&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;&lt;a href=&#34;http://connpass.com/event/5795/&#34;&gt;関数型言語LT大会&lt;/a&gt;でLTしてきた&lt;/h2&gt;

&lt;p&gt;みんなすごいH本を読み終わったくらいの実力の人達かなって思ってゆるめに準備していったらプロばっかで爆死しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;発表スライド&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/34529429&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/blackenedgold/functional-lt&#34; title=&#34;(define)なしで再帰関数を定義する&#34; target=&#34;_blank&#34;&gt;(define)なしで再帰関数を定義する&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/blackenedgold&#34; target=&#34;_blank&#34;&gt;blackenedgold&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/667778&#34;&gt;togetter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因みにここで初めて@wasabiz氏と面会しました。&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;&lt;a href=&#34;https://github.com/wazabiz/picrin&#34;&gt;picrin&lt;/a&gt;にコミットを始める&lt;/h2&gt;

&lt;p&gt;wasabiz氏に会ってからC言語の勉強がてらpicrinのソースでも読んでみるかってなって紆余曲折あってコミットしはじめました。&lt;/p&gt;

&lt;p&gt;主には&lt;a href=&#34;https://code.google.com/p/chibi-scheme/&#34;&gt;chibi scheme&lt;/a&gt; のテストケースのインポートとそれによって判明したバグフィクスあたりですね。あとは最近ようやく&lt;a href=&#34;https://gmplib.org/&#34;&gt;GMP&lt;/a&gt;と&lt;a href=&#34;http://www.mpfr.org/&#34;&gt;MPFR&lt;/a&gt; のポートが動いたのでプルリク投げました。今は山葵寿司からレビューを受けて直す作業ですね。&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;&lt;a href=&#34;http://atnd.org/events/50865&#34;&gt;Lisp Meet Up #17&lt;/a&gt;に参加した&lt;/h2&gt;

&lt;p&gt;Scheme回なのに人も発表も多かったので私はLTは控えました。実際時間ギリギリまでLTやってましたし。レポートは&lt;a href=&#34;http://shibuya.lisp-users.org/&#34;&gt;公式ページ&lt;/a&gt;に上ってます。&lt;/p&gt;

&lt;p&gt;処理系の話が複数聞けたのは有益でしたね。&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;6月&lt;/h1&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;&lt;a href=&#34;http://shibuya.lisp-users.org/&#34;&gt;Shibuya.lisp&lt;/a&gt;の運営になった&lt;/h2&gt;

&lt;p&gt;毎回参加してたら声かかりました。動画周りの担当です。頑張ります。&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;&lt;a href=&#34;http://connpass.com/event/6402/&#34;&gt;天下一altJS武闘大会&lt;/a&gt;でLTしてきた&lt;/h2&gt;

&lt;p&gt;今回は#functionalLTで爆死した反省からLispを前面に押し出しました。発表もEmacs上で行なったり。その結果「最高に怖い」なんて言われてたのでまあ、成功だったんじゃないですかね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/KeenS/f3deeca6295d7454cb17&#34;&gt;発表資料スライド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/slide/sshi-deshu-kualtjs.html&#34;&gt;スライドをreveal.jsに変換したもの&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://togetter.com/li/678010&#34;&gt;togetter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因みに&lt;a href=&#34;http://atnd.org/events/52355&#34;&gt;Lisp Meet Up #18&lt;/a&gt;はサークルの用事で逃しました&lt;/p&gt;

&lt;h1 id=&#34;toc_7&#34;&gt;7月&lt;/h1&gt;

&lt;p&gt;進捗ダメです。このブログに&lt;a href=&#34;/slide/&#34;&gt;スライドページ&lt;/a&gt;つけたりしました。reveal.jsです。&lt;/p&gt;

&lt;p&gt;いちおうOctopressのプラグイン的な感じなってはいるんですが、レイアウトやインクルードファイルも追加してて面倒なので公開してません。このブログのテーマ(cleanpress)以外で動くかも分かりませんし。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>