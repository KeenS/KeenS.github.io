<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>κeenのHappy Hacκing Blog</title>
    <link>/categories/clack/index.xml</link>
    <description>Recent content on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="/categories/clack/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ClackのHandlerの書き方</title>
      <link>/blog/2013/12/06/lisp-advent-calendar-7</link>
      <pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/12/06/lisp-advent-calendar-7</guid>
      <description>&lt;p&gt;(この記事は &lt;a href=&#34;http://qiita.com/advent-calendar/2013/lisp&#34;&gt;Lisp Advent Calendar&lt;/a&gt; 7日目のためのエントリです。&lt;br /&gt;
 ( &lt;a href=&#34;http://meymao.hatenablog.com/entry/2013/12/06/140029&#34;&gt;6日目&lt;/a&gt; meymaoさんより「Lisperがクリスマスに贈るべきプレゼント三選」)&lt;br /&gt;
 ( &lt;a href=&#34;http://www.principia-m.com/ts/0081/index-jp.html&#34;&gt;8日目&lt;/a&gt; athos0220さんよりマクロとクロージャで作る並行プログラミング言語))&lt;/p&gt;

&lt;p&gt;ClackのHandlerの書き方についてちゃちゃっと解説します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;さっくりゆるふわな感じで行くので &lt;a href=&#34;http://clacklisp.org/&#34;&gt;clack公式&lt;/a&gt;だとか &lt;a href=&#34;http://clacklisp.org/tutorial/ja/&#34;&gt;チュートリアル&lt;/a&gt;だとかも参考にして下さい。とは言ってもCommon Lispな方なら知ってるでしょう。&lt;/p&gt;

&lt;h2 id=&#34;clackって&#34;&gt;Clackって？&lt;/h2&gt;

&lt;p&gt;PerlのPlackやRubyのRackと同じくCommon Lispの統一HTTPサーバーインターフェースです。開発時はHunchentootで、本番はFastCGIでみたいなことが簡単にできます。&lt;/p&gt;

&lt;h2 id=&#34;handlerって&#34;&gt;Handlerって？&lt;/h2&gt;

&lt;p&gt;HunchentootやFastCGIといったバックエンドとClackとの間でリクエストやレスポンスの受け渡しを担当します。さっくり言うとHandlerを書けばClackで使えるサーバーが増える訳です。今(2013-12現在)のところ、Hunchentoot、FastCGI、Apache + mod_lisp2があるようです。&lt;/p&gt;

&lt;p&gt;じゃあ、実際に軽量サーバーの &lt;a href=&#34;https://github.com/gigamonkey/toot&#34;&gt;toot&lt;/a&gt;のハンドラを書きながら解説しますね&lt;/p&gt;

&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git clone git@github.com:fukamachi/clack.git&lt;/code&gt;してclackのソースコードを持ってきます。他のHanderがそうしてるようなので&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clack/clack-handler-toot.asd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clack/src/core/handler/toot.lisp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を作ります。&lt;code&gt;core&lt;/code&gt;じゃなくて&lt;code&gt;contrib&lt;/code&gt;だろとかそもそも自分のリポジトリに作れよとかは自由にやって下さい。&lt;code&gt;clack/clack-handler-toot.asd&lt;/code&gt;は適当に似た名前のやつをコピーすれば良いんじゃないですかね？（適当&lt;/p&gt;

&lt;h2 id=&#34;書き方&#34;&gt;書き方&lt;/h2&gt;

&lt;p&gt;いたって簡単で、&lt;code&gt;run (app &amp;amp;key debug (port 5000)) -&amp;gt; acceptor&lt;/code&gt;と&lt;code&gt;stop (acceptor) -&amp;gt; 多分決まってない&lt;/code&gt;を実装すれば良いです。&lt;/p&gt;

&lt;p&gt;とはいっても&lt;code&gt;stop&lt;/code&gt;は1行で終わりますが&lt;code&gt;run&lt;/code&gt;は大きく分けて&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;. サーバーを立ち上げる&lt;/li&gt;
&lt;li&gt;. サーバーから渡されたリクエスト(多くの場合&lt;code&gt;request&lt;/code&gt;オブジェクト)をplistにして&lt;code&gt;app&lt;/code&gt;に渡す&lt;/li&gt;
&lt;li&gt;. &lt;code&gt;app&lt;/code&gt;のlist形式の返値を適切な形(多くの場合&lt;code&gt;response&lt;/code&gt;オブジェクト)にしてサーバーに返す&lt;/li&gt;
&lt;li&gt;. エラーハンドリング&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;の4つの作業があります。一つ一つ説明していきますね。&lt;/p&gt;

&lt;h3 id=&#34;1-サーバーを立ち上げる&#34;&gt;1 サーバーを立ち上げる&lt;/h3&gt;

&lt;p&gt;tootの場合は&lt;code&gt;toot:start-server (&amp;amp;key handler port)&lt;/code&gt;を使いました。スレッド立てるのはclackがやってくれます。はい。&lt;/p&gt;

&lt;h3 id=&#34;2-サーバー渡されたリクエスト-多くの場合-request-オブジェクト-をplistにして-app-に渡す&#34;&gt;2 サーバー渡されたリクエスト(多くの場合&lt;code&gt;request&lt;/code&gt;オブジェクト)をplistにして&lt;code&gt;app&lt;/code&gt;に渡す&lt;/h3&gt;

&lt;p&gt;tootの場合、&lt;code&gt;key&lt;/code&gt;の&lt;code&gt;handler&lt;/code&gt;が&lt;code&gt;requesut&lt;/code&gt;オブジェクトを受け取って&lt;code&gt;response&lt;/code&gt;オブジェクトを返せば良いので&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lambda (req)
    .....
    (call app (handle-request req))
    .....
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;って感じで&lt;code&gt;handle-request&lt;/code&gt;に実装を書きます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;handle-request&lt;/code&gt;の内部は&lt;code&gt;req&lt;/code&gt;を &lt;a href=&#34;http://clacklisp.org/tutorial/ja/04-the-environment.html&#34;&gt;clack公式のチュートリアル&lt;/a&gt;に載っているプロパティに一つ一つ変換していきます。このプロパティとバックエンドのオブジェクトのスロット名と実際のHTTPヘッダの名前が必ずしも一致しないのが泣き所です。さらに、大抵のサーバーの場合リクエストオブジェクトのスロットの詳細まではドキュメントに載ってないのでソースを参照しながら書くことになります。また、そもそも対応する値が無くて、他の情報を切り貼りして作らないといけなかったり、どうしようもなくて空にしないといけないこともあります。&lt;/p&gt;

&lt;p&gt;tootハンドラは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defun handle-request (req)
  &amp;quot;Convert Request from server into a plist
before pass to Clack application.&amp;quot;
  (let ((content-length (and (request-header :content-length req)
                             (parse-integer (request-header :content-length req) :junk-allowed t)))
    (port-and-host (get-port-and-host req)))
    (append
     (list
      :request-method (request-method req)
      :script-name &amp;quot;&amp;quot;
      :path-info (url-decode (request-path req))
      :server-name (car port-and-host)
      :server-port (cdr port-and-host)
      :server-protocol (server-protocol req)
      :request-uri (request-uri req)
      :url-scheme :HTTP;(request-scheme req)
      :remote-addr (remote-addr req)
      :remote-port (remote-port req)
      :query-string (request-query req)
      :content-length content-length
      :content-type (request-header :content-type req)
      :raw-body (let ((stream (toot::request-body-stream req)))
                  ;(when content-length
                    ;(setf (flex:flexi-stream-bound stream) content-length))
                  stream)
      :clack.uploads nil
      :clack.handler :toot)


     (loop for (k . v) in (toot::request-headers req)
           unless (find k &#39;(:request-method :script-name :path-info :server-name :server-port :server-protocol :request-uri :remote-addr :remote-port :query-string :content-length :content-type :accept :connection))
             append (list (intern (format nil &amp;quot;HTTP-~:@(~A~)&amp;quot; k) :keyword)
                          v)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じに実装されてます。tootからインポートしたものの他、一部ヘルパー関数も使ってますが挙動はまあ、名前から察して下さい。&lt;/p&gt;

&lt;h3 id=&#34;3-app-の返値のplistを適切な形-多くの場合-response-オブジェクト-にしてサーバーに返す&#34;&gt;3 &lt;code&gt;app&lt;/code&gt;の返値のplistを適切な形(多くの場合&lt;code&gt;response&lt;/code&gt;オブジェクト)にしてサーバーに返す&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;app&lt;/code&gt;を&lt;code&gt;call&lt;/code&gt;してやると&lt;code&gt;(status headers body)&lt;/code&gt;という形式のlistが返ってきます。&lt;code&gt;status&lt;/code&gt;は数値、&lt;code&gt;headers&lt;/code&gt;はplist、&lt;code&gt;body&lt;/code&gt;はパスネーム又は文字列のリストです。&lt;/p&gt;

&lt;p&gt;さっきはこんな感じで呼んだのでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lambda (req)
    .....
    (call app (handle-request req))
    .....
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もうお分かりかと思いますが&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lambda (req)
    (handle-response
        (call app (handle-request req)))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として、実装は&lt;code&gt;handle-response&lt;/code&gt;に書きます。…が、tootは&lt;code&gt;response&lt;/code&gt;オブジェクトではなく&lt;code&gt;request&lt;/code&gt;オブジェクトに変更を加えたものを返すようなので&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lambda (req)
    (handle-response
        req
        (call app (handle-request req)))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として、&lt;code&gt;app&lt;/code&gt;の返値を元に&lt;code&gt;req&lt;/code&gt;を書き換えます。こちらもあまりドキュメントが無いので頑張ってソース読むしかないです。因みに&lt;code&gt;body&lt;/code&gt;はパスネームならそのファイルの内容を、文字列のリストならそれぞれを改行(&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;ではなく&lt;code&gt;\n&lt;/code&gt;)で連結したものを返す必要があります。&lt;/p&gt;

&lt;p&gt;tootハンドラの実装載せときますね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defun handle-response (req res)
  (destructuring-bind (status headers body) res
    (etypecase body
      (pathname
       (multiple-value-call #&#39;serve-file
     (values req body (parse-charset (getf headers :content-type)))))
      (list
       ;; XXX: almost same as Clack.Handler.Hunchentoot&#39;s one.
       (setf (status-code req) status)
       (loop for (k v) on headers by #&#39;cddr
             with hash = (make-hash-table :test #&#39;eq)
             if (gethash k hash)
               do (setf (gethash k hash)
                        (format nil &amp;quot;~:[~;~:*~A, ~]~A&amp;quot; (gethash k hash) v))
             else if (eq k :content-type)
               do (multiple-value-bind (v charset)
                      (parse-charset v)
                    (setf (gethash k hash) v)
                    (setf (toot::response-charset req) charset))
             else do (setf (gethash k hash) v)
             finally
          (loop for k being the hash-keys in hash
                using (hash-value v)
                do (setf (response-header k req) v)))
       (toot::send-response req (with-output-to-string (s)
      (format s &amp;quot;~{~A~^~%~}&amp;quot; body)))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(destructuring-bind (status headers body) res
  (etypecase body
    (pathname ...)
    (list ...)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;がテンプレートですね。&lt;code&gt;pathname&lt;/code&gt;のときはtootに丸投げして&lt;code&gt;list&lt;/code&gt;のときは&lt;code&gt;headers&lt;/code&gt;とかを真面目に処理してます。&lt;/p&gt;

&lt;h3 id=&#34;4-エラーハンドリング&#34;&gt;4 エラーハンドリング&lt;/h3&gt;

&lt;p&gt;早い話が500 internal server errorです。普通、Lispはエラーが起きるとデバッガに落ちますがサーバーは走り続ける必要がるのであらゆるエラーを無視する必要があります。が、しかしデバッグするとき(&lt;code&gt;run&lt;/code&gt;のキーワード引数に&lt;code&gt;debug&lt;/code&gt;がありましたね)はデバッガに落ちると嬉しいです。なので例のラムダを少し変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lambda (req)
              (handle-response
               req
               (if debug (call app (handle-request req))
           (aif (handler-case (call app (handle-request req))
              (condition () nil))
            it
            &#39;(500 nil nil)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで完成です。&lt;/p&gt;

&lt;h2 id=&#34;テスト&#34;&gt;テスト&lt;/h2&gt;

&lt;p&gt;Clackにはテストが付いてます。テストケース自体は&lt;code&gt;clack/src/core/test/suite.lisp&lt;/code&gt;に書かれてます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;clack/t/core/handler/hunchentoot.lisp&lt;/code&gt;を参考に&lt;code&gt;clack/t/core/handler/toot.lisp&lt;/code&gt;を作り、&lt;code&gt;clack/clack-test.asd&lt;/code&gt;の&lt;code&gt;hunchentoot&lt;/code&gt;を&lt;code&gt;toot&lt;/code&gt;に書き換えたら準備完了です。&lt;code&gt;(ql:quickload :clack-test)&lt;/code&gt;しましょう。テストが走ります。そして恐らくエラーが出て止まるでしょう。変な値を返すとサーバーじゃなくてテストの方がエラーで死ぬんですね。&lt;/p&gt;

&lt;p&gt;そしたら&lt;code&gt;clack/src/core/test/suite.lisp&lt;/code&gt;を開いて期待された値がなんだったかを調べてサーバーを修正します。で、また&lt;code&gt;(ql:quickload :clack-test)&lt;/code&gt;の繰り返し。でも一回&lt;code&gt;quickload&lt;/code&gt;しちゃうと読み直してくれないので私は一々&lt;code&gt;M-x slime-restart-inferior-lisp&lt;/code&gt;してました。なんか違う気がする。これだけじゃなくてテスト全般。溢れるバッドノウハウ感。&lt;/p&gt;

&lt;p&gt;とりあえずバックエンドにバグがあるとかのどうしようもない場合を除いてテストに全部合格すれば完成です&lt;/p&gt;

&lt;h2 id=&#34;完成したら&#34;&gt;完成したら&lt;/h2&gt;

&lt;p&gt;どうしたらいいんでしょうね。分かんないです。clackにpull-req送るんでしょうか。あるいはquicklispに登録?私はとりあえず &lt;a href=&#34;https://github.com/KeenS/clack&#34;&gt;ブランチに置いてます&lt;/a&gt;が恐らく誰も使ってないですし知らないと思います。&lt;/p&gt;

&lt;h2 id=&#34;で-何作ればいい&#34;&gt;で、何作ればいい？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/fukamachi/clack/issues?state=open&#34;&gt;clackのissue&lt;/a&gt;にまだ作られてないものがリストされてます。「自分では需要はないけどなんか作ってみたい」といった奇特な方はそこから試すと良いんじゃないでしょうか。GAEとかmongrel2とか需要ありそうな気がします。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;誰得&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>