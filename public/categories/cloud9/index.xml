<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>κeenのHappy Hacκing Blog</title>
    <link>/categories/cloud9/index.xml</link>
    <description>Recent content on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="/categories/cloud9/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cloud9の紹介とLispのセットアップ</title>
      <link>/blog/2014/08/02/introduction-to-cloud9</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/08/02/introduction-to-cloud9</guid>
      <description>&lt;p&gt;κeenです。先日のLisp Meet Upで紹介した&lt;a href=&#34;https://c9.io&#34;&gt;Cloud9&lt;/a&gt;の詳解でも書きます。まあ、そんなに詳しくないんですけどね。
&lt;/p&gt;

&lt;h1 id=&#34;cloud9について&#34;&gt;Cloud9について&lt;/h1&gt;

&lt;p&gt;先日のスライドを見てない方はまず見て下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/slide/cloud-9.html&#34;&gt;Cloud 9の紹介 | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公式の詳解ムービー(en)もあります。まあ、一般的なIDEの機能は一通り揃ってるようです。git連携とかも。
&lt;a href=&#34;https://www.youtube.com/user/c9ide/videos?flow=grid&amp;amp;view=1&#34;&gt;CloudNine Ide - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;スライドでバックエンドは一人一つDockerが与えられるって書きましたが自分のVMをバックエンドにも出来るようです。&lt;/p&gt;

&lt;p&gt;省略しましたが他のユーザーとの連携機能も多数あって、チャットだとかワークスペースの共有だとかソーシャルコーディング関連も多数機能があります。全社導入の折には役立つ機能なんじゃないでしょうか。&lt;/p&gt;

&lt;p&gt;ローカルファイルをアップロードしたり逆にローカルにダウンロードとかも出来るようです。&lt;/p&gt;

&lt;p&gt;尚、IDE本体は&lt;a href=&#34;https://github.com/ajaxorg/ace&#34;&gt;ACEという名前でオープンソースで開発されてる&lt;/a&gt;のでプラグインとかのドキュメントはそっちもあたると良いようです。&lt;/p&gt;

&lt;h1 id=&#34;cloud9事始め&#34;&gt;Cloud9事始め&lt;/h1&gt;

&lt;p&gt;スクショとかは適当にスライドを参照して下さい(手抜き)&lt;/p&gt;

&lt;h2 id=&#34;アカウントを作る&#34;&gt;アカウントを作る&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://c9.io&#34;&gt;c9.io&lt;/a&gt;にアクセスしてGithubかBitbucketのアカウントでログイン出来ます(以後、Githubでログインしたものとします。Bitbucketの方は適宜読み替えて下さい)。Cloud9で書いたコードをHerokuやらなんやらに直接上げるつもりなら普通にCloud9アカウント作っても良いと思いますが、多くの場合どちらかとの連携を使うと思うので素直にGithubでログインしましょう。&lt;/p&gt;

&lt;p&gt;ログインしたらダッシュボードに飛ばされます。demo-projectと自分のGithubのプロジェクトがサイドバーにある筈です。&lt;/p&gt;

&lt;h2 id=&#34;細かな設定&#34;&gt;細かな設定&lt;/h2&gt;

&lt;p&gt;demo-projectでも開きましょうか。demo-projectを選択してstart editingです。&lt;/p&gt;

&lt;p&gt;IDEというかEditorの設定が出てくる筈です(多分)。キーバインディングとかタブ幅とか設定しましょう。そして、&lt;code&gt;C-h&lt;/code&gt;で&lt;code&gt;backward-delete-char&lt;/code&gt;出来ないと死んでしまう方のための設定はこちらです。Preferencesのkeybindingsのedit your keymap fileからkeymap fileに飛んで、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {&amp;quot;command&amp;quot;: &amp;quot;backspace&amp;quot;, &amp;quot;keys&amp;quot;:[&amp;quot;Ctrl-H&amp;quot;, &amp;quot;Backspace&amp;quot;]},
    {&amp;quot;command&amp;quot;: &amp;quot;replace&amp;quot;, &amp;quot;keys&amp;quot;:[&amp;quot;Alt-Shift-5&amp;quot;]}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と編集、保存しましょう。どうも、キーにコマンドを割り当てるのではなく、コマンドにキーを割り当ててる(?)っぽいのでCtrl-Hを持ってる&lt;code&gt;replace&lt;/code&gt;を別のキーにしないと動かないようでした。尚、これはファイルをいじらなくてもsearch keybindingsのところから目的のコマンドを捜して、keystrokeのところをクリックして、割り当てたいキーストロークをすれば割り当て出来るようです。その際、自分のkeymap fileも対応して書き変わります。&lt;/p&gt;

&lt;h2 id=&#34;common-lispのセットアップ&#34;&gt;Common Lispのセットアップ&lt;/h2&gt;

&lt;p&gt;処理系のインストールはいくつか方法があります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;apt-get&lt;/code&gt;で入れる&lt;/li&gt;
&lt;li&gt;バイナリを落してくる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KeenS/CIM&#34;&gt;CIM&lt;/a&gt;を使う&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;のいずれかの方法で処理系を入れて下さい。&lt;code&gt;apt-get&lt;/code&gt;で入れる場合はかなり古いバージョンが入ります。CIMで入れる場合は&lt;code&gt;sudo apt-get install time&lt;/code&gt;しておかないとSBCLのビルドが出来ませんでした。他の処理系は確認してないです。どの処理系でも良いんですがとりあえずSBCLを入れたってことで話進めますね。私がそれしか確認してないので。&lt;/p&gt;

&lt;p&gt;また、便利のためrlwrapを入れましょう。&lt;code&gt;sudo apt-get install rlwrap&lt;/code&gt;です。&lt;/p&gt;

&lt;p&gt;そこまでいったらrun scriptを作りましょう。上のメニューバーから[Run]&amp;gt;[Run With]&amp;gt;[New Runner]と進みます。で、run scriptの内容はどの方法で処理系を入れたかに依るのですが、&lt;/p&gt;

&lt;p&gt;1の場合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;cmd&amp;quot; : [&amp;quot;sudo&amp;quot;, &amp;quot;rlwrap&amp;quot;, &amp;quot;sbcl&amp;quot;, &amp;quot;--load&amp;quot;, &amp;quot;$file&amp;quot;, &amp;quot;$args&amp;quot;],
    &amp;quot;info&amp;quot; : &amp;quot;Started SBCL :: $project_path$file_name&amp;quot;,
    &amp;quot;env&amp;quot; : {},
    &amp;quot;selector&amp;quot; : &amp;quot;source.ext&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だそうです(&lt;a href=&#34;http://cjelupton.wordpress.com/2014/07/24/hacking-lisp-in-the-cloud-pt-3/&#34;&gt;引用元&lt;/a&gt;)。&lt;code&gt;sudo&lt;/code&gt;がついてるのはWEBアプリの場合0.0.0.0で待つためにroot権限が必要だからかな？&lt;/p&gt;

&lt;p&gt;これは実行した後でREPLに入ってデバッガとか扱う感じの設定ですね。&lt;br /&gt;
単に実行したいだけののきは&lt;code&gt;--load&lt;/code&gt;の部分を&lt;code&gt;--script&lt;/code&gt;に変えれば良さそうです(未確認)&lt;br /&gt;
2の場合も同じ設定でいけそうな気がします。PATHぐらい必要かな?(未確認)&lt;/p&gt;

&lt;p&gt;3の場合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;cmd&amp;quot; : [&amp;quot;sudo&amp;quot;, &amp;quot;cl&amp;quot;, &amp;quot;$file&amp;quot;, &amp;quot;$args&amp;quot;],
    &amp;quot;info&amp;quot; : &amp;quot;Started cl :: $project_path$file_name&amp;quot;,
    &amp;quot;env&amp;quot; : {&amp;quot;CIM_HOME&amp;quot;:&amp;quot;$HOME/.cim&amp;quot;,&amp;quot;PATH&amp;quot;: &amp;quot;$CIM_HOME/bin:$PATH&amp;quot;, &amp;quot;LISP_IMPL&amp;quot;: &amp;quot;sbcl&amp;quot;},
    &amp;quot;selector&amp;quot; : &amp;quot;source.ext&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。本来CIMは&lt;code&gt;$CIM_HOME/init.*&lt;/code&gt;を呼ばないと動かないのですが、ショートカットする環境変数を設定することで無理矢理動かしてます。Cloud9のinitスクリプト(jsファイル)があるようなのでそこでCIMをinitしておけば無理せずとも出来そうですがあまり深く踏み込んでないです。&lt;/p&gt;

&lt;p&gt;尚、この設定は実行即終了のものです。実行してREPLに入りたい場合は&lt;code&gt;&amp;quot;cmd&amp;quot;&lt;/code&gt;を&lt;code&gt;[&amp;quot;cl&amp;quot;,&amp;quot;-rf&amp;quot;, &amp;quot;$file&amp;quot;, &amp;quot;$args&amp;quot;]&lt;/code&gt;にすると出来ます。&lt;/p&gt;

&lt;h2 id=&#34;動かしてみる&#34;&gt;動かしてみる&lt;/h2&gt;

&lt;p&gt;上記のrun scriptを設定、保存したらメニューバーから[File]&amp;gt;[New File]と進み、新しいファイルを作ります。&lt;br /&gt;
一番簡単に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(write-line &amp;quot;Hello Cloud9&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とでも書きましょうか。そして[&amp;gt;Run]してちょいと待つと実行出来る筈です。動かなかったら手動で[Run]&amp;gt;[Run With]&amp;gt;[My Runner]とかしてみましょう。ここまで来ればセットアップ完了です。&lt;/p&gt;

&lt;h1 id=&#34;今後の課題というか要調査というか&#34;&gt;今後の課題というか要調査というか&lt;/h1&gt;

&lt;h2 id=&#34;シンタックスハイライト&#34;&gt;シンタックスハイライト&lt;/h2&gt;

&lt;p&gt;Lisp Meet Upでも喋りましたがハイライトが最悪です。ユーザー定義ハイライターも(少くともACEレベルでは)出来そうなのでどうにかする必要があります。&lt;/p&gt;

&lt;h2 id=&#34;インデント&#34;&gt;インデント&lt;/h2&gt;

&lt;p&gt;Lispのインデントはタブn個とかで済むようなものじゃなくてどのオペレータの中にいるかに依って変わります。その辺どうにかなって欲しいですね。
もしかしたらClojureは上手くいってるかもしれないのでそこからインポートしてくれると嬉しいですね。&lt;/p&gt;

&lt;h2 id=&#34;swankインターフェース&#34;&gt;swankインターフェース&lt;/h2&gt;

&lt;p&gt;initスクリプトがあるって事はもしかしたらIDEもプログラマブルなのかもしれないのでswankインターフェースを作れるかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;cimインターフェース&#34;&gt;CIMインターフェース&lt;/h2&gt;

&lt;p&gt;initスクリプトがあるって事は(ry。最終目標はメニューバーからどの処理系を使うか選択可能とかで。&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Cloud9を紹介した&lt;/li&gt;
&lt;li&gt;Common Lispのセットアップ方法を示した&lt;/li&gt;
&lt;li&gt;誰か諸問題解決して下さい&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>