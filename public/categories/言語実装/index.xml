<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>言語実装 on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/%E8%A8%80%E8%AA%9E%E5%AE%9F%E8%A3%85/</link>
    <description>Recent content in 言語実装 on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 15 Nov 2018 22:55:10 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/%E8%A8%80%E8%AA%9E%E5%AE%9F%E8%A3%85/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Common Lispの多値とその実装達</title>
      <link>//KeenS.github.io/slide/common_lispnotachitosonojissoutachi/</link>
      <pubDate>Thu, 15 Nov 2018 22:55:10 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/common_lispnotachitosonojissoutachi/</guid>
      <description># Common Lispの多値とその実装達 ---------------------- [言語処理系勉強会 Vol.1 - connpass](https://connpass.com/event/104863/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # 今日話すこと -------------- * 多値のこと * Common Lispの多値のこと * Common Lispの多値の実装のこと === # 引数と返り値の数 -----------------  .border-table { width: 100%; height: 100%; } .border-table tr, .border-table td, .border-table th { border: solid 1px #000; }  引数  単複 返り値単MLなど多数  複?</description>
    </item>
    
    <item>
      <title>関数適用、関数から評価するか？引数から評価するか？</title>
      <link>//KeenS.github.io/blog/2018/02/24/kansuutekiyou_kansuukarahyoukasuruka_hikisuukarahyoukasuruka/</link>
      <pubDate>Sat, 24 Feb 2018 01:26:59 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/02/24/kansuutekiyou_kansuukarahyoukasuruka_hikisuukarahyoukasuruka/</guid>
      <description>&lt;p&gt;κeenです。簡単にいうと「OCamlが関数の引数を右から評価する件について」。&lt;/p&gt;

&lt;p&gt;これは他人から聞いた話なのですがよく目にするので文章として纏めておきます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Graal/Truffleについて軽く</title>
      <link>//KeenS.github.io/blog/2017/12/13/graal_trufflenitsuitekaruku/</link>
      <pubDate>Wed, 13 Dec 2017 20:32:41 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/13/graal_trufflenitsuitekaruku/</guid>
      <description>&lt;p&gt;κeenです。これは&lt;a href=&#34;https://qiita.com/advent-calendar/2017/lang_dev&#34;&gt;言語実装 Advent Calendar 2017&lt;/a&gt;14日目の記事です。
JVMのコンパイラエンジンGraalと高速インタプリタ作成フレームワークのTruffleについて。

この記事の前に&lt;a href=&#34;//KeenS.github.io/blog/2017/12/12/rpythonnitsuitekaruku/&#34;&gt;昨日の記事&lt;/a&gt;を読んでおくと理解の助けになるかもしれません。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RPythonについて軽く</title>
      <link>//KeenS.github.io/blog/2017/12/12/rpythonnitsuitekaruku/</link>
      <pubDate>Tue, 12 Dec 2017 20:25:00 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/12/rpythonnitsuitekaruku/</guid>
      <description>&lt;p&gt;κeenです。これは &lt;a href=&#34;https://qiita.com/advent-calendar/2017/lang_dev&#34;&gt;言語実装 Advent Calendar 2017&lt;/a&gt;13日目の記事です。
RPythonやPyPyについて勘違いしてる人向けに誤解を解こうかと。あんまコードは出てこないやつです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WebAssemblyでGC</title>
      <link>//KeenS.github.io/blog/2017/12/07/webassemblynogc/</link>
      <pubDate>Thu, 07 Dec 2017 23:19:41 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/07/webassemblynogc/</guid>
      <description>&lt;p&gt;κeenです。この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2017/webassembly&#34;&gt;WebAssembly Advent Calendar 2017&lt;/a&gt; 8日目の記事です。WebAssemblyでガーベジコレクションする話。
2017-12-08: ページサイズに関する誤りを訂正しました。その他加筆。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ジェネリクス勉強会補足</title>
      <link>//KeenS.github.io/blog/2017/06/24/jienerikusubenkyoukaihosoku/</link>
      <pubDate>Sat, 24 Jun 2017 23:22:16 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/06/24/jienerikusubenkyoukaihosoku/</guid>
      <description>&lt;p&gt;κeenです。本日&lt;a href=&#34;https://connpass.com/event/56773/?utm_campaign=event_participate_to_owner&amp;amp;utm_source=notifications&amp;amp;utm_medium=email&amp;amp;utm_content=title_link&#34;&gt;ジェネリクス勉強会&lt;/a&gt;で発表したのですがいくつか拾いきれないコメントがあったのでここでお返事書きます&lt;/p&gt;

&lt;p&gt;発表スライドは&lt;a href=&#34;https://keens.github.io/slide/jienerikusu_disupatchi_omoteura/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ジェネリクス ディスパッチ 表裏</title>
      <link>//KeenS.github.io/slide/jienerikusu_disupatchi_omoteura/</link>
      <pubDate>Sat, 17 Jun 2017 22:25:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/jienerikusu_disupatchi_omoteura/</guid>
      <description># ジェネリクス ディスパッチ 表裏 ---------------------- [ジェネリクス勉強会 - connpass](https://connpass.com/event/56773/?utm_campaign=event_participate_to_owner&amp;utm_source=notifications&amp;utm_medium=email&amp;utm_content=title_link) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # はじめに ----------- * 例にはJavaとRustを使います + それ以外にあまり詳しくない + たまにScalaが出てくるかも * 主に裏側で何が起きてるかに焦点を当てます * 一般的な手法の比較と言語固有実装の比較がやや混じります + 実例重視 * 言語や機能を選ぶときの知識が増えればよし === # ジェネリクス -------------- * 型でパラメータ化された何か * パラメータ化する方法にいくつか方式が + 任意の型に対応する実装にする - Java + 使う型毎に実体をつくる - 型が引数になるイメージ - Rust * 便宜上前者をポインタ方式、後者をテンプレート方式と呼ぶ === # 関数ジェネリクス ----------------- * Javaコード ``` java public class Generics { public static void main(String[] args) { Generics g = new Generics(); System.</description>
    </item>
    
    <item>
      <title>新しいコンパイラバックエンドcretonne</title>
      <link>//KeenS.github.io/blog/2016/12/02/atarashiikonpairabakkuendocretonne/</link>
      <pubDate>Fri, 02 Dec 2016 14:00:11 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/02/atarashiikonpairabakkuendocretonne/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/lang_dev&#34;&gt;言語実装 Advent Calendar 2016 - Qiita&lt;/a&gt;3日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。先日、Rustの開発者フォーラムに新しいバックエンドして&lt;a href=&#34;https://github.com/stoklund/cretonne&#34;&gt;cretonne&lt;/a&gt;が&lt;a href=&#34;https://internals.rust-lang.org/t/possible-alternative-compiler-backend-cretonne/4275&#34;&gt;提案されていました&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;ちょっと気になったのでそれを紹介します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>マクロやコンパイラプラグインの実装方法色々</title>
      <link>//KeenS.github.io/blog/2016/12/01/makuroyakonpairapuraguinnojissouhouhou/</link>
      <pubDate>Thu, 01 Dec 2016 13:29:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/01/makuroyakonpairapuraguinnojissouhouhou/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/lang_dev&#34;&gt;言語実装 Advent Calendar 2016 - Qiita&lt;/a&gt;2日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。マクロなどのコンパイル時に何か処理をしてコード生成する機構の実現方法が言語によって様々にあるなぁと思ったのでちょっと探ってみます&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのクロージャ3種を作って理解する</title>
      <link>//KeenS.github.io/blog/2016/10/10/rustnokuro_ja3tanewotsukutterikaisuru/</link>
      <pubDate>Mon, 10 Oct 2016 16:48:43 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/10/10/rustnokuro_ja3tanewotsukutterikaisuru/</guid>
      <description>&lt;p&gt;κeenです。Rustのクロージャ、3種類もあって複雑ですよね。
こういう複雑なものはRustの気持になって考えれば理解出来たりします。ということで手でクロージャを作って理解してみましょう。&lt;/p&gt;

&lt;p&gt;尚、これはRustの1.12.0-stableと1.14.0-nightly (6e8f92f11 2016-10-07)で実験しています。
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>