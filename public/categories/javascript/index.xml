<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Javascript on κeenのHappy Hacκing Blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://KeenS.github.io/categories/javascript/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Thu, 07 Aug 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Shibuya.XSS TT #5 に参加してきました</title>
      <link>http://keens.github.io/blog/2014/08/07/shibuya-dot-xss-tt-number-5-nican-jia-sitekimasita</link>
      <pubDate>Thu, 07 Aug 2014 00:00:00 UTC</pubDate>
      
      <guid>http://keens.github.io/blog/2014/08/07/shibuya-dot-xss-tt-number-5-nican-jia-sitekimasita</guid>
      <description>

&lt;p&gt;強化練中のκeenです。明日も朝早いのでこんな時間にエントリー書いてて寝坊しないか心配です。&lt;/p&gt;

&lt;p&gt;Shibuya.XSS TT #5 がLINEのオフィスで行なわれてたので覗きに行ってきました。名前はXSSですが内容はセキュリティ全般でしたね。&lt;/p&gt;

&lt;p&gt;Mozillaの脆弱性バグ報奨金制度にチャレンジした話だとか色々あったのですがやっぱセキュリティの話なのでオフレコな話題が多く、あまり書けることは無いです。
malaさんが飛び入りでさっきサイボウズの脆弱性を見付けたから話します、ってやろうとしてサイボウズの竹迫さんに止められてたり（結局Googleの未修正の脆弱性の話してました。データガンガン抜いててやばかった。）。&lt;/p&gt;

&lt;p&gt;話せる話題はblob URI SchemeとサニタイズとmXSSの話ですね。(俄知識なので誤謬があるかと思います。あまり信用しないで下さい)&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;blob URI Scheme&lt;/h2&gt;

&lt;p&gt;example.com/XXXXXX-XXXXXX-XXXXXX
みたいなURLのことです。blobの名前の通りバイナリをデコードしたURLで、アップロードした画像の一時URLなんかに使われるそうです。似たようなのにdata URI Schemeとかjavascript URI Schemeとかがあるそうです。&lt;/p&gt;

&lt;p&gt;これの扱われ方が他とはちょっと違うらしく、&lt;code&gt;iframe&lt;/code&gt;内でこのURIでXSSをするとoriginが親コンテンツのものになるそうです。つまり&lt;code&gt;iframe&lt;/code&gt;内からSame Origin Policy突破可能。その他にも面白い特徴があって要研究って言ってました。&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;サニタイズとmXSS&lt;/h2&gt;

&lt;p&gt;mutate base XSSだったかな？&lt;/p&gt;

&lt;p&gt;ユーザーの入力をJS側でサニタイズしようとする時の話です。
一つ思い付くのはJSでHTMLパーザを書いて許可しないタグを検出する方法ですが、どうしてもブラウザのパーザと互換性を確保出来ない（ブラウザ毎の非互換性がある）ためそこが脆弱性になるそうです。&lt;/p&gt;

&lt;p&gt;そこでブラウザのパーザを呼び出すAPIがあるのでそれを使ってDOMを作り、タグを洗い出す方法が考えられます。ここまでは良いのですが、最後HTMLに追加するときに文字列化してinnerHTMLで書き込もうとするとmXSSの危険性があるそうです。具体的には特定の状況で&lt;code&gt;&amp;amp;lt;&lt;/code&gt;や&lt;code&gt;&amp;amp;gt;&lt;/code&gt;が&lt;code&gt;&amp;lt;&lt;/code&gt;や&lt;code&gt;&amp;gt;&lt;/code&gt;に変化してしまい、入力と出力でDOM構造が変わってしまうことがあるそうです。怖い。&lt;/p&gt;

&lt;p&gt;セキュリティ大変ですね。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>