<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vi on </title>
    <link>/categories/vi/</link>
    <description>Recent content in Vi on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 13 Dec 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/vi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>.emacsの整理をした話 &#43; EmacsとViとShellとLispを悪魔合体させたら超絶便利だった</title>
      <link>/post/dot-emacs-clean-up/</link>
      <pubDate>Fri, 13 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/dot-emacs-clean-up/</guid>
      <description>

&lt;p&gt;やや長いタイトルですが・・・年末になって大掃除がやってきましたね。みなさんもそろそろ.emacsの大掃除をしましょう。&lt;/p&gt;

&lt;p&gt;私の.emacsは元々1300行ちょいあってEmacsの起動に7~8秒(体感)かかってましたが大掃除&amp;amp;高速化をした結果800行弱、起動に1秒(体感)ほどになったので整理の仕方を共有しますね。&lt;/p&gt;

&lt;p&gt;前提ですが、私はinitローダーとかは使ってません。全部&lt;code&gt;init.el&lt;/code&gt;に書いてます。で、機能毎にページを作って(&lt;code&gt;C-q C-l&lt;/code&gt;)ます。ただ、それだけだと視認性が悪いので見出しとして&lt;code&gt;C-u C-u C-u ;&lt;/code&gt;で&lt;code&gt;;&lt;/code&gt;を64個挿入して次の行にコメントで&lt;code&gt;#&lt;/code&gt;付きのタイトルを付けてます。&lt;/p&gt;

&lt;p&gt;具体的には&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;common-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;nv&#34;&gt;^L&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; #Lisp&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;こんな感じのものが機能毎に書かれてます。これで&lt;code&gt;C-s&lt;/code&gt;や&lt;code&gt;M-x occur&lt;/code&gt;でハッシュタグのように検索することも&lt;code&gt;C-v&lt;/code&gt;でスクロールしていって目grepすることも&lt;code&gt;C-x ]&lt;/code&gt;で機能毎にジャンプすることもできます。&lt;/p&gt;

&lt;h1 id=&#34;1-emacsの最新版を使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;1. Emacsの最新版を使う&lt;/h1&gt;

&lt;p&gt;結構重要です。「標準のやつだと欲いこの機能がないから拡張パッケージ入れた」なんてのも最新版では改善されていたりします。例えば私は&lt;code&gt;emacs-w3m&lt;/code&gt;を使っていましたが、Emacsのmasterブランチには&lt;code&gt;eww&lt;/code&gt;なるEmacs Lisp製のブラウザが入っているのでそれを使うようにしました。&lt;/p&gt;

&lt;p&gt;&lt;s&gt;ただ、これが絶対的正義かというとそうでもなく、パッケージで入れてない分
Ubuntuのインプットメソッドとの連携部分がなかったので&lt;code&gt;uim.el&lt;/code&gt;を入れる
必要が出てきたりと、面倒な部分もありました。Emacs標準のインプットメソッドはどうにも使いものにならず、
&lt;code&gt;ddskk&lt;/code&gt;もuim-skkとコンフリクトする(というか&lt;code&gt;C-j&lt;/code&gt;上書きとかありえない)ので使いません。インプットメソッドの切り替え部分は&lt;/s&gt;&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;common-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;global-set-key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;kbd&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;&amp;lt;hiragana-katakana&amp;gt;&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;uim-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;global-set-key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;kbd&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;&amp;lt;zenkaku-hankaku&amp;gt;&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;uim-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;autoload&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;uim-mode&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;uim&#34;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;になりました。&lt;/p&gt;

&lt;p&gt;2013-12-16追記&lt;br /&gt;
これは私が&lt;code&gt;~/.Xresources&lt;/code&gt;に&lt;code&gt;Emacs*useXIM: false&lt;/code&gt;を書いていたのが原因でした。&lt;code&gt;Emacs*useXIM: true&lt;/code&gt;に書き換え、&lt;code&gt;xrdb ~/.Xresources&lt;/code&gt;すると直りました。&lt;/p&gt;

&lt;h1 id=&#34;2-普段使わない設定は全部消す:4e9eff69691c75d8318f2604900514ad&#34;&gt;2. 普段使わない設定は全部消す&lt;/h1&gt;

&lt;p&gt;基本ですね。私は&lt;code&gt;summary-edit.el&lt;/code&gt;だとか&lt;code&gt;multiverse.el&lt;/code&gt;だとかるびきちさんの本を読んで便利そうだから入れたものの、結局使わなかったものの設定&amp;amp;elispをごっそり削除。あとかなりの言語に対してデフォルトで&lt;code&gt;auto-mode-alist&lt;/code&gt;が設定されていたので&lt;code&gt;auto-mode-alist&lt;/code&gt;の設定も全部消して、必要になったら書き足すようにしました。&lt;/p&gt;

&lt;h1 id=&#34;3-普段使っていても代替の効くものは削除:4e9eff69691c75d8318f2604900514ad&#34;&gt;3. 普段使っていても代替の効くものは削除&lt;/h1&gt;

&lt;p&gt;これは高速化の意味と自分の環境に依存しない意味があります。最近、自分のラップトップ以外でもEmacsを触ることが多くあって、デフォルトのキーを上書きして使ってる部分で何度も誤操作したのでそれを減らす目的です。&lt;code&gt;bm.el&lt;/code&gt;は&lt;code&gt;C-x r SPC&lt;/code&gt;の&lt;code&gt;register&lt;/code&gt;系や&lt;code&gt;C-x C-SPC&lt;/code&gt;で対応(registerは覚えれば使い出がありそうなのでいつか解説書くかもです)、&lt;code&gt;open-junk-file.el&lt;/code&gt;は&lt;code&gt;~/tmp&lt;/code&gt;を作って対応、&lt;code&gt;recentf-ext.el&lt;/code&gt;は&lt;code&gt;helm-file-buffers&lt;/code&gt;だとか。&lt;/p&gt;

&lt;p&gt;あと全て&lt;code&gt;helm.el&lt;/code&gt;に置き換えて&lt;code&gt;helm.el&lt;/code&gt;と&lt;code&gt;anything.el&lt;/code&gt;が混在してる状態をどうにかしたかったのですが、&lt;code&gt;php-completion.el&lt;/code&gt;かなにかが依存しててトドメを刺せませんでした。&lt;/p&gt;

&lt;p&gt;あと、&lt;code&gt;viewer&lt;/code&gt;の代替を探していたらタイトルにあるように悪魔合体が起きたので後で書きますね。&lt;/p&gt;

&lt;h1 id=&#34;4-できる限り標準のものを使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;4. できる限り標準のものを使う&lt;/h1&gt;

&lt;p&gt;標準で提供されているパッケージは&lt;code&gt;autoload&lt;/code&gt;が&lt;code&gt;emacs&lt;/code&gt;バイナリに組込まれてる(と思う)ので起動時のオーバーヘッドはありません。&lt;code&gt;flymake.el&lt;/code&gt;や&lt;code&gt;ruby-mode.el&lt;/code&gt;が標準で提供されてるのに気付いたのでそれを使ったりなど。一度&lt;code&gt;(emacsroot)/lisp&lt;/code&gt;以下を眺めてみることをお勧めします。結構発見があるものです。&lt;/p&gt;

&lt;h1 id=&#34;5-autoload-を使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;5.&lt;code&gt;autoload&lt;/code&gt;を使う&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;autoload&lt;/code&gt;とはファイルの読み込みを必要になるまで遅らせる仕組みです。「必要になる」ってのはそのファイルで定義されている関数が呼ばれたときです。賢い&lt;code&gt;require&lt;/code&gt;と思えば良いでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(autoload #&#39;関数名 &amp;quot;関数が呼ばれたときに読むファイル名&amp;quot; nil interactivep)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいに使います。&lt;code&gt;interactivep&lt;/code&gt;の部分は&lt;code&gt;M-x&lt;/code&gt;で呼ぶものなら&lt;code&gt;t&lt;/code&gt;、そうでなければ&lt;code&gt;nil&lt;/code&gt;です。&lt;code&gt;require&lt;/code&gt;を&lt;code&gt;autoload&lt;/code&gt;で書き換えていけば理論上起動時の読み込み0にできるのでかなり高速化できます。&lt;/p&gt;

&lt;p&gt;が、実際は一々&lt;code&gt;autoload&lt;/code&gt;書くのはしんどいので次です。&lt;/p&gt;

&lt;h1 id=&#34;6-できる限り-package-el-を使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;6.できる限り&lt;code&gt;package.el&lt;/code&gt;を使う&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;package.el&lt;/code&gt;は必要な関数の&lt;code&gt;autoload&lt;/code&gt;を自動生成して読み込んでおいてくれるのでかなりの手間が省けます。そして&lt;code&gt;autoload&lt;/code&gt;があるのに&lt;code&gt;require&lt;/code&gt;してると折角の&lt;code&gt;package.el&lt;/code&gt;の配慮が無駄になります。&lt;/p&gt;

&lt;p&gt;自動生成された&lt;code&gt;autoload&lt;/code&gt;は&lt;code&gt;elpa/パッケージのディレクトリ/パッケージ-autoloads.el&lt;/code&gt;にあるので確認しながら&lt;code&gt;init.el&lt;/code&gt;の邪魔なものを消していきます。これでかなり&lt;code&gt;init.el&lt;/code&gt;の行数が減ります。今まで無駄な設定していたんだなと気付きます。&lt;/p&gt;

&lt;h1 id=&#34;7-eval-after-load-を使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;7. &lt;code&gt;eval-after-load&lt;/code&gt;を使う&lt;/h1&gt;

&lt;p&gt;8割程の設定は&lt;code&gt;autoload&lt;/code&gt;で対応できるのですが、踏み込んだ設定をしているとパッケージの内部の関数を使ってしまってどうしてもその式が評価される前にパッケージが読み込まれている必要があることがあります。&lt;/p&gt;

&lt;p&gt;そんなときは&lt;code&gt;eval-after-load&lt;/code&gt;を使います。名前のまんま、ロードした後で&lt;code&gt;eval&lt;/code&gt;してくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(eval-after-load &#39;ファイル名
    &#39;式)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の形で使います。複数の式を使いたい場合は&lt;code&gt;progn&lt;/code&gt;を使って&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(eval-after-load &#39;ファイル名
    &#39;(progn
         式1
         式2...))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように使います。あるパッケージの拡張パッケージなんかもここで読むと良いかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;8-その他:4e9eff69691c75d8318f2604900514ad&#34;&gt;8.その他&lt;/h1&gt;

&lt;p&gt;メールクライアントを標準のものにしようとしましたが、&lt;code&gt;gnus.el&lt;/code&gt;はちょっと受け付けなくてその他はimapを喋らないので断念。でも色々調べてたら&lt;code&gt;mew&lt;/code&gt;より&lt;code&gt;wanderlust&lt;/code&gt;の方が良いようなので使い初めました。表示が綺麗で良いですね。HTMLのレンダリングも&lt;code&gt;emacs-w3m&lt;/code&gt;に頼らず標準の&lt;code&gt;shr.el&lt;/code&gt;を使っているのも◎。&lt;/p&gt;

&lt;p&gt;同じような経緯で&lt;code&gt;JDEE&lt;/code&gt;をやめて&lt;code&gt;malabar.el&lt;/code&gt;を使うようにしました。ただ、私は&lt;code&gt;maven&lt;/code&gt;使いではないので微妙ではあります。まあ、そもそもプロジェクト単位でJavaを書くことがないってのもあるんですが。Androidのスケルトンがantなのでantでできたら嬉しいなーって。&lt;/p&gt;

&lt;h1 id=&#34;emacsとviとshellとlispを悪魔合体させた話:4e9eff69691c75d8318f2604900514ad&#34;&gt;EmacsとViとShellとLispを悪魔合体させた話&lt;/h1&gt;

&lt;p&gt;私はEmacsの狂信者ですが読み専のときはちょいちょいviを使うこともあります。片手で操作できるのは便利です。Emacsで読み専といえば&lt;code&gt;view-mode&lt;/code&gt;です。そこでもhjklを使うべく&lt;code&gt;view-mode-map&lt;/code&gt;に手を加えてましたが、大掃除ということで全部削除。&lt;/p&gt;

&lt;p&gt;その後で&lt;code&gt;emacsroot/lisp/emulate/&lt;/code&gt;以下を読んでいるとなんかviのエミュレーターが3つも見付かりました。&lt;code&gt;vi.el&lt;/code&gt;、&lt;code&gt;vip.el&lt;/code&gt;、&lt;code&gt;viper.el&lt;/code&gt;です。後者になるほどviとの互換性が高くなります。とりあえずは&lt;code&gt;hjkl&lt;/code&gt;が使えれば良いので&lt;code&gt;vi.el&lt;/code&gt;を使ってみたところ、ん〜…といったところ。&lt;code&gt;vip.el&lt;/code&gt;と試して結局&lt;code&gt;viper.el&lt;/code&gt;に落ち着きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &amp;quot;C-x C-q&amp;quot;) #&#39;(lambda ()
                    (interactive)
                    (toggle-viper-mode)
                    (force-mode-line-update)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定はこんな感じです。&lt;code&gt;toggle-viper-mode&lt;/code&gt;してもモードラインの表示が変わらないことがあったので&lt;code&gt;force-mode-line-update&lt;/code&gt;を加えました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;viper.el&lt;/code&gt;は単なるviのエミュレートだけではなく、Levelに応じて良い感じにemacsと悪魔合体してくれます。私は最高レベルの5にしました。”C-x C-s”など基本的なコマンドはそのまま使えるようになってます。&lt;code&gt;:&lt;/code&gt;で始まるvi(ex)のコマンドも使えます。&lt;code&gt;C-z&lt;/code&gt;でemacs&amp;lt;–&amp;gt;viを切り替えたり。非常に便利です。&lt;/p&gt;

&lt;p&gt;尚、私はvi使いであってvim使いではないのでevilは使いません。&lt;/p&gt;

&lt;p&gt;もう一つ、shellの話。今までは&lt;code&gt;multiterm&lt;/code&gt; × &lt;code&gt;zsh&lt;/code&gt;な感じでしたが、「できる限り標準のものを使う」方針で&lt;code&gt;eshell&lt;/code&gt;に切り替えました。&lt;code&gt;eshell&lt;/code&gt;はEmacs Lispで書かれたshellです。これが思った以上に便利です。るびきちさんの本では標準出力とエラー出力の切り分けができてないと書かれてましたがそれは修正されてるようです。&lt;/p&gt;

&lt;p&gt;あとは&lt;code&gt;/dev/kill&lt;/code&gt;だとか&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;だとかバッファへのリダイレクトだとか&lt;code&gt;grep&lt;/code&gt;の上書きだとか色々楽しい拡張もあるのですが、一番は&lt;code&gt;eshell&lt;/code&gt;がLispであること。&lt;code&gt;eshell&lt;/code&gt;上で任意のEmacs Lisp式を実行できます。最近Emacs LispやLispに精通してきたので非常に有り難いです。&lt;br /&gt;
それにファイルを開くときもその後で同じディレクトリのファイルを開くことが多いので一旦 &lt;code&gt;cd&lt;/code&gt;してから&lt;code&gt;find-file&lt;/code&gt;をするとアクセスし易くて捗ります。もう起動時に&lt;code&gt;eshell&lt;/code&gt;が立ち上がるようにして、基本そこから操作するようにしてます。guakeもそんなに使わなくなりました。他の環境でも使えるので安心して依存できます。&lt;/p&gt;

&lt;p&gt;で、ファイルを開くときはどうしてるかというと実はemacsの&lt;code&gt;find-file&lt;/code&gt;ではなくviの&lt;code&gt;:e file-name&lt;/code&gt;です。Emacs上でLispで出来たShellを使いつつviを動かしてます。かなり人を選びますが「EmacsのヘビーユーザーでLispに精通しててviを便利だと思ってる人」は試してみてはいかがでしょうか。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>