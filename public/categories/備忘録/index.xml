<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>備忘録 on κeenのHappy Hacκing Blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>/categories/E58299E5BF98E98CB2/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Sun, 04 Jan 2015 05:26:25 UTC</updated>
    
    <item>
      <title>OSお引っ越しの時のデータ移行の自分用注意点</title>
      <link>/blog/2015/01/04/migration-memo</link>
      <pubDate>Sun, 04 Jan 2015 05:26:25 UTC</pubDate>
      
      <guid>/blog/2015/01/04/migration-memo</guid>
      <description>

&lt;p&gt;自分用。&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;コピー&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cp -R&lt;/code&gt;じゃだめ。タイムスタンプが変わる。アーカイブ専用に&lt;code&gt;cp -a&lt;/code&gt;がある。あるいは&lt;code&gt;rsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;移動するのは

&lt;ul&gt;
&lt;li&gt;非隠しフォルダ/ファイル

&lt;ul&gt;
&lt;li&gt;但しDownloads/は除く。あれはプラットフォーム依存なバイナリなんかも含む&lt;/li&gt;
&lt;li&gt;Dropbox/はどっちでも良い。コピーせずにDropboxの同期に任せた方が確実&lt;/li&gt;
&lt;li&gt;Desktop/はどうせ空だからコピーしてしまっても害はない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;.ssh/&lt;/li&gt;
&lt;li&gt;.emacs.d/&lt;/li&gt;
&lt;li&gt;.twittering-mode.gpg&lt;/li&gt;
&lt;li&gt;.gitconfig&lt;/li&gt;
&lt;li&gt;.thunderbird/&lt;/li&gt;
&lt;li&gt;.config/&lt;/li&gt;
&lt;li&gt;残りの隠しファイルはdot.filesにある&lt;/li&gt;
&lt;li&gt;もしかしたら.mozilla/もコピーしておくといいかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;compile/以下は&lt;code&gt;make clean&lt;/code&gt;しておく。オブジェクトファイルがプラットフォーム依存だからコピーする意味ない&lt;/li&gt;
&lt;li&gt;compile/以下はファイル数が多くて時間かかるので要らないものはこの際削除&lt;/li&gt;
&lt;li&gt;同じ理由で.cim/, .rvm/, .nvm/, .opam/なんかもコピーしない&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;コピーが終わったら&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Emacsをビルドして起動、動作確認&lt;/li&gt;
&lt;li&gt;Thunderbirdをインストール、動作確認&lt;/li&gt;
&lt;li&gt;gitをインストール、githubとの接続確認&lt;/li&gt;
&lt;li&gt;CIMをインストール、&lt;code&gt;cim install sbcl&lt;/code&gt;の動作確認&lt;/li&gt;
&lt;li&gt;rustをビルドするときは&lt;code&gt;./configure&lt;/code&gt;から始める&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;いつかやる&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;tarballにコピーするファイルを詰め込んどく

&lt;ul&gt;
&lt;li&gt;理想的にはメインのHDDとは別の記憶媒体にtarballを保存&lt;/li&gt;
&lt;li&gt;定期実行が面倒になるくらいなら~/.backupにでも。気が向いた時に別の媒体にコピー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;どうもappendオプションを使えばヒストリ付きのアーカイバとして使えるらしい&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>パーティションテーブルとか色々吹っ飛ばした話</title>
      <link>/blog/2014/06/12/partision-table</link>
      <pubDate>Thu, 12 Jun 2014 00:00:00 UTC</pubDate>
      
      <guid>/blog/2014/06/12/partision-table</guid>
      <description>&lt;p&gt;ご不沙汰しております、κeenです。先日（と言ってもしばらく前）、安いHDDを買ってきてFreeBSDでも入れて遊ぼうかとしていました。&lt;/p&gt;

&lt;p&gt;そうするとインストールは正常に終わるのにリブートするとブートローダが見付からないとか怒られます。おかしいな〜と思って元のHDDに付け替えてインストールメディアをごちゃごちゃしてまたHDDを付け替えてインストールしてを10回くらい繰り返したでしょうか。&lt;/p&gt;

&lt;p&gt;はい、挿さってるHDD勘違いして元のHDDにFreeBSD焼いちゃいました。パーティションテーブルとかHDDの先頭にあったWindowsのパーティションとか全滅です。しかもまだFreeBSD起動しない。どうするよこれ。&lt;/p&gt;

&lt;p&gt;USBに焼いてたArchがあったのでどうにかUbuntuを落してきてOS自体は復旧出来ました。因みにFreeBSDが起動しなかった理由はハードウェアがBSDだとかGPTだとかのパーティションテーブルに対応してなかったのが原因っぽいです。尚、LinuxもBSDのパーティションテーブルを理解しないので一旦ddとかで強制的にパーティションテーブルを上書きしないと正常にインストール出来ませんでした。&lt;/p&gt;

&lt;p&gt;で、ですよ。問題は飛んだデータです。Windowsの方はどうでも良くてUbuntuの方もほとんどの重要なソースコードはgithubやgitbreakで管理してたので問題無くて、重要でないソースコードは仕方無いとして、LTの資料はまあ、SlideShareにあるし良いとして、KVMイメージはそんなに育ててなかったのでまた作り直すことにして、その他のデータはDropBoxに逃がしてて、残り、&lt;code&gt;cl21-datacollections&lt;/code&gt;とこのブログのソースはgitで管理してなかったので消えてしまいました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cl21-datacollections&lt;/code&gt;は書き直すより他ないので図書館でアルゴリズムイントロダクションを借りてきました。まあ、そのうち出現すると思います。Lisp Meet UpでTOYOZUMIさんにそそのかされたCSB+木も実装してみるつもりです。&lt;/p&gt;

&lt;p&gt;ブログの方はソースが無いと流石につらいので掘り起こしたデータの受け皿に新たに500GのHDDと外付け用のカバーを買ってきて&lt;br /&gt;
&lt;img src=&#34;/images/HDD.jpg&#34; alt=&#34;買ってきたHDDたち&#34; title=&#34;HDD&#34; /&gt;
&lt;br /&gt;
&lt;code&gt;test-disk&lt;/code&gt;や&lt;code&gt;photorec&lt;/code&gt;といったパーティション、データ復旧ツールで復旧を試みました。&lt;/p&gt;

&lt;p&gt;パーティション再認識ツールの&lt;code&gt;test-disk&lt;/code&gt;は全然駄目で、わずかに&lt;code&gt;/&lt;/code&gt;を認識するだけでその下のファイル情報は全く読み出せませんでした。&lt;/p&gt;

&lt;p&gt;しゃあないのでデータ復旧ツールの&lt;code&gt;photorec&lt;/code&gt;を一晩回してみると…800万くらいのファイルが掘り起こされました。因みにファイル名は機械的につけられたものです。&lt;br /&gt;
ザーっと眺めてみるとほとんどブラウザキャッシュの残骸ですね。因みに拡張子はすっげー適当につけられてるのでせいぜいバイナリかテキストかを見分けられる程度でした。&lt;/p&gt;

&lt;p&gt;流石に人力で捜すのは無理なのでOctopress用のマークダウンを拾ってくるスクリプト書いてまた一晩回してみたものの、集まったのは何故かRubiniusのブログばかりでこのブログのデータはゼロ。どうしようもなく、githubに上がってるHTMLから復旧することにしました。&lt;/p&gt;

&lt;p&gt;Nokogiri使ってHTMLのタグをちまちまMarkdownに直すスクリプト書いてる途中で「これ、他にもやってる人いるんじゃね？」という思いが。&lt;br /&gt;
調べてみると、ありました。&lt;a href=&#34;https://github.com/xijo/reverse_markdown&#34;&gt;Reverse Markdown&lt;/a&gt;というそうです。ここまでくればあとはNokogiri使ってメタデータとメインの部分抜き出してくるだけなので楽勝ですね。まあ、 &lt;code&gt;{%&lt;/code&gt; や&lt;code&gt;#&lt;/code&gt;をスケープするなどの作業もあるのですが。#をエスケープしなきゃいけないのはreverse_markdownのバグっぽそうですね。&lt;br /&gt;
画像はディレクトリごとコピーし、Sassはcleanpressを再度インストール、その他自分で手を加えた部分はこのブログに残してあったのでそこを参照しました。&lt;/p&gt;

&lt;p&gt;ブログ更新出来なかった間になにしてたかは別記事にしますね&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tiarraにercで接続したときの/loadの問題</title>
      <link>/blog/2013/10/06/tiarra-erc</link>
      <pubDate>Sun, 06 Oct 2013 00:00:00 UTC</pubDate>
      
      <guid>/blog/2013/10/06/tiarra-erc</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.clovery.jp/tiarra/&#34;&gt;tiarra&lt;/a&gt;に &lt;a href=&#34;http://www.emacswiki.org/ERC&#34;&gt;erc&lt;/a&gt;で接続したときの/loadの問題。&lt;/p&gt;

&lt;p&gt;tiarraは有名なircプロキシ。ercはEmacs上で動くircクライアント。これらを使っているとtiarraが自動でログインしてくれないのでおかしいなと思っていたらtiarraの自動ログインモジュールを有効にしていなかった模様。&lt;/p&gt;

&lt;p&gt;書き換えていざ設定を反映しようとすると若干困りました。どこに&lt;code&gt;/load&lt;/code&gt;と打てばいいんだろ。&lt;/p&gt;

&lt;p&gt;最初に誘導されるバッファ(ircバッファ名がプロキシサーバー名になってるやつ)に&lt;code&gt;/load&lt;/code&gt;と打つと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERC&amp;gt; /load
Incorrect arguments. Usage:
/LOAD line
Load the script provided in the LINE.
If LINE continues beyond the file name, the rest of
it is put in a (local) variable `erc-script-args&#39;,
which can be used in Emacs Lisp scripts.


The optional FORCE argument is ignored here - you can&#39;t force loading
a script after exceeding the flood threshold.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ですって。ああ…。&lt;code&gt;/load&lt;/code&gt;コマンドがercに食われてる…&lt;/p&gt;

&lt;p&gt;流石に解決策あるだろって思って調べたら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/quote load
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERC&amp;gt; /quote load
-192.168.1.4- *** Reloaded configuration file.
-192.168.1.4- *** Module Channel::Join::Connect will be loaded newly.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はい。ちゃんとloadしてくれました。&lt;/p&gt;

&lt;p&gt;以上小ネタでした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gitあれこれ</title>
      <link>/blog/2013/09/18/some-git-matters</link>
      <pubDate>Wed, 18 Sep 2013 00:00:00 UTC</pubDate>
      
      <guid>/blog/2013/09/18/some-git-matters</guid>
      <description>

&lt;p&gt;githubで共同作業してたらいろいろ困ったことがあったのでそのときのメモ。はじめてやって困ったことなので経験ある人には常識なのかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;マスターリポジトリに追従する&lt;/h2&gt;

&lt;p&gt;マスターをフォークして自分のレポジトリで作業、終ったらマスターにpull-reqという流れで作業してました。するとマスターが変更されたときに自分のリポジトリに反映させる必要があります。そのときは &lt;a href=&#34;http://qiita.com/xtetsuji/items/555a1ef19ed21ee42873&#34;&gt;http://qiita.com/xtetsuji/items/555a1ef19ed21ee42873&lt;/a&gt;を参考に、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote add upstream git@github.com:g000001/google-common-lisp-style-guide-ja.git
$ git fetch upstream
$ git merge upstream/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でできました。&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Pull-Reqを正しく送る&lt;/h2&gt;

&lt;p&gt;まず、masterでpull-req送るととりこまれるまで自分のマスターへのコミットが反映され続けるんですね。それで一回失敗。&lt;/p&gt;

&lt;p&gt;じゃあ、ということでブランチを切ることに。するとまた問題が。まあ、自分がアホっていったらアホなんですけど&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_A_ _B_ _C_
*_/ ___\A&#39;/___ \B&#39;/___\C&#39;_HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいなブランチの作り方してしまいました。&lt;code&gt;A&lt;/code&gt;,&lt;code&gt;B&lt;/code&gt;,&lt;code&gt;C&lt;/code&gt;それぞれでpull-req送ったんですけど当然&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A : A
B : B-A&#39;
C : C-B&#39;-A&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいなヒストリのまま送られるわけです。&lt;code&gt;A&lt;/code&gt;,&lt;code&gt;B&lt;/code&gt;,&lt;code&gt;C&lt;/code&gt;は同じファイルの違う箇所への変更なのでヒストリを&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_C_
      /_B_
     /_A_ 
*_/ ______ HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにしたいわけです。&lt;code&gt;magit.el&lt;/code&gt;さんにお助け願おうかと思いましたが、そもそも出来るか分らないのでTwitterで投げてみたところ、@mod_poppo氏に助けていただきました。&lt;code&gt;git reset&lt;/code&gt;と&lt;code&gt;git cherry-pick&lt;/code&gt;でできます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;A&lt;/code&gt;のブランチは問題ないので&lt;code&gt;B&lt;/code&gt;でやると、まず私は&lt;code&gt;magit.el&lt;/code&gt;で必要な&lt;code&gt;B&lt;/code&gt;のコミットを調べておいて&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git reset --hard *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;*&lt;/code&gt;に&lt;code&gt;HEAD&lt;/code&gt;を戻して&lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;で加えた変更を全て破棄。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git cherry-pick B-commits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;B&lt;/code&gt;での変更のみ適用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git push -f origin branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で自分のリポジトリに反映(=pull-reqにも反映)&lt;br /&gt;
としました。&lt;code&gt;*&lt;/code&gt;と&lt;code&gt;B-commits&lt;/code&gt;はそれぞれリビジョンIDを調べて下さいね。&lt;/p&gt;

&lt;p&gt;私の説明じゃ分りづらいと思うので &lt;a href=&#34;http://d.hatena.ne.jp/murank/20110327/1301224770&#34;&gt;http://d.hatena.ne.jp/murank/20110327/1301224770&lt;/a&gt; にあるすばらしい図を参考にして下さい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FreeBSD10でちょっとこけた</title>
      <link>/blog/2013/09/12/error-on-svn</link>
      <pubDate>Thu, 12 Sep 2013 00:00:00 UTC</pubDate>
      
      <guid>/blog/2013/09/12/error-on-svn</guid>
      <description>

&lt;p&gt;FreeBSD10をインストールしてたときにちょっとつまったところがあったのでメモ。&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;(前回までのあらすじ)&lt;/h2&gt;

&lt;p&gt;FreeBSD10をインストールしたkvmのイメージでFreeBSDのソースをコンパイルできなくなっていたのでκeenはイメージに最新のFreeBSDを上書きインストールすることを決意したのであった&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;今回&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://pub.allbsd.org/FreeBSD-snapshots/&#34;&gt;https://pub.allbsd.org/FreeBSD-snapshots/&lt;/a&gt;から最新版isoをダウンロードして&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kvm -cdrom ~/Download/FreeBSD-10.0-HEAD-r255472-JPSNAP-i386-i386-disc1.iso -boot d -m 2048 -smp 3 FreeBSD10.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でブート&amp;amp;インストール。普通にインストーラに従って問題無し。&lt;br /&gt;
もう一度&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kvm -m 2048 -smp 3 FreeBSD10.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でブート。&lt;code&gt;/usr/src&lt;/code&gt;が空なのを確認して、最近標準添付になったsvnliteでソースをチェックアウト。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd /usr
# rmdir src
# svnlite co https://svn0.us-west.FreeBSD.org/base/head src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、エラー。&lt;br /&gt;
内容は&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;server sent a truncated http response body.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不明。&lt;code&gt;svn(lite)&lt;/code&gt;のエラーらしいことは分った。&lt;code&gt;https:&lt;/code&gt;が悪い気がするので&lt;code&gt;http:&lt;/code&gt;にしようかと思ったけど、ふとダメ元で以前はできなかった&lt;code&gt;svn:&lt;/code&gt;のスキーマにしてみた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# svnlite co svn://svn0.us-west.FreeBSD.org/base/head src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;できた。なんだよ。&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;蛇足&lt;/h3&gt;

&lt;p&gt;このあと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# svnlite co svn://svn0.us-west.FreeBSD.org/ports/head ports
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でportsもチェックアウトしましたよ&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redmineのインストール</title>
      <link>/blog/2013/09/05/install-redmine</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 UTC</pubDate>
      
      <guid>/blog/2013/09/05/install-redmine</guid>
      <description>

&lt;p&gt;私はバイトではプロジェクト管理に &lt;a href=&#34;http://backlog.jp&#34;&gt;Backlog&lt;/a&gt;のサービスを利用してますが、同様のOSSに &lt;a href=&#34;http://redmine.jp&#34;&gt;Redmine&lt;/a&gt;なるものがあると聞いて動かしてみたときのメモ。&lt;/p&gt;

&lt;p&gt;以下、公式の引用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Redmineはオープンソースのプロジェクト管理ソフトウェアです。&lt;/p&gt;

&lt;p&gt;プロジェクトのタスク管理、進捗管理、情報共有が行えます。SubversionやGitなどのバージョン管理システムとの連携機能も備えており、ソフトウェア開発やwebサイト制作などのITプロジェクトで特に威力を発揮します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Redmineの管理団体(？)が &lt;a href=&#34;http://hosting.redmine.jp/&#34;&gt;MyRedmine&lt;/a&gt;というホスティングサービスを提供してたりしますが、今回はこれをローカルで動かします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://redmine.jp/guide/RedmineInstall/&#34;&gt;公式ドキュメント&lt;/a&gt;を参考に作業していきます。&lt;/p&gt;

&lt;p&gt;まずはダウンロード。現在の最新版は2.3.2だそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cd ~/Ruby
$svn checkout http://svn.redmine.org/redmine/branches/2.3-stable redmine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んで、グローバルの空間を汚したくないので新たにGemsetを作ります。本来ならbundler仕事なのですが、railsのバージョンとか仕組みの問題が面倒臭そうだったのでGemsetで管理。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$rvm use --create 1.9.3@redmine
$cd redmine
$echo ruby-1.9.3-p448 &amp;gt; .ruby-version
$echo redmine &amp;gt; .ruby-gemset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで~/Ruby/redmineにcdすると自動的にrvmが1.9.3@redmineに切り替えてくれます。&lt;br /&gt;
※注意&lt;br /&gt;
&lt;code&gt;.rvmrc&lt;/code&gt;に&lt;code&gt;rvm use 1.9.3@redmine&lt;/code&gt;と書いてたら怒られます。&lt;code&gt;.ruby-version&lt;/code&gt;と&lt;code&gt;.ruby-gemset&lt;/code&gt;がバージョン管理システムに依存しない新しい書き方だそうです。&lt;/p&gt;

&lt;p&gt;データベースはデフォルトだとMySQLを使う設定になってますがこんなお試しにのためにMySQLを動かしたくないのでSQLiteに変更。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cp config/{database.yml.example, database.yml}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のあと、database.ymlのproductionの部分を以下のように変更。&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;production&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;adapter&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;sqlite3&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;db/redmine.sqlite3&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;あとは&lt;code&gt;bundle install&lt;/code&gt;。(bundlerはインストールされてる前提です)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$bundle install --without development test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると…あれ？RMagickでコケる…。公式ドキュメントには &lt;code&gt;bundle&lt;/code&gt;の&lt;code&gt;--without&lt;/code&gt;に&lt;code&gt;rmagick&lt;/code&gt;を加えろと書いてますが画像扱えないのは悔しいので色々調べた結果、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sudo apt-get install libmagic-dev libmagickwand-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で依存関係を満せるようです。これでようやく&lt;code&gt;bundle install&lt;/code&gt;が通ります。&lt;/p&gt;

&lt;p&gt;ここまできたらあとはドキュメント通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$rake generate_secret_token
$RAILS_ENV=production rake db:migrate
$RAILS_ENV=production rake redmine:load_default_data
$rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…あれ？&lt;code&gt;rails s&lt;/code&gt;でコケる。&lt;br /&gt;
これは自分がrailsに慣れてなかったのが問題のようで、正しくは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$rails s -e production
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$RAILS_ENV=production rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としても同じ。これで &lt;a href=&#34;http://localhost:3000&#34;&gt;localhost:3000&lt;/a&gt;にアクセスするとRedmineが開きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/redmine-home.png&#34; alt=&#34;Redmineのホーム画面&#34; title=&#34;redmine-home&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;因みにAdminのID、パスワードはadminだそうです。&lt;/p&gt;

&lt;p&gt;データベースの設定のexample部分にjenkinsとかいう文字列があったけど連携できるのかなぁ。要調査。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;デフォルトのWEBrickだと遅いのでGemfileに&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;thin&#34;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;を加えて、&lt;code&gt;bundle install&lt;/code&gt;し直すと自動的にThinを使ってくれるそうです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PDFユーティリティ</title>
      <link>/blog/2013/09/03/pdftk</link>
      <pubDate>Tue, 03 Sep 2013 23:34:00 UTC</pubDate>
      
      <guid>/blog/2013/09/03/pdftk</guid>
      <description>&lt;p&gt;小ネタ。コマンドラインからPDFを編集した話の備忘録。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seeds-std.co.jp/seedsblog/181.html&#34;&gt;こちら&lt;/a&gt;に紹介されてるように、pdftkというツールである程度のことはできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sudo apt-get install pdftk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でインストール可能。&lt;br /&gt;
今回は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$for pdf in *.pdf
&amp;gt;&amp;gt;do
&amp;gt;&amp;gt; pdftk $pdf cat 1-endR output `basename $pdf .pdf`_rot.pdf
&amp;gt;&amp;gt;done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で全てのPDFの全てのページを右周りに回転し、名前に_rotを付けて保存した。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pdftk *.pdf cat output all.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかで結合なんかもできて便利。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>