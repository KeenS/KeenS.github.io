<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>開発環境 on κeenのHappy Hacκing Blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://KeenS.github.io/categories/E9968BE799BAE792B0E5A283/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Wed, 13 Aug 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Emacs便利機能/Tips紹介</title>
      <link>http://keens.github.io/blog/2014/08/13/emacs-utility-functions</link>
      <pubDate>Wed, 13 Aug 2014 00:00:00 UTC</pubDate>
      
      <guid>http://keens.github.io/blog/2014/08/13/emacs-utility-functions</guid>
      <description>

&lt;p&gt;κeenです。このブログのアクセスログを見てるとEmacsの記事が好評なようなのでここは一つ私の知ってる便利機能を全列挙してみますね。&lt;/p&gt;

&lt;p&gt;どの辺から常識でどの辺からTipsかは私の主観です。だいたいるびきちさんの本に載ってるのは常識扱いです。&lt;/p&gt;

&lt;p&gt;※&lt;code&gt;-!-&lt;/code&gt;でカーソル位置、&lt;code&gt;-¡-&lt;/code&gt;でマーク位置を表すものとします。&lt;br /&gt;
※私はEmacsのtrunkをビルドして使ってるので最新のリリース版のEmacsにも含まれない機能もあるかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;改行/インデント系&lt;/h1&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;&lt;code&gt;C-m&lt;/code&gt; &lt;code&gt;RET&lt;/code&gt; &lt;code&gt;C-j&lt;/code&gt; &lt;code&gt;C-o&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;最初の頃は混乱してました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;key&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;lisp function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C-m = RET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;newline&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C-j&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;newline-and-indent&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C-o&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;open-line&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;です。&lt;code&gt;C-m&lt;/code&gt;と&lt;code&gt;C-o&lt;/code&gt;の違いはカーソルが現在行に残るか残らないかです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aaa-!-aaa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;↓ &lt;code&gt;C-m&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aaa
-!-aaa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ですが、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aaa-!-aaa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;↓ &lt;code&gt;C-o&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aaa-!-
aaa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C-o&lt;/code&gt;の改行後にインデントする版を捜したのですが&lt;code&gt;C-M-o (split-line)&lt;/code&gt;という近いコマンドはあるもののまさにというのはありませんでした。&lt;/p&gt;

&lt;p&gt;※trunkではデフォルトで&lt;code&gt;electric-indent-mode&lt;/code&gt;がonになってるので&lt;code&gt;C-m/RET&lt;/code&gt;と&lt;code&gt;C-j&lt;/code&gt;が入れ替わります。&lt;br /&gt;
※現在行と改行した先の行両方をインデントする&lt;code&gt;indent-then-newline-and-indent&lt;/code&gt;という関数もあります。&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;&lt;code&gt;M-^&lt;/code&gt;(&lt;code&gt;delete-indentation&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;直感的には&lt;code&gt;newline-and-indent&lt;/code&gt;の逆関数です。今の行を上の行にくっつけます。そのとき邪魔になるインデントは取り除いてくれます。&lt;code&gt;M-- M-^&lt;/code&gt;とすると下の行を今の行にくっつけてくれます。&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;&lt;code&gt;C-M-j&lt;/code&gt;(&lt;code&gt;indent-new-comment-line&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;コメント内で使う&lt;code&gt;C-j&lt;/code&gt;です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;; This is a comment-!-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;↓ &lt;code&gt;C-M-j&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;; This is a comment
;;; -!-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;&lt;code&gt;M-m&lt;/code&gt;(&lt;code&gt;back-to-indentation&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;現在行の空白文字でない最初の文字に移動します。viでいう&lt;code&gt;^&lt;/code&gt;です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    aaa-!-bbb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;↓&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    -!-aaabbb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;&lt;code&gt;electric-indent-mode&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;さっきちらっと触れました。&lt;code&gt;C-m&lt;/code&gt;が&lt;code&gt;newline-and-indent&lt;/code&gt;になって&lt;code&gt;C-j&lt;/code&gt;が&lt;code&gt;newline&lt;/code&gt;になるモードです。&lt;/p&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;削除/kill-ring系&lt;/h1&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;&lt;code&gt;&amp;lt;C-S-backspace&amp;gt;&lt;/code&gt;(&lt;code&gt;kill-whole-line&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;おなじみ &lt;code&gt;C-k&lt;/code&gt;(&lt;code&gt;kill-line&lt;/code&gt;)は現在位置から行末までを削除しますが、それだとぬるいといって&lt;code&gt;C-k&lt;/code&gt;で現在行をまるごと削除する設定(&lt;code&gt;(setq kill-whole-line t)&lt;/code&gt;)してる人もいますが、実は&lt;code&gt;&amp;lt;C-S-backspace&amp;gt;&lt;/code&gt;で可能なのでした。鍛えられた左手の小指の先と腹でCaps LockとShiftを同時押しすれば難易度もそんなに高くない！&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;&lt;code&gt;C-M-w&lt;/code&gt;(&lt;code&gt;append-next-kill&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;nextのkillコマンドでkillした内容をkill-ringにappendします。チュートリアルにも載ってた気がするんですがすっかり忘れてました。&lt;/p&gt;

&lt;h1 id=&#34;toc_9&#34;&gt;編集系&lt;/h1&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;&lt;code&gt;electric-pair-mode&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;開き括弧を挿入すると自動で閉じ括弧を挿入してくれます。リージョンを選択して括弧を挿入するとリージョンを囲むように括弧を挿入してくれます。これ大事。挿入後のカーソルは開き/閉じのどちらを入力したかに依ります。まあ、想像付きますね。地味に鉤括弧にも対応。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby-mode&lt;/code&gt;はこの挙動を上書きしてるので殴り殺したくなります。&lt;/p&gt;

&lt;h2 id=&#34;toc_11&#34;&gt;&lt;code&gt;subword-mode&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;私はキャメルケースが嫌いという超個人的理由で使ってないのですが、キャメルケースがコーディング規約な言語を使う人には便利でしょう。キャメルケースの1こぶを1単語と見做します。例えば&amp;rdquo;SubWord&amp;rdquo;は&amp;rdquo;Sub&amp;rdquo; &amp;ldquo;Word&amp;rdquo;と認識されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-!-SubWord 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;M-f&lt;/code&gt;(&lt;code&gt;forward-word&lt;/code&gt;)すると通常は
    SubWord-!-
となりますが&lt;code&gt;subword-mode&lt;/code&gt;内だと
    Sub-!-Word
となります。その他word系の操作が全部こぶ単位になります。&lt;/p&gt;

&lt;p&gt;因みにモードラインの表示が&amp;rdquo;, &amp;ldquo;と、微妙な感じです。&lt;/p&gt;

&lt;h2 id=&#34;toc_12&#34;&gt;&lt;code&gt;superword-mode&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;subword-mode&lt;/code&gt;の逆です。Lispの&amp;rdquo;this-is-a-symbol&amp;rdquo;といったシンボルが&amp;rdquo;this&amp;rdquo; &amp;ldquo;-is&amp;rdquo; &amp;ldquo;-a&amp;rdquo; &amp;ldquo;-symbol&amp;rdquo;と認識されていたのが&amp;rdquo;this-is-a-symbol&amp;rdquo;と認識されます。&lt;/p&gt;

&lt;p&gt;因みにモードラインの表示は &amp;ldquo;$^2$&amp;rdquo; です。&lt;/p&gt;

&lt;h2 id=&#34;toc_13&#34;&gt;&lt;code&gt;C-x C-u&lt;/code&gt;(&lt;code&gt;upcase-region&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;リージョンを選択した状態で使うとリージョンを大文字にしてくれます。
これを使ったTipsです。&lt;/p&gt;

&lt;p&gt;シチュエーションは全部大文字の単語(定数とかで良く出てくる)を入力したいが、Caps Lockは既にCtrlにしてあるので使えないって状態です。&lt;br /&gt;
先ず、&lt;code&gt;C-@&lt;/code&gt;します。そして目的の単語を小文字のまま入力します。そして&lt;code&gt;C-x C-u&lt;/code&gt;します。すると全て大文字になります。便利。&lt;code&gt;C-x C-l&lt;/code&gt;(&lt;code&gt;lowercase-region&lt;/code&gt;)でも同じこと出来ますが、使いたいシチュエーションは少ないでしょう。&lt;/p&gt;

&lt;p&gt;尚、このコマンドはデフォルトで無効になっているので普段使いするには一回使ってダイアログを出さないようにするか&lt;code&gt;init.el&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(put &#39;upcase-region &#39;disabled nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加しておく必要があります。&lt;/p&gt;

&lt;h2 id=&#34;toc_14&#34;&gt;&lt;code&gt;M-- M-u&lt;/code&gt;(&lt;code&gt;upcase-word&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;upcase-word&lt;/code&gt;はカーソルの次の単語を大文字にしますが、負の前置引数を与えると直前の単語を大文字にしてくれます。ちょっと押し辛いですが一応覚えておきましょう。&lt;code&gt;M-- M-l&lt;/code&gt;(&lt;code&gt;capitalize-word&lt;/code&gt;)もそれなりに使えるかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;toc_15&#34;&gt;complete系&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;icomplete-mode&lt;/code&gt;するとミニバッファでの入力時に補完候補が随時表示されますが、実はあの候補に色々操作出来るのです。&lt;/p&gt;

&lt;h2 id=&#34;toc_16&#34;&gt;&lt;code&gt;M-p&lt;/code&gt; / &lt;code&gt;M-n&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ヒストリを辿れます&lt;/p&gt;

&lt;h2 id=&#34;toc_17&#34;&gt;&lt;code&gt;C-j&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;先頭の候補に決定します。&lt;/p&gt;

&lt;h2 id=&#34;toc_18&#34;&gt;&lt;code&gt;C-,&lt;/code&gt; / &lt;code&gt;C-.&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;候補を後/先に送ります。キーボードを見て&amp;lt; / &amp;gt;を押せば良いので簡単ですね。&lt;/p&gt;

&lt;h2 id=&#34;toc_19&#34;&gt;&lt;code&gt;C-M-i&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;先頭の候補を補完します。続けて&lt;code&gt;C-M-i&lt;/code&gt;すると順次次候補になります。&lt;/p&gt;

&lt;h2 id=&#34;toc_20&#34;&gt;&lt;code&gt;C-r&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ヒストリを検索します。&lt;/p&gt;

&lt;h2 id=&#34;toc_21&#34;&gt;&lt;code&gt;C-s&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ミニバッファ内を前方検索します。あまり需要なさそうですね。&lt;/p&gt;

&lt;h1 id=&#34;toc_22&#34;&gt;isearch&lt;/h1&gt;

&lt;p&gt;isearchはカーソルをバッファに残したままミニバッファを編集するのでキーバインドが特殊です。&lt;/p&gt;

&lt;h2 id=&#34;toc_23&#34;&gt;&lt;code&gt;C-s&lt;/code&gt;(&lt;code&gt;isearch-repeat-forward&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;検索文字列が空の状態で&lt;code&gt;C-s&lt;/code&gt;すると前回の検索文字列で検索します。&lt;/p&gt;

&lt;h2 id=&#34;toc_24&#34;&gt;&lt;code&gt;C-j&lt;/code&gt;(&lt;code&gt;isearch-printing-char&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;RETが決定に使われてるので改行はC-jになります。&lt;/p&gt;

&lt;h2 id=&#34;toc_25&#34;&gt;&lt;code&gt;C-w&lt;/code&gt;(&lt;code&gt;isearch-yank-word-or-char&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;カーソル下の単語又は文字を検索文字列にします。連続して押すと範囲を広げます。&lt;/p&gt;

&lt;h2 id=&#34;toc_26&#34;&gt;&lt;code&gt;C-M-w&lt;/code&gt;(&lt;code&gt;isearch-del-char&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;1文字削除します。&lt;code&gt;DEL&lt;/code&gt;(&lt;code&gt;isearch-delete-char&lt;/code&gt;)とは違って削除してもバッファのポイントは戻りません。&lt;/p&gt;

&lt;h2 id=&#34;toc_27&#34;&gt;&lt;code&gt;C-M-y&lt;/code&gt;(&lt;code&gt;isearch-yank-char&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;カーソル下の文字を検索文字列に足します。&lt;/p&gt;

&lt;h2 id=&#34;toc_28&#34;&gt;&lt;code&gt;M-s C-e&lt;/code&gt;(&lt;code&gt;isearch-yank-line&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;カーソルから行末までを検索文字列にします。&lt;/p&gt;

&lt;h2 id=&#34;toc_29&#34;&gt;&lt;code&gt;M-s&lt;/code&gt;(&lt;code&gt;isearch-toggle-&lt;/code&gt;)系&lt;/h2&gt;

&lt;p&gt;isearchには実は文字列検索だけでなく、さまざまな検索方法があります。
&lt;code&gt;M-s _&lt;/code&gt;(&lt;code&gt;isearch-toggle-symbol&lt;/code&gt;)、&lt;code&gt;M-s c&lt;/code&gt;(&lt;code&gt;isearch-toggle-case-fold&lt;/code&gt;)、&lt;code&gt;M-s r&lt;/code&gt;(&lt;code&gt;isearch-toggle-regexp&lt;/code&gt;)、&lt;code&gt;M-s w&lt;/code&gt;(&lt;code&gt;isearch-toggle-word&lt;/code&gt;)、あたりを覚えておくと良いでしょう。&lt;/p&gt;

&lt;h1 id=&#34;toc_30&#34;&gt;バッファ/ウィンドウ系&lt;/h1&gt;

&lt;h2 id=&#34;toc_31&#34;&gt;split-threshold&lt;/h2&gt;

&lt;p&gt;Emacsはデフォルトの状態では何かしらのウィンドウを分割するアクション(e.g. &lt;code&gt;list-buffers&lt;/code&gt;)でウィンドウを上下に分割します。しかしワイドディスプレイを使っていると左右に分割して欲しいものです。そこで、この設定です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq split-height-threshold nil)
(setq split-width-threshold 100)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この設定で、幅が100桁以上なら左右、100桁未満なら上下に分割するようになります。100という数字は私が試行錯誤して出した最適解です。&lt;code&gt;split-height-threshold&lt;/code&gt;と&lt;code&gt;split-width-threshold&lt;/code&gt;を同時に設定したら先に&lt;code&gt;split-height-threshold&lt;/code&gt;が判定されるようです。&lt;/p&gt;

&lt;h2 id=&#34;toc_32&#34;&gt;&lt;code&gt;C-x 4&lt;/code&gt;(&lt;code&gt;-other-window&lt;/code&gt;)系&lt;/h2&gt;

&lt;p&gt;ウィンドウを分割して隣のウィンドウに別のファイルを開きたい、あるいは既に分割してある隣のウィンドウに別のバッファを持ってきたいといったときに使うのが&lt;code&gt;C-x 4&lt;/code&gt;(&lt;code&gt;-other-window&lt;/code&gt;)系のコマンドです。&lt;code&gt;C-x 4 C-f&lt;/code&gt;(&lt;code&gt;find-file-other-window&lt;/code&gt;)、&lt;code&gt;C-x 4 b&lt;/code&gt;(&lt;code&gt;switch-to-buffer-other-window&lt;/code&gt;)、&lt;code&gt;C-x 4 0&lt;/code&gt;(&lt;code&gt;kill-buffer-and-window&lt;/code&gt;)あたりを覚えておけば良いでしょう。詳しくは&lt;code&gt;C-x 4 C-h&lt;/code&gt;すると見れます。&lt;/p&gt;

&lt;p&gt;似たようなのに、&lt;code&gt;C-x 5&lt;/code&gt;(&lt;code&gt;-other-frame&lt;/code&gt;)系のコマンドがありますが、私はEmacsのフレームを2つ以上出したいという状況に遭遇したことがないので省略します。&lt;/p&gt;

&lt;h2 id=&#34;toc_33&#34;&gt;&lt;code&gt;find-alternate-file&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ほぼ&lt;code&gt;find-file&lt;/code&gt;と同じ挙動ですが、現在のバッファをkillしてから新たなファイルを開きます。あるファイルを開こうとして間違ったファイルを開いてしまったときに使います(バッファの内容が空なので間違ったことが直ぐ分かる)。地味に便利なのですがデフォルトでキーが割り当てられていません。&lt;code&gt;C-x C-a&lt;/code&gt;あたりが妥当でしょうか。&lt;/p&gt;

&lt;h1 id=&#34;toc_34&#34;&gt;rectangle(矩形選択)系&lt;/h1&gt;

&lt;p&gt;最近機能が強化されてるrectangle系です。プリフィクスが&lt;code&gt;C-x r&lt;/code&gt;と押し辛いのが難点ですが、使用頻度が高い訳ではないのでまあ妥当でしょう。&lt;/p&gt;

&lt;p&gt;region-rectangleはカーソルとマークで成す長方形を範囲とします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ab-!-cdefg
hijklmn
opqrs-¡-tu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のとき、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cde
jkl
qrs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;がregion-rectangleに入ります。&lt;/p&gt;

&lt;p&gt;しかしこれだと分り辛いものです。そこで、最近&lt;code&gt;C-x SPC&lt;/code&gt;でregion-rectangleを視覚表示出来るようになりました。るびきちさんの本に載ってる&lt;code&gt;sense-region&lt;/code&gt;に近いです。&lt;/p&gt;

&lt;h2 id=&#34;toc_35&#34;&gt;&lt;code&gt;C-x r k&lt;/code&gt;(&lt;code&gt;kill-rectangle&lt;/code&gt;) / &lt;code&gt;C-x r d&lt;/code&gt;(&lt;code&gt;delete-rectangle&lt;/code&gt;) / &lt;code&gt;C-x r M-w&lt;/code&gt;(&lt;code&gt;copy-rectangle-as-kill&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;名前のままですね。&lt;code&gt;kill-rectangle&lt;/code&gt;や&lt;code&gt;copy-rectangle-as-kill&lt;/code&gt;が保存するkill-ringは通常のkill-ringとは異なります。&lt;/p&gt;

&lt;p&gt;region-rectangleを視覚表示した状態で&lt;code&gt;C-w&lt;/code&gt;すると&lt;code&gt;kill-rectangle&lt;/code&gt;になるようです(他のコマンドは未確認)&lt;/p&gt;

&lt;h2 id=&#34;toc_36&#34;&gt;&lt;code&gt;C-x r y&lt;/code&gt;(&lt;code&gt;yank-rectangle&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;kill-rectangle&lt;/code&gt;や&lt;code&gt;copy-rectangle-as-kill&lt;/code&gt;が保存したものを吐きます。どのように挿入されるかというと、&lt;br /&gt;
rectangleのkill-ringが&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cde
jkl
qrs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、バッファが&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-!-foo
bar
baz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のとき、&lt;code&gt;C-x r y&lt;/code&gt;すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cdefoo
jklbar
qrs-!-baz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。&lt;/p&gt;

&lt;h2 id=&#34;toc_37&#34;&gt;&lt;code&gt;C-x r t&lt;/code&gt;(&lt;code&gt;string-rectangle&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;rectangle-regionを文字列で置換します。ちょっと実用的な例を出しましょうかね。&lt;/p&gt;

&lt;p&gt;バッファが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;pic_-¡-list_first(pic_state *);
pic_list_second(pic_state *);
pic_list-!-_third(pic_state *);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;C-x r t RET vector&lt;/code&gt;すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;pic_vector_first(pic_state *);
pic_vector_second(pic_state *);
pic_vector_third(pic_state *);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。最近プレビュー機能が入ったので入力しながらリアルタイムでバッファが書き換わります。最小設定主義のemacsにしては珍しい変更ですね。&lt;/p&gt;

&lt;p&gt;尚、幅0のregion-rectangleに使うとプリフィクスを付けられることも覚えておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-¡-This sentence is
-!-a quotation
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;に&lt;code&gt;C-x r t RET &amp;gt;&lt;/code&gt;すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; This sentence is
&amp;gt; a quotation.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と出来ます。&lt;/p&gt;

&lt;h1 id=&#34;toc_38&#34;&gt;register系&lt;/h1&gt;

&lt;p&gt;register系も&lt;code&gt;C-x r&lt;/code&gt;のブリフィクスを持ちます。非常に高機能なのに押し辛く、rectangleと紛らわしいキーバインドなのは残念です。&lt;/p&gt;

&lt;p&gt;registerの概念は分り辛いのですが、「何でも保存出来る箱」で、しかも「キー1つにつき箱一つ」です。viの名前付きバッファと似ていますが何でも保存出来る点で異なります。&lt;/p&gt;

&lt;p&gt;それぞれの機能を見てちょっと自分で試してみて理解して下さい。&lt;/p&gt;

&lt;h2 id=&#34;toc_39&#34;&gt;&lt;code&gt;C-x r SPC&lt;/code&gt;(&lt;code&gt;point-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;レジスタにポイントを登録します。&lt;code&gt;C-x r C-SPC&lt;/code&gt;でも&lt;code&gt;C-x r C-@&lt;/code&gt;でも同じです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C-x r SPC&lt;/code&gt;すると&amp;rdquo;Point to Register: &amp;ldquo;とプロンプトが出るので、現在のポイントを登録させたいレジスタを選びます。レジスタを選ぶというのは好きなキーを押せばよいです。私は考えるのが面倒なのでaから順番に使っていってます。&lt;/p&gt;

&lt;p&gt;これだけだと分かりにくいので次のコマンドも参考にして下さい。&lt;/p&gt;

&lt;h2 id=&#34;toc_40&#34;&gt;&lt;code&gt;C-x r j&lt;/code&gt;(&lt;code&gt;jump-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;point-to-register&lt;/code&gt;でレジスタに登録したポイントに飛びます。例えばaレジスタにポイントを登録したなら&lt;code&gt;C-x r j RET a&lt;/code&gt;でそこに飛べます。最近、現在登録されてるレジスタ一覧が出るようになったので然程迷わないかと思います。&lt;/p&gt;

&lt;h2 id=&#34;toc_41&#34;&gt;&lt;code&gt;C-x r x&lt;/code&gt;(&lt;code&gt;copy-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;レジスタに選択範囲の文字列を登録します。&lt;code&gt;C-x r s&lt;/code&gt;でも同じです。&lt;/p&gt;

&lt;p&gt;rectangleと同じプリフィクスを使っているがために非常に覚え辛いキーバインドになってしまっています。しかもkill-ringとの差別化がイマイチ分からないので需要なさそうですね。&lt;/p&gt;

&lt;h2 id=&#34;toc_42&#34;&gt;&lt;code&gt;C-x r r&lt;/code&gt;(&lt;code&gt;copy-rectangle-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;region-rectangleをレジスタに登録します。&lt;/p&gt;

&lt;h2 id=&#34;toc_43&#34;&gt;&lt;code&gt;C-x r i&lt;/code&gt;(&lt;code&gt;insert-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;レジスタに登録した文字列/rectangle/数字をバッファに挿入します。&lt;code&gt;C-x r g&lt;/code&gt;でも同じです。&lt;/p&gt;

&lt;p&gt;ポイントを挿入しようとすると数字が入るようです(ポイントは内部的には数字)。&lt;/p&gt;

&lt;h2 id=&#34;toc_44&#34;&gt;&lt;code&gt;C-x r n&lt;/code&gt;(&lt;code&gt;number-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;レジスタに数字を登録します。登録した数字は&lt;code&gt;C-x r +&lt;/code&gt;(&lt;code&gt;increment-regiser&lt;/code&gt;)で増やしたり(負の前置引数を与えれば減らすことも可能)&lt;code&gt;insert-register&lt;/code&gt;でバッファに挿入することも可能。キーボードマクロなんかで役に立つのかな？&lt;/p&gt;

&lt;h2 id=&#34;toc_45&#34;&gt;&lt;code&gt;C-x r w&lt;/code&gt;(&lt;code&gt;window-configuration-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;現在のフレームのwindow-configuration(ウィンドウの分割や表示されるバッファ)をレジスタに登録します。復元は&lt;code&gt;C-x r j&lt;/code&gt;(&lt;code&gt;jump-to-register&lt;/code&gt;)です。&lt;/p&gt;

&lt;p&gt;同様の機能を提供するために数々のプラグインが作られてきましたが標準で提供されることになりました。&lt;/p&gt;

&lt;p&gt;これと次の&lt;code&gt;frameset-to-register&lt;/code&gt;は最近入った機能だった気がします。&lt;/p&gt;

&lt;h2 id=&#34;toc_46&#34;&gt;&lt;code&gt;C-x r f&lt;/code&gt;(&lt;code&gt;frameset-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;frameset(フレームの数や位置、サイズ、そしてそれぞれのフレームのwindow-configuration)をレジスタに登録します。復元は&lt;code&gt;C-x r j&lt;/code&gt;(&lt;code&gt;jump-to-register&lt;/code&gt;)です。&lt;/p&gt;

&lt;h2 id=&#34;toc_47&#34;&gt;蛇足&lt;/h2&gt;

&lt;p&gt;キーは割り当てられてませんがキーボードマクロの保存/実行やレジスタにappend/prependするコマンドもあるようです。&lt;/p&gt;

&lt;p&gt;同じ&lt;code&gt;C-x r&lt;/code&gt;のプリフィクスの機能にブックマークがありますが、るびきちさんの本に載ってるので割愛します。&lt;/p&gt;

&lt;h1 id=&#34;toc_48&#34;&gt;vc(バージョン管理)系&lt;/h1&gt;

&lt;p&gt;詳しい使い方は多数の記事があると思うのでそちらに任せるとして、よく使うものを紹介します。尚、るびきちさんの本の頃からは大分進化してるのでvcに関しては参考にしない方が良いかと思います。例えば&lt;code&gt;git init&lt;/code&gt;相当をするコマンド(&lt;code&gt;vc-create-repo&lt;/code&gt;)は追加されてます。その他mergeやpull/pushなども。&lt;/p&gt;

&lt;p&gt;各vcsの対応状況は&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;;; Supported version-control systems presently include CVS, RCS, GNU&lt;br /&gt;
;; Arch, Subversion, Bzr, Git, Mercurial, Monotone and SCCS&lt;br /&gt;
;; (or its free replacement, CSSC).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とあります。かなり多いですね。というかこんなにvcsあったんですね。&lt;/p&gt;

&lt;p&gt;私が最近gitしか使ってないので他のvcsでどうなるかは分かりません。一応vc.el自体vcsの差異を吸収するものなのですが、vcs固有の挙動もあるのです。&lt;/p&gt;

&lt;h2 id=&#34;toc_49&#34;&gt;&lt;code&gt;C-x v =&lt;/code&gt;(&lt;code&gt;vc-diff&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git diff &amp;lt;バッファのファイル&amp;gt;&lt;/code&gt;相当です。大体、しばらく作業してそろそろコミットするかーって時に使います。表示されるバッファはdiff-modeになっているのでdiffの部分でRETすると変更箇所にジャンプ出来ます。&lt;/p&gt;

&lt;h2 id=&#34;toc_50&#34;&gt;&lt;code&gt;C-x v l&lt;/code&gt;(&lt;code&gt;vc-print-log&lt;/code&gt;) / &lt;code&gt;C-x v L&lt;/code&gt;(&lt;code&gt;vc-root-log&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;C-x v l&lt;/code&gt;(&lt;code&gt;vc-print-log&lt;/code&gt;) で現在ファイルの、 &lt;code&gt;C-x v L&lt;/code&gt;(&lt;code&gt;vc-root-log&lt;/code&gt;) でバージョン管理下全体のログ(コミットグラフ)を見れます。TABでログ間を移動出来たりRETでログを展開したりDでそのログのdiffを見たり色々なことが出来ます。diffを表示させたら勿論RETで変更箇所に飛べます。変更履歴を追うときは圧倒的に便利。&lt;/p&gt;

&lt;p&gt;私もそこまで深追いしてないのでlogバッファでの操作の調査は読者の課題とする。&lt;/p&gt;

&lt;h2 id=&#34;toc_51&#34;&gt;&lt;code&gt;C-x v v&lt;/code&gt;(&lt;code&gt;vc-next-action&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;vcの中で一番有名なコマンドでしょうから詳細は省きます。私が強調したいのはコミットログ書くときのlog-editモードです。地味に機能強化されてます。&lt;code&gt;C-c C-d&lt;/code&gt;(&lt;code&gt;log-edit-show-diff&lt;/code&gt;)でdiffを表示したり&lt;code&gt;C-c C-e&lt;/code&gt;(&lt;code&gt;vc-git-log-edit-toggle-amend&lt;/code&gt;)でamendにしたり出来ます。詳しくは&lt;code&gt;C-c ?&lt;/code&gt;(&lt;code&gt;log-edit-mode-help&lt;/code&gt;)して下さい。&lt;/p&gt;

&lt;h2 id=&#34;toc_52&#34;&gt;&lt;code&gt;C-x v d&lt;/code&gt;(&lt;code&gt;vc-dir&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;ディレクトリ単位での機能を使えます。というかファイル単位でない機能(つまりvcsの多くの機能)を使えます。最近はvcを使うときはこれがメインになってます。色々機能があるので&lt;code&gt;&amp;lt;f1&amp;gt; b&lt;/code&gt;(&lt;code&gt;describe-bindings&lt;/code&gt;)して確認して下さい。&lt;/p&gt;

&lt;h2 id=&#34;toc_53&#34;&gt;&lt;code&gt;C-x v u&lt;/code&gt;(&lt;code&gt;vc-revert&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;これは逆に使ってはいけないコマンドです。バッファのファイルのみをリバートする(&lt;code&gt;git checkout -- &amp;lt;バッファのファイル&amp;gt;&lt;/code&gt;相当)と思いきや、&lt;code&gt;git reset --hard&lt;/code&gt;するようです。no more被害者。&lt;/p&gt;

&lt;h1 id=&#34;toc_54&#34;&gt;view-mode&lt;/h1&gt;

&lt;p&gt;かなりキーバインドが特殊ですが割と便利な機能です。ここで紹介したもの以外にもキーはバインドされてますが非自明なのは大体こんなもんでしょう。&lt;/p&gt;

&lt;h2 id=&#34;toc_55&#34;&gt;&lt;code&gt;RET&lt;/code&gt;(&lt;code&gt;View-scroll-line-forward&lt;/code&gt;) / &lt;code&gt;y&lt;/code&gt;(&lt;code&gt;View-scroll-line-backward&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;上下に1行スクロールします。ありそうで他にない機能です。&lt;/p&gt;

&lt;h2 id=&#34;toc_56&#34;&gt;&lt;code&gt;/&lt;/code&gt;(&lt;code&gt;View-search-regexp-forward&lt;/code&gt;) / &lt;code&gt;\&lt;/code&gt;(&lt;code&gt;View-search-regexp-backward&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;まさかのviバインド。ちゃんと&lt;code&gt;n&lt;/code&gt;(&lt;code&gt;View-search-last-regexp-forward&lt;/code&gt;)と&lt;code&gt;p&lt;/code&gt;(&lt;code&gt;View-search-last-regexp-backward&lt;/code&gt;)も用意されてます。&lt;/p&gt;

&lt;h2 id=&#34;toc_57&#34;&gt;&lt;code&gt;s&lt;/code&gt;(&lt;code&gt;isearch-forward&lt;/code&gt;) / &lt;code&gt;r&lt;/code&gt; (&lt;code&gt;isearch-backward&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;C-&lt;/code&gt;がなくなっただけですね。他にも&lt;code&gt;C-&lt;/code&gt;がなくなっただけのコマンドはいっぱいありますが&lt;code&gt;/&lt;/code&gt;/&lt;code&gt;\&lt;/code&gt;との比較で出しました。&lt;/p&gt;

&lt;h2 id=&#34;toc_58&#34;&gt;&lt;code&gt;m&lt;/code&gt;(&lt;code&gt;point-to-register&lt;/code&gt;) / &lt;code&gt;&#39;&lt;/code&gt;(&lt;code&gt;register-to-point&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;m&lt;/code&gt;でマークして&lt;code&gt;&#39;&lt;/code&gt;でジャンプです。&lt;/p&gt;

&lt;h2 id=&#34;toc_59&#34;&gt;やめる系&lt;/h2&gt;

&lt;p&gt;なぜか一杯あります。前提として、view-modeは別のファイルから「view-modeで(時に別ウィンドウで)ファイルを開く」系のコマンドで呼ばれることが多いというのがあります。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;コマンド&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;e&lt;/code&gt;(&lt;code&gt;View-exit&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;view-modeを抜ける。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;E&lt;/code&gt;(&lt;code&gt;View-exit-and-edit&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;view-modeを抜けてバッファを編集出来るようにする。つまり、read-only-modeも抜ける。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;c&lt;/code&gt;(&lt;code&gt;View-leave&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;view-modeを抜けてバッファを切り替えるがバッファはkillしない。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;C&lt;/code&gt;(&lt;code&gt;View-kill-and-leave&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;view-modeを抜けてバッファをkillして以前のバッファに切り替る。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;q&lt;/code&gt;(&lt;code&gt;View-quit&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;view-modeを抜けてウィンドウ内の状態を元に戻し、フォーカスも戻す。大抵バッファをkillする。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Q&lt;/code&gt;(&lt;code&gt;View-quit-all&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;view-modeを抜けてウィンドウ構成を元に戻す。大抵バッファをkillする。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;うん。覚えられね。&lt;/p&gt;

&lt;h1 id=&#34;toc_60&#34;&gt;dired系&lt;/h1&gt;

&lt;p&gt;便利なのに情報が少ないdired系。私はUbuntuのUnityを捨ててStumpwmを使っているのでファイルエクスプローラは専らEmacsですからよく使います。&lt;a href=&#34;http://localhost:4000/blog/2013/10/04/emacs-dired/&#34;&gt;以前のエントリ&lt;/a&gt;以外の便利機能を紹介します。&lt;/p&gt;

&lt;p&gt;因みに呆れるほどキーがバインドされてるのでここで紹介するのはほんの一部です。画像のサムネイル関連の機能なんかもあります。&lt;/p&gt;

&lt;h2 id=&#34;toc_61&#34;&gt;&lt;code&gt;+&lt;/code&gt;(&lt;code&gt;dired-create-directory&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;ディレクトリを作ります。&lt;/p&gt;

&lt;h2 id=&#34;toc_62&#34;&gt;&lt;code&gt;(&lt;/code&gt;(&lt;code&gt;dired-hide-ditail-mode&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;初期状態では&lt;code&gt;ls -l&lt;/code&gt;っぽい内容が表示されてますが&lt;code&gt;ls&lt;/code&gt;に変更出来ます。&lt;/p&gt;

&lt;h2 id=&#34;toc_63&#34;&gt;&lt;code&gt;v&lt;/code&gt;(&lt;code&gt;dired-view-file&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;ポイント下のファイルをview-modeで開きます。view-modeでは&lt;code&gt;q&lt;/code&gt;でバッファを閉じれるので、あるディレクトリ下のファイルを連続して読みたいときに便利です。&lt;/p&gt;

&lt;h2 id=&#34;toc_64&#34;&gt;&lt;code&gt;o&lt;/code&gt;(&lt;code&gt;dired-find-file-other-window&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;別ウィンドウでファイルを開きます。&lt;/p&gt;

&lt;h2 id=&#34;toc_65&#34;&gt;&lt;code&gt;C-o&lt;/code&gt;(&lt;code&gt;dired-display-file&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;別ウィンドウでファイルを開きますが、フォーカスは移りません。&lt;/p&gt;

&lt;p&gt;diredに限らず、ファイルへのリンクをリスト表示するバッファでは大抵&lt;code&gt;v&lt;/code&gt;と&lt;code&gt;o&lt;/code&gt;と&lt;code&gt;C-o&lt;/code&gt;が使えます。&lt;/p&gt;

&lt;h2 id=&#34;toc_66&#34;&gt;&lt;code&gt;i&lt;/code&gt;(&lt;code&gt;dired-maybe-insert-subdir&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;バッファの下にポイント下のディレクトリの内容を追加します。ツリー表示にする機能はないようです。&lt;/p&gt;

&lt;h2 id=&#34;toc_67&#34;&gt;&lt;code&gt;%&lt;/code&gt;(&lt;code&gt;dired--regexp&lt;/code&gt;)系&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;% C&lt;/code&gt;(&lt;code&gt;dired-do-copy-regexp&lt;/code&gt;)など色々あるのですがとりあえず使いそうなのは&lt;code&gt;% g&lt;/code&gt;(&lt;code&gt;dired-mark-files-containing-regexp&lt;/code&gt;)と&lt;code&gt;% m&lt;/code&gt;(&lt;code&gt;dired-mark-files-regexp&lt;/code&gt;)ですかね。&lt;/p&gt;

&lt;p&gt;拡張子でマークするコマンドがあった気がしたのですが見当りませんでした。&lt;/p&gt;

&lt;h2 id=&#34;toc_68&#34;&gt;検索/置換系&lt;/h2&gt;

&lt;p&gt;これも色々ある上にキーバインドが覚えづらいです。ポイント下又はマークしたファイル全てに操作を行います。キーを覚えるより&lt;code&gt;M-x&lt;/code&gt;で実行した方が速そうですね。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;キー&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;コマンド&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;dired-do-query-replace-regexp&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;M-s a C-s&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;dired-do-isearch&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;M-s a C-M-s&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;dired-do-isearch-regexp&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;toc_69&#34;&gt;eww (Emacs Web WOWer)&lt;/h1&gt;

&lt;p&gt;elispで書かれたブラウザ(正確にはWOWerらしい)です。レンダリングエンジンにはかつてgnusで使われて今は別プロジェクトになったshr.el(Simple HTML Renderer)が使われています。HTMLの他に簡単なCSSも理解します。&lt;/p&gt;

&lt;p&gt;libxsltなどのSGML解析系のライブラリを有効にしてビルドしないと使えないのでEmacsを野良ビルドする人は要注意です。&lt;/p&gt;

&lt;h2 id=&#34;toc_70&#34;&gt;&lt;code&gt;M-x eww&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;URL又はキーワードで検索します。検索エンンジンは&lt;code&gt;eww-search-prefix&lt;/code&gt;で制御出来ます。&lt;/p&gt;

&lt;p&gt;googleで検索したかったら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq-default eww-search-prefix &amp;quot;https://www.google.co.jp/search?q=&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;h2 id=&#34;toc_71&#34;&gt;キーバインド&lt;/h2&gt;

&lt;p&gt;infoライクに設定されてます。そんなに多くないのですが、一部抜粋すると&lt;code&gt;n&lt;/code&gt;(&lt;code&gt;eww-next-url&lt;/code&gt;)、&lt;code&gt;p&lt;/code&gt;(&lt;code&gt;eww-previous-url&lt;/code&gt;)、&lt;code&gt;l&lt;/code&gt;(&lt;code&gt;eww-back-url&lt;/code&gt;)、&lt;code&gt;r&lt;/code&gt;(&lt;code&gt;eww-forward-url&lt;/code&gt;)、&lt;code&gt;H&lt;/code&gt;(&lt;code&gt;eww-list-histories&lt;/code&gt;)、&lt;code&gt;&amp;amp;&lt;/code&gt;(&lt;code&gt;eww-browse-with-external-browser&lt;/code&gt;)、&lt;code&gt;b&lt;/code&gt;(&lt;code&gt;eww-add-bookmark&lt;/code&gt;)、&lt;code&gt;B&lt;/code&gt;(&lt;code&gt;eww-list-bookmarks&lt;/code&gt;)、&lt;code&gt;q&lt;/code&gt;(&lt;code&gt;quit-window&lt;/code&gt;)です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;n&lt;/code&gt; / &lt;code&gt;p&lt;/code&gt;と&lt;code&gt;l&lt;/code&gt; / &lt;code&gt;r&lt;/code&gt;の違いは、&lt;code&gt;l&lt;/code&gt; / &lt;code&gt;r&lt;/code&gt;はヒストリを辿る機能、&lt;code&gt;n&lt;/code&gt; / &lt;code&gt;p&lt;/code&gt;はヘッダに&lt;code&gt;&amp;lt;link rel=&amp;quot;Next/Prev&amp;quot; ...&amp;gt;&lt;/code&gt;が設定されているときにそれを辿ります。あまり馴染がないかもしれませんが広告料稼ぐためにページ分割しているサイトが多いので結構便利ですよ。&lt;/p&gt;

&lt;h1 id=&#34;toc_72&#34;&gt;newsticker&lt;/h1&gt;

&lt;p&gt;最後に最近見付けたRSS/Atomリーダーの紹介です。&lt;/p&gt;

&lt;p&gt;先ず、こんな感じの設定をします。ニュースサイトは自分の好きなものを選んで下さい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq-default newsticker-url-list &#39;((&amp;quot;産経&amp;quot; &amp;quot;http://sankei.jp.msn.com/rss/news/points.xml&amp;quot;)
                                    (&amp;quot;朝日-IT/Sci&amp;quot; &amp;quot;http://rss.asahi.com/rss/asahi/science.rdf&amp;quot;)
                                    (&amp;quot;技術評論社&amp;quot; &amp;quot;http://rss.rssad.jp/rss/gihyo/feed/rss2?rss&amp;quot;)
                                    (&amp;quot;Planet Lisp&amp;quot; &amp;quot;http://planet.lisp.org/rss20.xml&amp;quot;)
                                    (&amp;quot;Hacker News&amp;quot; &amp;quot;https://news.ycombinator.com/rss&amp;quot;)))
(setq-default newsticker-url-list-defaults
              &#39;((&amp;quot;LWN (Linux Weekly News)&amp;quot; &amp;quot;http://lwn.net/headlines/rss&amp;quot;)))
(setq-default newsticker-retrieval-interval 0)
(setq newsticker-html-renderer #&#39;shr-render-region)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;M-x newsticker-show-news&lt;/code&gt;でニュースを取ってきてくれます。&lt;/p&gt;

&lt;p&gt;3ペインの画面(treeview)になるかと思いますが、基本操作を覚えれば&lt;code&gt;C-x o&lt;/code&gt;で移動する必要はありません。&lt;/p&gt;

&lt;h2 id=&#34;toc_73&#34;&gt;&lt;code&gt;f&lt;/code&gt;(&lt;code&gt;newsticker-treeview-next-feed&lt;/code&gt;) / &lt;code&gt;F&lt;/code&gt;(&lt;code&gt;newsticker-treeview-prev-feed&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;ニュースサイト間を移動します。&lt;/p&gt;

&lt;h2 id=&#34;toc_74&#34;&gt;&lt;code&gt;n&lt;/code&gt;(&lt;code&gt;newsticker-treeview-next-item&lt;/code&gt;) / &lt;code&gt;p&lt;/code&gt;(&lt;code&gt;newsticker-treeview-prev-item&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;ニュース間を移動します。&lt;/p&gt;

&lt;h2 id=&#34;toc_75&#34;&gt;&lt;code&gt;SPC&lt;/code&gt;(&lt;code&gt;newsticker-treeview-next-page&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;ニュースのページを送ります。戻すキーは無いようです。&lt;/p&gt;

&lt;h2 id=&#34;toc_76&#34;&gt;&lt;code&gt;v&lt;/code&gt;(&lt;code&gt;newsticker-treeview-browse-url&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;今開いているニュースをブラウザで開きます。RSSは概要しか送られてこないのでこの機能は必須ですね。&lt;/p&gt;

&lt;h2 id=&#34;toc_77&#34;&gt;&lt;code&gt;q&lt;/code&gt;(&lt;code&gt;newsticker-treeview-quit&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;画面を閉じます。&lt;/p&gt;

&lt;h1 id=&#34;toc_78&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;いかがだったでしょうか。ちょっと長いので途中読み飛ばし気味だったかもしれませんが1つでも覚えていただけたら幸いです。&lt;/p&gt;

&lt;p&gt;因みに、このエントリを書き始めたのは8/13だったのですが、あまりに長く、途中合宿を挟んだりしたので公開は8/20になってしまいました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cloud9の紹介とLispのセットアップ</title>
      <link>http://keens.github.io/blog/2014/08/02/introduction-to-cloud9</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 UTC</pubDate>
      
      <guid>http://keens.github.io/blog/2014/08/02/introduction-to-cloud9</guid>
      <description>

&lt;p&gt;κeenです。先日のLisp Meet Upで紹介した&lt;a href=&#34;https://c9.io&#34;&gt;Cloud9&lt;/a&gt;の詳解でも書きます。まあ、そんなに詳しくないんですけどね。&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Cloud9について&lt;/h1&gt;

&lt;p&gt;先日のスライドを見てない方はまず見て下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/slide/cloud-9.html&#34;&gt;Cloud 9の紹介 | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公式の詳解ムービー(en)もあります。まあ、一般的なIDEの機能は一通り揃ってるようです。git連携とかも。
&lt;a href=&#34;https://www.youtube.com/user/c9ide/videos?flow=grid&amp;amp;view=1&#34;&gt;CloudNine Ide - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;スライドでバックエンドは一人一つDockerが与えられるって書きましたが自分のVMをバックエンドにも出来るようです。&lt;/p&gt;

&lt;p&gt;省略しましたが他のユーザーとの連携機能も多数あって、チャットだとかワークスペースの共有だとかソーシャルコーディング関連も多数機能があります。全社導入の折には役立つ機能なんじゃないでしょうか。&lt;/p&gt;

&lt;p&gt;ローカルファイルをアップロードしたり逆にローカルにダウンロードとかも出来るようです。&lt;/p&gt;

&lt;p&gt;尚、IDE本体は&lt;a href=&#34;https://github.com/ajaxorg/ace&#34;&gt;ACEという名前でオープンソースで開発されてる&lt;/a&gt;のでプラグインとかのドキュメントはそっちもあたると良いようです。&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Cloud9事始め&lt;/h1&gt;

&lt;p&gt;スクショとかは適当にスライドを参照して下さい(手抜き)&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;アカウントを作る&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://c9.io&#34;&gt;c9.io&lt;/a&gt;にアクセスしてGithubかBitbucketのアカウントでログイン出来ます(以後、Githubでログインしたものとします。Bitbucketの方は適宜読み替えて下さい)。Cloud9で書いたコードをHerokuやらなんやらに直接上げるつもりなら普通にCloud9アカウント作っても良いと思いますが、多くの場合どちらかとの連携を使うと思うので素直にGithubでログインしましょう。&lt;/p&gt;

&lt;p&gt;ログインしたらダッシュボードに飛ばされます。demo-projectと自分のGithubのプロジェクトがサイドバーにある筈です。&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;細かな設定&lt;/h2&gt;

&lt;p&gt;demo-projectでも開きましょうか。demo-projectを選択してstart editingです。&lt;/p&gt;

&lt;p&gt;IDEというかEditorの設定が出てくる筈です(多分)。キーバインディングとかタブ幅とか設定しましょう。そして、&lt;code&gt;C-h&lt;/code&gt;で&lt;code&gt;backward-delete-char&lt;/code&gt;出来ないと死んでしまう方のための設定はこちらです。Preferencesのkeybindingsのedit your keymap fileからkeymap fileに飛んで、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[
    {&amp;quot;command&amp;quot;: &amp;quot;backspace&amp;quot;, &amp;quot;keys&amp;quot;:[&amp;quot;Ctrl-H&amp;quot;, &amp;quot;Backspace&amp;quot;]},
    {&amp;quot;command&amp;quot;: &amp;quot;replace&amp;quot;, &amp;quot;keys&amp;quot;:[&amp;quot;Alt-Shift-5&amp;quot;]}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と編集、保存しましょう。どうも、キーにコマンドを割り当てるのではなく、コマンドにキーを割り当ててる(?)っぽいのでCtrl-Hを持ってる&lt;code&gt;replace&lt;/code&gt;を別のキーにしないと動かないようでした。尚、これはファイルをいじらなくてもsearch keybindingsのところから目的のコマンドを捜して、keystrokeのところをクリックして、割り当てたいキーストロークをすれば割り当て出来るようです。その際、自分のkeymap fileも対応して書き変わります。&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Common Lispのセットアップ&lt;/h2&gt;

&lt;p&gt;処理系のインストールはいくつか方法があります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;apt-get&lt;/code&gt;で入れる&lt;/li&gt;
&lt;li&gt;バイナリを落してくる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KeenS/CIM&#34;&gt;CIM&lt;/a&gt;を使う&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;のいずれかの方法で処理系を入れて下さい。&lt;code&gt;apt-get&lt;/code&gt;で入れる場合はかなり古いバージョンが入ります。CIMで入れる場合は&lt;code&gt;sudo apt-get install time&lt;/code&gt;しておかないとSBCLのビルドが出来ませんでした。他の処理系は確認してないです。どの処理系でも良いんですがとりあえずSBCLを入れたってことで話進めますね。私がそれしか確認してないので。&lt;/p&gt;

&lt;p&gt;また、便利のためrlwrapを入れましょう。&lt;code&gt;sudo apt-get install rlwrap&lt;/code&gt;です。&lt;/p&gt;

&lt;p&gt;そこまでいったらrun scriptを作りましょう。上のメニューバーから[Run]&amp;gt;[Run With]&amp;gt;[New Runner]と進みます。で、run scriptの内容はどの方法で処理系を入れたかに依るのですが、&lt;/p&gt;

&lt;p&gt;1の場合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;cmd&amp;quot; : [&amp;quot;sudo&amp;quot;, &amp;quot;rlwrap&amp;quot;, &amp;quot;sbcl&amp;quot;, &amp;quot;--load&amp;quot;, &amp;quot;$file&amp;quot;, &amp;quot;$args&amp;quot;],
    &amp;quot;info&amp;quot; : &amp;quot;Started SBCL :: $project_path$file_name&amp;quot;,
    &amp;quot;env&amp;quot; : {},
    &amp;quot;selector&amp;quot; : &amp;quot;source.ext&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だそうです(&lt;a href=&#34;http://cjelupton.wordpress.com/2014/07/24/hacking-lisp-in-the-cloud-pt-3/&#34;&gt;引用元&lt;/a&gt;)。&lt;code&gt;sudo&lt;/code&gt;がついてるのはWEBアプリの場合0.0.0.0で待つためにroot権限が必要だからかな？&lt;/p&gt;

&lt;p&gt;これは実行した後でREPLに入ってデバッガとか扱う感じの設定ですね。&lt;br /&gt;
単に実行したいだけののきは&lt;code&gt;--load&lt;/code&gt;の部分を&lt;code&gt;--script&lt;/code&gt;に変えれば良さそうです(未確認)&lt;br /&gt;
2の場合も同じ設定でいけそうな気がします。PATHぐらい必要かな?(未確認)&lt;/p&gt;

&lt;p&gt;3の場合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;cmd&amp;quot; : [&amp;quot;sudo&amp;quot;, &amp;quot;cl&amp;quot;, &amp;quot;$file&amp;quot;, &amp;quot;$args&amp;quot;],
    &amp;quot;info&amp;quot; : &amp;quot;Started cl :: $project_path$file_name&amp;quot;,
    &amp;quot;env&amp;quot; : {&amp;quot;CIM_HOME&amp;quot;:&amp;quot;$HOME/.cim&amp;quot;,&amp;quot;PATH&amp;quot;: &amp;quot;$CIM_HOME/bin:$PATH&amp;quot;, &amp;quot;LISP_IMPL&amp;quot;: &amp;quot;sbcl&amp;quot;},
    &amp;quot;selector&amp;quot; : &amp;quot;source.ext&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。本来CIMは&lt;code&gt;$CIM_HOME/init.*&lt;/code&gt;を呼ばないと動かないのですが、ショートカットする環境変数を設定することで無理矢理動かしてます。Cloud9のinitスクリプト(jsファイル)があるようなのでそこでCIMをinitしておけば無理せずとも出来そうですがあまり深く踏み込んでないです。&lt;/p&gt;

&lt;p&gt;尚、この設定は実行即終了のものです。実行してREPLに入りたい場合は&lt;code&gt;&amp;quot;cmd&amp;quot;&lt;/code&gt;を&lt;code&gt;[&amp;quot;cl&amp;quot;,&amp;quot;-rf&amp;quot;, &amp;quot;$file&amp;quot;, &amp;quot;$args&amp;quot;]&lt;/code&gt;にすると出来ます。&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;動かしてみる&lt;/h2&gt;

&lt;p&gt;上記のrun scriptを設定、保存したらメニューバーから[File]&amp;gt;[New File]と進み、新しいファイルを作ります。&lt;br /&gt;
一番簡単に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(write-line &amp;quot;Hello Cloud9&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とでも書きましょうか。そして[&amp;gt;Run]してちょいと待つと実行出来る筈です。動かなかったら手動で[Run]&amp;gt;[Run With]&amp;gt;[My Runner]とかしてみましょう。ここまで来ればセットアップ完了です。&lt;/p&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;今後の課題というか要調査というか&lt;/h1&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;シンタックスハイライト&lt;/h2&gt;

&lt;p&gt;Lisp Meet Upでも喋りましたがハイライトが最悪です。ユーザー定義ハイライターも(少くともACEレベルでは)出来そうなのでどうにかする必要があります。&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;インデント&lt;/h2&gt;

&lt;p&gt;Lispのインデントはタブn個とかで済むようなものじゃなくてどのオペレータの中にいるかに依って変わります。その辺どうにかなって欲しいですね。
もしかしたらClojureは上手くいってるかもしれないのでそこからインポートしてくれると嬉しいですね。&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;swankインターフェース&lt;/h2&gt;

&lt;p&gt;initスクリプトがあるって事はもしかしたらIDEもプログラマブルなのかもしれないのでswankインターフェースを作れるかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;CIMインターフェース&lt;/h2&gt;

&lt;p&gt;initスクリプトがあるって事は(ry。最終目標はメニューバーからどの処理系を使うか選択可能とかで。&lt;/p&gt;

&lt;h1 id=&#34;toc_11&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Cloud9を紹介した&lt;/li&gt;
&lt;li&gt;Common Lispのセットアップ方法を示した&lt;/li&gt;
&lt;li&gt;誰か諸問題解決して下さい&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cloud 9の紹介</title>
      <link>http://keens.github.io/slide/cloud-9/</link>
      <pubDate>Tue, 29 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://keens.github.io/slide/cloud-9/</guid>
      <description>&lt;section data-markdown
    data-separator=&#34;\n\n&#34;
    data-vertical=&#34;\n\n&#34;
    data-notes=&#34;^Note:&#34;&gt;
&lt;script type=&#34;text/template&#34;&gt;
# Cloud 9の紹介
&lt;hr /&gt;

Lisp Meet Up #19 presented by Shibuya.lisp  
κeen(@blackenedgold)  

## 自己紹介
&lt;hr /&gt;

 + κeen
 + 東大数学科の4年生
 + ソーシャルアカウントは上のアイコン達から。
 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます

## Lispがあまり使われない原因
&lt;hr /&gt;

&lt;ul&gt;
&lt;li class=&#34;fragment&#34;&gt;認知度が低い&lt;/li&gt;
&lt;li class=&#34;fragment&#34;&gt;&lt;strong&gt;開発環境構築の難易度高い&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

## Cloud 9について
&lt;hr /&gt;

 + WEBベースのIDEサービス
 + 40以上の言語に対応（らしい）
 + この間正式リリース
 + 1アカウント毎に1Docker環境与えられる
 + IDEはオープンソース
 + よく分かってない

## こんなん
&lt;img src=&#34;/images/cloud9/login.png&#34; alt=&#34;ログイン画面&#34; /&gt;

&lt;img src=&#34;/images/cloud9/dashboard.png&#34; alt=&#34;ダッシュボード&#34; /&gt;

&lt;img src=&#34;/images/cloud9/workspace.png&#34; alt=&#34;ワークスペース&#34; /&gt;

&lt;img src=&#34;/images/cloud9/lookandfeel.png&#34; alt=&#34;こんなかんじ&#34; /&gt;

&lt;img src=&#34;/images/cloud9/CIMworks.png&#34; alt=&#34;CIMも動く&#34; /&gt;

&lt;img src=&#34;/images/cloud9/clworks.png&#34; alt=&#34;CLもRun出来る&#34; /&gt;

## デモ

## 良いところ
&lt;hr /&gt;

 + 難易度低い
 + Lisp環境動く
 + Githubとの連携
 + どこからでも同じ環境にアクセス
 + キーバインドはうれしい各宗教対応の  
 {Mac, Windows}x{Default, Emacs, Vim, Sublime}


## 微妙なところ
&lt;hr /&gt;

 + シンタックスハイライト微妙  
 （せめてキーワード引数はどうにか）
 + 補完微妙
 + インデント微妙
 + swank使いたい

&lt;span style=&#34;font-size:600%&#34;&gt;以上&lt;/span&gt;  
何か質問あればどうぞ
&lt;/script&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>