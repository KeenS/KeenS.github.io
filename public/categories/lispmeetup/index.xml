<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LispMeetUp on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/lispmeetup/</link>
    <description>Recent content in LispMeetUp on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 28 Nov 2016 15:41:36 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/lispmeetup/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SchemeでClassとProtocol</title>
      <link>//KeenS.github.io/slide/schemedeclasstoprotocol/</link>
      <pubDate>Mon, 28 Nov 2016 15:41:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/schemedeclasstoprotocol/</guid>
      <description>κeen @blackenedgold Github: KeenS サイバーエージェントのエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
Class   ここでは単に値の集合を表わす new のように新しいインスタンスを作る機能はつけない ほとんど型と同じ機能 唯一の機能 instance? を持つ  ===
(instance? 3 &amp;lt;number&amp;gt;) ; =&amp;gt; #t (instance? &amp;#34;foo&amp;#34; &amp;lt;number&amp;gt;) ; =&amp;gt; #f ===
Classの実装   事実上述語があればいい 詳細  (define-class &amp;lt;any&amp;gt; (lambda (x) #t)) (define-class &amp;lt;list&amp;gt; list?) (define-class &amp;lt;procedure&amp;gt; procedure?) (define-class &amp;lt;number&amp;gt; number?) ===
Classの用途   述語だけで意味ある？  プリミティブにのみあった述語をユーザが拡張出来る   その上に何かを構築出来る protocolとか  ===</description>
    </item>
    
  </channel>
</rss>