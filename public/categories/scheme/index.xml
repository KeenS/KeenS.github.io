<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scheme on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/scheme/</link>
    <description>Recent content in Scheme on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 28 Nov 2016 15:41:36 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/scheme/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SchemeでClassとProtocol</title>
      <link>//KeenS.github.io/slide/schemedeclasstoprotocol/</link>
      <pubDate>Mon, 28 Nov 2016 15:41:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/schemedeclasstoprotocol/</guid>
      <description># ClassとProtocol ---------------------- [Lisp Meet Up presented by Shibuya.lisp #46](https://lisp.connpass.com/event/45517/) Scheme回 === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * サイバーエージェントのエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # Class ------- * ここでは単に値の集合を表わす * `new` のように新しいインスタンスを作る機能はつけない * ほとんど型と同じ機能 * 唯一の機能 `instance?` を持つ === ``` scheme (instance? 3 ) ; = #t (instance? &#34;foo&#34; ) ; = #f ``` === # Classの実装 ------------- * 事実上述語があればいい * [詳細](https://github.</description>
    </item>
    
    <item>
      <title>picrinのcodegenプロセスを説明してみる</title>
      <link>//KeenS.github.io/blog/2015/01/10/picrin-codegen-explanation/</link>
      <pubDate>Sat, 10 Jan 2015 09:40:51 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/10/picrin-codegen-explanation/</guid>
      <description>&lt;p&gt;今、picrinのcodegenプロセスに手を入れる機運が高まってます。picrinはバイトコードインタプリタなのでS式を渡されたらそれをバイトコードに変換する作業が必要です。それがcodegen。本当はcompileなんだけどpicrinのCのソースコードのコンパイルと紛らわしいからcodegen。私も完全にはプロセスを理解してないので説明して理解度を試しつつ問題点を洗い出します。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>H2Oにpicrinを溶かす</title>
      <link>//KeenS.github.io/blog/2014/12/07/h2onipicrinworong-kasu/</link>
      <pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/07/h2onipicrinworong-kasu/</guid>
      <description>&lt;p&gt;このエントリーは&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2014/lisp&#34;&gt;Lisp Advent Calendar&lt;/a&gt; 7日目&lt;br /&gt;
兼&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2014/h2o&#34;&gt;H2O Advent Calendar&lt;/a&gt; 7日目&lt;br /&gt;
の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。タイトルの通りです。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>#関数型なんたら で喋ってきた</title>
      <link>//KeenS.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita/</link>
      <pubDate>Sun, 26 Oct 2014 17:14:10 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita/</guid>
      <description>κeenです。昨日函数型なんたらの集いに参加してきたので報告/感想です。 会場提供はドワンゴということでトークはニコ生に流された模様。ちらっと覗いてみたらLinuxでも見れましたね。いつのまにかFlashのバグ直ってたんですね。 とはいえ私自身のトーク中のコメントが見れなかったのであまり意味はないのですが…
プレミアム会員は放送後7日は生放送の内容を見れるそうですね。見れる方々はコチラからどうぞ。次回からはタイムシフト予約しておこう。
話した内容 C6H6+HNO3というタイトルで、picrinのbenzとnitrosについて。本当はnitrosの依存関係解決器sulfuricを完成させてそれについて話し、nitroを書こう!って言う予定だったんですが着手が遅れて完成しないまま発表になりました。
普段関数型言語のヒトは型やらモナドで殴ってる印象があったのでマクロで殴ろうと思ったのですがマクロの話のところで焦ってしまって話が飛んでしまい、殴れずに終わりました。
ガチの組み込み屋さんから組み込み機器で動作検証したのかとの質問がありましたがそもそも持ってないです。そろそろ1.0が出ると思うのでそのあたりでやります。
GCがconservativeかとの質問に対して「はい」と答えてしまいましたが間違いでした。 conservativeなのはcall/ccでした。GCはexactですね。ドキュメントに載ってます。
wasabizの名前に反応した人が多かったようですね。やっぱ有名人なのかぁ。
興味深かった話 エンジニアとモナド またモナドで殴る話かと思ったら全然違いました。トップダウンで設計するときにそれぞれを小さなDSLに分割してそれらをモナドで実装し、モナド変換子で組み合わせると良いよねとのこと。タスクアサインもモナド単位になるし分かり易い。スピードのために実際には単相化すると良いとか現実的な話をしてて非常に良かったです。
Lispで考えるとこうはいかないなと思います。トップダウンで設計するのが他の言語以上に向いてない気がします。というか、ボトムアップに向きすぎてる。小っさく始めて抽象が欲しければマクロを書いて…って。オブジェクト指向で作るにしてもオブジェクトとメソッドが分離してるのでボトムアップと相性が良い。この辺はポールグレアムの「ハッカーと画家」に詳しいです。
shapelessの紹介 興味を持ったのはshaplessそのものではなくてヘテロなリストやヘテロなハッシュに型をつける話。{ 1 =&amp;gt; &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot; =&amp;gt; 2}に型がつくのは面白すぎます。「高度に多相化された静的型は動的型と区別がつかなくなる」っぽかったです。
パターンマッチいろいろ 議論を呼んだ発表。パターンマッチを拡張する話。例えば年月日に対してYMD(y, 12 25)でクリスマスならそのときの年を取り出せるだとかさらにアンドを使えばHMSも一緒にマッチ出来るだとか。 そこからEgisonに話が飛んでEgisonの例のようにポーカーの役をScalaでパターンマッチする例の紹介。
議論を呼んだというのはパターンマッチにガードが吸収されてる件ですね。データ型のコンストラクタとエクストラクタが一対一対応してこそパターンマッチは真価を発揮する派vsパターンマッチの表現力が高ければ高い方が良い派の対立ですね。さらに前者は型の表現力が足りてないのなら型をもっと複雑にすべき派とガードを付けて網羅性の証明をすれば良い派に分かれます。私はパターンマッチには表現力があればあるほど良いよね派。
これはそもそもパターンに対する立場の違いがある気がするんですよね。私はパターンマッチは同じデータに対する条件判定のシンタックスシュガーとして捉えています。マッチと束縛を一緒に行なうのは便利なのとパフォーマンスのため。ガードが必要なのはパターンの表現力が足りないため。だからパターンがリッチならリッチな方が良い。そもそもLispでは網羅性のチェックは期待出来ませんので。そもそもの話動的言語はコンパイル時の検査をあきらめてその代わり表現力を得ようという思想ですからね。
パターンが複雑になるとメモリが爆発するとの指摘がありましたがそれに直面した人がいるらしく、パターンによる分岐の枝を実行時に伸ばしていくようなパターンマッチライブラリも存在します。（Lispは実行時にもマクロが動いていて、実行時にコードを生成することも可能なのです。）
懇親会その他 名古屋の型々方々と色々喋れました。偶々でこれきさん、みずぴーさんと同じテーブルに座り、昼御飯も一緒に。普段休日出勤してる印象が強く、名古屋に行かないと会えないと思っていたブレイスさんといよさんも一緒でした。でこれき先生はやっぱり大先生だった。
よんたさんにSML#のコードリーディング会開いて下さいって言ったら良いよって言ってもらいました。そろそろ64bit版も出るそうなのでリリース記念コードリーディング会&amp;amp;芋煮会やろうって話になりました。
OCamlのユニコードライブラリを作ってる方とも話しました。内部でropeで持ってるらしく、その話を聞きました。ropeのユニコード化はどうやら普通に文字列をUTF-8で保持し、ropeに文字列長のフィールドを保たせるだけで良いよう。ただ、picrinはCとの連携のためちょくちょくCの文字列に変換してまた新たにropeを作って、とするので若干勝手というかボトルネックが違いそう。
Schemeのネイティブコンパイラを作ってる方とも話しました。Schemeの実装について喋ったり、GCについて喋ったり。GCについては興味深いことを聴いたのでもう1本エントリー書きます。あとはプロセス代数とかモデル検査とか。
まとめ 楽しかった。どうしてもLispは関数型とはあまり言われない（し、私も関数型言語とは思ってない）のでLisperが少なかったのですが私自身はMLも好きなので楽しめました。GCとTaPLとHaskellとScalaとEgisonに対するモチベーションが上がりました。
最後に開催して下さった主催の方々、会場を提供して下さったドワンゴ様、ありがとう御座いました。</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #20でLTしてきました</title>
      <link>//KeenS.github.io/blog/2014/09/30/lisp-meet-up-number-20/</link>
      <pubDate>Tue, 30 Sep 2014 09:35:05 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/09/30/lisp-meet-up-number-20/</guid>
      <description>κeenです。lisp meet up # 20に参加したのでレポートです。 20人の募集に19人参加予定。会場は今回初めてのところでした。
LT LTはTOYOZUMIさんが仕事で来れなくなったので私の1件のみ。内容はpicrinのチューニングの話と思わせてほとんどがその前振りのGCの話。
スライドはこちら。
Picrinのチューニングの話、もといGCの話 | κeenのHappy Hacκing Blog
TOYOZUMIさんのdocstringの話聞きたかった
飛び入り  ブラウザ上でbiwa schemeの環境(REPLだけでなくオートインデントとか)を作ってる 関連して、websocketでswankと対話できるやつ作ってる 関連して、ブラウザ上で動くLispに似てそうなBlockyというヴィジュアル言語がある なんかの話がありました。  余った時間 chikuさんが前でGCの話してました。んで話が尽きたあたりで私がpicrinの宣伝しました。(picrin control list)の話です。非同期プロミス然りpicrinにはトリッキーな機能が多いですね。
結局ライブコーディングはしませんでしたね。
懇親会 Raspberry Piの話とかちょいとGCの話とかVarnishの話とかaltJSとか。ブログの話題が出たのでOctopress推しといたり。なんでみんなGithub Pages + Octopress使わないん？便利ですやん。
結構色々話してた気がするんですが覚えてないですね。</description>
    </item>
    
  </channel>
</rss>