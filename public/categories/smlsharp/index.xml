<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SMLSharp on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/smlsharp/</link>
    <description>Recent content in SMLSharp on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 21 Dec 2019 22:31:35 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/smlsharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>リソースを管理する型</title>
      <link>//KeenS.github.io/blog/2019/12/21/riso_suwokanrisurukata/</link>
      <pubDate>Sat, 21 Dec 2019 22:31:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2019/12/21/riso_suwokanrisurukata/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;https://qiita.com/advent-calendar/2019/type&#34;&gt;型 Advent Calendar 2019 - Qiita&lt;/a&gt; 22日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。Session Typeの話をするつもりでしたが気が変わったのでリソースを管理する型の話をします。
リソースといっても所有権の話ではないです。
DBにWriteできるだとかS3からGetできるだとかです。リソースというよりはアクセス権限の方が正確かもしれません。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近のSML#の話題</title>
      <link>//KeenS.github.io/slide/saikinnosml_nowadai/</link>
      <pubDate>Mon, 17 Jul 2017 21:04:57 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/saikinnosml_nowadai/</guid>
      <description># 最近のSML#の話題 ---------------------- [ML勉強会 #2 - connpass](https://ml-lang.connpass.com/event/58151/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * [Idein Inc.](https://idein.jp/)のエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # 話すこと ------ * SML# 3.0。0以降立て続けにリリースが続いてる * 最近の変更を追いきれないのでまとめて追う ver. | date ------|----- 3.3.0 | 2017-06-20 3.2.0 | 2016-09-16 3.1.1 | 2016-07-15 3.1.0 | 2016-05-26 3.0.1 | 2016-04-04 3.0.0 | 2016-03-31 2.0.0 | 2014-04-04 1.2.0 | 2012-11-14 === # そもそもSML#って？ ------------------- * SML &#39;97 互換のコンパイラ + [The Definition of Standard ML, Revised](http://sml-family.</description>
    </item>
    
    <item>
      <title>SML#をUbuntu 16.10で動かす</title>
      <link>//KeenS.github.io/blog/2016/11/30/sml_woubuntu_16_10deugokasu/</link>
      <pubDate>Wed, 30 Nov 2016 15:18:58 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/11/30/sml_woubuntu_16_10deugokasu/</guid>
      <description>&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2016/ml&#34;&gt;ML Advent Calendar 2016 - Qiita&lt;/a&gt;の1日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。小ネタを。Ubuntu 16.10でSML#を動かそうと思ったら動かなかったので動かします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Socket on SML#</title>
      <link>//KeenS.github.io/slide/socket_on_sml_/</link>
      <pubDate>Sat, 02 Jul 2016 15:25:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/socket_on_sml_/</guid>
      <description># Socket on SML&amp;#x23; ---------------------- [ML勉強会](http://connpass.com/event/32752/) 2016-07-09 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # HTTP on SML&amp;#x23;? ------------- * SML#にJSONサポートが入った + REST API簡単に叩けるのでは？ * SML#にFully Concurrent GCが入った + HTTPサーバ書くとレイテンシ抑えられて嬉しいのでは？ * スレッドも使えるしスループットも高い筈 * SML#でHTTPの機運 * しかしHTTPサポートはないので自前実装するしかない === # Socket on SML&amp;#x23;? ------------------ * HTTPサポートに必要 * Basisにはある (Optional) + SML#のBasisはサポートしてない * FFIあるしユーザランドで実装するか * [KeenS/SmlSharpSocketSupport](https://github.com/KeenS/SmlSharpSocketSupport) === # TCP/IP、ソケットなど --------------------------- * ソケットアドレス - 自分、相手の居場所。これがないと通信出来ない + 複数のアドレスファミリ(AF)がある + IP v4, IP v6, UNIXドメインなど。 * ソケット - 通信の仕組み。プログラムからはfdとして見える。 + AFやtype(stream/diagram)の属性を持つ * INet - インターネットドメインソケット + TCPとUDP + IP v4/v6アドレスで通信 === # 主要なstructure ----------------- * Socket * NetHostDB * INetSock * (UnixSock) === # [NetHostDB](http://sml-family.</description>
    </item>
    
    <item>
      <title>SML#のpthreadバインディング作った</title>
      <link>//KeenS.github.io/blog/2016/01/11/sml_nopthreadbaindingutsukutta/</link>
      <pubDate>Mon, 11 Jan 2016 00:57:20 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/11/sml_nopthreadbaindingutsukutta/</guid>
      <description>&lt;p&gt;κeenです。またしても深夜になってしまいましたがSML#のpthreadバインディングを作ったのでその報告を。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#とCプリプロセッサの連携</title>
      <link>//KeenS.github.io/blog/2015/12/26/sml_tocpuripurosessanorenkei/</link>
      <pubDate>Sat, 26 Dec 2015 20:09:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/26/sml_tocpuripurosessanorenkei/</guid>
      <description>&lt;p&gt;κeenです。Advent Calendarのためにネタやアイディアを用意したものの時間/場所的都合でAdvent Calendarとして出せなかったボツネタでも供養しようかと。
Advent Calendarが終わってしまったので投げやり気味ですね。
第3段はSML#とCプリプロセッサで連携する話。&lt;/p&gt;

&lt;p&gt;SML#のC FFIを使ってるとマクロで定義された値などを触りたくなるのですが、触れないのでどうにかしようかと。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#のオレオレREPLを作る話 初級</title>
      <link>//KeenS.github.io/blog/2015/12/26/sml_nooreorereplwotsukuruhanashi_shokyuu/</link>
      <pubDate>Sat, 26 Dec 2015 19:48:30 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/26/sml_nooreorereplwotsukuruhanashi_shokyuu/</guid>
      <description>&lt;p&gt;κeenです。Advent Calendarのためにネタやアイディアを用意したものの時間/場所的都合でAdvent Calendarとして出せなかったボツネタでも供養しようかと。
Advent Calendarが終わってしまったので投げやり気味ですね。
第2段はSML#のオレオレREPLを作る話の初級。&lt;/p&gt;

&lt;p&gt;SML#にはFFIがあり、任意のオブジェクトファイル/ライブラリをリンクしてC関数を呼び出すことが出来ますが、REPLで試そうとしてもREPLにリンクされていないので呼び出せません。
そこで呼び出したいオブジェクトファイルをリンクしたREPLを作れば捗るよね、という発想です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#に学ぶコンパイラ言語におけるREPLの実装方法</title>
      <link>//KeenS.github.io/blog/2015/12/12/sml_nimanabukonpairagengoniokerureplnojissouhouhou/</link>
      <pubDate>Sat, 12 Dec 2015 19:42:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/12/sml_nimanabukonpairagengoniokerureplnojissouhouhou/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/lang_dev&#34;&gt;言語実装 Advent Calendar 2015&lt;/a&gt;16日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。かねてより気になっていたREPLの実装方法について、SML#のソースコードを読んだのでその話でもします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#でJITコンパイラを作る軽い話</title>
      <link>//KeenS.github.io/blog/2015/12/12/sml_dejitwotsukurukaruihanashi/</link>
      <pubDate>Sat, 12 Dec 2015 17:26:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/12/sml_dejitwotsukurukaruihanashi/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://www.adventar.org/calendars/848&#34;&gt;ML Advent Calendar 2015&lt;/a&gt;及び&lt;a href=&#34;http://qiita.com/advent-calendar/2015/lang_dev&#34;&gt;言語実装 Advent Calendar 2015&lt;/a&gt;15日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。先日流れてきた&lt;a href=&#34;http://www.jonathanturner.org/2015/12/building-a-simple-jit-in-rust.html&#34;&gt;RustでJITコンパイラを作る話&lt;/a&gt;が面白かったのでSML#でもやってみます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#でDBに接続</title>
      <link>//KeenS.github.io/blog/2015/12/05/sml_dedbnisetsuzoku/</link>
      <pubDate>Sat, 05 Dec 2015 22:04:25 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/05/sml_dedbnisetsuzoku/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://www.adventar.org/calendars/848&#34;&gt;ML Advent Calendar&lt;/a&gt;6日目の記事です。&lt;br /&gt;
次はdico_leque先生で、「ML中心にしつつ何か」です。&lt;/p&gt;

&lt;p&gt;κeenです。SMl#はDB接続及びSQLを言語レベルでサポートしていることが大きな特徴ですが詳細な方法についてはあまり情報がなく、
実際に利用するのは難しい状況にあります。そこで私がなんとかソースコードを読んで得られた知識を少し共有したいと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#をMacでビルドする</title>
      <link>//KeenS.github.io/blog/2015/04/29/smlsharpwomacdebirudosuru/</link>
      <pubDate>Wed, 29 Apr 2015 16:09:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/29/smlsharpwomacdebirudosuru/</guid>
      <description>&lt;p&gt;κeenです。SML#2.0.0を文鎮と化していたMBAにインストールしたのでメモをば。&lt;/p&gt;

&lt;p&gt;基本は&lt;a href=&#34;http://d.hatena.ne.jp/keita44_f4/20140412/1397279451&#34;&gt;よんたさんの記事&lt;/a&gt;をMacに翻訳した感じです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLSharpを使ってSMLのon-the-flyエラーチェック</title>
      <link>//KeenS.github.io/blog/2015/04/23/smlsharpwotsukattesmlnoon-the-flyerrorchekkingu/</link>
      <pubDate>Thu, 23 Apr 2015 23:01:17 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/23/smlsharpwotsukattesmlnoon-the-flyerrorchekkingu/</guid>
      <description>&lt;p&gt;κeenです。最近SMLを結構書いてるのですが中置演算子が乱立する言語はLisperにはつらくて、しょっちゅうコンパイルエラーを出します。
そこでSML#をflymakeで動かしてOn The Flyにエラーチェックをします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLSharpでFFIバインディングを書く時の知見</title>
      <link>//KeenS.github.io/blog/2015/04/19/smlsharpdeffibaindinguwokakutokinochiken/</link>
      <pubDate>Sun, 19 Apr 2015 13:51:33 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/19/smlsharpdeffibaindinguwokakutokinochiken/</guid>
      <description>&lt;p&gt;κeenです。最近頻繁にSML#を使ってます。SML#のメイン機能の1つであるC連携ですが、ちょっと複雑なことをやろうとするとテクニックが必要になるので共有します。&lt;/p&gt;

&lt;p&gt;Twitterとかにコメントや突っ込みお願いします。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>