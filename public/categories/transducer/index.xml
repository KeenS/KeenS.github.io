<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>transducer on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/transducer/</link>
    <description>Recent content in transducer on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 03 Jun 2015 22:29:50 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/transducer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Transducerについて</title>
      <link>//KeenS.github.io/slide/transducernitsuite/</link>
      <pubDate>Wed, 03 Jun 2015 22:29:50 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/transducernitsuite/</guid>
      <description># Transducerについて ---------------------- サイバーエージェント 朝の3分スピーチ === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Transducerって？ ------------------ * Clojure 1.7で入るフレームワーク * 関数のパイプライン化を簡単にする * 入力、出力には依存しない === # Reduce関数について ------------------- * `reduce: (&#39;a - &#39;b - &#39;a) &#39;a - &#39;b list` * `(&#39;a - &#39;b - &#39;a)` でシーケンスを集約する * `(reduce + 0 &#39;(1 2 3)) ;= 6` * 要はreduceは関数を使って集約する。 === # Transducerについて ------------------- * `transduce:((&#39;a - &#39;b - &#39;a) - (&#39;a - &#39;b - &#39;a)) (&#39;a - &#39;b - &#39;a) &#39;a - &#39;b list` * 集約関数を変換する関数もとる * `(transduce xf + 0 &#39;(1 2 3))` * transducerで集約する前に処理を挟める === # すごいところ ------------------------- ## コンポーサビリティ * `((&#39;a - &#39;b - &#39;a) - (&#39;a - &#39;b - &#39;a))` * 変換関数は入力と出力が同じ。 * つまり変換関数を合成出来る * ex) `(comp (filter odd?</description>
    </item>
    
  </channel>
</rss>