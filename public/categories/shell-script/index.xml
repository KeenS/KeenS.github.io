<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell Script on </title>
    <link>/categories/shell-script/</link>
    <description>Recent content in Shell Script on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 26 Jun 2015 23:24:44 +0900</lastBuildDate>
    <atom:link href="/categories/shell-script/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>あなたの知らないShebang</title>
      <link>/post/anatanoshiranaishebang/</link>
      <pubDate>Fri, 26 Jun 2015 23:24:44 +0900</pubDate>
      
      <guid>/post/anatanoshiranaishebang/</guid>
      <description>

&lt;p&gt;κeenです。最近は何故かBlack君って呼ばれます。Shebangの書き方にはいくつかあって、それを利用したふと面白い方法を思い付いたので共有を。&lt;/p&gt;

&lt;p&gt;さて、ご存知Shebangといえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにファイルの1行目が&lt;code&gt;#!&lt;/code&gt;から始まっているとシェルがそれ以降の文字列を実行可能ファイルのパス名として捜して実行してくれるものですが、実は&lt;code&gt;#!&lt;/code&gt;は唯一のフォーマットではありません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#!&lt;/code&gt;がデファクトになる前なのかそもそもシェルにコメントがなかった時代のものなのかは知りませんが昔は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;: /bin/sh
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;code&gt;:&lt;/code&gt;で始めていたらしいです。因みに&lt;code&gt;:&lt;/code&gt;は「何もしないコマンド」です。実質的にコメントとして扱ったり副作用のある変数展開だけを行なったりプログラマティックコメントアウトだったりの用途で使われてます。&lt;/p&gt;

&lt;p&gt;さて、シェルは全て文字列なのでクォートしてもしなくても構いません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;quot;:&amp;quot; &amp;quot;/bin/sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としてもちゃんと動いてくれます。なぜわざわざクォートするかというと&lt;a href=&#34;//KeenS.github.io/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru/&#34;&gt;割と処理系ポータブルなCommon Lisp実行可能ファイルを作る | κeenのHappy Hacκing Blog&lt;/a&gt;のように別の言語のスクリプトとして実行される時に文字列リテラルになってくれると単純に無視されるので互換性が高まるのです。&lt;/p&gt;

&lt;p&gt;ということで完全版ポータブルなCommon Lisp実行可能ファイルはこうなります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&amp;quot;:&amp;quot; &amp;quot;/bin/sh&amp;quot;

#|
run_if_exists(){
 command -v $1 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; exec &amp;quot;$@&amp;quot;
}
 run_if_exists cl &amp;quot;$0&amp;quot; &amp;quot;$@&amp;quot;
 run_if_exists sbcl --noinform --no-sysinit --no-userinit --script &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists clisp -norc --quiet --silent -on-error exit  &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists ecl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists mkcl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists alisp -qq -#! &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists ccl --no-init --quiet --batch --load &amp;quot;$0&amp;quot;  --eval &#39;(quit)&#39; -- &amp;quot;$@&amp;quot;
 run_if_exists abcl --noinform --noinit --nosystem --batch --load &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists lisp -quiet -noinit -batch -load &amp;quot;$0&amp;quot; -eval &#39;(quit)&#39; -- &amp;quot;$@&amp;quot;
 echo &amp;quot;No lisp implementation found&amp;quot;
 exit 1
|#

(write-line (lisp-implementation-type))
(force-output)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;abclとcclが利用可能になりました。あとCIMも捜すようにしました。roswellは作者に訊いて下さい。&lt;/p&gt;

&lt;p&gt;ちなみに、shebangの解釈はシェルに依存するのですが、B Shell, csh, tcsh, dash, Bash, zshで動作確認しました。古い機能なので新しいシェルほど切り捨てている可能性があったのですがBashやzshが大丈夫だったので良かったです。
一応非推奨な気がしますがこれしか方法がないので仕方ないですね。&lt;/p&gt;

&lt;p&gt;ということでみなさんスクリプト書きましょう。&lt;/p&gt;

&lt;h1 id=&#34;追記:97aff0076544159c37193ad080a89d0a&#34;&gt;追記&lt;/h1&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/blackenedgold&#34;&gt;@blackenedgold&lt;/a&gt; shebangの解釈はシェルじゃなくてOSのexec()がやります。で、#!や認識できるバイナリ以外は、exec()がエラーを返した後でシェルがファイルを見て、テキストファイルならシェルスクリプトとして実行ってやってます。なので先頭が:の場合は(続&lt;/p&gt;&amp;mdash; Kilo Kawai (@anohana) &lt;a href=&#34;https://twitter.com/anohana/status/614551978526445570&#34;&gt;2015, 6月 26&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/blackenedgold&#34;&gt;@blackenedgold&lt;/a&gt; shebangとしてではなく、シェルがシェルスクリプトとして読んでるだけなので、その後に/bin/shとか書いてあっても関係ないはず (シェルによってはそこも見るかもしれませんが)&lt;/p&gt;&amp;mdash; Kilo Kawai (@anohana) &lt;a href=&#34;https://twitter.com/anohana/status/614552151759589376&#34;&gt;2015, 6月 26&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;ということで実験してみたところ、先頭の&lt;code&gt;&amp;quot;:&amp;quot; &amp;quot;/bin/sh&amp;quot;&lt;/code&gt;はどのシェルも読み飛ばす模様(つまり、&lt;code&gt;&amp;quot;:&amp;quot; &amp;quot;/usr/bin/ruby&amp;quot;&lt;/code&gt;と書いてもrubyが実行される訳ではない)。&lt;/p&gt;

&lt;p&gt;で、先程の 完全版から&lt;code&gt;&amp;quot;:&amp;quot; &amp;quot;/bin/sh&amp;quot;&lt;/code&gt;を取り除いて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#|
run_if_exists(){
 command -v $1 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; exec &amp;quot;$@&amp;quot;
}
 run_if_exists cl &amp;quot;$0&amp;quot; &amp;quot;$@&amp;quot;
 run_if_exists sbcl --noinform --no-sysinit --no-userinit --script &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists clisp -norc --quiet --silent -on-error exit  &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists ecl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists mkcl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists alisp -qq -#! &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists ccl --no-init --quiet --batch --load &amp;quot;$0&amp;quot;  --eval &#39;(quit)&#39; -- &amp;quot;$@&amp;quot;
 run_if_exists abcl --noinform --noinit --nosystem --batch --load &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists lisp -quiet -noinit -batch -load &amp;quot;$0&amp;quot; -eval &#39;(quit)&#39; -- &amp;quot;$@&amp;quot;
 echo &amp;quot;No lisp implementation found&amp;quot;
 exit 1
|#

(write-line (lisp-implementation-type))
(force-output)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としても動いたのでこれが最終版ということになります。&lt;/p&gt;

&lt;p&gt;大学の講究でMINIX本やったどころかexecのところ自分の担当だったのに恥かしい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shell Scriptを書くときのテクニック10選</title>
      <link>/post/Shell_Scriptwokakutokinikiwotsuketaikoto/</link>
      <pubDate>Wed, 17 Jun 2015 22:12:25 +0900</pubDate>
      
      <guid>/post/Shell_Scriptwokakutokinikiwotsuketaikoto/</guid>
      <description>

&lt;p&gt;κeenです。LLで書かれた動作のもっさりしてるコマンドラインツールよりシェルスクリプトが好きです。&lt;/p&gt;

&lt;p&gt;しかしシェルスクリプトを書く時にはハマり所も多いです。ということでハマりそうなところと対処法を共有しますね。&lt;/p&gt;

&lt;h1 id=&#34;1-変数は基本クォート:5e57d8f93a32720e126e1053ccd91901&#34;&gt;1. 変数は基本クォート&lt;/h1&gt;

&lt;p&gt;変数には空白が入り得ます（特にパス名とか）。あるいは空である可能性もあります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mv file1 file2 $target_dir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;$target_dir&lt;/code&gt;が空だった時は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mv file1 file2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となってしまいます。file2が上書きされますね。恐ろしい。&lt;/p&gt;

&lt;p&gt;クォートで括っておけば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mv file1 file2 &amp;quot;$target_dir&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mv file1 file2 &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり辺なディレクトリに書き込もうとしてエラーになります。まだマシですね。&lt;/p&gt;

&lt;p&gt;基本、と書いたのはクォートしたくない場合もあるからです。例えばこんな時ですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;items=&amp;quot;foo bar baz&amp;quot;
for item in $items
do
    echo &amp;quot;$item&amp;quot;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変数展開の後にトークン分割が行なわれるので空白で区切れば複数のトークンを1つの変数に入れられます。&lt;/p&gt;

&lt;h1 id=&#34;2-eオプションをつけよう:5e57d8f93a32720e126e1053ccd91901&#34;&gt;2. -eオプションをつけよう&lt;/h1&gt;

&lt;p&gt;シェルには例外がありません。何かが失敗しても走り続けます。これは時に迷惑な挙動です。しかし &lt;code&gt;-e&lt;/code&gt;オプションをつけると0以外の終了ステータスが出た瞬間スクリプトが止まるようになります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-e&lt;/code&gt;オプションを有効にするには&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
set -e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば良いです。0以外のステータスで終了し得るコマンドの例外ハンドル的なことをしたければ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;trying_command || true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば確実に0で終了します。&lt;/p&gt;

&lt;p&gt;また、スクリプトの途中で&lt;code&gt;-e&lt;/code&gt;を切り替えたければ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
set -e
# -eが有効
set +e
# -eが無効
set -e
# -eが有効
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように&lt;code&gt;set -e&lt;/code&gt;と&lt;code&gt;set +e&lt;/code&gt;で制御出来ます。&lt;/p&gt;

&lt;h1 id=&#34;3-カレントディレクトリはスクリプトを起動した場所:5e57d8f93a32720e126e1053ccd91901&#34;&gt;3. カレントディレクトリはスクリプトを起動した場所&lt;/h1&gt;

&lt;p&gt;例えば ~/Shell/hoge.shにこう書いたとします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
cat ./hoge.sh
pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それを実行するとこうなります&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/Shell
$ sh hoge.sh
#!/bin/sh
cat ./hoge.sh
pwd
/home/kim/Shell
$ cd ../
$ sh Shell/hoge.sh
hoge.sh: no such file or directory
/home/kim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なのでシェルスクリプト内での相対パスは基本的に信用出来ません。&lt;/p&gt;

&lt;p&gt;スクリプトの相対でパスを指定したいならこうしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
ROOT=&amp;quot;$(cd $(dirname $0); pwd)&amp;quot;
cat &amp;quot;$ROOT/hoge.sh&amp;quot;
pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$(cd $(dirname $0); pwd)&lt;/code&gt; がキモです。 $0には起動スクリプトが入ってます。 &lt;code&gt;$ ./hoge.sh&lt;/code&gt;と起動したなら &lt;code&gt;./hoge.sh&lt;/code&gt;が、 &lt;code&gt;$ ../hoge.sh&lt;/code&gt; なら &lt;code&gt;../hoge.sh&lt;/code&gt;が。そのスクリプトがあるディレクトリに移動(&lt;code&gt;cd $(dirname $0)&lt;/code&gt;) して&lt;code&gt;pwd&lt;/code&gt;するとスクリプトのあるディレクトリの絶対パスがとれます。&lt;/p&gt;

&lt;p&gt;因みにこのイディオムはスクリプトにリンクを張られると困ります。 &lt;code&gt;readlink(1)&lt;/code&gt; を使う流儀もあるのですがreadlinkがMacとLinuxで全然違い、互換性を保てないのでおすすめしません。&lt;/p&gt;

&lt;h1 id=&#34;4-sudo-command-fileでパーミッションエラー:5e57d8f93a32720e126e1053ccd91901&#34;&gt;4. sudo command &amp;gt;&amp;gt; fileでパーミッションエラー&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; (&lt;code&gt;&amp;gt;&lt;/code&gt;) を使った時にファイルに書き込んでるのは &lt;code&gt;command&lt;/code&gt;ではなくてシェルなのでシェルのアクセス権限でパーミッションエラーが出ます。sudoして書き込みたいなら&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo command &amp;gt; file&lt;/code&gt; ではなく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ command | sudo tee file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を、&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo command &amp;gt;&amp;gt; file&lt;/code&gt; ではなく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ command | sudo tee -a file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を使いましょう。&lt;/p&gt;

&lt;p&gt;関連して、&lt;code&gt;echo&lt;/code&gt;は外部コマンドではなくシェルの組込みコマンドなのでsudoに渡すことが出来ません。これもファイルに書き込む目的ならechoとsudo teeをパイプで繋ぎましょう。&lt;/p&gt;

&lt;h1 id=&#34;5-sudoのパスワードを渡せない:5e57d8f93a32720e126e1053ccd91901&#34;&gt;5. sudoのパスワードを渡せない&lt;/h1&gt;

&lt;p&gt;スクリプト内でsudoを扱うのは少しテクニックが必要になります。sudoに-Sを付けると標準入力からパスワードを読むようになります。かといってソースにベタ書きする訳にはいきません。
ということで、こうなります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;printf &amp;quot;password: &amp;quot;
read password
echo &amp;quot;$password&amp;quot; | sudo -S command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ユーザにパスワードを要求し、メモリに保存。必要な時にsudoに渡すという流れです。&lt;/p&gt;

&lt;p&gt;シェルに依ってはreadに-sをつけることでエコーバックしなくなるのでディスプレイにパスワードが流れてくることはありません。未確認ですがdash(Debian系の/bin/sh)では出来なくてB shell(BSD系の/bin/sh)やBash、Zshなどの拡張POSIXシェルだと出来そうです。&lt;/p&gt;

&lt;p&gt;余談ですが改行なしの印字に&lt;code&gt;echo -n&lt;/code&gt;は使えません。&lt;code&gt;-n&lt;/code&gt; シェルによってはオプションを認識しないので。printf(1)はPOSIXにあるのでポータブルに使えます。&lt;/p&gt;

&lt;p&gt;因みにパスワードが初期化されてないならユーザに訊く、というのはこういう関数を実装すれば良さそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;password(){
    if ! ${password+:} false
    then
        printf &amp;quot;password: &amp;quot;
        read -s password
    fi
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;6-sudoのパスワードを渡しつつ標準出力も渡したい:5e57d8f93a32720e126e1053ccd91901&#34;&gt;6. sudoのパスワードを渡しつつ標準出力も渡したい&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;{ echo &amp;quot;$password&amp;quot; ; cat } | sudo -S command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しましょう。&lt;/p&gt;

&lt;h1 id=&#34;7-リモートでスクリプトを実行したい:5e57d8f93a32720e126e1053ccd91901&#34;&gt;7. リモートでスクリプトを実行したい&lt;/h1&gt;

&lt;p&gt;一旦scpでスクリプトを送ってから実行？そんな面倒なことしたくありません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh user@remote &amp;lt;&amp;lt;SHELL
#  some script
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で実行出来ます。これはログインシェルで実行します。ログインシェル如何に関わらずshで実行したいなら(ログインシェルがcshとかnologinとかは割とありえる)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh user@remote sh &amp;lt;&amp;lt;SHELL
#  some script
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としましょう。&lt;/p&gt;

&lt;h1 id=&#34;8-リモートでsudoのパスワードを渡したい:5e57d8f93a32720e126e1053ccd91901&#34;&gt;8. リモートでsudoのパスワードを渡したい&lt;/h1&gt;

&lt;p&gt;先のテクニックがそのまま使えます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;printf &amp;quot;password: &amp;quot;
read password
ssh user@remote sh &amp;lt;&amp;lt;SHELL
echo &amp;quot;$password&amp;quot; | sudo -S command
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クォート無しのヒアドキュメントのシェル変数の展開はローカルで行なわれるのでローカルにある変数がそのまま参照出来ます。&lt;/p&gt;

&lt;h1 id=&#34;9-リモートにローカルに置いてあるファイルを送りたい:5e57d8f93a32720e126e1053ccd91901&#34;&gt;9. リモートにローカルに置いてあるファイルを送りたい&lt;/h1&gt;

&lt;p&gt;scpでも良いですがroot loginを許可してないと設定ファイルを/etcに置けないなどと不都合が生じます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh user@remote sh &amp;lt;&amp;lt;SHELL
cat &amp;lt;&amp;lt;&#39;EOF&#39; &amp;gt;&amp;gt; some_remote_file
$(cat local_file)
EOF
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは少し解説が必要でしょうか。&lt;/p&gt;

&lt;p&gt;まず、先程も出てきた&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh user@remote sh &amp;lt;&amp;lt;SHELL
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ですが普通のヒアドキュメントなので中の変数やコマンド置換を展開します。ということでリモートで実行されるのは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat &amp;lt;&amp;lt;&#39;EOF&#39; &amp;gt;&amp;gt; some_remote_file
# the content of
# local_file
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。そしてcatのヒアドキュメントはクォート付きなのでlocal_fileの中身がさらに変数展開されることはありません。&lt;/p&gt;

&lt;p&gt;勿論、root権限で書き込みたかったら先程までのテクニックを組み合わせて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh user@remote sh &amp;lt;&amp;lt;SHELL
{ echo &amp;quot;$password&amp;quot; ; cat &amp;lt;&amp;lt;&#39;EOF&#39; } | sudo -S tee  some_remote_file
$(cat local_file)
EOF
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として下さい.&lt;/p&gt;

&lt;h1 id=&#34;10-リモートにあるファイルを編集したい:5e57d8f93a32720e126e1053ccd91901&#34;&gt;10. リモートにあるファイルを編集したい&lt;/h1&gt;

&lt;p&gt;sed(1)を使いましょう。あるいは、sedだと辛いならローカルでファイルを編集、diffをとってpatch(1)を使いましょう。diffの送り方はもう分かりますね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh user@remote sh &amp;lt;&amp;lt;SHELL
cat &amp;lt;&amp;lt;&#39;EOF&#39; |  patch
$(cat file.diff)
EOF
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;いかがでしょうか。テクニックさえ抑えればシェルスクリプトは料理人だか板前だか知りませんが流行に流されるツールにも負けない力があると思います。動作も速い。
みなさんシェルスクリプト書きましょうね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shell Scriptでオプションをパースするときの必勝法</title>
      <link>/post/option-parse-for-shell/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/option-parse-for-shell/</guid>
      <description>&lt;p&gt;κeenです。CIMの解説 実装編の執筆はもうちょい掛かりそうです。だいたいコードが落ち着いたら書きます。&lt;/p&gt;

&lt;p&gt;今回は長いオプションと短いオプションをシェルスクリプトでパースするときの話です。&lt;/p&gt;

&lt;p&gt;シェルスクリプトでは&lt;code&gt;case&lt;/code&gt;を使う方法と&lt;code&gt;getopts&lt;/code&gt;を使う方法があります。&lt;code&gt;case&lt;/code&gt;だと長いオプションと短いオプションを扱えるものの短いオプションをまとめるのに苦労し、&lt;code&gt;getopts&lt;/code&gt;だと短いオプションをまとめられるものの長いオプションを扱えません。&lt;/p&gt;

&lt;p&gt;そこで解決策。&lt;code&gt;--foo ARG&lt;/code&gt; &lt;code&gt;-f ARG&lt;/code&gt; &lt;code&gt;-h&lt;/code&gt;をパースし、他のオプションも許可（無視）、&lt;code&gt;--&lt;/code&gt;でパースを止めるとします。&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;$#&#34;&lt;/span&gt; -gt 0 &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ARG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;$1&#34;&lt;/span&gt;;&lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;$ARG&#34;&lt;/span&gt; in
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; --foo&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; do_something_with &lt;span class=&#34;s2&#34;&gt;&#34;$ARG&#34;&lt;/span&gt;;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; --&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;break&lt;/span&gt;;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; --*&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; -*&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;nv&#34;&gt;OPTIND&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;while &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;getopts&lt;/span&gt; :f:h OPT &lt;span class=&#34;s2&#34;&gt;&#34;$ARG&#34;&lt;/span&gt;; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt; case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;$OPT&#34;&lt;/span&gt; in
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; f&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; do_something_with &lt;span class=&#34;s2&#34;&gt;&#34;$OPTARG&#34;&lt;/span&gt;;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; h&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; do_something;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt; done&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;単純に&lt;code&gt;case&lt;/code&gt;と&lt;code&gt;getopts&lt;/code&gt;を組み合わせます。ポイントは&lt;code&gt;-*)&lt;/code&gt;の節の&lt;code&gt;OPTIND=1&lt;/code&gt;と&lt;code&gt;getopts&lt;/code&gt;の第3引数でしょうか。&lt;/p&gt;

&lt;p&gt;因みにこの例だと引数を消費します。引数を消費したくなければ&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;$#&#34;&lt;/span&gt; -gt 0 &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ARG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;$1&#34;&lt;/span&gt;;&lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;を&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt;for &lt;/span&gt;ARG;do
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;に書き換えれば良く、&lt;code&gt;--&lt;/code&gt;でパースを止めたくなければ&lt;code&gt;--) break;;&lt;/code&gt;の節を無くせば良く、&lt;/p&gt;

&lt;p&gt;他のオプションを許したくなければ&lt;code&gt;--*);;&lt;/code&gt;の節を&lt;code&gt;--*)exit 1;;&lt;/code&gt;などにし、&lt;code&gt;getopts&lt;/code&gt;の引数文字列&lt;code&gt;:f:h&lt;/code&gt;の&lt;code&gt;:&lt;/code&gt;をとって&lt;code&gt;getopts fh ...&lt;/code&gt;とすれば良いです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>