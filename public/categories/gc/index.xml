<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gc on κeenのHappy Hacκing Blog</title>
    <link>/categories/gc/</link>
    <description>Recent content in Gc on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 26 Oct 2014 19:13:45 +0000</lastBuildDate>
    
	<atom:link href="/categories/gc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GCの話</title>
      <link>/blog/2014/10/26/gcfalsehua/</link>
      <pubDate>Sun, 26 Oct 2014 19:13:45 +0000</pubDate>
      
      <guid>/blog/2014/10/26/gcfalsehua/</guid>
      <description>&lt;p&gt;#関数型なんたら でGCの話を聴いて、&lt;a href=&#34;http://www.pllab.riec.tohoku.ac.jp/papers/icfp2011UenoOhoriOtomoAuthorVersion.pdf&#34;&gt;SML#のGCの論文&lt;/a&gt;を読んで色々感じたのでエントリー。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Picrinのチューニングの話、もといGCの話</title>
      <link>/slide/picrin-gc/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/slide/picrin-gc/</guid>
      <description># Picrinのチューニングの話、もといGCの話 --- Lisp Meet Up presented by Shibuya.lisp #20 2014-09-29 κeen(@blackenedgold) # 自己紹介 --- + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます + [picrin](https://github.com/picrin-scheme/picrin)のコミッタです # picrin --- ![picrin](/images/picrin/picrin-logo-fin01-02.png) # picrin --- * R7RS compatibility * bytecode interpreter (based on stack VM) * internal representation by nan-boxing * conservative call/cc implementation (users can freely interleave native stack with VM stack) * exact GC (simple mark and sweep, partially reference count is used as well) * string representation by rope data structure # picrin --- * R7RS compatibility * bytecode interpreter (based on stack VM) * internal representation by nan-boxing * conservative call/cc implementation (users can freely interleave native stack with VM stack) * exact GC (simple mark and sweep, partially reference count is used as well) * string representation by rope data structure # picrin開発者の不満 --- * picrinの起動が遅い+ 2秒くらいかかる * picrinのテストが遅い+ 16秒くらいかかる # 少しGCの話 --- GC(ごみ集め)とは * 使われていないオブジェクトを自動的に解法する + メモリ管理に煩わせられないで済む + メモリーリークを防ぐ。 * 「使われていないオブジェクト」を判定するのはいくつかアルゴリズムがある # GCのアルゴリズム --- ## 主なGCのアルゴリズム * マーク&amp;amp;スイープ * 参照カウント * Copying GC # GCのアルゴリズム --- ## マーク&amp;amp;スイープ 1.</description>
    </item>
    
  </channel>
</rss>