<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>継続 on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/%E7%B6%99%E7%B6%9A/</link>
    <description>Recent content in 継続 on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 27 Jun 2019 01:16:40 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/%E7%B6%99%E7%B6%9A/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>継続とかの話題サーベイ</title>
      <link>//KeenS.github.io/blog/2019/06/27/keizokutokanowadaisa_bei/</link>
      <pubDate>Thu, 27 Jun 2019 01:16:40 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2019/06/27/keizokutokanowadaisa_bei/</guid>
      <description>&lt;p&gt;日夜CPSに励む紳士淑女のみなさなまこんにちは、κeenです。CPS変換について掘り返してたら発散していったので適当に書き留めておきます。
主に自分向けのメモで、あとで思い出すために書いてるので私自身以外には分かりづらいと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>高速な継続ライブラリに向けて</title>
      <link>//KeenS.github.io/slide/kousokunakeizokuraiburarinimukete/</link>
      <pubDate>Sun, 08 May 2016 21:26:32 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/kousokunakeizokuraiburarinimukete/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS サイバーエージェントのエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます ===  継続欲しい   色々な場面で便利 Schemeで使い回してるのうらやましい Common Lispでも使いたい 現実には限定継続が欲しい  Common Lispには大域脱出はある    ===
限定継続を使う例  非同期プログラミング  コールバック形式だと厳しい 限定継続を使うと綺麗に書き直せる  ===
限定継続を使う例  ゲームのコルーチン  複数のオブジェクトを制御するのにコルーチンが欲しい cf コルーチンをCommon Lispで簡単に定義 - さくらんぼのlambda日記  ===
限定継続を使う例  do記法  モナドのdo記法は限定継続を使って実装出来る Operational monad in scheme  ===
Common Lispでの限定継続の実現   仕様に入れてもらう 処理系に手を入れる ユーザレベルで(限定)継続ライブラリを作る  柔軟なCommon Lispでは可能    ===</description>
    </item>
    
    <item>
      <title>非同期処理の「その後」の話。goto、継続、限定継続、CPS、そしてコールバック地獄。</title>
      <link>//KeenS.github.io/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</link>
      <pubDate>Sat, 25 Apr 2015 23:44:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS 渋谷のエンジニア Lisp, ML, Shell Scriptあたりを書きます ===  同期処理とは  通常、外部とやりとり(I/O)する時に待ち時間(ブロック)が発生する。
===
非同期処理とは  待ち時間に(ブロックせずに)別の処理をしようという発想。
 非同期処理の裏側  処理Aと処理Bの他にいつどっちを動かすかを決めるスケジューラが存在することが多い
===
どうやって戻る問題   一時停止した後「その後」の処理にどうやって戻るか   「その後」とは  ... fputc(c); // ここの処理でI/Oが入る // 再開する時にここに戻ってきたい printf(&amp;#34;Work done&amp;#34;); ... ===
GOTO  goto を使えば戻れる
... fputc(c); // ここの処理でI/Oが入る  // 再開する時にここに戻ってきたい RESTART: printf(&amp;#34;Work done&amp;#34;); ... ===
GOTOの問題  こういうコードだとGOTOでは困る
if ((c = fgetc(f)) != -1) .</description>
    </item>
    
  </channel>
</rss>