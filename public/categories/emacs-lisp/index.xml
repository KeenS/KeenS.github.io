<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs Lisp on κeenのHappy Hacκing Blog</title>
    <link>http://KeenS.github.io/categories/emacs-lisp/</link>
    <description>Recent content in Emacs Lisp on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Dec 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://KeenS.github.io/categories/emacs-lisp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>.emacsの整理をした話 &#43; EmacsとViとShellとLispを悪魔合体させたら超絶便利だった</title>
      <link>http://keens.github.io/blog/2013/12/13/dot-emacs-clean-up</link>
      <pubDate>Fri, 13 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://keens.github.io/blog/2013/12/13/dot-emacs-clean-up</guid>
      <description>

&lt;p&gt;やや長いタイトルですが・・・年末になって大掃除がやってきましたね。みなさんもそろそろ.emacsの大掃除をしましょう。&lt;/p&gt;

&lt;p&gt;私の.emacsは元々1300行ちょいあってEmacsの起動に7~8秒(体感)かかってましたが大掃除&amp;amp;高速化をした結果800行弱、起動に1秒(体感)ほどになったので整理の仕方を共有しますね。&lt;/p&gt;

&lt;p&gt;前提ですが、私はinitローダーとかは使ってません。全部&lt;code&gt;init.el&lt;/code&gt;に書いてます。で、機能毎にページを作って(&lt;code&gt;C-q C-l&lt;/code&gt;)ます。ただ、それだけだと視認性が悪いので見出しとして&lt;code&gt;C-u C-u C-u ;&lt;/code&gt;で&lt;code&gt;;&lt;/code&gt;を64個挿入して次の行にコメントで&lt;code&gt;#&lt;/code&gt;付きのタイトルを付けてます。&lt;/p&gt;

&lt;p&gt;具体的には&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;common-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;nv&#34;&gt;^L&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; #Lisp&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;こんな感じのものが機能毎に書かれてます。これで&lt;code&gt;C-s&lt;/code&gt;や&lt;code&gt;M-x occur&lt;/code&gt;でハッシュタグのように検索することも&lt;code&gt;C-v&lt;/code&gt;でスクロールしていって目grepすることも&lt;code&gt;C-x ]&lt;/code&gt;で機能毎にジャンプすることもできます。&lt;/p&gt;

&lt;h1 id=&#34;1-emacsの最新版を使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;1. Emacsの最新版を使う&lt;/h1&gt;

&lt;p&gt;結構重要です。「標準のやつだと欲いこの機能がないから拡張パッケージ入れた」なんてのも最新版では改善されていたりします。例えば私は&lt;code&gt;emacs-w3m&lt;/code&gt;を使っていましたが、Emacsのmasterブランチには&lt;code&gt;eww&lt;/code&gt;なるEmacs Lisp製のブラウザが入っているのでそれを使うようにしました。&lt;/p&gt;

&lt;p&gt;&lt;s&gt;ただ、これが絶対的正義かというとそうでもなく、パッケージで入れてない分
Ubuntuのインプットメソッドとの連携部分がなかったので&lt;code&gt;uim.el&lt;/code&gt;を入れる
必要が出てきたりと、面倒な部分もありました。Emacs標準のインプットメソッドはどうにも使いものにならず、
&lt;code&gt;ddskk&lt;/code&gt;もuim-skkとコンフリクトする(というか&lt;code&gt;C-j&lt;/code&gt;上書きとかありえない)ので使いません。インプットメソッドの切り替え部分は&lt;/s&gt;&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;common-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;global-set-key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;kbd&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;&amp;lt;hiragana-katakana&amp;gt;&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;uim-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;global-set-key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;kbd&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;&amp;lt;zenkaku-hankaku&amp;gt;&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;uim-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;autoload&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;uim-mode&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;uim&#34;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;になりました。&lt;/p&gt;

&lt;p&gt;2013-12-16追記&lt;br /&gt;
これは私が&lt;code&gt;~/.Xresources&lt;/code&gt;に&lt;code&gt;Emacs*useXIM: false&lt;/code&gt;を書いていたのが原因でした。&lt;code&gt;Emacs*useXIM: true&lt;/code&gt;に書き換え、&lt;code&gt;xrdb ~/.Xresources&lt;/code&gt;すると直りました。&lt;/p&gt;

&lt;h1 id=&#34;2-普段使わない設定は全部消す:4e9eff69691c75d8318f2604900514ad&#34;&gt;2. 普段使わない設定は全部消す&lt;/h1&gt;

&lt;p&gt;基本ですね。私は&lt;code&gt;summary-edit.el&lt;/code&gt;だとか&lt;code&gt;multiverse.el&lt;/code&gt;だとかるびきちさんの本を読んで便利そうだから入れたものの、結局使わなかったものの設定&amp;amp;elispをごっそり削除。あとかなりの言語に対してデフォルトで&lt;code&gt;auto-mode-alist&lt;/code&gt;が設定されていたので&lt;code&gt;auto-mode-alist&lt;/code&gt;の設定も全部消して、必要になったら書き足すようにしました。&lt;/p&gt;

&lt;h1 id=&#34;3-普段使っていても代替の効くものは削除:4e9eff69691c75d8318f2604900514ad&#34;&gt;3. 普段使っていても代替の効くものは削除&lt;/h1&gt;

&lt;p&gt;これは高速化の意味と自分の環境に依存しない意味があります。最近、自分のラップトップ以外でもEmacsを触ることが多くあって、デフォルトのキーを上書きして使ってる部分で何度も誤操作したのでそれを減らす目的です。&lt;code&gt;bm.el&lt;/code&gt;は&lt;code&gt;C-x r SPC&lt;/code&gt;の&lt;code&gt;register&lt;/code&gt;系や&lt;code&gt;C-x C-SPC&lt;/code&gt;で対応(registerは覚えれば使い出がありそうなのでいつか解説書くかもです)、&lt;code&gt;open-junk-file.el&lt;/code&gt;は&lt;code&gt;~/tmp&lt;/code&gt;を作って対応、&lt;code&gt;recentf-ext.el&lt;/code&gt;は&lt;code&gt;helm-file-buffers&lt;/code&gt;だとか。&lt;/p&gt;

&lt;p&gt;あと全て&lt;code&gt;helm.el&lt;/code&gt;に置き換えて&lt;code&gt;helm.el&lt;/code&gt;と&lt;code&gt;anything.el&lt;/code&gt;が混在してる状態をどうにかしたかったのですが、&lt;code&gt;php-completion.el&lt;/code&gt;かなにかが依存しててトドメを刺せませんでした。&lt;/p&gt;

&lt;p&gt;あと、&lt;code&gt;viewer&lt;/code&gt;の代替を探していたらタイトルにあるように悪魔合体が起きたので後で書きますね。&lt;/p&gt;

&lt;h1 id=&#34;4-できる限り標準のものを使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;4. できる限り標準のものを使う&lt;/h1&gt;

&lt;p&gt;標準で提供されているパッケージは&lt;code&gt;autoload&lt;/code&gt;が&lt;code&gt;emacs&lt;/code&gt;バイナリに組込まれてる(と思う)ので起動時のオーバーヘッドはありません。&lt;code&gt;flymake.el&lt;/code&gt;や&lt;code&gt;ruby-mode.el&lt;/code&gt;が標準で提供されてるのに気付いたのでそれを使ったりなど。一度&lt;code&gt;(emacsroot)/lisp&lt;/code&gt;以下を眺めてみることをお勧めします。結構発見があるものです。&lt;/p&gt;

&lt;h1 id=&#34;5-autoload-を使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;5.&lt;code&gt;autoload&lt;/code&gt;を使う&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;autoload&lt;/code&gt;とはファイルの読み込みを必要になるまで遅らせる仕組みです。「必要になる」ってのはそのファイルで定義されている関数が呼ばれたときです。賢い&lt;code&gt;require&lt;/code&gt;と思えば良いでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(autoload #&#39;関数名 &amp;quot;関数が呼ばれたときに読むファイル名&amp;quot; nil interactivep)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいに使います。&lt;code&gt;interactivep&lt;/code&gt;の部分は&lt;code&gt;M-x&lt;/code&gt;で呼ぶものなら&lt;code&gt;t&lt;/code&gt;、そうでなければ&lt;code&gt;nil&lt;/code&gt;です。&lt;code&gt;require&lt;/code&gt;を&lt;code&gt;autoload&lt;/code&gt;で書き換えていけば理論上起動時の読み込み0にできるのでかなり高速化できます。&lt;/p&gt;

&lt;p&gt;が、実際は一々&lt;code&gt;autoload&lt;/code&gt;書くのはしんどいので次です。&lt;/p&gt;

&lt;h1 id=&#34;6-できる限り-package-el-を使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;6.できる限り&lt;code&gt;package.el&lt;/code&gt;を使う&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;package.el&lt;/code&gt;は必要な関数の&lt;code&gt;autoload&lt;/code&gt;を自動生成して読み込んでおいてくれるのでかなりの手間が省けます。そして&lt;code&gt;autoload&lt;/code&gt;があるのに&lt;code&gt;require&lt;/code&gt;してると折角の&lt;code&gt;package.el&lt;/code&gt;の配慮が無駄になります。&lt;/p&gt;

&lt;p&gt;自動生成された&lt;code&gt;autoload&lt;/code&gt;は&lt;code&gt;elpa/パッケージのディレクトリ/パッケージ-autoloads.el&lt;/code&gt;にあるので確認しながら&lt;code&gt;init.el&lt;/code&gt;の邪魔なものを消していきます。これでかなり&lt;code&gt;init.el&lt;/code&gt;の行数が減ります。今まで無駄な設定していたんだなと気付きます。&lt;/p&gt;

&lt;h1 id=&#34;7-eval-after-load-を使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;7. &lt;code&gt;eval-after-load&lt;/code&gt;を使う&lt;/h1&gt;

&lt;p&gt;8割程の設定は&lt;code&gt;autoload&lt;/code&gt;で対応できるのですが、踏み込んだ設定をしているとパッケージの内部の関数を使ってしまってどうしてもその式が評価される前にパッケージが読み込まれている必要があることがあります。&lt;/p&gt;

&lt;p&gt;そんなときは&lt;code&gt;eval-after-load&lt;/code&gt;を使います。名前のまんま、ロードした後で&lt;code&gt;eval&lt;/code&gt;してくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(eval-after-load &#39;ファイル名
    &#39;式)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の形で使います。複数の式を使いたい場合は&lt;code&gt;progn&lt;/code&gt;を使って&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(eval-after-load &#39;ファイル名
    &#39;(progn
         式1
         式2...))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように使います。あるパッケージの拡張パッケージなんかもここで読むと良いかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;8-その他:4e9eff69691c75d8318f2604900514ad&#34;&gt;8.その他&lt;/h1&gt;

&lt;p&gt;メールクライアントを標準のものにしようとしましたが、&lt;code&gt;gnus.el&lt;/code&gt;はちょっと受け付けなくてその他はimapを喋らないので断念。でも色々調べてたら&lt;code&gt;mew&lt;/code&gt;より&lt;code&gt;wanderlust&lt;/code&gt;の方が良いようなので使い初めました。表示が綺麗で良いですね。HTMLのレンダリングも&lt;code&gt;emacs-w3m&lt;/code&gt;に頼らず標準の&lt;code&gt;shr.el&lt;/code&gt;を使っているのも◎。&lt;/p&gt;

&lt;p&gt;同じような経緯で&lt;code&gt;JDEE&lt;/code&gt;をやめて&lt;code&gt;malabar.el&lt;/code&gt;を使うようにしました。ただ、私は&lt;code&gt;maven&lt;/code&gt;使いではないので微妙ではあります。まあ、そもそもプロジェクト単位でJavaを書くことがないってのもあるんですが。Androidのスケルトンがantなのでantでできたら嬉しいなーって。&lt;/p&gt;

&lt;h1 id=&#34;emacsとviとshellとlispを悪魔合体させた話:4e9eff69691c75d8318f2604900514ad&#34;&gt;EmacsとViとShellとLispを悪魔合体させた話&lt;/h1&gt;

&lt;p&gt;私はEmacsの狂信者ですが読み専のときはちょいちょいviを使うこともあります。片手で操作できるのは便利です。Emacsで読み専といえば&lt;code&gt;view-mode&lt;/code&gt;です。そこでもhjklを使うべく&lt;code&gt;view-mode-map&lt;/code&gt;に手を加えてましたが、大掃除ということで全部削除。&lt;/p&gt;

&lt;p&gt;その後で&lt;code&gt;emacsroot/lisp/emulate/&lt;/code&gt;以下を読んでいるとなんかviのエミュレーターが3つも見付かりました。&lt;code&gt;vi.el&lt;/code&gt;、&lt;code&gt;vip.el&lt;/code&gt;、&lt;code&gt;viper.el&lt;/code&gt;です。後者になるほどviとの互換性が高くなります。とりあえずは&lt;code&gt;hjkl&lt;/code&gt;が使えれば良いので&lt;code&gt;vi.el&lt;/code&gt;を使ってみたところ、ん〜…といったところ。&lt;code&gt;vip.el&lt;/code&gt;と試して結局&lt;code&gt;viper.el&lt;/code&gt;に落ち着きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &amp;quot;C-x C-q&amp;quot;) #&#39;(lambda ()
                    (interactive)
                    (toggle-viper-mode)
                    (force-mode-line-update)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定はこんな感じです。&lt;code&gt;toggle-viper-mode&lt;/code&gt;してもモードラインの表示が変わらないことがあったので&lt;code&gt;force-mode-line-update&lt;/code&gt;を加えました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;viper.el&lt;/code&gt;は単なるviのエミュレートだけではなく、Levelに応じて良い感じにemacsと悪魔合体してくれます。私は最高レベルの5にしました。”C-x C-s”など基本的なコマンドはそのまま使えるようになってます。&lt;code&gt;:&lt;/code&gt;で始まるvi(ex)のコマンドも使えます。&lt;code&gt;C-z&lt;/code&gt;でemacs&amp;lt;–&amp;gt;viを切り替えたり。非常に便利です。&lt;/p&gt;

&lt;p&gt;尚、私はvi使いであってvim使いではないのでevilは使いません。&lt;/p&gt;

&lt;p&gt;もう一つ、shellの話。今までは&lt;code&gt;multiterm&lt;/code&gt; × &lt;code&gt;zsh&lt;/code&gt;な感じでしたが、「できる限り標準のものを使う」方針で&lt;code&gt;eshell&lt;/code&gt;に切り替えました。&lt;code&gt;eshell&lt;/code&gt;はEmacs Lispで書かれたshellです。これが思った以上に便利です。るびきちさんの本では標準出力とエラー出力の切り分けができてないと書かれてましたがそれは修正されてるようです。&lt;/p&gt;

&lt;p&gt;あとは&lt;code&gt;/dev/kill&lt;/code&gt;だとか&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;だとかバッファへのリダイレクトだとか&lt;code&gt;grep&lt;/code&gt;の上書きだとか色々楽しい拡張もあるのですが、一番は&lt;code&gt;eshell&lt;/code&gt;がLispであること。&lt;code&gt;eshell&lt;/code&gt;上で任意のEmacs Lisp式を実行できます。最近Emacs LispやLispに精通してきたので非常に有り難いです。&lt;br /&gt;
それにファイルを開くときもその後で同じディレクトリのファイルを開くことが多いので一旦 &lt;code&gt;cd&lt;/code&gt;してから&lt;code&gt;find-file&lt;/code&gt;をするとアクセスし易くて捗ります。もう起動時に&lt;code&gt;eshell&lt;/code&gt;が立ち上がるようにして、基本そこから操作するようにしてます。guakeもそんなに使わなくなりました。他の環境でも使えるので安心して依存できます。&lt;/p&gt;

&lt;p&gt;で、ファイルを開くときはどうしてるかというと実はemacsの&lt;code&gt;find-file&lt;/code&gt;ではなくviの&lt;code&gt;:e file-name&lt;/code&gt;です。Emacs上でLispで出来たShellを使いつつviを動かしてます。かなり人を選びますが「EmacsのヘビーユーザーでLispに精通しててviを便利だと思ってる人」は試してみてはいかがでしょうか。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacsのdired-modeを使い易くする</title>
      <link>http://keens.github.io/blog/2013/10/04/emacs-dired</link>
      <pubDate>Fri, 04 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://keens.github.io/blog/2013/10/04/emacs-dired</guid>
      <description>&lt;p&gt;Emacsの標準ライブラリ&lt;code&gt;dired.el&lt;/code&gt;を読んでたら色々発見があったのでメモ兼dired-modeとはなんじゃらほいって方にも一から解説してみます。&lt;/p&gt;

&lt;p&gt;とは言ってもいきなり解説しなくて申し訳ないのですが、最初に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(ffap-bindings)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を設定しておきましょう。&lt;code&gt;C-x C-f&lt;/code&gt;が非常に便利になります。だいたいの方が設定してるかと思いますが、まだという方は&lt;code&gt;init.el&lt;/code&gt;に書いて保存し、最後の&lt;code&gt;)&lt;/code&gt;の後にカーソルを持っていって&lt;code&gt;C-x C-e&lt;/code&gt;しましょう。設定が反映されます。この設定で&lt;code&gt;C-x C-f&lt;/code&gt;の入力がファイル以外も受け付けてくれますし、カーソルにポイントされてるファイルやURLをデフォルトで開こうとしてくれます。&lt;/p&gt;

&lt;p&gt;…よし。じゃあ解説始めますよ。&lt;code&gt;C-x C-f ~/&lt;/code&gt;してみて下さい。上の設定をしていたらディレクトリでも開ける筈です。するとホームディレクトリが&lt;code&gt;ls -al&lt;/code&gt;された感じのバッファが出てくると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://KeenS.github.io/images/Screenshot_from_2013-10-04.png&#34; alt=&#34;私のホームはちょっとマズいのがあったので.emacs.dのスクリーンショット&#34; title=&#34;dired-mode-screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これが&lt;code&gt;dired-mode&lt;/code&gt;です。これは普通に&lt;code&gt;n&lt;/code&gt;(&lt;code&gt;C-n&lt;/code&gt;でも可)や&lt;code&gt;p&lt;/code&gt;(&lt;code&gt;C-p&lt;/code&gt;でも可)で移動して、Enterでそのファイルやディレクトリを開けます。これだけでも十分便利なのですが、ここからさらにファイル操作までできます。&lt;/p&gt;

&lt;p&gt;適当なファイルにカーソルを合わせて&lt;code&gt;C&lt;/code&gt;するとコピー先を聞かれるので、入力してあげるとコピーしてくれます。複数ファイルをコピーしたいなら、コピーしたいファイル上で&lt;code&gt;m&lt;/code&gt;してマークを付けて、&lt;code&gt;C&lt;/code&gt;すれば一括でコピーできます。&lt;/p&gt;

&lt;p&gt;勿論、他にもコマンドはあります。同じような使い方のできる代表的なものを挙げると、&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;コマンド&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;操作(実行されるLinuxコマンド)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;コピー(&lt;code&gt;cp&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;リネーム/移動 (&lt;code&gt;mv&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;削除(&lt;code&gt;rm&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;M&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;権限操作(&lt;code&gt;chmod&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;G&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;グループ変更(&lt;code&gt;chgrp&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;O&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;所有権変更(&lt;code&gt;chown&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Z&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;圧縮/展開(&lt;code&gt;compress/uncompress/gunzip/bunzip/unzip&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;B&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(*.elファイルの)バイトコンパイル&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;!&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;任意のコマンドの実行。デフォルトで空気読んだコマンドになってる。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;他にも無数に操作はありますがファイル操作はこんなものでしょう。あとはバッファを閉じる&lt;code&gt;q&lt;/code&gt;や親ディレクトリに移動する&lt;code&gt;^&lt;/code&gt;、バッファの更新を行なう&lt;code&gt;g&lt;/code&gt;、マークを外す&lt;code&gt;u&lt;/code&gt;(&lt;code&gt;U&lt;/code&gt;で全解除)を覚えていれば操作には困らない筈です。&lt;/p&gt;

&lt;p&gt;が、頻繁に使っているとより良く使いたくなります。そこで今回見付けた設定を紹介します。&lt;/p&gt;

&lt;p&gt;まず&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(add-hook &#39;dired-load-hook (lambda ()
                  (define-key dired-mode-map &amp;quot;r&amp;quot; &#39;wdired-change-to-wdired-mode)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;から。これはdired-modeで&lt;code&gt;r&lt;/code&gt;するとバッファがエディタブルになり、ファイル名を普通に変更できます。そのまま&lt;code&gt;C-x C-s&lt;/code&gt;すればリネームの終了です。&lt;br /&gt;
普通にEmacsの編集コマンドが使えるので &lt;code&gt;M-%&lt;/code&gt;とかで一括拡張子変更とか&lt;code&gt;C-x r t&lt;/code&gt;でファイル名にプリフィクスつけたり自由自在です。&lt;/p&gt;

&lt;p&gt;次に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setq dired-listing-switches (purecopy &amp;quot;-Ahl&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Emacsがdired-modeを表示するとき、実際に裏で &lt;code&gt;ls -al&lt;/code&gt;を走らせているのですが、そのときのオプションを変更できます。但し内部で&lt;code&gt;-l&lt;/code&gt;の結果を利用してるのでこれは必須です。しかしそれ以外は自由に設定できます。因みにWindowsでもEmacsがエミュレートしてくれるので設定可能ですが、一部未実装のものもあるそうです。&lt;/p&gt;

&lt;p&gt;頻繁に使うなら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setq dired-dwim-target t)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もお勧めです。&lt;/p&gt;

&lt;p&gt;これを設定しておくと、ウィンドウを分割して左右にdiredバッファを開いているとき、&lt;code&gt;R&lt;/code&gt;や&lt;code&gt;C&lt;/code&gt;のデフォルトの宛先がもう片方のディレクトリになります。伝わりますかね？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://KeenS.github.io/images/Screenshot_from_2013-10-05.png&#34; alt=&#34;分割した両方のWindowでdired-modeを実行した状態。&#34; title=&#34;dired-mode in both of split window&#34; /&gt;&lt;/p&gt;

&lt;p&gt;のようにdiredでディレクトリA, Bを開いてるときにディレクトリAでファイルのコピーやら移動やらをするときにデフォルトでBに移動やコピーを行なうようになります。いくつかのファイルをディレクトリ間で移動させるときに非常に便利ですね。&lt;/p&gt;

&lt;p&gt;あ、&lt;code&gt;C-x C-f /ftp:user@ftp-server:/path/to/dir&lt;/code&gt;でFTPサーバーのディレクトリ/ファイルにもアクセスできるのは御存じですよね？これと組合せるとEmacsが割と使い易いFTPクライアントに大変身!&lt;/p&gt;

&lt;p&gt;あとは私がどうしても欲しかったtarballですね。&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/KeenS/6828197.js?file=dired-tar.el&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;(defun dired-tar (tarname files &amp;amp;optional arg)
  &amp;ldquo;A dired-mode extension to archive files marked. With prefix argument, the tarball is gziped.&amp;rdquo;
  (interactive (let ((files (dired-get-marked-files)))&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; (list (read-string &amp;amp;quot;Tarball name: &amp;amp;quot; (concat (file-relative-name (car files)) &amp;amp;quot;.tar.gz&amp;amp;quot;))
           files &amp;amp;quot;P&amp;amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; (let ((tar (if arg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; (if dired-guess-shell-gnutar
         (concat dired-guess-shell-gnutar &amp;amp;quot; zcf %s %s&amp;amp;quot;)
       &amp;amp;quot;tar cf - %2s | gzip &amp;amp;gt; %1s&amp;amp;quot;)
       &amp;amp;quot;tar cf %s %s&amp;amp;quot;)))
(shell-command (format tar tarname (mapconcat &#39;file-relative-name files &amp;amp;quot; &amp;amp;quot;)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p&gt;(add-hook ‘dired-load-hook (lambda () (define-key dired-mode-map &amp;ldquo;T&amp;rdquo; ‘dired-tar)))
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/p&gt;

&lt;p&gt;これでtarballにまとめたいファイルをマークして&lt;code&gt;T&lt;/code&gt;すればまとめてくれます。&lt;code&gt;C-u T&lt;/code&gt;するとgzip圧縮までしてくれます。因みに解凍/展開はファイル上で&lt;code&gt;!&lt;/code&gt;するとデフォルトコマンドが展開(&lt;code&gt;tar xzvf&lt;/code&gt;など)になってるので専用コマンドは必要ありません。補足ですが個人用なのでテストとかしてません。一旦御自身で動作テストなどをされてから実行されることをお勧めします。&lt;/p&gt;

&lt;p&gt;他にも色々なコマンドがたくさんあったので興味のある方は探求してみて下さい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>octomacs.elを修正しました</title>
      <link>http://keens.github.io/blog/2013/09/16/octomacs-el</link>
      <pubDate>Mon, 16 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://keens.github.io/blog/2013/09/16/octomacs-el</guid>
      <description>&lt;p&gt;EmacsからOctopressに投稿できるOctomacs.elが最新版のrvm.elに対応してないようだったので修正してみました。&lt;/p&gt;

&lt;p&gt;原因はOctomacs.elがrvm.elの内部で使われている関数を使っていたのですが、その関数が最新版で削除されていたからだったみたいです。&lt;/p&gt;

&lt;p&gt;結論として、&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;19&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;21&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;22&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;23&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;24&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;25&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;26&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;27&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;28&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;29&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;30&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;31&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;32&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;33&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;34&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;35&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;36&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;37&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;38&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;39&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;40&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;41&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;42&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;43&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;44&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;45&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;46&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;47&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;48&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;49&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;50&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;51&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;52&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;*** /home/kim/.emacs.d/lisp/octomacs/octomacs.el 2013-09-16 22:29:14.498296762 +0900
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;--- /home/kim/.emacs.d/elpa/octomacs-20121026.1649/octomacs.el 2013-08-31 23:54:13.044373498 +0900
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ***************
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ***4,10****
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;; Author: Jacob Helwig &amp;lt;jacob@technosorcery.net&amp;gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;; Homepage: http://technosorcery.net
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! ;; Version: 0.0.1
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;; URL: https://github.com/jhelwig/octomacs
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;; License:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;--- 4,11 ----
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;; Author: Jacob Helwig &amp;lt;jacob@technosorcery.net&amp;gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;; Homepage: http://technosorcery.net
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! ;; Version: 20121026.1649
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! ;; X-Original-Version: 0.0.1
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;; URL: https://github.com/jhelwig/octomacs
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;; License:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ***************
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ***133,146****
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (defun octomacs-format-rake-task-with-args (task &amp;amp;optional arguments)
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;Build a shell suitable string of the rake TASK name with the specified ARGUMENTS.&#34;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (let ((arguments-string (if arguments
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! (format &#34;[%s]&#34; (if (listp arguments) (mapconcat &#39;octomacs-shell-escape-string arguments &#34;, &#34;) arguments))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;&#34;)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (format &#34;&#39;%s%s&#39;&#34; task arguments-string)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (defun octomacs-rake-with-rvm (directory task &amp;amp;optional arguments)
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;Run rake task TASK with specified ARGUMENTS in DIRECTORY using rvm&#34;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (let* ((default-directory (file-name-as-directory (expand-file-name directory)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! (rvmrc-info (or (rvm--load-info-rvmrc) (rvm--load-info-ruby-version) (rvm--load-info-gemfile)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (rvm-command (if rvmrc-info
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (concat &#34;rvm &#34; (mapconcat &#39;identity rvmrc-info &#34;@&#34;) &#34; do &#34;)
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;&#34;)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;--- 134,148 ----
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (defun octomacs-format-rake-task-with-args (task &amp;amp;optional arguments)
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;Build a shell suitable string of the rake TASK name with the specified ARGUMENTS.&#34;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (let ((arguments-string (if arguments
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! (format &#34;[%s]&#34; (mapconcat &#39;octomacs-shell-escape-string arguments &#34;, &#34;))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;&#34;)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (format &#34;&#39;%s%s&#39;&#34; task arguments-string)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (defun octomacs-rake-with-rvm (directory task &amp;amp;optional arguments)
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;Run rake task TASK with specified ARGUMENTS in DIRECTORY using rvm&#34;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (let* ((default-directory (file-name-as-directory (expand-file-name directory)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! (rvmrc-path (rvm--rvmrc-locate directory))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! (rvmrc-info (if rvmrc-path (rvm--rvmrc-read-version rvmrc-path) nil))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (rvm-command (if rvmrc-info
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (concat &#34;rvm &#34; (mapconcat &#39;identity rvmrc-info &#34;@&#34;) &#34; do &#34;)
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;&#34;)))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;こんな感じです。これでちゃんと&lt;code&gt;.rvmrc&lt;/code&gt;やら&lt;code&gt;.ruby-version&lt;/code&gt;やら&lt;code&gt;.ruby-gemset&lt;/code&gt;やらを反映してくれます。 &lt;a href=&#34;https://github.com/jhelwig/octomacs/pull/2&#34;&gt;pull-req投げてみました&lt;/a&gt;。初pull-reqです。英語心配です。&lt;/p&gt;

&lt;p&gt;俺、pull-reqとりこまれたら&lt;code&gt;rake gen_deploy&lt;/code&gt;にも挑戦するんだ…&lt;/p&gt;

&lt;p&gt;あ、因みにこの投稿は&lt;code&gt;init.el&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setq octomacs-workdir-alist &#39;((&amp;quot;default&amp;quot; . &amp;quot;~/Ruby/octopress&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;して&lt;code&gt;octomacs-new-post&lt;/code&gt;から投稿してます。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>