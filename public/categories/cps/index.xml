<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CPS on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/cps/</link>
    <description>Recent content in CPS on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 26 Apr 2015 21:09:07 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/cps/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Common Lispで限定継続と遊ぶ</title>
      <link>//KeenS.github.io/slide/common_lispdegenteikeizokutoasobu_/</link>
      <pubDate>Sun, 26 Apr 2015 21:09:07 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/common_lispdegenteikeizokutoasobu_/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS 渋谷のエンジニア Lisp, ML, Shell Scriptあたりを書きます  ===
Agenda  cl-contの紹介 限定継続の話 限定継続の使い方の話 限定継続の実装の話  ===
CL-CONTの紹介 ===
CL-CONT   Common Lispの限定継続ライブラリ 結構古くからあるっぽい 割と色々なライブラリが使ってる ===  CL-CONT   API   継続を区切るマクロ  with-call/cc defun/cc lambda/cc   継続を取得するマクロ  call/cc let/cc    ※後で説明するので意味が分からなくても問題ないです。
===
限定継続の話 ===
継続とは   &amp;ldquo;その後&amp;quot;の計算を表わす概念。 値が決定した後トップレベルに戻るまでの計算。 Schemeが一級市民として扱えることで有名 値として取り出した時は0-1引数関数として振る舞う ===  継続とは  fooの継続は、fooを虫食いにしたものと思えば良い。</description>
    </item>
    
    <item>
      <title>非同期処理の「その後」の話。goto、継続、限定継続、CPS、そしてコールバック地獄。</title>
      <link>//KeenS.github.io/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</link>
      <pubDate>Sat, 25 Apr 2015 23:44:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS 渋谷のエンジニア Lisp, ML, Shell Scriptあたりを書きます ===  同期処理とは  通常、外部とやりとり(I/O)する時に待ち時間(ブロック)が発生する。
===
非同期処理とは  待ち時間に(ブロックせずに)別の処理をしようという発想。
 非同期処理の裏側  処理Aと処理Bの他にいつどっちを動かすかを決めるスケジューラが存在することが多い
===
どうやって戻る問題   一時停止した後「その後」の処理にどうやって戻るか   「その後」とは  ... fputc(c); // ここの処理でI/Oが入る // 再開する時にここに戻ってきたい printf(&amp;#34;Work done&amp;#34;); ... ===
GOTO  goto を使えば戻れる
... fputc(c); // ここの処理でI/Oが入る  // 再開する時にここに戻ってきたい RESTART: printf(&amp;#34;Work done&amp;#34;); ... ===
GOTOの問題  こういうコードだとGOTOでは困る
if ((c = fgetc(f)) != -1) .</description>
    </item>
    
  </channel>
</rss>