<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cps on κeenのHappy Hacκing Blog</title>
    <link>/categories/cps/</link>
    <description>Recent content in Cps on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 26 Apr 2015 21:09:07 +0900</lastBuildDate>
    
	<atom:link href="/categories/cps/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Common Lispで限定継続と遊ぶ</title>
      <link>/slide/common_lispdegenteikeizokutoasobu_/</link>
      <pubDate>Sun, 26 Apr 2015 21:09:07 +0900</pubDate>
      
      <guid>/slide/common_lispdegenteikeizokutoasobu_/</guid>
      <description># Common Lispで限定継続と遊ぶ ---------------------- [Lisp Meet Up #27](https://atnd.org/events/64988) === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Agenda -------- 0. cl-contの紹介 1. 限定継続の話 2. 限定継続の使い方の話 3. 限定継続の実装の話 === # CL-CONTの紹介 === # CL-CONT --------- * Common Lispの限定継続ライブラリ * 結構古くからあるっぽい * 割と色々なライブラリが使ってる === # CL-CONT --------- ![cl-cont dependers](/images/cl-cont-dependers.png) === # API ----- * 継続を区切るマクロ + `with-call/cc` + `defun/cc` + `lambda/cc` * 継続を取得するマクロ + `call/cc` + `let/cc` ※後で説明するので意味が分からなくても問題ないです。 === # 限定継続の話 === # 継続とは --------- * &#34;</description>
    </item>
    
    <item>
      <title>非同期処理の「その後」の話。goto、継続、限定継続、CPS、そしてコールバック地獄。</title>
      <link>/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</link>
      <pubDate>Sat, 25 Apr 2015 23:44:46 +0900</pubDate>
      
      <guid>/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</guid>
      <description># 非同期処理の「その後」の話 ---------------------- ## goto、継続、限定継続、CPS、そしてコールバック地獄 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # 同期処理とは ------------- 通常、外部とやりとり(I/O)する時に待ち時間(ブロック)が発生する。 ![sync task image](/images/sync.png) === # 非同期処理とは --------------- 待ち時間に(ブロックせずに)別の処理をしようという発想。 ![async task image](/images/async.png) === # 非同期処理の裏側 ----------------- 処理Aと処理Bの他にいつどっちを動かすかを決めるスケジューラが存在することが多い ![async scheduler image](/images/async_scheduler.png) === # どうやって戻る問題 ------------------- * 一時停止した後「その後」の処理にどうやって戻るか ![cont image](/images/cont.png) === # 「その後」とは ----------- ```C ... fputc(c); // ここの処理でI/Oが入る // 再開する時にここに戻ってきたい printf(&#34;Work done&#34;); .</description>
    </item>
    
  </channel>
</rss>