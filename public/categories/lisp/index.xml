<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lisp on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/lisp/</link>
    <description>Recent content in Lisp on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 17 Nov 2018 22:59:16 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/lisp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>言語処理系勉強会に参加してきた</title>
      <link>//KeenS.github.io/blog/2018/11/17/gengoshorikeibenkyoukainisankashitekita/</link>
      <pubDate>Sat, 17 Nov 2018 22:59:16 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/11/17/gengoshorikeibenkyoukainisankashitekita/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://connpass.com/event/104863/&#34;&gt;言語処理系勉強会 Vol.1 &lt;/a&gt;に参加してきました。そこでの@omochimetaruさんの&lt;a href=&#34;https://gist.github.com/omochi/58f374f2809fb1c9122d2b0b69948256&#34;&gt;SwiftのGenericsとProtocolの実装&lt;/a&gt;の話が面白かったので少し感想を。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lispの多値とその実装達</title>
      <link>//KeenS.github.io/slide/common_lispnotachitosonojissoutachi/</link>
      <pubDate>Thu, 15 Nov 2018 22:55:10 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/common_lispnotachitosonojissoutachi/</guid>
      <description>κeen @blackenedgold Github: KeenS Idein Inc.のエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
今日話すこと   多値のこと Common Lispの多値のこと Common Lispの多値の実装のこと  ===
引数と返り値の数  ===
MLの引数   複数引数に見えるがタプルを1つ取っている  fun foo(v1, v2) = v1 + v2  複数引数と違うの？  違う いい悪いではなく違う。    val tuple = (1, 2) foo tuple (* -&amp;gt; 3 *) ===
Lispの多値   複数の値を返せる  CL-USER&amp;gt; (values 1 2) 1 2  タプルと違うの？  違う いい悪いではなく違う。    CL-USER&amp;gt; (identity (values 1 2)) 1 ===</description>
    </item>
    
    <item>
      <title>Deprecating CIM</title>
      <link>//KeenS.github.io/blog/2017/01/29/deprecating_cim/</link>
      <pubDate>Sun, 29 Jan 2017 22:18:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/01/29/deprecating_cim/</guid>
      <description>&lt;p&gt;I&#39;m κeen. I have a sad news, I&#39;ll stop the development of &lt;a href=&#34;https://github.com/KeenS/CIM&#34;&gt;CIM&lt;/a&gt; and no more updates for new lisp impls will be provided.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>4年間続いたShibuya.lispのLispMeetUp</title>
      <link>//KeenS.github.io/blog/2016/12/01/4nenkantsuzuitashibuya_lispnolispmeetup/</link>
      <pubDate>Thu, 01 Dec 2016 12:40:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/12/01/4nenkantsuzuitashibuya_lispnolispmeetup/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/event-management&#34;&gt;IT勉強会/コミュニティ運営 Advent Calendar 2016 - Qiita&lt;/a&gt;2日目の記事です。&lt;/p&gt;
&lt;p&gt;Shibuya.lispの開催しているlispmeetupは約4年間毎月開催しました（現46回開催）。
そこまで長く続いているコミュニティ活動はそんなに多くないのではないでしょうか。
lispmeetupがどうして続いたのかちょっと考察してみます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SchemeでClassとProtocol</title>
      <link>//KeenS.github.io/slide/schemedeclasstoprotocol/</link>
      <pubDate>Mon, 28 Nov 2016 15:41:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/schemedeclasstoprotocol/</guid>
      <description>κeen @blackenedgold Github: KeenS サイバーエージェントのエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
Class   ここでは単に値の集合を表わす new のように新しいインスタンスを作る機能はつけない ほとんど型と同じ機能 唯一の機能 instance? を持つ  ===
(instance? 3 &amp;lt;number&amp;gt;) ; =&amp;gt; #t (instance? &amp;#34;foo&amp;#34; &amp;lt;number&amp;gt;) ; =&amp;gt; #f ===
Classの実装   事実上述語があればいい 詳細  (define-class &amp;lt;any&amp;gt; (lambda (x) #t)) (define-class &amp;lt;list&amp;gt; list?) (define-class &amp;lt;procedure&amp;gt; procedure?) (define-class &amp;lt;number&amp;gt; number?) ===
Classの用途   述語だけで意味ある？  プリミティブにのみあった述語をユーザが拡張出来る   その上に何かを構築出来る protocolとか  ===</description>
    </item>
    
    <item>
      <title>Rustの型レベルLispっぽいの作った</title>
      <link>//KeenS.github.io/blog/2016/11/06/rustnokatareberulispppoinotsukutta/</link>
      <pubDate>Sun, 06 Nov 2016 11:49:43 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/11/06/rustnokatareberulispppoinotsukutta/</guid>
      <description>&lt;p&gt;κeenです。ふとした気紛れでRustの型レベルLispっぽいの作りました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>高速な継続ライブラリに向けて</title>
      <link>//KeenS.github.io/slide/kousokunakeizokuraiburarinimukete/</link>
      <pubDate>Sun, 08 May 2016 21:26:32 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/kousokunakeizokuraiburarinimukete/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS サイバーエージェントのエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます ===  継続欲しい   色々な場面で便利 Schemeで使い回してるのうらやましい Common Lispでも使いたい 現実には限定継続が欲しい  Common Lispには大域脱出はある    ===
限定継続を使う例  非同期プログラミング  コールバック形式だと厳しい 限定継続を使うと綺麗に書き直せる  ===
限定継続を使う例  ゲームのコルーチン  複数のオブジェクトを制御するのにコルーチンが欲しい cf コルーチンをCommon Lispで簡単に定義 - さくらんぼのlambda日記  ===
限定継続を使う例  do記法  モナドのdo記法は限定継続を使って実装出来る Operational monad in scheme  ===
Common Lispでの限定継続の実現   仕様に入れてもらう 処理系に手を入れる ユーザレベルで(限定)継続ライブラリを作る  柔軟なCommon Lispでは可能    ===</description>
    </item>
    
    <item>
      <title>ClojureでSSPを作った話</title>
      <link>//KeenS.github.io/slide/clojuredesspwotsukuttahanashi/</link>
      <pubDate>Mon, 22 Feb 2016 20:19:11 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/clojuredesspwotsukuttahanashi/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS サイバーエージェントのエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
SSPとは  ※今回作ったものの話なので実際は少し違う
 Supplier Side Platform メディアからの広告リクエストを受けて表示権をオークションに掛け、落札された広告を表示する 0. 広告リクエストを受け取って  各DSPに競りの通知を投げて 入札を受け取って 落札者と落札価格を決めて 落札通知を出す    ===
アドテクコンペ   ビジネスモデルもエンジニアリングも学べるアドテクスタジオの育成プログラムとは | 株式会社サイバーエージェント サイバーエージェントの学生向けインターン 3日間、3、4人のチームで DSP を作る 学生は7チーム、1チームあたり2000q/sを捌くことになってる 学生のDSPを繋ぐための SSP が必要になったので作ることに。  ===
===
作るもの   各DSPに競りの通知(HTTPリクエスト)を投げる大規模HTTPクライアント  各DSPが2000q/s x 7チーム + 落札通知 = 16000q/s 丁度2000q/sになるような制御も必要   入札を受けてのオークション、結果のロギングなど 管理画面  ===</description>
    </item>
    
    <item>
      <title>readlineの作り方</title>
      <link>//KeenS.github.io/blog/2016/02/14/readlinenotsukurikata/</link>
      <pubDate>Sun, 14 Feb 2016 22:37:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/14/readlinenotsukurikata/</guid>
      <description>&lt;p&gt;κeenです。なんか伏線っぽいもの回収しといた方が良いかなと思ってLinuxっぽい話でも。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lispで高速行列演算</title>
      <link>//KeenS.github.io/blog/2016/02/04/common_lispdekousokugyouretsuenzan/</link>
      <pubDate>Thu, 04 Feb 2016 23:47:34 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/04/common_lispdekousokugyouretsuenzan/</guid>
      <description>&lt;p&gt;κeenです。Common Lispから線形代数ライブラリを使うポストで比較にCommon Lispのコードが出されていたのですがもう少し改良出来そうだったので少しばかり高速化してみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meetup3周年に寄せて</title>
      <link>//KeenS.github.io/blog/2016/01/27/lisp_meetup3shuunenniyosete/</link>
      <pubDate>Wed, 27 Jan 2016 23:40:11 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/01/27/lisp_meetup3shuunenniyosete/</guid>
      <description>&lt;p&gt;κeenです。昨日、&lt;a href=&#34;http://lisp.connpass.com/event/25546/&#34;&gt;Lisp Meetup #36&lt;/a&gt;が行なわれました。1回テックトークを挟んでるのでこれでちょうど丸3年、毎月Lisp Meetupが行われたことになります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近作ってるLispの話</title>
      <link>//KeenS.github.io/blog/2015/12/20/saikintsukutterulispnohanashi/</link>
      <pubDate>Sun, 20 Dec 2015 22:40:16 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/20/saikintsukutterulispnohanashi/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/lisp&#34;&gt;Lisp Advent Calendar 2015&lt;/a&gt;21日目の記事です。&lt;/p&gt;
&lt;p&gt;κeenです。最近あまりLispを書いてなくてネタがないので最近作ってるLispの話でもしようかと。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClojureでReactive Messaging Pattern</title>
      <link>//KeenS.github.io/blog/2015/12/19/clojuredereactive_messaging_pattern/</link>
      <pubDate>Sat, 19 Dec 2015 22:30:19 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/19/clojuredereactive_messaging_pattern/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/clojure&#34;&gt;Clojure Advent Calendar 2015&lt;/a&gt;の16日目の記事です（大遅刻）&lt;/p&gt;
&lt;p&gt;κeenです。ここのところ体調優れず、また、特に面白いネタもなくClojure Advent Calendarに遅刻したことをお詫び申し上げます。&lt;/p&gt;
&lt;p&gt;さて、今日はReactive Messaging PatternをClojureのcore.asyncでやってみたいと思います。Reactive Messaging Pattersは、Java/Scala向けActorシステムの&lt;a href=&#34;http://akka.io/&#34;&gt;Akka&lt;/a&gt;の作者が著した本、&lt;a href=&#34;http://www.amazon.co.jp/Reactive-Messaging-Patterns-Actor-Model-ebook/dp/B011S8YC5G&#34;&gt;Amazon.co.jp: Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka&lt;/a&gt;で書かれているデザインパターンです。&lt;/p&gt;
&lt;p&gt;非常に興味深い本なのですがScala及びAkka初心者の私には中々辛いので一旦Clojureで試してみようかと。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClojureでDSPを作った話</title>
      <link>//KeenS.github.io/slide/clojurededspwotsukuttahanashi/</link>
      <pubDate>Tue, 27 Oct 2015 21:04:20 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/clojurededspwotsukuttahanashi/</guid>
      <description>κeen @blackenedgold Github: KeenS サイバーエージェントのエンジニア Lisp, ML, Shell Scriptあたりを書きます  ===
DSPとは   Demand Side Platform 広告主から広告を集めて広告の表示権を競り落し、適切な広告を出す 0. 広告主を集めて  競りの通知を受け取って 一番コスパが良さそうな広告を選んで 入札して 落札通知を受け取る 落札したら広告を出す    ===
ひとりDSP   AdTech Studioの新卒研修 2ヶ月間、業務時間の20%を使ってDSPを作る  実質8営業日   業務ロジックを理解することが目的 最後に新卒の作ったDSP同士で競争、利益が得点になる 他には最終発表での得点も 研修なので好きにやっていい  Clojureで書くことに   サーバーの他は広告主データと学習用データが与えられる  ===
===
作るもの   競りの通知を受け取って入札するJSON REST API 落札の通知を受け取るJSON REST API  割とシンプル   「一番コスパが良さそうな広告を選ぶ」部分は色々と工夫する 今回は広告を出すところまではやらない クリック情報は落札通知に入ってる  ===</description>
    </item>
    
    <item>
      <title>Internal of b11d</title>
      <link>//KeenS.github.io/slide/internal_of_b11d/</link>
      <pubDate>Mon, 19 Oct 2015 21:33:00 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/internal_of_b11d/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS AMoAdのサーバーサイド（？）エンジニア 趣味でLisp, ML, Shell Scriptあたりを書きます 仕事でScalaとShell Scriptあたりを書きます  ===
今回作ったもの   b11d (ぶらっくんどごーるど) Clojure (compojure + middleware)製    NginX + MySQL + Supervisord     出来る限りシンプルになるように作った  310行   デプロイその他はシェルスクリプト 監視はmackerel  ===
シンプルということ   アプリケーションは状態を持たない IO以外副作用を持たない つまり、キャッシュを持たない  キャッシュはパフォーマンス上の意味しかない 早過ぎる最適化は諸悪の根源   スケールアウトが容易 compojureのミドルウェアを上手く使った  ===
シンプルということ2   データベースはだいたい第4正規形（ﾀﾌﾞﾝ）  全てのカラムはNOT NULL 広告主の所だけ拡張性を持たせるために第1正規形に落とした 1広告主に対して複数の広告が持てるようになる   外部キー制約も全部付ける データが綺麗なのでアプリケーション側でのやることが少ない 分析する時にも活きる筈  ===</description>
    </item>
    
    <item>
      <title>マクロについて整理してみる</title>
      <link>//KeenS.github.io/blog/2015/07/04/makuronitsuiteseirishitemiru/</link>
      <pubDate>Sat, 04 Jul 2015 15:34:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/07/04/makuronitsuiteseirishitemiru/</guid>
      <description>&lt;p&gt;何故Lisperがマクロについて語るのか。Lisperと議論してみても満足のいく答を得た人はそんなにいないと思う。
それはLisper自身便利とは思っていても何が便利なのかを意識してなくて他人に上手く説明出来ないからじゃないかと思った。
ちょっと思いついた範囲でまとめてみる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>あなたの知らないShebang</title>
      <link>//KeenS.github.io/blog/2015/06/26/anatanoshiranaishebang/</link>
      <pubDate>Fri, 26 Jun 2015 23:24:44 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/06/26/anatanoshiranaishebang/</guid>
      <description>&lt;p&gt;κeenです。最近は何故かBlack君って呼ばれます。Shebangの書き方にはいくつかあって、それを利用したふと面白い方法を思い付いたので共有を。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lisp処理系拡張の探求 SBCLのマルチスレッドサポート</title>
      <link>//KeenS.github.io/slide/common_lispshorikeikakuchounotankyuu_sbclnomaruchisureddosapo_to/</link>
      <pubDate>Sat, 20 Jun 2015 18:30:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/common_lispshorikeikakuchounotankyuu_sbclnomaruchisureddosapo_to/</guid>
      <description>Lisp Meet Up #29
===
About Me   κeen @blackenedgold Github: KeenS 渋谷のエンジニア Lisp, ML, Shell Scriptあたりを書きます ===  CLのマルチスレッド  bordeaux-threads  色々な処理系のマルチスレッドサポートの抽象レイヤー デファクトスタンダード  スレッド ロック コンディションヴァリアル    ===
SBLCのマルチスレッド ===
SBLCのマルチスレッド   スレッド  スレッド内エラー   アトミック操作 CAS   排他制御（ロック） セマフォ コンディションヴァリアル バリア キュー メールボックス ゲート frlock  ===
アトミック操作 ===
アトミック操作  複雑な動作は同じデータに並行に動かすと壊れうる
 [var = 1] [incf] | [decf] [1]&amp;lt;-------| | |------&amp;gt;[1] [2]---&amp;gt;[var = 2] | | | [var = 0]&amp;lt;--[0] ===</description>
    </item>
    
    <item>
      <title>ClojureでOpenCV 3.0と戯れる</title>
      <link>//KeenS.github.io/blog/2015/06/07/clojuredeopencv3_0totawamureru/</link>
      <pubDate>Sun, 07 Jun 2015 16:56:51 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/06/07/clojuredeopencv3_0totawamureru/</guid>
      <description>&lt;p&gt;κeenです。先日OpenCV 3.0がリリースされましたね。
ちょっと触ってみようと思ったのですが公式バインディングがC++、C、Java、Pythonと中々つらい言語ばっかりなので扱いやすいClojureから触った時のメモです。&lt;/p&gt;
&lt;p&gt;2系とはAPIが変わってる部分もあるらしく、苦労しました。
UbuntuでやってるのでMacの人は適当に読み替えて下さい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Transducerについて</title>
      <link>//KeenS.github.io/slide/transducernitsuite/</link>
      <pubDate>Wed, 03 Jun 2015 22:29:50 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/transducernitsuite/</guid>
      <description>κeen @blackenedgold Github: KeenS 渋谷のエンジニア Lisp, ML, Shell Scriptあたりを書きます ===  Transducerって？   Clojure 1.7で入るフレームワーク 関数のパイプライン化を簡単にする 入力、出力には依存しない  ===
Reduce関数について   reduce: (&#39;a -&amp;gt; &#39;b -&amp;gt; &#39;a) &#39;a -&amp;gt; &#39;b list (&#39;a -&amp;gt; &#39;b -&amp;gt; &#39;a) でシーケンスを集約する (reduce + 0 &#39;(1 2 3)) ;=&amp;gt; 6 要はreduceは関数を使って集約する。 ===  Transducerについて   transduce:((&#39;a -&amp;gt; &#39;b -&amp;gt; &#39;a) -&amp;gt; (&#39;a -&amp;gt; &#39;b -&amp;gt; &#39;a)) (&#39;a -&amp;gt; &#39;b -&amp;gt; &#39;a) &#39;a -&amp;gt; &#39;b list 集約関数を変換する関数もとる (transduce xf + 0 &#39;(1 2 3)) transducerで集約する前に処理を挟める ===  すごいところ  コンポーサビリティ  ((&#39;a -&amp;gt; &#39;b -&amp;gt; &#39;a) -&amp;gt; (&#39;a -&amp;gt; &#39;b -&amp;gt; &#39;a)) 変換関数は入力と出力が同じ。 つまり変換関数を合成出来る ex) (comp (filter odd?</description>
    </item>
    
    <item>
      <title>Common Lispで限定継続と遊ぶ</title>
      <link>//KeenS.github.io/slide/common_lispdegenteikeizokutoasobu_/</link>
      <pubDate>Sun, 26 Apr 2015 21:09:07 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/common_lispdegenteikeizokutoasobu_/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS 渋谷のエンジニア Lisp, ML, Shell Scriptあたりを書きます  ===
Agenda  cl-contの紹介 限定継続の話 限定継続の使い方の話 限定継続の実装の話  ===
CL-CONTの紹介 ===
CL-CONT   Common Lispの限定継続ライブラリ 結構古くからあるっぽい 割と色々なライブラリが使ってる ===  CL-CONT   API   継続を区切るマクロ  with-call/cc defun/cc lambda/cc   継続を取得するマクロ  call/cc let/cc    ※後で説明するので意味が分からなくても問題ないです。
===
限定継続の話 ===
継続とは   &amp;ldquo;その後&amp;quot;の計算を表わす概念。 値が決定した後トップレベルに戻るまでの計算。 Schemeが一級市民として扱えることで有名 値として取り出した時は0-1引数関数として振る舞う ===  継続とは  fooの継続は、fooを虫食いにしたものと思えば良い。</description>
    </item>
    
    <item>
      <title>caveman2、ningle…Common LispのWeb周りのフレームワークを快適に使うためのたった1つのコト</title>
      <link>//KeenS.github.io/slide/caveman2-ningle...common-lispnowebmawarinofure-muwa-kuwokaitekinitsukautatta1tsunokoto/</link>
      <pubDate>Thu, 05 Mar 2015 13:18:44 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/caveman2-ningle...common-lispnowebmawarinofure-muwa-kuwokaitekinitsukautatta1tsunokoto/</guid>
      <description>=== ずっと俺のターン===
問題  Common Lispは case
 Sensitive  Insensitive   どっち? 問題  あれ？
(eql? &amp;#39;CaseInsensitive &amp;#39;caseinsensitive) ;=&amp;gt; t ===
問題  リーダがデフォルトで大文字にするだけ
(eql? &amp;#39;|CaseSensitive| &amp;#39;|casesensitive|) ;=&amp;gt; nil ===
Caveman2  @route GET &amp;#34;/hello&amp;#34; (defun say-hello (&amp;amp;key (|name| &amp;#34;Guest&amp;#34;)) (format nil &amp;#34;Hello, ~A&amp;#34; |name|)) ===
Ningle  (setf (ningle:route *app* &amp;#34;/login&amp;#34; :method :POST) #&amp;#39;(lambda (params) (if (authorize (getf params :|username|) (getf params :|password|)) &amp;#34;Authorized!&amp;#34; &amp;#34;Failed...Try again.&amp;#34;))) ===</description>
    </item>
    
    <item>
      <title>Lispエイリアンの矢印作った</title>
      <link>//KeenS.github.io/blog/2015/03/03/lispeiriannoyajirushitsukutta/</link>
      <pubDate>Tue, 03 Mar 2015 21:30:13 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/03/03/lispeiriannoyajirushitsukutta/</guid>
      <description>&lt;p&gt;κeenです。勉強会などで役立ちそうなLispエイリアンの矢印を作りました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>既存のテンプレートエンジンの問題点と再設計</title>
      <link>//KeenS.github.io/slide/kizonnotenpure-toenjinnomondaitentosaisekkeiaruihaarrowsnitsuite/</link>
      <pubDate>Mon, 02 Mar 2015 23:36:03 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/kizonnotenpure-toenjinnomondaitentosaisekkeiaruihaarrowsnitsuite/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS 野生のLisper Lisp, Ruby, OCaml, Shell Scriptあたりを書きます ===  Template Engines ===
Existing Architeture  (リクエスト) アプリ 引数を計算 テンプレートに引数を渡す レスポンスをレンダリング  レスポンスをサーバに渡す (レスポンス) ===  Rendering?   結合した文字列はクライアントに返ったらその後はゴミ   GCへ負荷がかかる (後述)   クライアントにとって1つの文字列である必要はない むしろ返せる部分だけ先に返した方が得（後述） ===  GC Pressure (SBCL)   世代別Copy GC 結合した文字列は比較的大きい alloc_spaceに入らない大きさならアロケートが遅い GCを頻繁に起動してしまう 16KBを越えると特別扱いされて遅い/メモリを喰う LispのWebアプリはレスポンスタイムの分散が大きい（要出展）  参考: SBCL GENCGC @ x86 Linux Split Response  例えば、こんなの</description>
    </item>
    
    <item>
      <title>面接でLispを口にして落ちない企業、私気になります！</title>
      <link>//KeenS.github.io/blog/2015/02/10/mensetsudelispwokuchinishiteochinaikigyouwatashikininarimasu/</link>
      <pubDate>Tue, 10 Feb 2015 08:01:35 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/02/10/mensetsudelispwokuchinishiteochinaikigyouwatashikininarimasu/</guid>
      <description>&lt;p&gt;κeenです。先日の記事がやたら拡散しました。その中で&lt;/p&gt;
&lt;p&gt;「面接でLispは口にしない方が良い。100%落ちる。」&lt;/p&gt;
&lt;p&gt;の一文がえらく気に入られたようです。Lispの風評被害を防ぐために1つアンケートにご協力下さい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lispのポータビリティとユニバーサリティ</title>
      <link>//KeenS.github.io/blog/2015/01/22/common-lisp-portability-and-univesality/</link>
      <pubDate>Thu, 22 Jan 2015 07:51:02 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/22/common-lisp-portability-and-univesality/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://clfreaks.org/post/108341635899/1-cim-vs-roswell&#34;&gt;clfreaks&lt;/a&gt;の収録時に他のLisperと話してて価値観というか目標を共有出来てないなと思ったのでここで心情を語る次第。今のCommon Lispの使われ方には問題がある。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>picrinのcodegenプロセスを説明してみる</title>
      <link>//KeenS.github.io/blog/2015/01/10/picrin-codegen-explanation/</link>
      <pubDate>Sat, 10 Jan 2015 09:40:51 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/10/picrin-codegen-explanation/</guid>
      <description>&lt;p&gt;今、picrinのcodegenプロセスに手を入れる機運が高まってます。picrinはバイトコードインタプリタなのでS式を渡されたらそれをバイトコードに変換する作業が必要です。それがcodegen。本当はcompileなんだけどpicrinのCのソースコードのコンパイルと紛らわしいからcodegen。私も完全にはプロセスを理解してないので説明して理解度を試しつつ問題点を洗い出します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>実用Common Lispを読んだ</title>
      <link>//KeenS.github.io/blog/2014/12/14/shi-yong-common-lispwodu-nda/</link>
      <pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/14/shi-yong-common-lispwodu-nda/</guid>
      <description>&lt;p&gt;以前&lt;a href=&#34;//KeenS.github.io/blog/2014/10/20/lisp-ja/&#34;&gt;Common Lispの勉強の手引の記事&lt;/a&gt;を書いたときに実用Common Lispの名を挙げたが読んだことはなかった。&lt;/p&gt;
&lt;p&gt;一応名前を挙げた責任として読んでみた。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>割と処理系ポータブルなCommon Lisp実行可能ファイルを作る</title>
      <link>//KeenS.github.io/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru/</link>
      <pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru/</guid>
      <description>&lt;p&gt;κeenです。Lisp Advent Calendarはもう枠埋まっちゃったので普通にブログで。&lt;/p&gt;
&lt;p&gt;コマンドラインから実行可能なLispファイルをそれなりに多くの処理系で動くように作る話。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>H2Oにpicrinを溶かす</title>
      <link>//KeenS.github.io/blog/2014/12/07/h2onipicrinworong-kasu/</link>
      <pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/07/h2onipicrinworong-kasu/</guid>
      <description>&lt;p&gt;このエントリーは&lt;br&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2014/lisp&#34;&gt;Lisp Advent Calendar&lt;/a&gt; 7日目&lt;br&gt;
兼&lt;br&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2014/h2o&#34;&gt;H2O Advent Calendar&lt;/a&gt; 7日目&lt;br&gt;
の記事です。&lt;/p&gt;
&lt;p&gt;κeenです。タイトルの通りです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>claspがアップデートされたよ</title>
      <link>//KeenS.github.io/blog/2014/12/06/claspgaatupudetosaretayo/</link>
      <pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/06/claspgaatupudetosaretayo/</guid>
      <description>&lt;p&gt;このエントリーは&lt;a href=&#34;http://qiita.com/advent-calendar/2014/lisp&#34;&gt;Lisp Advent Calendar 2014&lt;/a&gt;6日目の記事です。&lt;br&gt;
前: nobkzさんで &lt;a href=&#34;http://qiita.com/nobkz/items/2be2b6806237d8ea6e21&#34;&gt;lfe - (lisp (flavored (erlang)))について基本その1 - Qiita&lt;/a&gt;&lt;br&gt;
後: 私で &lt;a href=&#34;//KeenS.github.io/blog/2014/12/07/h2onipicrinworong-kasu/&#34;&gt;H2Oにpicrinを溶かす | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;κeenです。アドベントカレンダーめっちゃ書いてますね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VOPで遊ぶ</title>
      <link>//KeenS.github.io/blog/2014/12/02/vopdeyou-bu/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/12/02/vopdeyou-bu/</guid>
      <description>&lt;p&gt;(:meta&lt;br&gt;
((:this &amp;ldquo;&lt;a href=&#34;http://qiita.com/advent-calendar/2014/lisp&#34;&gt;Lisp Advent Calendar 2014&lt;/a&gt;の3日目の記事&amp;rdquo;)&lt;br&gt;
(:prev (:author &amp;ldquo;tk_riple&amp;rdquo; :title &lt;a href=&#34;http://compassoftime.blogspot.jp/2014/12/r7rs.html&#34;&gt;&amp;ldquo;時の羅針盤＠blog: R7RSポータブルライブラリを書く際の落とし穴&amp;rdquo;&lt;/a&gt;))&lt;br&gt;
(:next (:author &amp;ldquo;nobkz&amp;rdquo; :tite &amp;ldquo;&lt;a href=&#34;http://qiita.com/nobkz/items/68ee2adbc13caf3eec6f&#34;&gt;Shenの基礎その1 基本的な型 - Qiita&lt;/a&gt;&amp;quot;))))&lt;/p&gt;
&lt;p&gt;κeenです。さっきまでVOPで遊んでたので当初の予定を変更してVOPの話をします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>require, ASDF, quicklispを正しく使う</title>
      <link>//KeenS.github.io/blog/2014/11/30/quicklisp/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/11/30/quicklisp/</guid>
      <description>&lt;p&gt;κeenです。最近のCommon Lispのパッケージ管理は&lt;code&gt;ql:quickload&lt;/code&gt;しか知らないという方も多いのではないでしょうか。しかしそれだけでは機能が足りないこともあります。Common Lispには様々な管理システムがあるので整理しましょう。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lisp meet up #22でLTしてきた</title>
      <link>//KeenS.github.io/blog/2014/11/28/lisp-meet-up-number-22deltsitekita/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/11/28/lisp-meet-up-number-22deltsitekita/</guid>
      <description>&lt;p&gt;κeenです。先日 Lisp Meet Up #22 でLTしてきたので報告です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Semantic S式</title>
      <link>//KeenS.github.io/slide/semantic-sshi/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/semantic-sshi/</guid>
      <description>Semantic S式  2014-11-27
κeen(@blackenedgold)
About Me   κeen 東大数学科の4年生 ソーシャルアカウントは上のアイコン達から。 Lisp, Ruby, OCaml, Shell Scriptあたりを書きます  Semantic Web とは Semantic Web   W3C のティム・バーナーズ＝リーが提唱 文章の見た目を記述するんじゃなくて構造を記述しよう そうすると機械がクローリングするの楽になるよね  Semantic S式とは Semantic S式   Shibuya.lispのκeenが提唱 (昨日思い付いた) S式の見た目じゃなくて構造で括弧をつけよう そうするとコーディングが楽になるよね  良いところ   意味が分かり易い パースし易い 編集が楽になる 壊れにくい  1. 意味が分かり易い 1. 意味が分かり易い  例1   Clojure
(let [a 1 b 2] ...)   Common Lisp
(let ((a 1) (b 2)) .</description>
    </item>
    
    <item>
      <title>claspを少し触ってみた</title>
      <link>//KeenS.github.io/slide/clasp/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/clasp/</guid>
      <description>claspを少し触ってみた  Lisp Meet Up presented by Shibuya.lisp #21
2014-10-29
κeen(@blackenedgold)
About Me   κeen 東大数学科の4年生 ソーシャルアカウントは上のアイコン達から。 Lisp, Ruby, OCaml, Shell Scriptあたりを書きます  clasp   Github: drmeister/clasp 2014-09-18に0.1リリース(現在0.11プレビューが出ている) 今は0.11プレビューが出ている ANSI Common Lisp準拠を目指す(現在80 ~90%) ECLからのフォーク LLVMベースのJIT(MCJIT)搭載 C++とLispで書かれている C++との連携を意識  Note: C++との連携の部分を強調。今回は0.11プレビューでの話
メモリ管理   Memory Pool Systemと Boehm GCから選べる ビルドするときにどっちかを選ぶ  メモリ管理  Boehm GC  Mark &amp;amp; Sweepのライブラリ 枯れた有名なライブラリ Lisp有名どころではGaucheが使う RedHat系だとこれを使ってないとrpmリジェクトされやすいらしい(?)  Note: 他にはMozilla, W3M, GNU GCJ, GNU Obj-Cなどなど</description>
    </item>
    
    <item>
      <title>#関数型なんたら で喋ってきた</title>
      <link>//KeenS.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita/</link>
      <pubDate>Sun, 26 Oct 2014 17:14:10 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita/</guid>
      <description>&lt;p&gt;κeenです。昨日&lt;a href=&#34;http://connpass.com/event/8634/&#34;&gt;函数型なんたらの集い&lt;/a&gt;に参加してきたので報告/感想です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C6H6&#43;HNO3</title>
      <link>//KeenS.github.io/slide/c6h6-plus-hno3/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/c6h6-plus-hno3/</guid>
      <description>picrinについて  化学式 $\mathbf{C_6H_3N_3O_7}$、示性式 $\mathbf{C_6H_2(OH)(NO_2)_3}$ で表される芳香族のニトロ化合物。
一般にはフェノールのニトロ化によって得られる。
Note: ニトロ化に硫酸を使うことを触れる。
About Me   κeen 東大数学科の4年生 ソーシャルアカウントは上のアイコン達から。 Lisp, Ruby, ML, Shell Scriptあたりを書きます picrinのコミッタです  picrinについて   github: picrin-scheme/picrin R7RS-small scheme 処理系 速い、軽い、高機能を目指す 組み込み向けを意識 1年くらい開発 κeenがコミットし始めてから半年弱  picrinの プロジェクト構成  コア(benz)はC、ビルドツールはCMake。
├── contrib (nitros) ....... ├── docs ├── etc ├── extlib │ └── benz ├── piclib .... └── src Note: contribとextlib/benzを強調。 srcはほぼ空であることにも触れる。
nitrosの紹介   schemeやCで書かれている picrinのコンパイル時に一緒にlibpicrinに入る picrinと共にCMakeで管理されている  Note: schemeファイルもlibpicrinにCの文字列として入ってることに触れる。 バイトコンパイルプロジェクトにも触れる。 nitrosも一緒にコンパイルされることを強調する。</description>
    </item>
    
    <item>
      <title>Common Lispの勉強をするには、あるいは情報を得るには</title>
      <link>//KeenS.github.io/blog/2014/10/20/lisp-ja/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/10/20/lisp-ja/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.8arrow.org/entry/2014/09/05/062028&#34;&gt;深町さんのブログ&lt;/a&gt;で日本語でCommon Lispの質問をする方法が載ってましたが質問じゃなくて単に情報を得たい、勉強をしたいという場合が書かれてなかったので勝手に補遺。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #20でLTしてきました</title>
      <link>//KeenS.github.io/blog/2014/09/30/lisp-meet-up-number-20/</link>
      <pubDate>Tue, 30 Sep 2014 09:35:05 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/09/30/lisp-meet-up-number-20/</guid>
      <description>&lt;p&gt;κeenです。lisp meet up # 20に参加したのでレポートです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Picrinのチューニングの話、もといGCの話</title>
      <link>//KeenS.github.io/slide/picrin-gc/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/picrin-gc/</guid>
      <description>Picrinのチューニングの話、もといGCの話  Lisp Meet Up presented by Shibuya.lisp #20
2014-09-29
κeen(@blackenedgold)
自己紹介   κeen 東大数学科の4年生 ソーシャルアカウントは上のアイコン達から。 Lisp, Ruby, OCaml, Shell Scriptあたりを書きます picrinのコミッタです  picrin  picrin   R7RS compatibility bytecode interpreter (based on stack VM) internal representation by nan-boxing conservative call/cc implementation (users can freely interleave native stack with VM stack) exact GC (simple mark and sweep, partially reference count is used as well) string representation by rope data structure  picrin   R7RS compatibility bytecode interpreter (based on stack VM) internal representation by nan-boxing conservative call/cc implementation (users can freely interleave native stack with VM stack) exact GC (simple mark and sweep, partially reference count is used as well) string representation by rope data structure  picrin開発者の不満   picrinの起動が遅い 2秒くらいかかる    picrinのテストが遅い 16秒くらいかかる     少しGCの話  GC(ごみ集め)とは</description>
    </item>
    
    <item>
      <title>Shibuya.lisp Tech Talk #8を運営&amp;LTしてきました</title>
      <link>//KeenS.github.io/blog/2014/09/16/lisp-tech-talk-8/</link>
      <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/09/16/lisp-tech-talk-8/</guid>
      <description>&lt;p&gt;κeenです。レポートに追われ試験があり合宿に行きで2週間以上空きましたが8/30にShibuya.lisp TT #8の運営をしつつLT枠での参加もしてきたので報告です。何かそこそこ大きなイベントの運営をされる方の参考になれば。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introduction to CIM</title>
      <link>//KeenS.github.io/slide/introduction-to-cim/</link>
      <pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/introduction-to-cim/</guid>
      <description>Introduction to CIM κeen(@blackenedgold)
突然ですが Common Lispのスクリプトファイルの実行方法知ってますか？
sbcl
sbcl --script $file  ecl
ecl -shell $file  ccl
ccl -e $file -e &#39;(quit)&#39;  &amp;hellip;
シバン可搬性のあるスクリプトが書けないそこで、こんなの書きました case &amp;#34;$LISP_IMPL&amp;#34; in sbcl*) sbcl --script $1 ;; clisp*) clisp -on-error exit -i $1 ;; ecl*) ecl -shell $1 ;; ccl*) ... でも問題がある  どの処理系をバックエンドに使うか 処理系のパスをどう捜すか そもそもどうやって使ってもらうか  κeenの答え  処理系の管理までやってしまおう。 そうしたら一緒に使ってもらえる。
 ＿人人人人人人＿
＞　CIMの誕生　＜
￣Y^Y^Y^Y^Y￣
CIMとは  Common Lisp Implementation Manager ちむ Rubyのrvmを強く意識 Common Lisp処理系のインストール、切り替え、コマンドラインインターフェースなど。 cim、 cl、 qlコマンドから成る B Shell スクリプト製(マルチプラットフォーム対応のため) 2013/10くらいからぼちぼち開発  cimコマンドについて インストール</description>
    </item>
    
    <item>
      <title>授業で半年間moclを使ってみた</title>
      <link>//KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8/</link>
      <pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8/</guid>
      <description>授業で半年間moclを使ってみた Shibuya.lisp TT #8
κeen(@blackenedgold)
自己紹介  κeen 東大数学科の4年生 ソーシャルアカウントは上のアイコン達から。 Lisp, Ruby, OCaml, Shell Scriptあたりを書きます  一年前
計算数学II 自分でテーマを決めて半年間取り組む
チーム人造エイリアン Common Lisp でAndroid? mocl What is mocl  iOS, Androidで動くCommon Lisp処理系 LLVMをバックエンドに使う Networking, Unicode, CLOS, and More. Run Countless CL Libraries.  買ってもらった(・ω・)v 注意 私が触ったのは1つ前のバージョンです。
一部5月のアップデートで改善されています。
How it Works コードサンプル 授業で私が作ったオセロのAIのコード
public BoardCanvas(Context context,int width, int height,int color ){ ... CL.cl_init(); CL.init_game(3 - color); ... } void nextHand(){ String[] coord = CL.</description>
    </item>
    
    <item>
      <title>Common LispでSIGINTを捉える</title>
      <link>//KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp/</link>
      <pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp/</guid>
      <description>&lt;p&gt;κeenです。もうすぐShibuya.lisp TT #8 ですね。今回はCIMのREPLの改善をしてたらSIGINTを補足しようとして詰まったので共有します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloud9の紹介とLispのセットアップ</title>
      <link>//KeenS.github.io/blog/2014/08/02/introduction-to-cloud9/</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/08/02/introduction-to-cloud9/</guid>
      <description>&lt;p&gt;κeenです。先日のLisp Meet Upで紹介した&lt;a href=&#34;https://c9.io&#34;&gt;Cloud9&lt;/a&gt;の詳解でも書きます。まあ、そんなに詳しくないんですけどね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #19でLTしてきました</title>
      <link>//KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19/</link>
      <pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19/</guid>
      <description>&lt;p&gt;κeenです毎月恒例の&lt;a href=&#34;https://atnd.org/events/53246&#34;&gt;Lisp Meet Up presented by Shibuya.lisp&lt;/a&gt;でLTしてきたのでレポートです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloud 9の紹介</title>
      <link>//KeenS.github.io/slide/cloud-9/</link>
      <pubDate>Tue, 29 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/cloud-9/</guid>
      <description>Lisp Meet Up #19 presented by Shibuya.lisp
κeen(@blackenedgold)
自己紹介  κeen 東大数学科の4年生 ソーシャルアカウントは上のアイコン達から。 Lisp, Ruby, OCaml, Shell Scriptあたりを書きます  Lispがあまり使われない原因 Cloud 9について  WEBベースのIDEサービス 40以上の言語に対応（らしい） この間正式リリース 1アカウント毎に1Docker環境与えられる IDEはオープンソース よく分かってない  こんなん デモ 良いところ  難易度低い Lisp環境動く Githubとの連携 どこからでも同じ環境にアクセス キーバインドはうれしい各宗教対応の
{Mac, Windows}x{Default, Emacs, Vim, Sublime}  微妙なところ  シンタックスハイライト微妙
（せめてキーワード引数はどうにか） 補完微妙 インデント微妙 swank使いたい  以上何か質問あればどうぞ</description>
    </item>
    
    <item>
      <title>(S式で書く(altJS)達)</title>
      <link>//KeenS.github.io/slide/sshi-deshu-kualtjs/</link>
      <pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/slide/sshi-deshu-kualtjs/</guid>
      <description>自己紹介  κeen 東大数学科の4年生 Twit : @blackenedgold Github : KeenS Blog : κeenのHappy Hacκing Blog Shibuya.lispにいます。(2014-06〜運営になりました) Lisp, Ruby, OCaml, Shell Scriptあたりを書きます  お品書き  (ボツ) Shen.js (ボツ) Embedable Common Lisp with Emscripten (ボツ) Picrin with Emscripten (ボツ) オレオレaltJSの作り方の話 ParenScript  Shen.js Shenの公式ページより
 パターンマッチ λ計算ベース マクロ 遅延評価も可能 静的型検査 関数的なPrologの統合 ビルトインコンパイラコンパイラ  これのJS実装もある。
例 (define factorial 0 -&amp;gt; 1 X -&amp;gt; (* X (factorial (- X 1)))) そもそもaltJSじゃない…
ボツ
ECL with Emscripten  ANSI Common Lisp準拠のCommon Lisp処理系 LispをコンパイルしてCを吐く Emscriptenでコンパイルすれば…  #include &amp;lt;ecl/ecl-cmp.</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #16 でLTしてきました。</title>
      <link>//KeenS.github.io/blog/2014/04/25/lisp-meet-up-number-16/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/04/25/lisp-meet-up-number-16/</guid>
      <description>&lt;p&gt;κeenです。年度末/年度始めで色々あり、しばらく更新できてませんでしたが &lt;a href=&#34;http://atnd.org/events/49370&#34;&gt;Lisp Meet Up Presented by Shibuya.lisp #16&lt;/a&gt;に参加してきたのでレポートです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #14でLTしてきました</title>
      <link>//KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14/</link>
      <pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14/</guid>
      <description>&lt;p&gt;どうも、κeenです。Rubyをアップグレードしようとしたら&lt;code&gt;rvm&lt;/code&gt;が動かなくて、あれ？ってなったら私が&lt;code&gt;echo -&amp;gt; echo&lt;/code&gt;とかいう謎のsymlinkを作ってたせいでした。このブログはOctopressで作ってるのでその間更新遅れました。&lt;/p&gt;
&lt;p&gt;さて、毎月恒例 &lt;a href=&#34;http://atnd.org/events/47730&#34;&gt;Lisp Meet Up Presented by Shibuya.lisp #14&lt;/a&gt;でLTしてきたので報告です。今回は「Real World OCamlを読んだ感想」というタイトルです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CIMの解説をしてみる コマンド編</title>
      <link>//KeenS.github.io/blog/2014/01/27/cim-explanation/</link>
      <pubDate>Mon, 27 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/01/27/cim-explanation/</guid>
      <description>&lt;p&gt;先日LTで紹介したCIMが思いの外反響を呼んでる(Githubのstarが15)ので解説でもしてみます。&lt;/p&gt;
&lt;p&gt;コマンド編の次は実装編です。これでバグにエンカウントしたときの調査とか完璧ですね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #13でLTしてきました</title>
      <link>//KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13/</link>
      <pubDate>Fri, 24 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13/</guid>
      <description>&lt;p&gt;もう12時回ったので昨日になってしまいましたが &lt;a href=&#34;http://atnd.org/events/46746#comments&#34;&gt;Lisp Meet Up presented by Shibya.lisp #13&lt;/a&gt;に参加してLTしてきたので報告(?)エントリです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>.emacsの整理をした話 &#43; EmacsとViとShellとLispを悪魔合体させたら超絶便利だった</title>
      <link>//KeenS.github.io/blog/2013/12/13/dot-emacs-clean-up/</link>
      <pubDate>Fri, 13 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/12/13/dot-emacs-clean-up/</guid>
      <description>&lt;p&gt;やや長いタイトルですが・・・年末になって大掃除がやってきましたね。みなさんもそろそろ.emacsの大掃除をしましょう。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClackのHandlerの書き方</title>
      <link>//KeenS.github.io/blog/2013/12/06/lisp-advent-calendar-7/</link>
      <pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/12/06/lisp-advent-calendar-7/</guid>
      <description>&lt;p&gt;(この記事は &lt;a href=&#34;http://qiita.com/advent-calendar/2013/lisp&#34;&gt;Lisp Advent Calendar&lt;/a&gt; 7日目のためのエントリです。&lt;br&gt;
( &lt;a href=&#34;http://meymao.hatenablog.com/entry/2013/12/06/140029&#34;&gt;6日目&lt;/a&gt; meymaoさんより「Lisperがクリスマスに贈るべきプレゼント三選」)&lt;br&gt;
( &lt;a href=&#34;http://www.principia-m.com/ts/0081/index-jp.html&#34;&gt;8日目&lt;/a&gt; athos0220さんよりマクロとクロージャで作る並行プログラミング言語))&lt;/p&gt;
&lt;p&gt;ClackのHandlerの書き方についてちゃちゃっと解説します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacsのdired-modeを使い易くする</title>
      <link>//KeenS.github.io/blog/2013/10/04/emacs-dired/</link>
      <pubDate>Fri, 04 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/10/04/emacs-dired/</guid>
      <description>&lt;p&gt;Emacsの標準ライブラリ&lt;code&gt;dired.el&lt;/code&gt;を読んでたら色々発見があったのでメモ兼dired-modeとはなんじゃらほいって方にも一から解説してみます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shellyを使ってCommon LispファイルをExecutableにする</title>
      <link>//KeenS.github.io/blog/2013/09/26/shelly-script/</link>
      <pubDate>Thu, 26 Sep 2013 21:25:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/26/shelly-script/</guid>
      <description>&lt;p&gt;コマンドラインからCommon Lispの関数を実行できる &lt;a href=&#34;https://github.com/fukamachi/shelly&#34;&gt;Shelly&lt;/a&gt;を使ってCommon Lispファイルを実行形式にしてみました。Shellyは&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ shly + 1 2
3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;みたいに関数を実行できます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Common Lispスタイルガイド</title>
      <link>//KeenS.github.io/blog/2013/09/21/google-commonlisp-style-guide/</link>
      <pubDate>Sat, 21 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2013/09/21/google-commonlisp-style-guide/</guid>
      <description>&lt;p&gt;この度、 &lt;a href=&#34;http://google-styleguide.googlecode.com/svn/trunk/lispguide.xml&#34;&gt;Google Common Lispスタイルガイド&lt;/a&gt;が &lt;a href=&#34;http://google-common-lisp-style-guide-ja.cddddr.org/&#34;&gt;日本語に&lt;/a&gt;なりました。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>