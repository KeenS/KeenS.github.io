<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-07-10T18:00:36+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[.emacsの整理をした話 + EmacsとViとShellとLispを悪魔合体させたら超絶便利だった]]></title>
    <link href="http://KeenS.github.io/blog/2013/12/13/dot-emacs-clean-up/"/>
    <updated>2013-12-13T02:55:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/12/13/dot-emacs-clean-up</id>
    <content type="html"><![CDATA[<p>やや長いタイトルですが・・・年末になって大掃除がやってきましたね。みなさんもそろそろ.emacsの大掃除をしましょう。</p>

<!-- more -->


<p>私の.emacsは元々1300行ちょいあってEmacsの起動に7~8秒(体感)かかってましたが大掃除&amp;高速化をした結果800行弱、起動に1秒(体感)ほどになったので整理の仕方を共有しますね。</p>

<p>前提ですが、私はinitローダーとかは使ってません。全部<code>init.el</code>に書いてます。で、機能毎にページを作って(<code>C-q C-l</code>)ます。ただ、それだけだと視認性が悪いので見出しとして<code>C-u C-u C-u ;</code>で<code>;</code>を64個挿入して次の行にコメントで<code>#</code>付きのタイトルを付けてます。</p>

<p>具体的には</p>

<p><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="common-lisp"><span class="line"><span class="nv">^L</span>
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="c1">;; #Lisp</span>
</span></code></pre></td>
</tr></table></div></figure></p>

<p>こんな感じのものが機能毎に書かれてます。これで<code>C-s</code>や<code>M-x occur</code>でハッシュタグのように検索することも<code>C-v</code>でスクロールしていって目grepすることも<code>C-x ]</code>で機能毎にジャンプすることもできます。</p>

<h1>1. Emacsの最新版を使う</h1>

<p>結構重要です。「標準のやつだと欲いこの機能がないから拡張パッケージ入れた」なんてのも最新版では改善されていたりします。例えば私は<code>emacs-w3m</code>を使っていましたが、Emacsのmasterブランチには<code>eww</code>なるEmacs Lisp製のブラウザが入っているのでそれを使うようにしました。</p>

<p><s>ただ、これが絶対的正義かというとそうでもなく、パッケージで入れてない分
Ubuntuのインプットメソッドとの連携部分がなかったので<code>uim.el</code>を入れる
必要が出てきたりと、面倒な部分もありました。Emacs標準のインプットメソッドはどうにも使いものにならず、
<code>ddskk</code>もuim-skkとコンフリクトする(というか<code>C-j</code>上書きとかありえない)ので使いません。インプットメソッドの切り替え部分は</s></p>

<p><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="common-lisp"><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&ldquo;&lt;hiragana-katakana&gt;&rdquo;</span><span class="p">)</span> <span class="nf">#&lsquo;</span><span class="nv">uim-mode</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&ldquo;&lt;zenkaku-hankaku&gt;&rdquo;</span><span class="p">)</span> <span class="nf">#&rsquo;</span><span class="nv">uim-mode</span><span class="p">)</span> <span class="p">(</span><span class="nv">autoload</span> <span class="nf">#&lsquo;</span><span class="nv">uim-mode</span> <span class="s">&ldquo;uim&rdquo;</span> <span class="no">nil</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></p>

<p>になりました。</p>

<p>2013-12-16追記<br/>
これは私が<code>~/.Xresources</code>に<code>Emacs*useXIM: false</code>を書いていたのが原因でした。<code>Emacs*useXIM: true</code>に書き換え、<code>xrdb ~/.Xresources</code>すると直りました。</p>

<h1>2. 普段使わない設定は全部消す</h1>

<p>基本ですね。私は<code>summary-edit.el</code>だとか<code>multiverse.el</code>だとかるびきちさんの本を読んで便利そうだから入れたものの、結局使わなかったものの設定&amp;elispをごっそり削除。あとかなりの言語に対してデフォルトで<code>auto-mode-alist</code>が設定されていたので<code>auto-mode-alist</code>の設定も全部消して、必要になったら書き足すようにしました。</p>

<h1>3. 普段使っていても代替の効くものは削除</h1>

<p>これは高速化の意味と自分の環境に依存しない意味があります。最近、自分のラップトップ以外でもEmacsを触ることが多くあって、デフォルトのキーを上書きして使ってる部分で何度も誤操作したのでそれを減らす目的です。<code>bm.el</code>は<code>C-x r SPC</code>の<code>register</code>系や<code>C-x C-SPC</code>で対応(registerは覚えれば使い出がありそうなのでいつか解説書くかもです)、<code>open-junk-file.el</code>は<code>~/tmp</code>を作って対応、<code>recentf-ext.el</code>は<code>helm-file-buffers</code>だとか。</p>

<p>あと全て<code>helm.el</code>に置き換えて<code>helm.el</code>と<code>anything.el</code>が混在してる状態をどうにかしたかったのですが、<code>php-completion.el</code>かなにかが依存しててトドメを刺せませんでした。</p>

<p>あと、<code>viewer</code>の代替を探していたらタイトルにあるように悪魔合体が起きたので後で書きますね。</p>

<h1>4. できる限り標準のものを使う</h1>

<p>標準で提供されているパッケージは<code>autoload</code>が<code>emacs</code>バイナリに組込まれてる(と思う)ので起動時のオーバーヘッドはありません。<code>flymake.el</code>や<code>ruby-mode.el</code>が標準で提供されてるのに気付いたのでそれを使ったりなど。一度<code>(emacsroot)/lisp</code>以下を眺めてみることをお勧めします。結構発見があるものです。</p>

<h1>5.<code>autoload</code>を使う</h1>

<p><code>autoload</code>とはファイルの読み込みを必要になるまで遅らせる仕組みです。「必要になる」ってのはそのファイルで定義されている関数が呼ばれたときです。賢い<code>require</code>と思えば良いでしょう。</p>

<pre><code>(autoload #'関数名 "関数が呼ばれたときに読むファイル名" nil interactivep)
</code></pre>

<p>みたいに使います。<code>interactivep</code>の部分は<code>M-x</code>で呼ぶものなら<code>t</code>、そうでなければ<code>nil</code>です。<code>require</code>を<code>autoload</code>で書き換えていけば理論上起動時の読み込み0にできるのでかなり高速化できます。</p>

<p>が、実際は一々<code>autoload</code>書くのはしんどいので次です。</p>

<h1>6.できる限り<code>package.el</code>を使う</h1>

<p><code>package.el</code>は必要な関数の<code>autoload</code>を自動生成して読み込んでおいてくれるのでかなりの手間が省けます。そして<code>autoload</code>があるのに<code>require</code>してると折角の<code>package.el</code>の配慮が無駄になります。</p>

<p>自動生成された<code>autoload</code>は<code>elpa/パッケージのディレクトリ/パッケージ-autoloads.el</code>にあるので確認しながら<code>init.el</code>の邪魔なものを消していきます。これでかなり<code>init.el</code>の行数が減ります。今まで無駄な設定していたんだなと気付きます。</p>

<h1>7. <code>eval-after-load</code>を使う</h1>

<p>8割程の設定は<code>autoload</code>で対応できるのですが、踏み込んだ設定をしているとパッケージの内部の関数を使ってしまってどうしてもその式が評価される前にパッケージが読み込まれている必要があることがあります。</p>

<p>そんなときは<code>eval-after-load</code>を使います。名前のまんま、ロードした後で<code>eval</code>してくれます。</p>

<pre><code>(eval-after-load 'ファイル名
    '式)
</code></pre>

<p>の形で使います。複数の式を使いたい場合は<code>progn</code>を使って</p>

<pre><code>(eval-after-load 'ファイル名
    '(progn
         式1
         式2...))
</code></pre>

<p>のように使います。あるパッケージの拡張パッケージなんかもここで読むと良いかもしれません。</p>

<h1>8.その他</h1>

<p>メールクライアントを標準のものにしようとしましたが、<code>gnus.el</code>はちょっと受け付けなくてその他はimapを喋らないので断念。でも色々調べてたら<code>mew</code>より<code>wanderlust</code>の方が良いようなので使い初めました。表示が綺麗で良いですね。HTMLのレンダリングも<code>emacs-w3m</code>に頼らず標準の<code>shr.el</code>を使っているのも◎。</p>

<p>同じような経緯で<code>JDEE</code>をやめて<code>malabar.el</code>を使うようにしました。ただ、私は<code>maven</code>使いではないので微妙ではあります。まあ、そもそもプロジェクト単位でJavaを書くことがないってのもあるんですが。Androidのスケルトンがantなのでantでできたら嬉しいなーって。</p>

<h1>EmacsとViとShellとLispを悪魔合体させた話</h1>

<p>私はEmacsの狂信者ですが読み専のときはちょいちょいviを使うこともあります。片手で操作できるのは便利です。Emacsで読み専といえば<code>view-mode</code>です。そこでもhjklを使うべく<code>view-mode-map</code>に手を加えてましたが、大掃除ということで全部削除。</p>

<p>その後で<code>emacsroot/lisp/emulate/</code>以下を読んでいるとなんかviのエミュレーターが3つも見付かりました。<code>vi.el</code>、<code>vip.el</code>、<code>viper.el</code>です。後者になるほどviとの互換性が高くなります。とりあえずは<code>hjkl</code>が使えれば良いので<code>vi.el</code>を使ってみたところ、ん〜…といったところ。<code>vip.el</code>と試して結局<code>viper.el</code>に落ち着きました。</p>

<pre><code>(global-set-key (kbd "C-x C-q") #'(lambda ()
                    (interactive)
                    (toggle-viper-mode)
                    (force-mode-line-update)))
</code></pre>

<p>設定はこんな感じです。<code>toggle-viper-mode</code>してもモードラインの表示が変わらないことがあったので<code>force-mode-line-update</code>を加えました。</p>

<p><code>viper.el</code>は単なるviのエミュレートだけではなく、Levelに応じて良い感じにemacsと悪魔合体してくれます。私は最高レベルの5にしました。”C-x C-s”など基本的なコマンドはそのまま使えるようになってます。<code>:</code>で始まるvi(ex)のコマンドも使えます。<code>C-z</code>でemacs&lt;–>viを切り替えたり。非常に便利です。</p>

<p>尚、私はvi使いであってvim使いではないのでevilは使いません。</p>

<p>もう一つ、shellの話。今までは<code>multiterm</code> × <code>zsh</code>な感じでしたが、「できる限り標準のものを使う」方針で<code>eshell</code>に切り替えました。<code>eshell</code>はEmacs Lispで書かれたshellです。これが思った以上に便利です。るびきちさんの本では標準出力とエラー出力の切り分けができてないと書かれてましたがそれは修正されてるようです。</p>

<p>あとは<code>/dev/kill</code>だとか<code>&gt;&gt;&gt;</code>だとかバッファへのリダイレクトだとか<code>grep</code>の上書きだとか色々楽しい拡張もあるのですが、一番は<code>eshell</code>がLispであること。<code>eshell</code>上で任意のEmacs Lisp式を実行できます。最近Emacs LispやLispに精通してきたので非常に有り難いです。<br/>
それにファイルを開くときもその後で同じディレクトリのファイルを開くことが多いので一旦 <code>cd</code>してから<code>find-file</code>をするとアクセスし易くて捗ります。もう起動時に<code>eshell</code>が立ち上がるようにして、基本そこから操作するようにしてます。guakeもそんなに使わなくなりました。他の環境でも使えるので安心して依存できます。</p>

<p>で、ファイルを開くときはどうしてるかというと実はemacsの<code>find-file</code>ではなくviの<code>:e file-name</code>です。Emacs上でLispで出来たShellを使いつつviを動かしてます。かなり人を選びますが「EmacsのヘビーユーザーでLispに精通しててviを便利だと思ってる人」は試してみてはいかがでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UbuntuでEmacsからGPGを透過的に扱う]]></title>
    <link href="http://KeenS.github.io/blog/2013/12/04/emacs-gpg/"/>
    <updated>2013-12-04T22:52:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/12/04/emacs-gpg</id>
    <content type="html"><![CDATA[<p>暗号化といえばGPGですがEmacsからGPGで暗号化されたファイルを編集しようとすると毎回パスワードを訊かれて鬱陶しいです。これはキーリングを登録することで解決できました。</p>

<!-- more -->


<h2>Step1 Keyringに登録する</h2>

<p>Dashboardから[key]で検索すると[パスワードと鍵]が見付かります。左上の[+]で新たにキーリングを追加します。</p>

<p><img src="/images/2013-12-04-1.png" title="keyring" alt="こんな感じ" /></p>

<p>GPGを選択します</p>

<p><img src="/images/2013-12-04-2.png" title="Selecting GPG" alt="こんな感じ" /></p>

<p>必要な情報を入力します。このメールアドレスは実在しなくても作れますが、ブルートフォースかけられたときの警告とかに使われそうなので実在した方が良い気がします。とりあえず後で使うので覚えておいて下さい。</p>

<p><img src="/images/2013-12-04-3.png" title="'Input info &quot;こんな感じ&quot;" alt="'Input info &quot;こんな感じ&quot;" /></p>

<p>あとはパスワードのプロンプトが出るので入力して、エントロピーを発生させたら終わりです。</p>

<h2>Step2 ファイルを準備する</h2>

<p>ここが肝です。ファイルの先頭に</p>

<pre><code>-*- epa-file-encrypt-to: (my@mailaddress) -*-
</code></pre>

<p>を挿入します。既存の暗号化されたファイルでも同じです。</p>

<h2>Step3 暗号化する</h2>

<p><code>M-x epa-encrypt-file</code>で暗号化できます。暗号化するファイル名を指定したらキーリングを選べます</p>

<p><img src="/images/2013-12-04-4.png" title="Selecting GPG" alt="こんな感じ" /></p>

<h2>Step4 編集する</h2>

<p>あとはもう透過的に使えます。でもなんか実験してたらファイル保存できなかった。先にGPGで暗号化してたやつはできたのに。要調査です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ここ１ヶ月くらいの近況]]></title>
    <link href="http://KeenS.github.io/blog/2013/11/13/what-recent/"/>
    <updated>2013-11-13T21:20:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/11/13/what-recent</id>
    <content type="html"><![CDATA[<p> #isucon 参戦記がフォロワーの多い@tagomorisさんとか@nitro_idiotさんとかにツイートされて普段の数十倍のアクセスが来てテンション上がったので近況書きますね。</p>

<!-- more -->


<h2>isuconの勉強</h2>

<p>件の記事でも書いてますけどMySQLとNginXとCapistranoの勉強しました。SQLって書けると案外楽しいですね。あとN+1問題を学んだり、<code>IF EXISTS TRRIGER</code>的な文がなくて殺そうかと思ったり。</p>

<p>NginXはキャッシュとかですね。キャッシュキーに<code>$cookie_isucon_session</code>とか入れてログインしてるユーザーが来ても対応できたので良かったです（小並感</p>

<p>Capistranoはどうせだからと3.0を使ったのですが調べても2.x時代の情報ばっかり引っ掛かって苦労しました。その代わり、isucon本戦では複数サーバーへのデプロイ機能を存分に使わせて頂きました。ほぼログインしなくても問題ないですね。</p>

<p>例えば</p>

<p><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&lsquo;my app&rsquo;</span>
</span><span class="line"><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&lsquo;git@bitbucket.org:me/myrepo.git&rsquo;</span>
</span><span class="line"><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&lsquo;/home/me/app&rsquo;</span>
</span><span class="line"><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class="line"><span class="n">set</span> <span class="ss">:deploy_via</span><span class="p">,</span> <span class="ss">:remote_cache</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">namespace</span> <span class="ss">:nginx</span> <span class="k">do</span>
</span><span class="line"> <span class="n">task</span> <span class="ss">:reload</span> <span class="k">do</span>
</span><span class="line"> <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line"> <span class="n">execute</span> <span class="ss">:sudo</span><span class="p">,</span> <span class="s1">&lsquo;service nginx reload&rsquo;</span>
</span><span class="line"> <span class="k">end</span>
</span><span class="line"> <span class="k">end</span>
</span><span class="line">
</span><span class="line"> <span class="n">task</span> <span class="ss">:restart</span> <span class="k">do</span>
</span><span class="line"> <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line"> <span class="n">execute</span> <span class="ss">:sudo</span><span class="p">,</span> <span class="s1">&lsquo;service nginx restart&rsquo;</span>
</span><span class="line"> <span class="k">end</span>
</span><span class="line"> <span class="k">end</span>
</span><span class="line">
</span><span class="line"> <span class="n">task</span> <span class="ss">:start</span> <span class="k">do</span>
</span><span class="line"> <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line"> <span class="n">execute</span> <span class="ss">:sudo</span><span class="p">,</span> <span class="s1">&lsquo;service nginx start&rsquo;</span>
</span><span class="line"> <span class="k">end</span>
</span><span class="line"> <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></p>

<p>こんな感じです。で、もう一つ</p>

<p><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="n">set</span> <span class="ss">:stage</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class="line"><span class="n">server</span> <span class="s1">&lsquo;123.4.5.67&rsquo;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&lsquo;me&rsquo;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="s1">&lsquo;web&rsquo;</span>
</span><span class="line"><span class="n">server</span> <span class="s1">&lsquo;123.4.5.68&rsquo;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&lsquo;me&rsquo;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="s1">&lsquo;web&rsquo;</span>
</span><span class="line"><span class="n">server</span> <span class="s1">&lsquo;123.4.5.69&rsquo;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&lsquo;me&rsquo;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="s1">&lsquo;web&rsquo;</span>
</span><span class="line"><span class="n">set</span> <span class="ss">:ssh_options</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line"> <span class="ss">keys</span><span class="p">:</span> <span class="sx">%w(~/.ssh/id_rsa)</span><span class="p">,</span>
</span><span class="line"> <span class="n">forward_agent</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class="line"> <span class="n">auth_methods</span><span class="p">:</span> <span class="sx">%w(publickey)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></p>

<p>を書いておけばこの3台のサーバーに一斉にデプロイしてくれます。(上の例だとnginxですが、まあいいでしょう。)</p>

<h2>Shibuya.lisp</h2>

<p>Lisp Meet Up #10で発表してきました。内容は<code>fluentd</code>をCommon Lispから使う話。<br/>
スライド</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/27444839" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/blackenedgold/common-lisp-27444839" title="Common Lisp でビッグデータを作ろう">Common Lisp でビッグデータを作ろう</a></strong> from <strong><a href="http://www.slideshare.net/blackenedgold">blackenedgold</a></strong></p>

<p>Ustreamは見つかりませんでした。てへペロ</p>

<p>恐らく、<code>Log4CL</code>はやりたいことと目的が違いますね。全く別のロギングフレームワークを作るのが良さげな気がします。isuconの懇親会で開発者の@tagomorisさんにアドバイスも頂きましたし作るかもしれません。</p>

<h2>mpd</h2>

<p><a href="/blog/2013/09/29/mplayer/">以前、mplayer2が正常に動作しないとかぼやいて</a>ましたが、結局あきらめました。で、代わりに <a href="http://www.musicpd.org/">Music Player Daemon(MPD)</a>なるものを見付けて、しかもRaspberry Piで動き、iPod/Androidから操作できるとのことで、導入しました。</p>

<p>MPDはまさしくRaspberry Piのような機器向で、音楽を鳴らすサーバーと操作するクライアントが完全に分かれてます。</p>

<pre><code>$ sudo apg-get install mpd mpc
</code></pre>

<p>とかでRSPiに入れた気がします。クライアントはAndroidは<code>MPDroid</code>、iPodは<code>MPoD</code>っていうアプリです。</p>

<p><code>scp</code>で手元の曲をRSPiコピーし、iPodから繋ぐも曲が見えない。色々試した結果、<code>scp</code>でコピーしたときにパーミッションの問題が出てたようなのでそこを解決したらちゃんと動きました。</p>

<p>動画(iPod)</p>

<iframe width="560" height="315" src="//www.youtube.com/embed/x5CWtXbCkqo" frameborder="0" allowfullscreen></iframe>


<p>黒ばっかで見づらくて申し訳ありません。iPodからではなくスピーカから音が出てるのが分かりますかね？思ったより音が入ってないので分りづらいですね（汗</p>

<h2>CIM</h2>

<p><a href="https://github.com/fukamachi/shelly/">Shelly</a>を使って <a href="https://gist.github.com/KeenS/7059301">Common Lispスクリプトをexecutableにしよう</a>ってのをやってましたが少しshellyが求めているのと違うようだったので「シェルスクリプトでshelly的な物を実装しよう！ついでにrvmみたいにバージョン管理できたら嬉しいな！！」って思い付きで <a href="https://github.com/KeenS/CIM">Common Lisp Implementation Manager(CIM)</a>を作り始めました。まだCLISP, ECL, GCLのインストールぐらいしかできてません。</p>

<p>初めてシェルスクリプトを書き、初めてBourne Shellを触り(普段はzsh)、早くも挫折しそうです。今めっちゃシェルスクリプトの勉強してます。目的はImplementationの管理じゃなくて統一インターフェースの<code>cl</code>コマンドなのにそこが全然進んでないですね。<code>ql</code>に至っては1行も書いてない。まあ、<code>cl</code>を使って書くつもりなので<code>cl</code>が出来ないことにはどうしようもないんですが。</p>

<p><code>syset</code>とかネーミングセンスが無かったり(発音しずらい。シセット…サイセットって読もうかな)ダウンロードしたアーカイブのチェックサムとか全く見てなかったり色々ツッコみたくなりますが温かい目で見て下さい。気に入ったらpull-reqとかして下さい。</p>

<h2>Octomacs</h2>

<p>Octomacsに一回pull-req送ってからコミッタ気取りのκeenですが、<code>octomacs-preview</code>と<code>octomacs-deploy</code>を実装しました。<code>C-u</code>をつけると<code>generate</code>が付いてきます。テストをしてない（できない？）+サーバーを殺す(<code>octomacs-preview-quit</code>とかの名前かなあ。現状は<code>*octomacs preview*</code>バッファを<code>kill-buffer</code>すればいい)コマンドを実装してないのでpull-reqは投げてませんが使ってみたい方は <a href="https://github.com/KeenS/octomacs">こちら</a>をどうぞ。まあ、今からpushするんですがね。ちゃんとこの記事も<code>octomacs-new-post</code>から始まり、<code>octomacs-preview</code>で確認しつつ<code>octomacs-deploy</code>でデプロイしました。あとは過去の記事を編集する<code>octomacs-edit</code>を実装すれば完璧ですね。</p>

<p>こんなかんじです。<code>CIM</code>がんばります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tiarraにercで接続したときの/loadの問題]]></title>
    <link href="http://KeenS.github.io/blog/2013/10/06/tiarra-erc/"/>
    <updated>2013-10-06T00:35:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/10/06/tiarra-erc</id>
    <content type="html"><![CDATA[<p><a href="http://www.clovery.jp/tiarra/">tiarra</a>に <a href="http://www.emacswiki.org/ERC">erc</a>で接続したときの/loadの問題。</p>

<!-- more -->


<p>tiarraは有名なircプロキシ。ercはEmacs上で動くircクライアント。これらを使っているとtiarraが自動でログインしてくれないのでおかしいなと思っていたらtiarraの自動ログインモジュールを有効にしていなかった模様。</p>

<p>書き換えていざ設定を反映しようとすると若干困りました。どこに<code>/load</code>と打てばいいんだろ。</p>

<p>最初に誘導されるバッファ(ircバッファ名がプロキシサーバー名になってるやつ)に<code>/load</code>と打つと</p>

<pre><code>ERC&gt; /load
Incorrect arguments. Usage:
/LOAD line
Load the script provided in the LINE.
If LINE continues beyond the file name, the rest of
it is put in a (local) variable `erc-script-args',
which can be used in Emacs Lisp scripts.


The optional FORCE argument is ignored here - you can't force loading
a script after exceeding the flood threshold.
</code></pre>

<p>ですって。ああ…。<code>/load</code>コマンドがercに食われてる…</p>

<p>流石に解決策あるだろって思って調べたら</p>

<pre><code>/quote load
</code></pre>

<p>だそうです。</p>

<pre><code>ERC&gt; /quote load
-192.168.1.4- *** Reloaded configuration file.
-192.168.1.4- *** Module Channel::Join::Connect will be loaded newly.
</code></pre>

<p>はい。ちゃんとloadしてくれました。</p>

<p>以上小ネタでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacsのdired-modeを使い易くする]]></title>
    <link href="http://KeenS.github.io/blog/2013/10/04/emacs-dired/"/>
    <updated>2013-10-04T19:51:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/10/04/emacs-dired</id>
    <content type="html"><![CDATA[<p>Emacsの標準ライブラリ<code>dired.el</code>を読んでたら色々発見があったのでメモ兼dired-modeとはなんじゃらほいって方にも一から解説してみます。</p>

<!-- more -->


<p>とは言ってもいきなり解説しなくて申し訳ないのですが、最初に</p>

<pre><code>(ffap-bindings)
</code></pre>

<p>を設定しておきましょう。<code>C-x C-f</code>が非常に便利になります。だいたいの方が設定してるかと思いますが、まだという方は<code>init.el</code>に書いて保存し、最後の<code>)</code>の後にカーソルを持っていって<code>C-x C-e</code>しましょう。設定が反映されます。この設定で<code>C-x C-f</code>の入力がファイル以外も受け付けてくれますし、カーソルにポイントされてるファイルやURLをデフォルトで開こうとしてくれます。</p>

<p>…よし。じゃあ解説始めますよ。<code>C-x C-f ~/</code>してみて下さい。上の設定をしていたらディレクトリでも開ける筈です。するとホームディレクトリが<code>ls -al</code>された感じのバッファが出てくると思います。</p>

<p><img src="/images/Screenshot_from_2013-10-04.png" title="dired-mode-screenshot" alt="私のホームはちょっとマズいのがあったので.emacs.dのスクリーンショット" /></p>

<p>これが<code>dired-mode</code>です。これは普通に<code>n</code>(<code>C-n</code>でも可)や<code>p</code>(<code>C-p</code>でも可)で移動して、Enterでそのファイルやディレクトリを開けます。これだけでも十分便利なのですが、ここからさらにファイル操作までできます。</p>

<p>適当なファイルにカーソルを合わせて<code>C</code>するとコピー先を聞かれるので、入力してあげるとコピーしてくれます。複数ファイルをコピーしたいなら、コピーしたいファイル上で<code>m</code>してマークを付けて、<code>C</code>すれば一括でコピーできます。</p>

<p>勿論、他にもコマンドはあります。同じような使い方のできる代表的なものを挙げると、</p>

<p><thead>
<tr>
<th></th>
<th> コマンド </th>
<th> 操作(実行されるLinuxコマンド) </th>
</tr>
</thead><tbody>
<tr>
<td></td>
<td> <code>C</code> </td>
<td> コピー(<code>cp</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>R</code> </td>
<td> リネーム/移動(<code>mv</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>D</code> </td>
<td> 削除(<code>rm</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>M</code> </td>
<td> 権限操作(<code>chmod</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>G</code> </td>
<td> グループ変更(<code>chgrp</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>O</code> </td>
<td> 所有権変更(<code>chown</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>Z</code> </td>
<td> 圧縮/展開(<code>compress/uncompress/gunzip/bunzip/unzip</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>B</code> </td>
<td> (*.elファイルの)バイトコンパイル</td>
</tr>
<tr>
<td></td>
<td> <code>!</code> </td>
<td> 任意のコマンドの実行。デフォルトで空気読んだコマンドになってる。</td>
</tr>
</tbody></p>

<p>他にも無数に操作はありますがファイル操作はこんなものでしょう。あとはバッファを閉じる<code>q</code>や親ディレクトリに移動する<code>^</code>、バッファの更新を行なう<code>g</code>、マークを外す<code>u</code>(<code>U</code>で全解除)を覚えていれば操作には困らない筈です。</p>

<p>が、頻繁に使っているとより良く使いたくなります。そこで今回見付けた設定を紹介します。</p>

<p>まず</p>

<pre><code>(add-hook 'dired-load-hook (lambda ()
                  (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)))
</code></pre>

<p>から。これはdired-modeで<code>r</code>するとバッファがエディタブルになり、ファイル名を普通に変更できます。そのまま<code>C-x C-s</code>すればリネームの終了です。<br/>
普通にEmacsの編集コマンドが使えるので <code>M-%</code>とかで一括拡張子変更とか<code>C-x r t</code>でファイル名にプリフィクスつけたり自由自在です。</p>

<p>次に</p>

<pre><code>(setq dired-listing-switches (purecopy "-Ahl"))
</code></pre>

<p>Emacsがdired-modeを表示するとき、実際に裏で <code>ls -al</code>を走らせているのですが、そのときのオプションを変更できます。但し内部で<code>-l</code>の結果を利用してるのでこれは必須です。しかしそれ以外は自由に設定できます。因みにWindowsでもEmacsがエミュレートしてくれるので設定可能ですが、一部未実装のものもあるそうです。</p>

<p>頻繁に使うなら</p>

<pre><code>(setq dired-dwim-target t)
</code></pre>

<p>もお勧めです。</p>

<p>これを設定しておくと、ウィンドウを分割して左右にdiredバッファを開いているとき、<code>R</code>や<code>C</code>のデフォルトの宛先がもう片方のディレクトリになります。伝わりますかね？</p>

<p><img src="/images/Screenshot_from_2013-10-05.png" title="dired-mode in both of split window" alt="分割した両方のWindowでdired-modeを実行した状態。" /></p>

<p>のようにdiredでディレクトリA, Bを開いてるときにディレクトリAでファイルのコピーやら移動やらをするときにデフォルトでBに移動やコピーを行なうようになります。いくつかのファイルをディレクトリ間で移動させるときに非常に便利ですね。</p>

<p>あ、<code>C-x C-f /ftp:user@ftp-server:/path/to/dir</code>でFTPサーバーのディレクトリ/ファイルにもアクセスできるのは御存じですよね？これと組合せるとEmacsが割と使い易いFTPクライアントに大変身!</p>

<p>あとは私がどうしても欲しかったtarballですね。</p>

<script src="https://gist.github.com/KeenS/6828197.js?file=dired-tar.el"></script>


<p><noscript><pre><code>(defun dired-tar (tarname files &amp;optional arg)
  &ldquo;A dired-mode extension to archive files marked. With prefix argument, the tarball is gziped.&rdquo;
  (interactive (let ((files (dired-get-marked-files)))</p>

<pre><code> (list (read-string &amp;quot;Tarball name: &amp;quot; (concat (file-relative-name (car files)) &amp;quot;.tar.gz&amp;quot;))
           files &amp;quot;P&amp;quot;)))
</code></pre>




<p> (let ((tar (if arg</p>




<pre><code> (if dired-guess-shell-gnutar
         (concat dired-guess-shell-gnutar &amp;quot; zcf %s %s&amp;quot;)
       &amp;quot;tar cf - %2s | gzip &amp;gt; %1s&amp;quot;)
       &amp;quot;tar cf %s %s&amp;quot;)))
(shell-command (format tar tarname (mapconcat 'file-relative-name files &amp;quot; &amp;quot;)))))
</code></pre>




<p>(add-hook ‘dired-load-hook (lambda () (define-key dired-mode-map "T" ‘dired-tar)))
</p>


<p></code></pre></noscript></p>

<p>これでtarballにまとめたいファイルをマークして<code>T</code>すればまとめてくれます。<code>C-u T</code>するとgzip圧縮までしてくれます。因みに解凍/展開はファイル上で<code>!</code>するとデフォルトコマンドが展開(<code>tar xzvf</code>など)になってるので専用コマンドは必要ありません。補足ですが個人用なのでテストとかしてません。一旦御自身で動作テストなどをされてから実行されることをお勧めします。</p>

<p>他にも色々なコマンドがたくさんあったので興味のある方は探求してみて下さい。</p>
]]></content>
  </entry>
  
</feed>
