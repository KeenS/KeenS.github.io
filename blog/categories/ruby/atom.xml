<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-01-24T03:34:12+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RSPiでMongoDBを動かし、Twitter post alertを作った話]]></title>
    <link href="http://KeenS.github.io/blog/2014/01/19/rspi-plus-mongodb-plus-twitter/"/>
    <updated>2014-01-19T18:17:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/01/19/rspi-plus-mongodb-plus-twitter</id>
    <content type="html"><![CDATA[<p>κeenです。ここのところ寒い日が続いてますね。寒いと家に扃(ひきこも)ってTweet数が急上昇します。  すると一日に何postしてるか気になるのでカウンタを作りました。<br/>
そのときの苦労話です。</p>

<!-- more -->


<p>ただ、どうせ記録取るなら色々やりたいのでRspberry Piで一日のpost数、fav数、そしてメンヘラなことにフォロー/フォロワー全員のidを毎日記録することにしました。これで誰にリムられたかブロられたか一目瞭然ですね。</p>

<p>ここで一つ問題が。post, fav数は良いのですがフォロー/フォロワーのid一覧は毎日変わるのでmysqlで管理するのはちょっと面倒かなと。なのでMongoDBで管理することにしたいんですが、raspbianの<code>apt</code>にないんですよね。仕方ないので手動ビルドで対応しました。</p>

<h2>MongoDBのビルド</h2>

<p><a href="http://c-mobberley.com/wordpress/index.php/2013/10/14/raspberry-pi-mongodb-installation-the-working-guide/">ここ</a>を参考に</p>

<pre><code>cd ~/compile
sudo apt-get install build-essential libboost-filesystem-dev libboost-program-options-dev libboost-system-dev libboost-thread-dev scons libboost-all-dev python-pymongo git
git clone https://github.com/skrabban/mongo-nonx86
cd mongo-nonx86
sudo scons
</code></pre>

<p>としました。が、<code>scons</code>に一晩かかるとのことなので放置してたら何故かraspberry piが落ちてる…<br/>
気をとりなおして再起動。もう一度<code>sudo scons</code>すると今度はエラー終了。<code>sig 9 killed</code>…いや、私なにもしてないですよ?ダメ元で今度は</p>

<pre><code>sudo scons install
</code></pre>

<p>したら完走。良ク分カラン。狂想曲感が出てますね。</p>

<h2>MongoDBのインストール</h2>

<p>さっきのでインストール終わったと思うでしょ？違うんですよ。<code>init.d</code>だとか<code>mongodb.conf</code>だとかは配置されてないんですよ。<code>debian/</code>以下に色々入ってるので</p>

<pre><code>cd debian
sudo cp mongodb.conf /etc/mongodb.conf
</code></pre>

<p>までは良いのですが、<code>init.d</code>と<code>mongodb.upstart</code>の<code>mongod</code>のパスが<code>/usr/bin/mongod</code>でハードコードされてるんですよ。上の<code>sudo scons install</code>だと<code>/usr/local/bin/mongod</code>です。さらに起動オプションに<code>--dbpadh /var/lib/mongodb</code>と<code>--logpath /var/log/mongodb/mongodb.log</code>が指定されていて、<code>mongodb.conf</code>で上書きしているにも係らずそこまでのパスが存在しないとエラー吐いて起動してくれないので修正。<br/>
<code>mongodb.upstart</code>は直ぐ分かるので良いとして、<code>init.d</code>は</p>

<p>```
48d47
&lt;
50c49</p>

<h2>&lt; DAEMON=/usr/bin/mongod</h2>

<blockquote><p>DAEMON=/usr/local/bin/mongod
100c99</p>

<h2>&lt; DAEMON_OPTS=&ldquo;$DAEMON_OPTS &mdash;config $CONF&rdquo;</h2>

<p>DAEMON_OPTS=&ldquo;run &mdash;config $CONF&rdquo;</p></blockquote>

<p>```
な感じの修正です。なんか空行が一つ減ってますが気にしない。<br/>
ここまでしたらようやく</p>

<pre><code>chmod +x init.d mongodb.upstart
sudo cp init.d /etc/init.d/mongodb
sudo cp mongodb.upstart /etc/init/mongodb
</code></pre>

<p>で完了です。<code>man</code>とかもあるのですが配置の仕方が分からないので放置←</p>

<pre><code>sudo service mongodb start
mongo
</code></pre>

<p>で接続確認できます。</p>

<h2>Twitterのpostを集約する</h2>

<p>ビックリするくらい簡単。twitterのAPI keyを持ってる前提ですが。</p>

<pre><code>sudo gem install twitter mongo
</code></pre>

<p>で必要なgemをインストールし、
<code>~/.twitter.rb</code>に
<code>ruby
$client = Twitter::REST::Client.new do |conf|
  conf.consumer_key = "yours"
  conf.consumer_secret = "yours"
  conf.access_token = "yours"
  conf.access_token_secret = "yours"
end
</code>
と保存しておきます。昔と形式が変わりましたね。この形式になってからスレッドセーフになり、Twitter Stream APIにも対応してるようです。いつか扱ってみたい</p>

<p>集計ですが
```ruby</p>

<h1>! /usr/local/bin/ruby</h1>

<h1>coding: utf-8</h1>

<p>require &lsquo;twitter&rsquo;
require &lsquo;mongo&rsquo;
require &lsquo;time&rsquo;
load &ldquo;~/.twitter.rb&rdquo;</p>

<p>doc =  { &ldquo;tweets&rdquo;    => $client.user.tweets_count,</p>

<pre><code>     "favs"      =&gt; $client.user.favorites_count,
     "followers" =&gt; $client.friend_ids.to_a,
     "friends"   =&gt; $client.follower_ids.to_a,
     "timestamp" =&gt;  Time.now.strftime("%Y%m%d%H%M%S")}
</code></pre>

<p>col =  Mongo::Connection.new.db(&ldquo;twitter&rdquo;).collection(&ldquo;tweets&rdquo;)
last = col.find.sort([&ldquo;timestamp&rdquo;,:desc]).first</p>

<p>tweets_sub = doc[&ldquo;tweets&rdquo;] &ndash; last[&ldquo;tweets&rdquo;]
favs_sub = doc[&ldquo;favs&rdquo;] &ndash; last[&ldquo;favs&rdquo;]
followers_sub = doc[&ldquo;followers&rdquo;].length &ndash; last[&ldquo;followers&rdquo;].length
friends_sub = doc[&ldquo;friends&rdquo;].length &ndash; last[&ldquo;friends&rdquo;].length
col.insert doc
message = &ldquo;前回計測(#{Time.parse(last["timestamp&rdquo;]).strftime &ldquo;%Y-%m-%d %H:%M:%S&rdquo;})以降\n"
message += &ldquo;#{tweets_sub}回ツイートし\n&rdquo;
message += &ldquo;#{favs_sub}回favり\n&rdquo;
message += &ldquo;友達は#{friends_sub.abs}人#{friends_sub >= 0 ? "増え&rdquo; : &ldquo;減り&rdquo;}\n"
message += &ldquo;フォロワーは#{followers_sub.abs}人#{followers_sub >= 0 ? "増え&rdquo; : &ldquo;減り&rdquo;}ました"
$client.update message</p>

<p>```
で全部です。Rubyのハッシュ+配列がそのままinsert/selectできるのでぜんぜんMongoDBを意識しなくて良いですね。</p>

<p>ところで<code>datetime</code>型が無さげだったので<code>timestamp</code>をソートキー兼idにするために<code>YYYYMMDDHHMMSS</code>形式の文字列で格納してます(整数は8bitまでっぽかったです)。他に良い方法があると思うのですが思いつきませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPlayerがうまく動かない]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/29/mplayer/"/>
    <updated>2013-09-29T01:51:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/29/mplayer</id>
    <content type="html"><![CDATA[<p>MPlayerを使ってBGMを流すコマンドを作ろうとしたときに困ったことがいくつかあったので誰か解決して下さい。</p>

<!-- more -->


<p>スクリプトは3年前で更新がとまってる<code>mplayer-ruby</code>を使ってRubyでmplayerを叩く方針。</p>

<p>案の定バグに当りました。スペースの入ってるファイルをうまく処理できない。これは内部的にシェルを呼んでるのですが、そのときにシェルエスケープをしてないためです。<code>require 'shellwords'</code>しとけば<code>String#shellescape</code>メソッドが追加されるので<code>mplayer-ruby</code>の何箇所かにある<code>file</code>を<code>file.shellescape</code>すれば解決しました。</p>

<p>さらにDirty Hack。複数ファイルを<code>load_file</code>で渡してると詰まるようなので思いきって<code>MPlayer::Slave#initialize</code>を改造して引数に再生ファイルの配列(元々はファイル名の文字列)を渡すようにしました。</p>

<p>これで
<div><script src='https://gist.github.com/KeenS/6308894.js?file=BGM'></script>
<noscript><pre><code>#!/usr/bin/env ruby -Ku
# _*_ coding:UTF-8 _*_
require 'mplayer-ruby'
require 'libnotify'

class MPlayer::Slave
  def now_playing
    summary = &quot;&quot;
    summary +=   get(:meta_title).chomp
    summary += &quot; -- &quot; +  get(:meta_artist).chomp
    body = &quot;NowPlaying&quot;
    Libnotify.show(body: body, summary: summary)
  end
end

music = &quot;/your/path/to/music/directory/&quot;
playlist = File.read( music + &quot;BGM.list&quot;).split(&quot;\n&quot;).map{|f| music + f }.shuffle
player = MPlayer::Slave.new playlist
player.loop
Signal.trap(:INT) {player.quit;exit}
Signal.trap(:KILL) {player.quit;exit}
player.now_playing
while line = player.stdout.gets
  player.now_playing if line =~ /playback/
end
</code></pre></noscript></div>

が動くようになりました。</p>

<p>しかし一つ問題がありまして、再生が1曲目で止まっちゃいます。<code>loop</code>を指定してるのにです。mplayerを直接叩いてみるに、mplayerのバグっぽい…複数ファイル指定したときは本来なら全曲1回は再生してくれるはずなのに再生しませんし<code>-loop 0</code>オプションガン無視。今回入れたのはUbuntuのapt-getで入るやつで、バージョン(?)は「MPlayer2 UNKNOWN &copy; 2000-2012 MPlayer Team」だそうです。</p>

<p>Ubuntuはパッケージが古いことが往々にしてあるので冷静に自分でビルドしようとしても<code>fridibi</code>がないとかで怒られる。</p>

<p>どなたか解決方法御存じないですか???</p>

<h2>追記</h2>

<p><code>-loop -1</code>を渡すとループしてくれました。それドキュメントと逆…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのgistプラグインが動かなかったので修正した]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/26/patch-to-gist-plugin/"/>
    <updated>2013-09-26T22:57:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/26/patch-to-gist-plugin</id>
    <content type="html"><![CDATA[<p>どうもGithubのgistのURLが変わってる(?)っぽくてOctopressのgistプラグインが動いてくれなかったので修正しました。</p>

<!-- more -->


<p>Octopressの最新版でも修正されてなかったっぽいです。自分の使い方が悪かったのかなぁ…</p>

<p>原因は生のソースコードを取ってくるときに<code>"https://raw.github.com/gist/#{gist}/#{file}"</code>にアクセスするんですがそいつが404返すんですね。ブラウザからgistにいって"view raw"をクリックすると<code>"https://gist.github.com/#{gist_id}/#{gist}/raw/#{file}"</code>でした。gist_idってかGithubアカウントです。この辺、挙動が怪しくて、gist_idがなくてもリダイレクトしてくれたりしてくれなかったりします。APIによって違うようです。問題の<code>raw</code>APIはリダイレクトしてくれないので割と大きめにプラグインを書き換える必要がありました。
<code>
diff --cc plugins/gist_tag.rb
index 1620345,0000000..58acd2a
mode 100644,000000..100644
--- a/plugins/gist_tag.rb
+++ b/plugins/gist_tag.rb
@@@ -1,105 -1,0 +1,105 @@@
 +# A Liquid tag for Jekyll sites that allows embedding Gists and showing code for non-JavaScript enabled browsers and readers.
 +# by: Brandon Tilly
 +# Source URL: https://gist.github.com/1027674
 +# Post http://brandontilley.com/2011/01/31/gist-tag-for-jekyll.html
 +#
 +# Example usage:  //embeds a gist for this plugin
 +
 +require 'cgi'
 +require 'digest/md5'
 +require 'net/https'
 +require 'uri'
 +
 +module Jekyll
 +  class GistTag &lt; Liquid::Tag
 +    def initialize(tag_name, text, token)
 +      super
 +      @text           = text
 +      @cache_disabled = false
 +      @cache_folder   = File.expand_path "../.gist-cache", File.dirname(__FILE__)
 +      FileUtils.mkdir_p @cache_folder
 +    end
 +
 +    def render(context)
-       if parts = @text.match(/([a-zA-Z\d]*) (.*)/)
-         gist, file = parts[1].strip, parts[2].strip
-         script_url = script_url_for gist, file
-         code       = get_cached_gist(gist, file) || get_gist_from_web(gist, file)
++      if parts = @text.match(/([a-zA-Z]*) ([a-zA-Z\d]*) (.*)/)
++        gist_id, gist, file = parts[1].strip, parts[2].strip, parts[3].strip
++        script_url = script_url_for gist_id, gist, file
++        code       = get_cached_gist(gist_id, gist, file) || get_gist_from_web(gist_id, gist, file)
 +        html_output_for script_url, code
 +      else
 +        ""
 +      end
 +    end
 +
 +    def html_output_for(script_url, code)
 +      code = CGI.escapeHTML code
 +      &lt;&lt;-HTML
 +&lt;div&gt;&lt;script src='#{script_url}'&gt;&lt;/script&gt;
 +&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;#{code}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
 +      HTML
 +    end
 +
-     def script_url_for(gist_id, filename)
-       url = "https://gist.github.com/#{gist_id}.js"
++    def script_url_for(gist_id, gist, filename)
++      url = "https://gist.github.com/#{gist_id}/#{gist}.js"
 +      url = "#{url}?file=#{filename}" unless filename.nil? or filename.empty?
 +      url
 +    end
 +
-     def get_gist_url_for(gist, file)
-       "https://raw.github.com/gist/#{gist}/#{file}"
++    def get_gist_url_for(gist_id, gist, file)
++      "https://gist.github.com/#{gist_id}/#{gist}/raw/#{file}"
 +    end
 +
-     def cache(gist, file, data)
-       cache_file = get_cache_file_for gist, file
++    def cache(gist_id, gist, file, data)
++      cache_file = get_cache_file_for gist_id, gist, file
 +      File.open(cache_file, "w") do |io|
 +        io.write data
 +      end
 +    end
 +
-     def get_cached_gist(gist, file)
++    def get_cached_gist(gist_id, gist, file)
 +      return nil if @cache_disabled
-       cache_file = get_cache_file_for gist, file
++      cache_file = get_cache_file_for gist_id, gist, file
 +      File.read cache_file if File.exist? cache_file
 +    end
 +
-     def get_cache_file_for(gist, file)
++    def get_cache_file_for(gist_id, gist, file)
 +      bad_chars = /[^a-zA-Z0-9\-_.]/
 +      gist      = gist.gsub bad_chars, ''
 +      file      = file.gsub bad_chars, ''
-       md5       = Digest::MD5.hexdigest "#{gist}-#{file}"
-       File.join @cache_folder, "#{gist}-#{file}-#{md5}.cache"
++      md5       = Digest::MD5.hexdigest "#{gist_id}-#{gist}-#{file}"
++      File.join @cache_folder, "#{gist_id}-#{gist}-#{file}-#{md5}.cache"
 +    end
 +
-     def get_gist_from_web(gist, file)
-       gist_url          = get_gist_url_for gist, file
++    def get_gist_from_web(gist_id, gist, file)
++      gist_url          = get_gist_url_for gist_id, gist, file
 +      raw_uri           = URI.parse gist_url
 +      proxy             = ENV['http_proxy']
 +      if proxy
 +        proxy_uri       = URI.parse(proxy)
 +        https           = Net::HTTP::Proxy(proxy_uri.host, proxy_uri.port).new raw_uri.host, raw_uri.port
 +      else
 +        https           = Net::HTTP.new raw_uri.host, raw_uri.port
 +      end
 +      https.use_ssl     = true
 +      https.verify_mode = OpenSSL::SSL::VERIFY_NONE
 +      request           = Net::HTTP::Get.new raw_uri.request_uri
 +      data              = https.request request
 +      if data.code.to_i != 200
 +        raise RuntimeError, "Gist replied with #{data.code} for #{gist_url}"
 +      end
 +      data              = data.body
-       cache gist, file, data unless @cache_disabled
++      cache gist_id, gist, file, data unless @cache_disabled
 +      data
 +    end
 +  end
 +
 +  class GistTagNoCache &lt; GistTag
 +    def initialize(tag_name, text, token)
 +      super
 +      @cache_disabled = true
 +    end
 +  end
 +end
 +
 +Liquid::Template.register_tag('gist', Jekyll::GistTag)
 +Liquid::Template.register_tag('gistnocache', Jekyll::GistTagNoCache)
</code>
なんかOctopressのブランチが面倒だったり<code>magit.el</code>の使い方がよく分らなかったのでアレですが伝えたいことは伝わるdiffだと思います。</p>

<p>見ての通り<code>gist_id</code>というパラメーターを追加してリクエストURLをちょこっと書き換えただけです。この修正を加えたあとは</p>

<pre><code>{%  gist KeenS 6688683 script.lisp %}
</code></pre>

<p>で使えます。</p>

<p>本当にこれでいいのかなあ…なんか違う気がするなぁ。表示もイマイチだし。けどこれしかないのだから仕方がないですね。正確な情報を持ってる方いらっしゃいましたらコメントお願いします。</p>

<h2>追記</h2>

<p><a href="http://rcmdnk.github.io/blog/2013/05/06/blog-octopress/">http://rcmdnk.github.io/blog/2013/05/06/blog-octopress/</a>にあるエントリを見て変更加えました。やり方は貼られてあるdiffを<code>*scratch*</code>バッファにコピー、<code>M-x ediff-patch-file</code>でパッチ適用しました。</p>

<p>しかしどうもパッチの元のバージョンが古いらしく、何度もエラー出しながら手でパッチファイルを修正しました。もうちょっとパッチに慣れないとな…</p>

<p>しかも苦労してパッチ適用したのに表示変わらないなーって思ってたらどうもCleanpressは<code>sass/partial</code>を読み込まないようなので無駄骨でした。<code>sass/parts/_syntax.sass</code>をひたすら様子見ながら修正しました。</p>

<p>diffは…いいや。希望があったら晒します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redmineのインストール]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/05/install-redmine/"/>
    <updated>2013-09-05T16:35:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/05/install-redmine</id>
    <content type="html"><![CDATA[<p>私はバイトではプロジェクト管理に<a href="http://backlog.jp">Backlog</a>のサービスを利用してますが、同様のOSSに<a href="http://redmine.jp">Redmine</a>なるものがあると聞いて動かしてみたときのメモ。</p>

<!-- more -->


<p>以下、公式の引用。</p>

<blockquote><p>Redmineはオープンソースのプロジェクト管理ソフトウェアです。</p>

<p>プロジェクトのタスク管理、進捗管理、情報共有が行えます。SubversionやGitなどのバージョン管理システムとの連携機能も備えており、ソフトウェア開発やwebサイト制作などのITプロジェクトで特に威力を発揮します。</p></blockquote>

<p>Redmineの管理団体(？)が<a href="http://hosting.redmine.jp/">MyRedmine</a>というホスティングサービスを提供してたりしますが、今回はこれをローカルで動かします。</p>

<p><a href="http://redmine.jp/guide/RedmineInstall/">公式ドキュメント</a>を参考に作業していきます。</p>

<p>まずはダウンロード。現在の最新版は2.3.2だそうです。</p>

<pre><code>$cd ~/Ruby
$svn checkout http://svn.redmine.org/redmine/branches/2.3-stable redmine    
</code></pre>

<p>んで、グローバルの空間を汚したくないので新たにGemsetを作ります。本来ならbundler仕事なのですが、railsのバージョンとか仕組みの問題が面倒臭そうだったのでGemsetで管理。</p>

<pre><code>$rvm use --create 1.9.3@redmine
$cd redmine
$echo ruby-1.9.3-p448 &gt; .ruby-version
$echo redmine &gt; .ruby-gemset
</code></pre>

<p>これで~/Ruby/redmineにcdすると自動的にrvmが1.9.3@redmineに切り替えてくれます。<br/>
※注意<br/>
<code>.rvmrc</code>に<code>rvm use 1.9.3@redmine</code>と書いてたら怒られます。<code>.ruby-version</code>と<code>.ruby-gemset</code>がバージョン管理システムに依存しない新しい書き方だそうです。</p>

<p>データベースはデフォルトだとMySQLを使う設定になってますがこんなお試しにのためにMySQLを動かしたくないのでSQLiteに変更。</p>

<pre><code>$cp config/{database.yml.example, database.yml}
</code></pre>

<p>のあと、database.ymlのproductionの部分を以下のように変更。
```yaml
production:</p>

<pre><code>adapter: sqlite3
database: db/redmine.sqlite3
</code></pre>

<p><code>``
あとは</code>bundle install`。(bundlerはインストールされてる前提です)</p>

<pre><code>$bundle install --without development test
</code></pre>

<p>すると…あれ？RMagickでコケる…。公式ドキュメントには <code>bundle</code>の<code>--without</code>に<code>rmagick</code>を加えろと書いてますが画像扱えないのは悔しいので色々調べた結果、</p>

<pre><code>$sudo apt-get install libmagic-dev libmagickwand-dev
</code></pre>

<p>で依存関係を満せるようです。これでようやく<code>bundle install</code>が通ります。</p>

<p>ここまできたらあとはドキュメント通り。</p>

<pre><code>$rake generate_secret_token
$RAILS_ENV=production rake db:migrate
$RAILS_ENV=production rake redmine:load_default_data
$rails s
</code></pre>

<p>…あれ？<code>rails s</code>でコケる。<br/>
これは自分がrailsに慣れてなかったのが問題のようで、正しくは</p>

<pre><code>$rails s -e production
</code></pre>

<p>だそうです。</p>

<pre><code>$RAILS_ENV=production rails s
</code></pre>

<p>としても同じ。これで<a href="http://localhost:3000">localhost:3000</a>にアクセスするとRedmineが開きます。</p>

<p><img src="/images/redmine-home.png" title="&lsquo;redmine-home&rsquo; &lsquo;Redmineのホーム画面&rsquo;" ></p>

<p>因みにAdminのID、パスワードはadminだそうです。</p>

<p>データベースの設定のexample部分にjenkinsとかいう文字列があったけど連携できるのかなぁ。要調査。</p>

<hr />

<h3>補足</h3>

<p>デフォルトのWEBrickだと遅いのでGemfileに
<code>ruby
gem "thin"
</code>
を加えて、<code>bundle install</code>し直すと自動的にThinを使ってくれるそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Tutorial]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/03/rails-tutorial/"/>
    <updated>2013-09-03T22:15:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/03/rails-tutorial</id>
    <content type="html"><![CDATA[<p>夜中にコーヒー飲むと眠れなくなりますね。昨晩もコーヒー飲んだら朝まで眠れず、寝たのが朝8時半、起きたのが16時でした。明日提出のレポート終ってないのに…</p>

<p>さて、かなり良いRuby on Railsのチュートリアルを見付けたので紹介します。<br/>
<a href="http://railstutorial.jp">Ruby on Rails チュートリアル：実例を使ってRailsを学ぼう</a></p>

<!-- more -->


<p>これはただのrailsの紹介ではなくてgitだとかherokuだとかを使ってかなり実践的にアプリケーションを作ていくものです。1, 2章で軽くrailsを動かしてみたあと、3章以降でテスト駆動開発でアプリケーションを構築していきます。</p>

<p>このテスト駆動開発の環境がすばらしいのなんのって、最初動かしたとき思わずニヤリとしました。しかも何故か(何も設定してないのに)Emacsのモードバーの色がテストの結果に応じて変わるという。<br/>
マウス操作もキーストロークも無くコードの正しさを教えてくれるのは非常に快適でした。</p>

<p>文体も訳本にありがちな片言の日本語ではなく読み易いですし、Ruby自体の解説もあり、「Scaffoldを使えば簡単にできるんだぜ~」じゃなくてちゃんとMVCの関係とかを解説して身に付いた上で「今後はScaffoldでより手軽に作れるよ」なのでRailsに限らずWeb開発のチュートリアルとして秀逸でした。</p>

<p>私もまだ5章までしか進めてないのですが是非一度試してみて下さい</p>
]]></content>
  </entry>
  
</feed>
