<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Emacs Lisp | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/blog/categories/emacs-lisp/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2013-10-06T00:53:04+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacsのdired-modeを使い易くする]]></title>
    <link href="http://KeenS.github.io/blog/2013/10/04/emacs-dired/"/>
    <updated>2013-10-04T19:51:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/10/04/emacs-dired</id>
    <content type="html"><![CDATA[<p>Emacsの標準ライブラリ<code>dired.el</code>を読んでたら色々発見があったのでメモ兼dired-modeとはなんじゃらほいって方にも一から解説してみます。</p>

<!-- more -->


<p>とは言ってもいきなり解説しなくて申し訳ないのですが、最初に</p>

<pre><code>(ffap-bindings)
</code></pre>

<p>を設定しておきましょう。<code>C-x C-f</code>が非常に便利になります。
だいたいの方が設定してるかと思いますが、まだという方は<code>init.el</code>に書いて保存し、最後の<code>)</code>の後にカーソルを持っていって<code>C-x C-e</code>しましょう。設定が反映されます。
この設定で<code>C-x C-f</code>の入力がファイル以外も受け付けてくれますし、カーソルにポイントされてるファイルやURLをデフォルトで開こうとしてくれます。</p>

<p>…よし。じゃあ解説始めますよ。<code>C-x C-f ~/</code>してみて下さい。上の設定をしていたらディレクトリでも開ける筈です。するとホームディレクトリが<code>ls -al</code>された感じのバッファが出てくると思います。</p>

<p> <img src="/images/Screenshot_from_2013-10-04.png" title="&lsquo;dired-mode-screenshot&rsquo; &lsquo;私のホームはちょっとマズいのがあったので.emacs.dのスクリーンショット&rsquo;" ></p>

<p>これが<code>dired-mode</code>です。これは普通に<code>n</code>(<code>C-n</code>でも可)や<code>p</code>(<code>C-p</code>でも可)で移動して、Enterでそのファイルやディレクトリを開けます。これだけでも十分便利なのですが、ここからさらにファイル操作までできます。</p>

<p>適当なファイルにカーソルを合わせて<code>C</code>するとコピー先を聞かれるので、入力してあげるとコピーしてくれます。複数ファイルをコピーしたいなら、コピーしたいファイル上で<code>m</code>してマークを付けて、<code>C</code>すれば一括でコピーできます。</p>

<p>勿論、他にもコマンドはあります。同じような使い方のできる代表的なものを挙げると、</p>

<table>
<thead>
<tr>
<th></th>
<th> コマンド </th>
<th> 操作(実行されるLinuxコマンド)    </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <code>C</code>      </td>
<td> コピー(<code>cp</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>R</code>      </td>
<td> リネーム/移動(<code>mv</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>D</code>      </td>
<td> 削除(<code>rm</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>M</code>      </td>
<td> 権限操作(<code>chmod</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>G</code>      </td>
<td> グループ変更(<code>chgrp</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>O</code>      </td>
<td> 所有権変更(<code>chown</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>Z</code>      </td>
<td> 圧縮/展開(<code>compress/uncompress/gunzip/bunzip/unzip</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>B</code>      </td>
<td> (*.elファイルの)バイトコンパイル</td>
</tr>
<tr>
<td></td>
<td> <code>!</code>      </td>
<td> 任意のコマンドの実行。デフォルトで空気読んだコマンドになってる。</td>
</tr>
</tbody>
</table>


<p>他にも無数に操作はありますがファイル操作はこんなものでしょう。あとはバッファを閉じる<code>q</code>や親ディレクトリに移動する<code>^</code>、バッファの更新を行なう<code>g</code>、マークを外す<code>u</code>(<code>U</code>で全解除)を覚えていれば操作には困らない筈です。</p>

<p>が、頻繁に使っているとより良く使いたくなります。そこで今回見付けた設定を紹介します。</p>

<p>まず</p>

<pre><code>(add-hook 'dired-load-hook (lambda ()
                  (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)))
</code></pre>

<p>から。これはdired-modeで<code>r</code>するとバッファがエディタブルになり、ファイル名を普通に変更できます。そのまま<code>C-x C-s</code>すればリネームの終了です。<br/>
普通にEmacsの編集コマンドが使えるので <code>M-%</code>とかで一括拡張子変更とか<code>C-x r t</code>でファイル名にプリフィクスつけたり自由自在です。</p>

<p>次に</p>

<pre><code>(setq dired-listing-switches (purecopy "-Ahl"))
</code></pre>

<p>Emacsがdired-modeを表示するとき、実際に裏で <code>ls -al</code>を走らせているのですが、そのときのオプションを変更できます。但し内部で<code>-l</code>の結果を利用してるのでこれは必須です。しかしそれ以外は自由に設定できます。因みにWindowsでもEmacsがエミュレートしてくれるので設定可能ですが、一部未実装のものもあるそうです。</p>

<p>頻繁に使うなら</p>

<pre><code>(setq dired-dwim-target t)
</code></pre>

<p>もお勧めです。</p>

<p>これを設定しておくと、ウィンドウを分割して左右にdiredバッファを開いているとき、<code>R</code>や<code>C</code>のデフォルトの宛先がもう片方のディレクトリになります。伝わりますかね？</p>

<p> <img src="/images/Screenshot_from_2013-10-05.png" title="&lsquo;dired-mode in both of split window&rsquo; &lsquo;分割した両方のWindowでdired-modeを実行した状態。&rsquo;" ></p>

<p>のようにdiredでディレクトリA, Bを開いてるときにディレクトリAでファイルのコピーやら移動やらをするときにデフォルトでBに移動やコピーを行なうようになります。いくつかのファイルをディレクトリ間で移動させるときに非常に便利ですね。</p>

<p>あ、<code>C-x C-f /ftp:user@ftp-server:/path/to/dir</code>でFTPサーバーのディレクトリ/ファイルにもアクセスできるのは御存じですよね？これと組合せるとEmacsが割と使い易いFTPクライアントに大変身!</p>

<p>あとは私がどうしても欲しかったtarballですね。
 <div><script src='https://gist.github.com/KeenS/6828197.js?file=dired-tar.el'></script>
<noscript><pre><code>(defun dired-tar (tarname files &amp;optional arg)
  &quot;A dired-mode extension to archive files marked. With prefix argument, the tarball is gziped.&quot;
  (interactive (let ((files (dired-get-marked-files)))
		 (list (read-string &quot;Tarball name: &quot; (concat (file-relative-name (car files)) &quot;.tar.gz&quot;))
		       files &quot;P&quot;)))
  (let ((tar (if arg
		 (if dired-guess-shell-gnutar
		     (concat dired-guess-shell-gnutar &quot; zcf %s %s&quot;)
		   &quot;tar cf - %2s | gzip &gt; %1s&quot;)
	       &quot;tar cf %s %s&quot;)))
    (shell-command (format tar tarname (mapconcat 'file-relative-name files &quot; &quot;)))))
(add-hook 'dired-load-hook (lambda () (define-key dired-mode-map &quot;T&quot; 'dired-tar)))
</code></pre></noscript></div>

これでtarballにまとめたいファイルをマークして<code>T</code>すればまとめてくれます。<code>C-u T</code>するとgzip圧縮までしてくれます。因みに解凍/展開はファイル上で<code>!</code>するとデフォルトコマンドが展開(<code>tar xzvf</code>など)になってるので専用コマンドは必要ありません。補足ですが個人用なのでテストとかしてません。一旦御自身で動作テストなどをされてから実行されることをお勧めします。</p>

<p>他にも色々なコマンドがたくさんあったので興味のある方は探求してみて下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octomacs.elを修正しました]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/16/octomacs-el/"/>
    <updated>2013-09-16T21:24:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/16/octomacs-el</id>
    <content type="html"><![CDATA[<p>EmacsからOctopressに投稿できるOctomacs.elが最新版のrvm.elに対応してないようだったので修正してみました。</p>

<!-- more -->


<p>原因はOctomacs.elがrvm.elの内部で使われている関数を使っていたのですが、その関数が最新版で削除されていたからだったみたいです。</p>

<p>結論として、
```
*** /home/kim/.emacs.d/lisp/octomacs/octomacs.el    2013-09-16 22:29:14.498296762 +0900
&mdash;&ndash; /home/kim/.emacs.d/elpa/octomacs-20121026.1649/octomacs.el  2013-08-31 23:54:13.044373498 +0900</p>

<hr />

<p><strong>* 4,10 </strong>**
  ;;
  ;; Author: Jacob Helwig <a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#106;&#97;&#99;&#x6f;&#98;&#64;&#x74;&#x65;&#99;&#x68;&#x6e;&#x6f;&#115;&#111;&#x72;&#99;&#101;&#114;&#121;&#46;&#110;&#101;&#116;">&#x6a;&#97;&#99;&#111;&#x62;&#64;&#116;&#x65;&#99;&#104;&#x6e;&#111;&#x73;&#x6f;&#x72;&#99;&#x65;&#x72;&#x79;&#x2e;&#x6e;&#101;&#116;</a>
  ;; Homepage: <a href="http://technosorcery.net">http://technosorcery.net</a>
! ;; Version: 0.0.1
  ;; URL: <a href="https://github.com/jhelwig/octomacs">https://github.com/jhelwig/octomacs</a>
  ;;
  ;;; License:
&mdash;&ndash; 4,11 &mdash;&mdash;
  ;;
  ;; Author: Jacob Helwig <a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#58;&#106;&#97;&#99;&#111;&#98;&#x40;&#x74;&#101;&#99;&#x68;&#x6e;&#x6f;&#x73;&#111;&#x72;&#x63;&#101;&#114;&#121;&#46;&#x6e;&#x65;&#116;">&#x6a;&#x61;&#99;&#111;&#x62;&#64;&#x74;&#x65;&#x63;&#x68;&#x6e;&#x6f;&#115;&#111;&#114;&#99;&#101;&#114;&#x79;&#46;&#x6e;&#x65;&#x74;</a>
  ;; Homepage: <a href="http://technosorcery.net">http://technosorcery.net</a>
! ;; Version: 20121026.1649
! ;; X-Original-Version: 0.0.1
  ;; URL: <a href="https://github.com/jhelwig/octomacs">https://github.com/jhelwig/octomacs</a>
  ;;
  ;;; License:</p>

<hr />

<p><strong>* 133,146 </strong>**
  (defun octomacs-format-rake-task-with-args (task &amp;optional arguments)</p>

<pre><code>"Build a shell suitable string of the rake TASK name with the specified ARGUMENTS."
(let ((arguments-string (if arguments
</code></pre>

<p>!                               (format &ldquo;[%s]&rdquo; (if (listp arguments) (mapconcat &lsquo;octomacs-shell-escape-string arguments &ldquo;, &rdquo;) arguments))</p>

<pre><code>                          "")))
  (format "'%s%s'" task arguments-string)))
</code></pre>

<p>  (defun octomacs-rake-with-rvm (directory task &amp;optional arguments)</p>

<pre><code>"Run rake task TASK with specified ARGUMENTS in DIRECTORY using rvm"
(let* ((default-directory (file-name-as-directory (expand-file-name directory)))
</code></pre>

<p>!          (rvmrc-info (or (rvm&mdash;load-info-rvmrc) (rvm&mdash;load-info-ruby-version) (rvm&mdash;load-info-gemfile)))</p>

<pre><code>       (rvm-command (if rvmrc-info
                        (concat "rvm " (mapconcat 'identity rvmrc-info "@") " do ")
                      "")))
</code></pre>

<p>&mdash;&ndash; 134,148 &mdash;&mdash;
  (defun octomacs-format-rake-task-with-args (task &amp;optional arguments)</p>

<pre><code>"Build a shell suitable string of the rake TASK name with the specified ARGUMENTS."
(let ((arguments-string (if arguments
</code></pre>

<p>!                               (format &ldquo;[%s]&rdquo; (mapconcat &lsquo;octomacs-shell-escape-string arguments &ldquo;, &rdquo;))</p>

<pre><code>                          "")))
  (format "'%s%s'" task arguments-string)))
</code></pre>

<p>  (defun octomacs-rake-with-rvm (directory task &amp;optional arguments)</p>

<pre><code>"Run rake task TASK with specified ARGUMENTS in DIRECTORY using rvm"
(let* ((default-directory (file-name-as-directory (expand-file-name directory)))
</code></pre>

<p>!          (rvmrc-path (rvm&mdash;rvmrc-locate directory))
!          (rvmrc-info (if rvmrc-path (rvm&mdash;rvmrc-read-version rvmrc-path) nil))</p>

<pre><code>       (rvm-command (if rvmrc-info
                        (concat "rvm " (mapconcat 'identity rvmrc-info "@") " do ")
                      "")))
</code></pre>

<p>```</p>

<p>こんな感じです。これでちゃんと<code>.rvmrc</code>やら<code>.ruby-version</code>やら<code>.ruby-gemset</code>やらを反映してくれます。<a href="https://github.com/jhelwig/octomacs/pull/2">pull-req投げてみました</a>。初pull-reqです。英語心配です。</p>

<p>俺、pull-reqとりこまれたら<code>rake gen_deploy</code>にも挑戦するんだ…</p>

<p>あ、因みにこの投稿は<code>init.el</code>に</p>

<pre><code>(setq octomacs-workdir-alist '(("default" . "~/Ruby/octopress")))
</code></pre>

<p>して<code>octomacs-new-post</code>から投稿してます。</p>
]]></content>
  </entry>
  
</feed>
