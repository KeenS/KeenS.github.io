<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lisp | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/blog/categories/lisp/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2013-12-06T01:52:34+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacsのdired-modeを使い易くする]]></title>
    <link href="http://KeenS.github.io/blog/2013/10/04/emacs-dired/"/>
    <updated>2013-10-04T19:51:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/10/04/emacs-dired</id>
    <content type="html"><![CDATA[<p>Emacsの標準ライブラリ<code>dired.el</code>を読んでたら色々発見があったのでメモ兼dired-modeとはなんじゃらほいって方にも一から解説してみます。</p>

<!-- more -->


<p>とは言ってもいきなり解説しなくて申し訳ないのですが、最初に</p>

<pre><code>(ffap-bindings)
</code></pre>

<p>を設定しておきましょう。<code>C-x C-f</code>が非常に便利になります。
だいたいの方が設定してるかと思いますが、まだという方は<code>init.el</code>に書いて保存し、最後の<code>)</code>の後にカーソルを持っていって<code>C-x C-e</code>しましょう。設定が反映されます。
この設定で<code>C-x C-f</code>の入力がファイル以外も受け付けてくれますし、カーソルにポイントされてるファイルやURLをデフォルトで開こうとしてくれます。</p>

<p>…よし。じゃあ解説始めますよ。<code>C-x C-f ~/</code>してみて下さい。上の設定をしていたらディレクトリでも開ける筈です。するとホームディレクトリが<code>ls -al</code>された感じのバッファが出てくると思います。</p>

<p> <img src="/images/Screenshot_from_2013-10-04.png" title="&lsquo;dired-mode-screenshot&rsquo; &lsquo;私のホームはちょっとマズいのがあったので.emacs.dのスクリーンショット&rsquo;" ></p>

<p>これが<code>dired-mode</code>です。これは普通に<code>n</code>(<code>C-n</code>でも可)や<code>p</code>(<code>C-p</code>でも可)で移動して、Enterでそのファイルやディレクトリを開けます。これだけでも十分便利なのですが、ここからさらにファイル操作までできます。</p>

<p>適当なファイルにカーソルを合わせて<code>C</code>するとコピー先を聞かれるので、入力してあげるとコピーしてくれます。複数ファイルをコピーしたいなら、コピーしたいファイル上で<code>m</code>してマークを付けて、<code>C</code>すれば一括でコピーできます。</p>

<p>勿論、他にもコマンドはあります。同じような使い方のできる代表的なものを挙げると、</p>

<table>
<thead>
<tr>
<th></th>
<th> コマンド </th>
<th> 操作(実行されるLinuxコマンド)    </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <code>C</code>      </td>
<td> コピー(<code>cp</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>R</code>      </td>
<td> リネーム/移動(<code>mv</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>D</code>      </td>
<td> 削除(<code>rm</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>M</code>      </td>
<td> 権限操作(<code>chmod</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>G</code>      </td>
<td> グループ変更(<code>chgrp</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>O</code>      </td>
<td> 所有権変更(<code>chown</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>Z</code>      </td>
<td> 圧縮/展開(<code>compress/uncompress/gunzip/bunzip/unzip</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>B</code>      </td>
<td> (*.elファイルの)バイトコンパイル</td>
</tr>
<tr>
<td></td>
<td> <code>!</code>      </td>
<td> 任意のコマンドの実行。デフォルトで空気読んだコマンドになってる。</td>
</tr>
</tbody>
</table>


<p>他にも無数に操作はありますがファイル操作はこんなものでしょう。あとはバッファを閉じる<code>q</code>や親ディレクトリに移動する<code>^</code>、バッファの更新を行なう<code>g</code>、マークを外す<code>u</code>(<code>U</code>で全解除)を覚えていれば操作には困らない筈です。</p>

<p>が、頻繁に使っているとより良く使いたくなります。そこで今回見付けた設定を紹介します。</p>

<p>まず</p>

<pre><code>(add-hook 'dired-load-hook (lambda ()
                  (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)))
</code></pre>

<p>から。これはdired-modeで<code>r</code>するとバッファがエディタブルになり、ファイル名を普通に変更できます。そのまま<code>C-x C-s</code>すればリネームの終了です。<br/>
普通にEmacsの編集コマンドが使えるので <code>M-%</code>とかで一括拡張子変更とか<code>C-x r t</code>でファイル名にプリフィクスつけたり自由自在です。</p>

<p>次に</p>

<pre><code>(setq dired-listing-switches (purecopy "-Ahl"))
</code></pre>

<p>Emacsがdired-modeを表示するとき、実際に裏で <code>ls -al</code>を走らせているのですが、そのときのオプションを変更できます。但し内部で<code>-l</code>の結果を利用してるのでこれは必須です。しかしそれ以外は自由に設定できます。因みにWindowsでもEmacsがエミュレートしてくれるので設定可能ですが、一部未実装のものもあるそうです。</p>

<p>頻繁に使うなら</p>

<pre><code>(setq dired-dwim-target t)
</code></pre>

<p>もお勧めです。</p>

<p>これを設定しておくと、ウィンドウを分割して左右にdiredバッファを開いているとき、<code>R</code>や<code>C</code>のデフォルトの宛先がもう片方のディレクトリになります。伝わりますかね？</p>

<p> <img src="/images/Screenshot_from_2013-10-05.png" title="&lsquo;dired-mode in both of split window&rsquo; &lsquo;分割した両方のWindowでdired-modeを実行した状態。&rsquo;" ></p>

<p>のようにdiredでディレクトリA, Bを開いてるときにディレクトリAでファイルのコピーやら移動やらをするときにデフォルトでBに移動やコピーを行なうようになります。いくつかのファイルをディレクトリ間で移動させるときに非常に便利ですね。</p>

<p>あ、<code>C-x C-f /ftp:user@ftp-server:/path/to/dir</code>でFTPサーバーのディレクトリ/ファイルにもアクセスできるのは御存じですよね？これと組合せるとEmacsが割と使い易いFTPクライアントに大変身!</p>

<p>あとは私がどうしても欲しかったtarballですね。
 <div><script src='https://gist.github.com/KeenS/6828197.js?file=dired-tar.el'></script>
<noscript><pre><code>(defun dired-tar (tarname files &amp;optional arg)
  &quot;A dired-mode extension to archive files marked. With prefix argument, the tarball is gziped.&quot;
  (interactive (let ((files (dired-get-marked-files)))
		 (list (read-string &quot;Tarball name: &quot; (concat (file-relative-name (car files)) &quot;.tar.gz&quot;))
		       files &quot;P&quot;)))
  (let ((tar (if arg
		 (if dired-guess-shell-gnutar
		     (concat dired-guess-shell-gnutar &quot; zcf %s %s&quot;)
		   &quot;tar cf - %2s | gzip &gt; %1s&quot;)
	       &quot;tar cf %s %s&quot;)))
    (shell-command (format tar tarname (mapconcat 'file-relative-name files &quot; &quot;)))))
(add-hook 'dired-load-hook (lambda () (define-key dired-mode-map &quot;T&quot; 'dired-tar)))
</code></pre></noscript></div>

これでtarballにまとめたいファイルをマークして<code>T</code>すればまとめてくれます。<code>C-u T</code>するとgzip圧縮までしてくれます。因みに解凍/展開はファイル上で<code>!</code>するとデフォルトコマンドが展開(<code>tar xzvf</code>など)になってるので専用コマンドは必要ありません。補足ですが個人用なのでテストとかしてません。一旦御自身で動作テストなどをされてから実行されることをお勧めします。</p>

<p>他にも色々なコマンドがたくさんあったので興味のある方は探求してみて下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shellyを使ってCommon LispファイルをExecutableにする]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/26/shelly-script/"/>
    <updated>2013-09-26T21:25:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/26/shelly-script</id>
    <content type="html"><![CDATA[<p>コマンドラインからCommon Lispの関数を実行できる<a href="https://github.com/fukamachi/shelly">Shelly</a>を使ってCommon Lispファイルを実行形式にしてみました。
Shellyは</p>

<pre><code>$ shly + 1 2
3
</code></pre>

<p>みたいに関数を実行できます。</p>

<!-- more -->


<p>モチベーションとしては、<a href="http://blog.8arrow.org/entry/20120521/1337596483">Shellyの作者深町さん</a>がTwitterで「Shellyでloadを使うとスクリプトみたいに実行できる」と発言していたのがきっかけで、Shebangを無視できればUNIX系ではExecutableにできるのでは？と思いついてやってみました。</p>

<p><code>read</code>して<code>eval</code>して…とか考えてましたが、<code>load</code>に<code>stream</code>を渡せるようなので案外簡単にできました。</p>

<p><div><script src='https://gist.github.com/KeenS/6688683.js?file=script.lisp'></script>
<noscript><pre><code>(in-package :shelly)
(export (defvar *argv* nil))
(in-package :cl-user)

(defun script (file argv)
  &quot;Execute a file as script ignoring shebang&quot;
  (setf shelly:*argv* argv)
  (let* ((in (open file :if-does-not-exist :error))
	 (first-char (read-char in))
	 (second-char (read-char in)))
    (cond
      ((and (char= first-char #\#) (char= second-char #\!))
       (read-line in))
      (t (unread-char second-char in)
	 (unread-char first-char in)))
    (load in)
    (values)))
</code></pre></noscript></div>
</p>

<p>コマンドライン引数を受け取るために<code>*argv*</code>という変数を用意してます。</p>

<p>こんなことを<code>~/.shelly/Shellyfile</code>に書いておき、Lispの初期化ファイルに</p>

<pre><code>#+shelly
(load "~/.shelly/Shellyfile")
</code></pre>

<p>と書いてます。この<code>~/.shelly/Shellyfile</code>にはShelly向けの関数を溜め込んでいく予定です。</p>

<p>あとは</p>

<p>```common-lisp</p>

<h1>!shly script</h1>

<p>(defun hello ()
  (format t &ldquo;Hello ~a~%&rdquo; (first shelly:<em>argv</em>)))
(hello)
<code>``
を</code>foo.lisp`に書き込めば</p>

<pre><code>$ chmod u+x foo.lisp
$./foo.lisp κeen
Hello κeen
</code></pre>

<p>と実行できます。勿論、</p>

<pre><code>$shly script foo.lisp κeen
</code></pre>

<p>としても同じです。
一部の処理系ではこのようなことが出来ますが、コマンドライン引数の渡し方とかも処理系依存なのでポータブルに書くなら一つ試してみてはいかがでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Common Lispスタイルガイド]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/21/google-commonlisp-style-guide/"/>
    <updated>2013-09-21T17:00:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/21/google-commonlisp-style-guide</id>
    <content type="html"><![CDATA[<p>この度、<a href="http://google-styleguide.googlecode.com/svn/trunk/lispguide.xml">Google Common Lispスタイルガイド</a>が<a href="http://google-common-lisp-style-guide-ja.cddddr.org/">日本語に</a>なりました。</p>

<!-- more -->


<p>私が見付けた時点でほとんど日本語になってたのですが、ちょいちょい訳し残しがあったのでお手伝いをして、とりあえず英文は消えました。</p>

<p>ただまあこれで完成かというとそうでもなく、第一段階で「とりあえず」日本語になっただけ。第二段階がまだ残ってます。直訳も多々ありますし記法が統一できてなかったりします。</p>

<p>ですがこれで英語が苦手な方でも読めるかと思いますので読んでみて、変なところがあったらじゃんじゃんPull-Req送って下さい。マスターリポジトリは@massoさんの<a href="https://github.com/g000001/google-common-lisp-style-guide-ja">https://github.com/g000001/google-common-lisp-style-guide-ja</a>です。コメントに元の英文とか訳者のコメントとか残ってるので日本語が訳わかめな状態だったらそっちの方が分り易いかもしれません。</p>

<p>みなさん第二段階のご協力お願いします。</p>
]]></content>
  </entry>
  
</feed>
