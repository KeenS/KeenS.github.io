<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2013-12-06T01:52:34+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gitあれこれ]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/18/some-git-matters/"/>
    <updated>2013-09-18T15:13:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/18/some-git-matters</id>
    <content type="html"><![CDATA[<p>githubで共同作業してたらいろいろ困ったことがあったのでそのときのメモ。はじめてやって困ったことなので経験ある人には常識なのかもしれません。</p>

<!-- more -->


<h2>マスターリポジトリに追従する</h2>

<p>マスターをフォークして自分のレポジトリで作業、終ったらマスターにpull-reqという流れで作業してました。するとマスターが変更されたときに自分のリポジトリに反映させる必要があります。そのときは<a href="http://qiita.com/xtetsuji/items/555a1ef19ed21ee42873">http://qiita.com/xtetsuji/items/555a1ef19ed21ee42873</a>を参考に、</p>

<pre><code>$ git remote add upstream git@github.com:g000001/google-common-lisp-style-guide-ja.git
$ git fetch upstream
$ git merge upstream/master
</code></pre>

<p>でできました。</p>

<h2>Pull-Reqを正しく送る</h2>

<p>まず、masterでpull-req送るととりこまれるまで自分のマスターへのコミットが反映され続けるんですね。それで一回失敗。</p>

<p>じゃあ、ということでブランチを切ることに。するとまた問題が。
まあ、自分がアホっていったらアホなんですけど</p>

<pre><code>     _A_    _B_    _C_
*_/___\A'/___\B'/___\C'_HEAD
</code></pre>

<p>みたいなブランチの作り方してしまいました。<code>A</code>,<code>B</code>,<code>C</code>それぞれでpull-req送ったんですけど当然</p>

<pre><code>A : A
B : B-A'
C : C-B'-A'
</code></pre>

<p>みたいなヒストリのまま送られるわけです。<code>A</code>,<code>B</code>,<code>C</code>は同じファイルの違う箇所への変更なのでヒストリを</p>

<pre><code>       _C_
      /_B_
     /_A_ 
*_/______HEAD
</code></pre>

<p>のようにしたいわけです。<code>magit.el</code>さんにお助け願おうかと思いましたが、そもそも出来るか分らないのでTwitterで投げてみたところ、@mod_poppo氏に助けていただきました。<code>git reset</code>と<code>git cherry-pick</code>でできます。</p>

<p><code>A</code>のブランチは問題ないので<code>B</code>でやると、まず私は<code>magit.el</code>で必要な<code>B</code>のコミットを調べておいて</p>

<pre><code>$ git reset --hard *
</code></pre>

<p>で<code>*</code>に<code>HEAD</code>を戻して<code>A</code>, <code>B</code>で加えた変更を全て破棄。</p>

<pre><code>$ git cherry-pick B-commits
</code></pre>

<p>で<code>B</code>での変更のみ適用</p>

<pre><code>$ git push -f origin branch
</code></pre>

<p>で自分のリポジトリに反映(=pull-reqにも反映)<br/>
としました。<code>*</code>と<code>B-commits</code>はそれぞれリビジョンIDを調べて下さいね。</p>

<p>私の説明じゃ分りづらいと思うので
<a href="http://d.hatena.ne.jp/murank/20110327/1301224770">http://d.hatena.ne.jp/murank/20110327/1301224770</a>にあるすばらしい図を参考にして下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Tutorial]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/03/rails-tutorial/"/>
    <updated>2013-09-03T22:15:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/03/rails-tutorial</id>
    <content type="html"><![CDATA[<p>夜中にコーヒー飲むと眠れなくなりますね。昨晩もコーヒー飲んだら朝まで眠れず、寝たのが朝8時半、起きたのが16時でした。明日提出のレポート終ってないのに…</p>

<p>さて、かなり良いRuby on Railsのチュートリアルを見付けたので紹介します。<br/>
<a href="http://railstutorial.jp">Ruby on Rails チュートリアル：実例を使ってRailsを学ぼう</a></p>

<!-- more -->


<p>これはただのrailsの紹介ではなくてgitだとかherokuだとかを使ってかなり実践的にアプリケーションを作ていくものです。1, 2章で軽くrailsを動かしてみたあと、3章以降でテスト駆動開発でアプリケーションを構築していきます。</p>

<p>このテスト駆動開発の環境がすばらしいのなんのって、最初動かしたとき思わずニヤリとしました。しかも何故か(何も設定してないのに)Emacsのモードバーの色がテストの結果に応じて変わるという。<br/>
マウス操作もキーストロークも無くコードの正しさを教えてくれるのは非常に快適でした。</p>

<p>文体も訳本にありがちな片言の日本語ではなく読み易いですし、Ruby自体の解説もあり、「Scaffoldを使えば簡単にできるんだぜ~」じゃなくてちゃんとMVCの関係とかを解説して身に付いた上で「今後はScaffoldでより手軽に作れるよ」なのでRailsに限らずWeb開発のチュートリアルとして秀逸でした。</p>

<p>私もまだ5章までしか進めてないのですが是非一度試してみて下さい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Githubの変更を追う]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/02/rss-of-github/"/>
    <updated>2013-09-02T00:09:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/02/rss-of-github</id>
    <content type="html"><![CDATA[<p>こんばんは。κeenです。普段、Github上で最新のソースを追ってるプロジェクトは
こまめにgit pullすることで更新を確認してたのですが、別の方法があることに気づきました。</p>

<!-- more -->


<p>単純にWatchという便利な機能もあるのですが、RSSでソースを追うこともできるようです。
RSSのアイコンが見当らなかったのでないものと思ってましたがちゃんとあるんですね。</p>

<p>RSSのAPIはgithub.com/ORG/PROJECT/commits/BRANCH.atomになります。<br/>
たとえばMirahのmasterブランチの最新のコミットを受け取りたかったら、<br/>
<a href="https://github.com/mirah/mirah/commits/master.atom  ">https://github.com/mirah/mirah/commits/master.atom  </a>
になります。試してませんがcommitsのところをissuとかにすればissuを追えるのかもしれません。</p>

<p>watchとの違いは、watchはwikiの変更やissuなど全てを追うところと、通知がメール and/or github上での通知なところですね。</p>

<p>メールじゃなくてgithubの通知でもなくてRSSで受け取りたい方は試してみてはいかがでしょうか。</p>
]]></content>
  </entry>
  
</feed>
