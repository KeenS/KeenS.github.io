<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cim | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/categories/cim/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-09-30T11:30:31+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to CIM]]></title>
    <link href="http://KeenS.github.io/slide/introduction-to-cim.html"/>
    <updated>2014-08-30T04:33:00+09:00</updated>
    <id>http://KeenS.github.io/slide/introduction-to-cim.markdown</id>
    <content type="html"><![CDATA[<h1>Introduction to CIM</h1>

<hr />


<p>κeen(@blackenedgold)</p>

<h2>突然ですが</h2>

<p>Common Lispのスクリプトファイルの実行方法知ってますか？</p>

<p>sbcl</p>

<pre><code>sbcl --script $file
</code></pre>

<p>ecl</p>

<pre><code>ecl -shell $file
</code></pre>

<p>ccl</p>

<pre><code>ccl -e $file -e '(quit)'
</code></pre>

<p>&hellip;</p>

<p><strong>シバン可搬性のあるスクリプトが書けない</strong></p>

<h2>そこで、こんなの書きました</h2>

<hr />


<p>```sh
case &ldquo;$LISP_IMPL&rdquo; in</p>

<pre><code>sbcl*)
    sbcl --script $1
    ;;
clisp*)
    clisp -on-error exit -i $1
    ;;
ecl*)
    ecl -shell $1
    ;;
ccl*)
</code></pre>

<p>&hellip;
```</p>

<h2>でも問題がある</h2>

<hr />


<ul>
<li>どの処理系をバックエンドに使うか</li>
<li>処理系のパスをどう捜すか</li>
<li>そもそもどうやって使ってもらうか</li>
</ul>


<h2>κeenの答え</h2>

<hr />


<blockquote><p>処理系の管理までやってしまおう。
そうしたら一緒に使ってもらえる。</p></blockquote>

<p>＿人人人人人人＿<br/>
＞　CIMの誕生　＜<br/>
￣Y<sup>Y</sup><sup>Y</sup><sup>Y</sup><sup>Y</sup>￣</p>

<h2>CIMとは</h2>

<hr />


<ul>
<li>Common Lisp Implementation Manager</li>
<li>ちむ</li>
<li>Rubyのrvmを強く意識</li>
<li>Common Lisp処理系のインストール、切り替え、コマンドラインインターフェースなど。</li>
<li><code>cim</code>、 <code>cl</code>、 <code>ql</code>コマンドから成る</li>
<li>B Shell スクリプト製(マルチプラットフォーム対応のため)</li>
<li>2013/10くらいからぼちぼち開発</li>
</ul>


<h2><code>cim</code>コマンドについて</h2>

<hr />


<p>インストール</p>

<pre><code>cim install sbcl
</code></pre>

<p>バックエンドの切り替え</p>

<pre><code>cim use sbcl
</code></pre>

<p>現在情報</p>

<pre><code>cim info
</code></pre>

<p>CIMのアップデート</p>

<pre><code>cim get
</code></pre>

<p>など。</p>

<h2><code>cl</code>コマンドについて</h2>

<hr />


<ul>
<li>最初に紹介したシェルスクリプトベース</li>
<li>コマンドラインからCommon Lispを使うことを重視</li>
<li>シバン対応も。</li>
<li>REPLは独自実装(デバッガを黙らせるのが主な目的)</li>
<li>オプションはrubyを意識</li>
</ul>


<h2>少しシバンの話</h2>

<hr \>


<h3>だめな例</h3>

<p>```lisp</p>

<h1>!cl</h1>

<p>(write-line &ldquo;ok&rdquo;)
<code>
</code>lisp</p>

<h1>!/home/kim/.cim/bin/cl</h1>

<p>(write-line &ldquo;ok&rdquo;)
<code>
</code>lisp</p>

<h1>!/usr/bin/env cl -q</h1>

<p>(write-line &ldquo;ok&rdquo;)
```</p>

<h3>推奨される例</h3>

<p>```lisp</p>

<h1>!/bin/sh</h1>

<h1>|</h1>

<p>exec cl &mdash;  &ldquo;$0&rdquo; &ldquo;$@&rdquo;
|#
(write-line &ldquo;ok&rdquo;)
```</p>

<h2><code>ql</code>コマンドについて</h2>

<hr />


<ul>
<li>quicklispのコマンドラインインターフェース</li>
<li>まだ未熟</li>
<li>rubyのgem的な。</li>
<li>最近<code>ql install</code>を高速化</li>
</ul>


<h2>その他の話</h2>

<hr />


<h3>対応処理系</h3>

<ul>
<li>処理系はabcl, alisp, ccl, clisp, ecl, sbcl対応</li>
<li>基本ビルドする</li>
<li>gclはANSIじゃないのでドロップ</li>
<li>lispworks他商用ははインストール出来ないのでドロップ</li>
<li>mkcl対応する？</li>
<li>CMU CLはつらい…</li>
</ul>


<h3>実装</h3>

<ul>
<li>B Shell スクリプトで書いたの失敗だった?</li>
<li>つらい</li>
<li>開発速度に影響</li>
<li>テスト（=品質）にも影響</li>
<li>sbclがじゃじゃ馬でつらい</li>
</ul>


<h3>方針</h3>

<ul>
<li>コマンドラインユーティリティである</li>
<li>基本POSIX以外に依存しない</li>
<li>極力環境に影響しない(rvmがひどいのを嫌って)</li>
<li>clコマンドはあくまで薄いラッパ</li>
<li>asdfも使わない</li>
</ul>


<h2><a href="http://www.slideshare.net/blackenedgold/cim-common-lisp-implementation-manager?ref=http://keens.github.io/blog/2014/01/24/lisp-meet-up-number-13/">半年前</a>から何が変わったか</h2>

<hr />


<ul>
<li>バグ潰し</li>
<li>その他細かな改善

<ul>
<li>ダンプされたコアを読み込む機能</li>
<li>SIGINTをハンドル</li>
<li>ビルド時のログ制御</li>
</ul>
</li>
<li>ぼちぼちテスト書き始めた</li>
</ul>


<h2>将来の話</h2>

<hr />


<ul>
<li>テストと品質の安定化</li>
<li>バイナリ配布の処理系は大人しくバイナリ使う？</li>
<li>最適なビルドオプション</li>
<li>コアダンプ機能</li>
<li>Lispスクリプト(実行可能ファイル)インストーラ</li>
<li>cl21との連携（バイナリ生成）</li>
<li>もうちょっとquicklispとの連携</li>
<li>ユーザー拡張</li>
</ul>


<h2>関連リソース</h2>

<hr />


<ul>
<li><a href="http://pupeno.com/2007/08/26/the-problem-with-lisp/">The problem with Lisp </a> : Lispはコマンドが作れないから流行らないという分析</li>
<li><a href="http://keens.github.io/blog/2014/01/27/cim-explanation/">CIMの解説をしてみる コマンド編 | κeenのHappy Hacκing Blog</a> : CIMの解説記事</li>
<li><a href="https://github.com/fukamachi/shelly">shelly</a> : CIMを使うCLのコマンドラインインターフェース</li>
<li><a href="https://github.com/snmsts/lsp">lsp</a> : CIMのC実装</li>
<li><a href="https://github.com/fukamachi/qlot">qlot</a> : <code>ql</code>よりリッチなquicklispラッパ</li>
</ul>


<p><span style="font-size:600%">以上</span><br/>
何か質問あればどうぞ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CIMの解説をしてみる コマンド編]]></title>
    <link href="http://KeenS.github.io/blog/2014/01/27/cim-explanation/"/>
    <updated>2014-01-27T13:55:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/01/27/cim-explanation</id>
    <content type="html"><![CDATA[<p>先日LTで紹介したCIMが思いの外反響を呼んでる(Githubのstarが15)ので解説でもしてみます。</p>

<p>コマンド編の次は実装編です。これでバグにエンカウントしたときの調査とか完璧ですね。</p>

<!-- more -->


<h1>インストーラ</h1>

<p>READMEにあるように</p>

<pre><code>curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
</code></pre>

<p>で<code>~/.cim/</code>にインストールできます。パスを変えたければ</p>

<pre><code>CIM_HOME=/path/to/cim curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
</code></pre>

<p>でOK。Cシェル系なら</p>

<pre><code>env CIM_HOME /path/to/cim curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
</code></pre>

<p>でしょうか。</p>

<p>ここでは<code>curl</code>を使ってますが<code>wget -O -</code>とか<code>fetch -o -</code>など標準出力に吐ければなんでも良いです。</p>

<p>あ、でも<code>CIM_HOME</code>を指定してインストールしたときにバグがある気がしてきました。今から直します。</p>

<p>CIMを使うにはシェルの起動時に初期化が必要ですが、インストーラが初期化ファイルを読みにいく処理を<code>.*rc</code>に書き出してくれます。Bourne Shellは<code>.profile</code>ですね。<br/>
書き出すファイルは<code>$SHELL</code>を見てます。<code>csh</code>、<code>tcsh</code>、<code>sh</code>、<code>bash</code>、<code>zsh</code>に対応してます。</p>

<p>あと<code>~/.emacs.d/eshell/</code>が存在したら<code>~/.emacs.d/eshell/profile</code>にも初期化処理を書き出します。一時期パスが間違ってて<code>~/.emacs.d/profile</code>に書き出してました。ごめんなさい。<br/>
vimshell(だっけ？)でも初期化さえしてしまえば使えると思うので誰か初期化処理書いて下さい。</p>

<h1><code>cim</code></h1>

<p>とりあえず<code>help</code>見ておきましょう。</p>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help
</span><span class="line">CIM &mdash; Common Lisp Implementation Manager
</span><span class="line">
</span><span class="line">Commands currently available
</span><span class="line">install &lt;impl[-version]&gt; ;; Install the impl.
</span><span class="line">use &lt;impl[-version]&gt; ;; Use specified impl as <code>cl' command's backend.
&lt;/span&gt;&lt;span class="line"&gt;resume [rm] [resume..] ;; Resume suspended installation(s) or give it up.
&lt;/span&gt;&lt;span class="line"&gt;list &amp;lt;command&amp;gt; ;; List available target of &amp;lt;command&amp;gt;
&lt;/span&gt;&lt;span class="line"&gt;reinstall &amp;lt;impl[-version]&amp;gt; ;; Reinstall the impl.
&lt;/span&gt;&lt;span class="line"&gt;clean &amp;lt;impl&amp;gt;|all ;; Clean downloaded archive and src of the impl.
&lt;/span&gt;&lt;span class="line"&gt;distclean &amp;lt;impl&amp;gt;|all ;; Clean built dists.
&lt;/span&gt;&lt;span class="line"&gt;uninstall &amp;lt;impl[-version]&amp;gt; ;; Uninstall the impl.
&lt;/span&gt;&lt;span class="line"&gt;purge &amp;lt;impl&amp;gt;|all ;; Just clean and uninstall the impl.
&lt;/span&gt;&lt;span class="line"&gt;info ;; Display current state.
&lt;/span&gt;&lt;span class="line"&gt;get ;; Upgrade cim itself.
&lt;/span&gt;&lt;span class="line"&gt;version ;; Show the version
&lt;/span&gt;&lt;span class="line"&gt;help &amp;lt;command&amp;gt; ;; Show help for &amp;lt;command&amp;gt;. If no commands are specified, show this help.
&lt;/span&gt;&lt;span class="line"&gt;
&lt;/span&gt;&lt;span class="line"&gt;If you want detailed help, type</code>cim help &lt;command&gt;&lsquo;.</span></code></pre></td>
</tr></table></div></figure></p>

<h2><code>cim install</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help install
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim install &lt;impl[-version]&gt;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Install the given lisp implementation to cim directory.
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If you want to pass specific options to &lsquo;configure&rsquo; script,
</span><span class="line">prefix &lsquo;flags=&rsquo;.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # install sbcl-1.1.14
</span><span class="line"> cim install sbcl-1.1.14
</span><span class="line"><br/>
</span><span class="line"> # install latest clisp with option.
</span><span class="line"> flags=&lsquo;&mdash;with-libsigsegv-prefix=/usr/local&rsquo; cim install clisp
</span><span class="line">
</span><span class="line">To show available lisp implementations, type &lsquo;cim list install&rsquo;.
</span></code></pre></td>
</tr></table></div></figure></p>

<p>インストールします。はい。<code>&lt;impl[-version]&gt;</code>ってのは<code>sbcl</code>とか<code>clisp-2.48</code>とかですね。バージョンを指定しなかったら最新版になります。<code>cim list install</code>でインストール可能なものを表示しますが載ってない古いバージョンとかもインストールできる筈です。多分。</p>

<p><code>configure</code>スクリプトに渡すフラグを指定したいときは<code>flags='flag....' cim install</code>とします。ヘルプにあるように<code>libsigsegv</code>のパスを指定しないとFreeBSDでclispをインストールできなかったので用意しました。</p>

<p>Allegroはライセンス表示した方が良いのかなーとか考えてます。</p>

<h2><code>cim use</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim use &lt;impl[-version]&gt; [&mdash;default]
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Use &lt;impl&gt; as background for &lsquo;cl&rsquo; command. It also affects bare lisp command.
</span><span class="line">If version is not given, use latest version.
</span><span class="line">If &mdash;default is given, use the specified implementation at initial state.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # use the latest sbcl
</span><span class="line"> cim use sbcl
</span><span class="line"> sbcl &mdash;version
</span><span class="line"> &ndash;&gt; SBCL 1.1.14
</span><span class="line"> # use old sbcl
</span><span class="line"> cim use sbcl-1.1.10
</span><span class="line"> sbcl &mdash;version
</span><span class="line"> &ndash;&gt; SBCL 1.1.10
</span><span class="line">
</span><span class="line"> # use ccl-1.9 and set it default
</span><span class="line"> cim use ccl-1.9 &mdash;default
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>cl</code>コマンドのバックエンドの切り替えと処理系のバージョンの両方を切り替えます。処理系の指定の仕方は<code>install</code>に同じ。じゃなかった。<code>install</code>に加えて<code>/bin:/usr/bin:/usr/local/bin</code>にあるものを<code>xxx-system</code>として指定できます。<code>sbcl-system</code>とか。</p>

<p>例えば</p>

<pre><code>cim use clisp-2.48
</code></pre>

<p>ってやると<code>cl</code>コマンドがバックエンドとしてclispのバージョン2.48を使うようになりますし、<code>clisp</code>コマンドのバージョンも2.48になります。この<code>clisp</code>の部分はリンクを貼り替えてて、一つのシェルで変更すると他のシェルにも影響が及ぶ問題があるのでそのうち直します。これ結構面倒なのでそのうちです。<br/>
clisp = clisp-2.48な状態で<code>cim use sbcl</code>するとclisp = clisp-2.48なまま<code>cl</code>のバックエンドがsbclになります。上手く使って下さい。</p>

<p><code>--default</code>を付けると次回からのデフォルト値を指定したものにしつつ<code>cim use</code>します。</p>

<h2><code>cim resume</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help resume
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim resume [rm] &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Resume interrupted installation of &lt;impl&gt;. If &lt;version&gt; is not given, the latest version is used.
</span><span class="line">If &lsquo;rm&rsquo; is given, remove &lt;impl&gt; from &lsquo;resume&rsquo; list.
</span><span class="line">If target is &lsquo;all&rsquo;, do on all the available target.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # resume the installation of clisp with configure flags
</span><span class="line"> flags=&lsquo;&mdash;with-libsigsegv-path=/usr/local&rsquo; cim resume clisp
</span><span class="line">
</span><span class="line"> # remove all the available target.
</span><span class="line"> cim resume rm all
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>cim install</code>がエラー終了したり<code>Ctrl-C</code>で中断したりしたやつを再開してくれるコマンドです。<code>cim install sbcl</code>を中断したなら<code>cim resume sbcl</code>で再開できます。<code>cim resume all</code>で中断された全てのインストールを再開します。終了ステータスは再開してもまたエラーで終了したやつの数になります。</p>

<p><code>cim resume rm sbcl</code>だと<code>cim list resume</code>の結果から<code>sbcl</code>を削除できます。<code>resume</code>はしませんよ。<code>cim resume rm all</code>とかも可能です。</p>

<h2><code>cim list</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help list
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim list &lt;subcommand&gt;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">List available target for subcommand.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # list available lisp implementation to install
</span><span class="line"> cim list install
</span><span class="line">
</span><span class="line"> # show available target for list
</span><span class="line"> cim list list
</span><span class="line">
</span><span class="line"> # targets for subsubcommands are also available
</span><span class="line"> cim list resume rm
</span></code></pre></td>
</tr></table></div></figure></p>

<p>さっきから出てきてるので分かるかと思いますが、可能なターゲットを表示します。将来的には<code>zsh</code>の補完候補にも使うつもりです。そのときは<code>-b, --batch</code>オプションでhuman readableかmachine readableかを分けようかなと。</p>

<h2><code>cim reinstall</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help reinstall
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim reinstall &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Force install already installed implementaion(s). Downloaded archives are resued if available
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If target is &lsquo;all&rsquo;, do on all the available targets.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # reinstall sbcl-1.1.14
</span><span class="line"> cim reinstall sbcl-1.1.14
</span><span class="line"><br/>
</span><span class="line"> # reinstall all installed lisp impls
</span><span class="line"> cim reinstall all
</span><span class="line">
</span><span class="line">To show available lisp implementations, type &lsquo;cim list reinstall&rsquo;.
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>cim install</code>は既にインストールされているものはインストールできないのですが、<code>reinstall</code>を使えば可能です。ダウンロードしたアーカイブがあればそれを使います。なければダウンロードから始めます。<code>all</code>は察しのようにインストール済のものを全て<code>reinstall</code>します。</p>

<h2><code>cim clean</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help clean
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim clean &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Remove donwloaded archives and extracted sources of the given lisp implementations.
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If target is &lsquo;all&rsquo;, do on all the available targets.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # clean sbcl-1.1.14
</span><span class="line"> cim clean sbcl-1.1.14
</span><span class="line"><br/>
</span><span class="line"> # clean all installed lisp impls
</span><span class="line"> cim clean all
</span><span class="line">
</span><span class="line">To show available lisp implementations, type &lsquo;cim list clean&rsquo;.
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>cim install</code>は基本的に不要なものも削除しないので、それが嫌なら<code>clean</code>を使いましょうというスタンスです。アーカイブとソースを削除します。</p>

<h2><code>cim distclean</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$cim help distclean
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim distclean &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Clean built files of the given lisp implementation. It doesn&rsquo;t mean uninstall.
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If target is &lsquo;all&rsquo;, do on all the available targets.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # distclean sbcl-1.1.14
</span><span class="line"> cim distclean sbcl-1.1.14
</span><span class="line"><br/>
</span><span class="line"> # distclean all installed lisp impls
</span><span class="line"> cim distclean all
</span><span class="line">
</span><span class="line">To show available lisp implementations, type &lsquo;cim list distclean&rsquo;.
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>cim clean</code>より控えめなコマンドです。コンパイルするときに<code>make</code>で生成されたファイルを削除します。<code>make clean</code>的な。</p>

<h2><code>cim uninstall</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help uninstall
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim uninstall &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Uninstall the given lisp implementaion(s). It does&rsquo;t remove donwloaded archives and extracted sources.
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If target is &lsquo;all&rsquo;, do on all the available targets.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # uninstall sbcl-1.1.14
</span><span class="line"> cim uninstall sbcl-1.1.14
</span><span class="line"><br/>
</span><span class="line"> # uninstall all installed lisp impls
</span><span class="line"> cim uninstall all
</span><span class="line">
</span><span class="line">To show available lisp implementations, type &lsquo;cim list uninstall&rsquo;.
</span></code></pre></td>
</tr></table></div></figure></p>

<p>アンインストールします。はい。ただしダウンロードしたアーカイブとソースは削除しません。</p>

<h2><code>cim purge</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help purge
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim purge &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Uninstall and clean up downloaded files of the given lisp implementation.
</span><span class="line">This command is equivalent to &lsquo;clean&rsquo; and &lsquo;uninstall&rsquo;.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # purge the latest sbcl
</span><span class="line"> cim purge sbcl
</span><span class="line">
</span><span class="line">To show available target for &lsquo;purge&rsquo;, type &lsquo;cim list purge&rsquo;
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>uninstall</code>のアーカイブとソースを削除する版です。</p>

<h2><code>cim info</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help info
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim info
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Display information for current cim. It includes environment variables that cim uses, what current and default lisp implementation is, what version of each implementation is used, and where system lisp is.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> # display info
</span><span class="line"> cim info
</span></code></pre></td>
</tr></table></div></figure></p>

<p>現在の状態を表示します。こんな感じ。</p>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim info
</span><span class="line">CIM_ID = 22176
</span><span class="line">CIM_HOME = /home/kim/.cim
</span><span class="line">
</span><span class="line">current lisp = sbcl-system
</span><span class="line">default lisp = sbcl-system
</span><span class="line">
</span><span class="line">abcl = abcl-1.2.1
</span><span class="line">alisp = alisp-9.0
</span><span class="line">ccl = ccl-1.9
</span><span class="line">clisp = clisp-2.49
</span><span class="line">ecl = ecl-13.5.1
</span><span class="line">gcl = gcl-2.6.9
</span><span class="line">sbcl = sbcl-system
</span><span class="line">
</span><span class="line">sbcl-system = /usr/local/bin/sbcl
</span><span class="line">gcl-system = /usr/bin/gcl
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>CIM_ID</code>ってのは<code>cim</code>がそれぞれのシェルの状態を管理するためのIDです。まあ、そのシェルのプロセスIDですね。逆にプロセスIDの取得と環境変数の設定さえできれば<code>cim</code>は動かせるのでEmacsでも簡単に動きます。</p>

<h2><code>cim get</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help get
</span><span class="line">Usage:
</span><span class="line"> cim get
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Upgrade to the latest cim.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> cim get
</span></code></pre></td>
</tr></table></div></figure></p>

<p>cim自身のアップデートです。なんでこんな名前かというと<code>rvm</code>がそうだからです。現状はgithubのKeenS/CIMのmasterからとってきます。stable版ができたらstableに変更しますね。実はブランチを指定してとってくる方法もあったりはします。<code>cim get --branch stable</code>か <code>CIM_INSTALL_BRANCH=stable cim get</code>です。まだブランチが無いので意味ないんですけどね。</p>

<p>この辺で気付いたかもしれませんが結構環境変数で制御できるようにデザインされてます。rubyがそんな感じだからです。</p>

<h2><code>cim version</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help version
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim version
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Show current cim&rsquo;s version
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> cim version
</span></code></pre></td>
</tr></table></div></figure></p>

<p>めちゃくちゃバグがあるのにversionが1.0.0に見えるの気のせいです。きっと100点中の1点なんですよ。</p>

<h2><code>cim help</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help help
</span><span class="line">Help for &lsquo;help&rsquo; is not prepared, sorry.</span></code></pre></td>
</tr></table></div></figure></p>

<p>あー。<code>help</code>のhelp用意してなかったー。まあ、上で使ったのが全てです。</p>

<h1><code>cl</code></h1>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cl -h
</span><span class="line">Usage: cl [switchs] [&mdash;] [programfile] [argumensts]
</span><span class="line">
</span><span class="line">-C DIR set <em>default-pathname-defaults</em> DIR.
</span><span class="line">-d, &mdash;debug set debugging flags (push :debug into <em>features</em>)
</span><span class="line">-e, &mdash;eval SEXP one line of script. Several -e&rsquo;s are allowed. Omit [programfile]
</span><span class="line">-f, &mdash;load FILE load the FILE
</span><span class="line">-i EXT edit <em>argv</em> files in place and make backup with the extension .EXT
</span><span class="line">-l LIBRARY quickload the LIBRARY
</span><span class="line">-L LIBRARY quickload and use-package the LIBRARY
</span><span class="line">-r, &mdash;repl run repl
</span><span class="line">-q, &mdash;no-init do not load $CIM_HOME/init.lisp
</span><span class="line">&mdash;no-rl do not use rlwrap. This is effective only when &mdash;repl is specified
</span><span class="line">&mdash;no-right do not display right prompt. This is effective only when &mdash;repl is specified
</span><span class="line">&mdash;no-color do not use color. This is effective only when &mdash;repl is specified
</span><span class="line">-h, &mdash;help print this help
</span><span class="line">-v, &mdash;version print the version
</span><span class="line">
</span><span class="line">If neither programfile, -e (&mdash;eval) nor -r (&mdash;repl) are specified, cl reads scripts from the standard input and then eval them.
</span></code></pre></td>
</tr></table></div></figure></p>

<p>まあ、見たら分かりますね。ruby由来のオプションとShelly由来のオプションと私の好みのオプションがあります。<code>cl</code>を起動する方法は</p>

<ul>
<li><code>cl script.lisp</code></li>
<li><code>cl &lt; script.lisp</code></li>
<li><code>cl -e sexp</code></li>
<li><code>cl -r</code></li>
</ul>


<p>です。<code>cl script.lisp</code>はシェバン(最初の行が<code>#!</code>なもの)を無視します。</p>

<p>また、これも環境変数<code>LISP_IMPL</code>でバックエンドを制御できます。これはShelly由来ですね。</p>

<p>もう一つ、デバッガは起動しません。スクリプトやワンライナーはエラーを吐いて終了して欲しいですし次に述べますがREPLも目的からしてデバッガは相応しくないと思うからです。因みにですが<code>-d</code>オプションをつけてもデバッガは起動しません。理由はオプション解析のほとんどをLispに任せているので起動時のオブションである<code>--disable-debugger</code>を制御できないからです。需要が高そうならシェルスクリプト内で解析して頑張ってみます。</p>

<p>あ、<code>-c, --compile FILE</code>オプションつけ忘れてた。いつか入れます。<code>(compile-file FILE)</code>で可能でしょうからすぐに入るはずです。</p>

<h2><code>cl -r</code></h2>

<p>一応開発向けではなくて、ちょっと試したいときや初心者が本を片手に動かすときを想定して作ってます。エラーはメッセージのみ表示。ちょっと試したいときはあんまりデバッガを必要としませんしスタックトレースもどうせ深さ1~2なのであまり必要でないからです。なにより初心者にとってデバッガは何をして良いか分かりませんし覚えても処理系毎に操作が違います。その辺を分り易い統一インターフェースを作ることも考えたのですが「それって<code>swank</code>」って結論に至ったのでこのままです。</p>

<h1><code>ql</code></h1>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">ql &mdash; Command line interface for quicklisp
</span><span class="line">
</span><span class="line">Commands currently available
</span><span class="line">deps &lt;system&gt; ;; Install dependencies of &lt;system&gt;.
</span><span class="line">help [command] ;; Show help.
</span><span class="line">install[quickload] &lt;system&gt;&hellip; ;; Install given system.
</span><span class="line">list {remote | local} ;; List available/installed systems.
</span><span class="line">search[system-propos] &lt;keyword&gt; ;; Search quicklisp.
</span><span class="line">uninstall &lt;system&gt; ;; Uninstall system.
</span><span class="line">update [system] ;; Update dist info and installed systems.</span></code></pre></td>
</tr></table></div></figure></p>

<p>一番未完成なコマンドです。主な理由は私が<code>quicklisp</code>の使い方を分かってないからです。</p>

<h2><code>ql deps</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help deps
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql deps [&mdash;path &lt;path&gt;] &lt;system&gt;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Install dependencies of given system. If path is specified, install dependencies there.
</span><span class="line">Once you run &lsquo;ql &mdash;path &lt;path&gt; deps&rsquo;, you don&rsquo;t need to specify &lsquo;&mdash;path&rsquo; because the path is written out to &lsquo;.quicklisp-path&rsquo; in current directory.
</span><span class="line">You can run &lsquo;ql deps&rsquo; for a local system if &lsquo;.asd&rsquo; file is in current directory.
</span><span class="line">This command is useful when you want to separate quicklisps for local project.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql deps &mdash;path ./quicklisp my-project
</span></code></pre></td>
</tr></table></div></figure></p>

<p>rubyの<code>bundler</code>を参考に作りました。<code>Gemfile</code>に対応する<code>QLfile</code>でも読もうかと思いましたが良く考えたら<code>.asd</code>で十分じゃんとの思いに至ったのでカレントパスの<code>asd</code>ファイルを読みます。<br/>
が、奴は依存システムのバージョンまでは指定できなかった気がするのでやっぱり必要な気がします。</p>

<p><code>ql deps --path ./ql myapp</code>とすると依存システム(+新たな<code>quicklisp</code>本体)を<code>./ql</code>にインストールしてくれます。<code>quicklisp</code>本体のインストールは不要ですがどうやったら回避できるかは今模索中です。<br/>
<code>--path</code>の位置が<code>cim use --default</code>と違うのでご注意下さい。これは主に内部で使ってる<code>parse-option</code>の欠陥に由来します。<br/>
一度指定すると<code>.quicklisp-path</code>にパスを書き出してくれるので次回からは必要なくなります。カレントディレクトリに複数の<code>asd</code>ファイルがあってそれぞれでパスを使い分けたいとかはできません。<br/>
あと、最大の欠陥として<code>./ql</code>にシステムをインストールしてもそれを読み込みにいくコマンドがないので実用性ゼロです← まあ、<code>cl</code>あたりを弄ってカレントパスに<code>.quicklisp-path</code>があったら読みにいくようにします。その辺は<code>.lisp-impl</code>とかも含めて考えます。</p>

<h2><code>ql help</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help help
</span><span class="line">Help for &lsquo;help&rsquo; is not prepared, sorry.
</span></code></pre></td>
</tr></table></div></figure></p>

<p>こいつもhelp用意してなかった。まあ、良いや。</p>

<h2><code>ql install</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help install
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql install &lt;system&gt;&hellip;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Install given system(s) to $CIM_HOME/quicklisp.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> # install clack
</span><span class="line"> ql install clack
</span></code></pre></td>
</tr></table></div></figure></p>

<p>なんでこいつがhelpの先頭に居ないんでしょうね。<code>cim</code>に比べて適当ですね。</p>

<p><code>ql quickload</code>っていう別名も持ってます。<code>ql help</code>には<code>quickload</code>が本名で<code>install</code>がエイリアスって書いてありましたが実装ミスりました。</p>

<p>名前の通り<code>ql:quickload</code>します。<code>system</code>は複数指定できます。</p>

<h2><code>ql list</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql list
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql list {remote | [local]}
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">List installed systems. if &lsquo;remote&rsquo; is given, list all the available systems. &lsquo;ql list local&rsquo; is equivalent to &lsquo;ql list&rsquo;.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql list remote
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>cim list</code>と使い方が違ってアレですね。現状<code>quicklisp</code>に登録されているもの全てを表示する<code>ql list remote</code>とインストールしたものだけを表示する<code>ql list [local]</code>があります。<code>ql deps</code>でパスを指定したやつらにも使いたかったのですが方法が分かんないのでとりあえず先送りです。</p>

<h2><code>ql search</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help search
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql search &lt;keyword&gt;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Search quicklisp for &lt;keyword&gt;.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql search http
</span></code></pre></td>
</tr></table></div></figure></p>

<p>別名<code>system-apropos</code>。別名と本名が<code>ql help</code>と違うのも単に<code>ql:system-apropos</code>を呼ぶのも<code>ql install</code>と同じです。出力結果をもうちょっと制御したいなと思ってます。</p>

<h2><code>ql uninstall</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help uninstall
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql uninstall &lt;system&gt;&hellip;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Uninstall given system(s).
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql uninstall caveman clack
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>ql:uninstall</code>に同じ。以上。</p>

<h2><code>ql update</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help update
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql update [client]
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Update installed systems. If target &lsquo;client&rsquo; is given, update quicklisp itself.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql update client
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>ql:update-all-dists</code>か<code>ql:update-client</code>かを選べます。最初はsystem毎にアップデートしたかったのですが無理っぽいので止めました。</p>

<h1>おわりに</h1>

<p>とりあえずCIMの機能はこれで全部です。あ、開発用に<code>cim reset</code>とかありますけど使わないで下さい。とういうか使うなよ。絶対使うなよ。</p>

<p>これら使ってみてバグがあったらgithubのissueに投げるなりtwitterで報告するなりして下さい。</p>

<p>ところでCIMは私はちむと読んでます。しー・あい・えむと読む人も居るようです。何でも良いです。プロジェクトとしてのちむとコマンドとしてのちむを区別するためにコマンドは小文字で<code>cim</code>、そして<code>cim</code>、<code>cl</code>、<code>ql</code>を含んだプロジェクトは大文字でCIMと書くことにします。今考えました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #13でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13/"/>
    <updated>2014-01-24T02:29:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13</id>
    <content type="html"><![CDATA[<p>もう12時回ったので昨日になってしまいましたが <a href="http://atnd.org/events/46746#comments">Lisp Meet Up presented by Shibya.lisp #13</a>に参加してLTしてきたので報告(?)エントリです。</p>

<!-- more -->


<p>先月東京に戻ってきた深町さんがめちゃくちゃ宣伝してたせいか20人参加希望があり、19人参加しました。</p>

<p>自己紹介ではClojureが多いなーってのとRubyistが混ってたりしたのが印象的でした。Emacs Lispの人も居たり。</p>

<p>LTは一人目がにとり(深町英太郎 (fukamachi))(@nitro_idiot)さん。今更ながら呼び方に困りましたね。内容はO/Rマッパーの <a href="https://github.com/fukamachi/integral"><code>integral</code></a>の機能と実装について。<br/>
非Common Lisperが多い中Meta Object Protocolについて色々説明したりと大変そうでした。私はCommon LisperなのでMOPにそんな使い方がるのかとか結構面白かったです。<br/>
<s>スライドはまだ上げてないみたいです。そのうち上がるでしょう。</s>上がりました。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30362150" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/fukamachi/lisp-meet-up-presented-by-shibuyalisp-13" title="Integral - New O/R Mapper for Common Lisp">Integral – New O/R Mapper for Common Lisp</a></strong> from <strong><a href="http://www.slideshare.net/fukamachi">fukamachi</a></strong></p>

<p>二人目が私。最近作ってる <a href="https://github.com/KeenS/CIM"><code>CIM</code></a>についてです。スライド見るのが速いですね。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30338391" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/blackenedgold/cim-common-lisp-implementation-manager" title="CIM - Common Lisp Implementation Managerを作りました">CIM – Common Lisp Implementation Managerを作りました</a></strong> from <strong><a href="http://www.slideshare.net/blackenedgold">blackenedgold</a></strong></p>

<p>実際にそれぞれのコマンドを動かしてみた結果、予想してなかったエラーなとがあったものの割と聴衆の反応は良かったです。あとはPure Bourne Shell Scriptで挑んで爆死した話とかしたりですね。「詳解シェルスクリプト」を読んだり<code>man</code>ページ読んだりして頑張ったんですよ。</p>

<p>それが終わったら一旦休憩。そしたらわざわざ深町さんが私のところに来て下さって「Shellyより良いプロダクトになると思います。頑張って下さい。」との御言葉を頂きました。非常に嬉しかったです。私が作ったものが認められた。しかも着想の元になったShellyの作者の深町さんから。<br/>
でもその後実際に何人か使ってみてくれたのですが、バグが立て続けに3つくらい発覚して「…これ、テスト必要ですね」と絶句。分かってます。分かってますけど難しいんです泣。<br/>
他はgithubでCIMを探そうとしてる方が居たんですが同じ名前のレポジトリがめちゃくちゃあって検索性悪いなとか。何故か私のハンドルネームの最初の文字がk(ケー)ではなくκ(カッパ)なのを知ってたり。</p>

<p>その後の懇親会では向かいが深町さん、隣が佐野さん(実践Common Lispの訳者)で、Common Lispの今後とか色々な話をしてました。 <a href="http://redmonk.com/sogrady/2014/01/22/language-rankings-1-14/">ここ</a>のグラフでCommon Lispがありえない位置にいるしどうやったら普及するんだろうねーとか。</p>

<p>運営のchikuさん potixさん、発表を聞いてCIMを試してくれたりGithubにstarくれたりしたみなさんありがとう御座いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ここ１ヶ月くらいの近況]]></title>
    <link href="http://KeenS.github.io/blog/2013/11/13/what-recent/"/>
    <updated>2013-11-13T21:20:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/11/13/what-recent</id>
    <content type="html"><![CDATA[<p> #isucon 参戦記がフォロワーの多い@tagomorisさんとか@nitro_idiotさんとかにツイートされて普段の数十倍のアクセスが来てテンション上がったので近況書きますね。</p>

<!-- more -->


<h2>isuconの勉強</h2>

<p>件の記事でも書いてますけどMySQLとNginXとCapistranoの勉強しました。SQLって書けると案外楽しいですね。あとN+1問題を学んだり、<code>IF EXISTS TRRIGER</code>的な文がなくて殺そうかと思ったり。</p>

<p>NginXはキャッシュとかですね。キャッシュキーに<code>$cookie_isucon_session</code>とか入れてログインしてるユーザーが来ても対応できたので良かったです（小並感</p>

<p>Capistranoはどうせだからと3.0を使ったのですが調べても2.x時代の情報ばっかり引っ掛かって苦労しました。その代わり、isucon本戦では複数サーバーへのデプロイ機能を存分に使わせて頂きました。ほぼログインしなくても問題ないですね。</p>

<p>例えば</p>

<p><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&lsquo;my app&rsquo;</span>
</span><span class="line"><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&lsquo;git@bitbucket.org:me/myrepo.git&rsquo;</span>
</span><span class="line"><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&lsquo;/home/me/app&rsquo;</span>
</span><span class="line"><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class="line"><span class="n">set</span> <span class="ss">:deploy_via</span><span class="p">,</span> <span class="ss">:remote_cache</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">namespace</span> <span class="ss">:nginx</span> <span class="k">do</span>
</span><span class="line"> <span class="n">task</span> <span class="ss">:reload</span> <span class="k">do</span>
</span><span class="line"> <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line"> <span class="n">execute</span> <span class="ss">:sudo</span><span class="p">,</span> <span class="s1">&lsquo;service nginx reload&rsquo;</span>
</span><span class="line"> <span class="k">end</span>
</span><span class="line"> <span class="k">end</span>
</span><span class="line">
</span><span class="line"> <span class="n">task</span> <span class="ss">:restart</span> <span class="k">do</span>
</span><span class="line"> <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line"> <span class="n">execute</span> <span class="ss">:sudo</span><span class="p">,</span> <span class="s1">&lsquo;service nginx restart&rsquo;</span>
</span><span class="line"> <span class="k">end</span>
</span><span class="line"> <span class="k">end</span>
</span><span class="line">
</span><span class="line"> <span class="n">task</span> <span class="ss">:start</span> <span class="k">do</span>
</span><span class="line"> <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line"> <span class="n">execute</span> <span class="ss">:sudo</span><span class="p">,</span> <span class="s1">&lsquo;service nginx start&rsquo;</span>
</span><span class="line"> <span class="k">end</span>
</span><span class="line"> <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure></p>

<p>こんな感じです。で、もう一つ</p>

<p><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="n">set</span> <span class="ss">:stage</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class="line"><span class="n">server</span> <span class="s1">&lsquo;123.4.5.67&rsquo;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&lsquo;me&rsquo;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="s1">&lsquo;web&rsquo;</span>
</span><span class="line"><span class="n">server</span> <span class="s1">&lsquo;123.4.5.68&rsquo;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&lsquo;me&rsquo;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="s1">&lsquo;web&rsquo;</span>
</span><span class="line"><span class="n">server</span> <span class="s1">&lsquo;123.4.5.69&rsquo;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&lsquo;me&rsquo;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="s1">&lsquo;web&rsquo;</span>
</span><span class="line"><span class="n">set</span> <span class="ss">:ssh_options</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line"> <span class="ss">keys</span><span class="p">:</span> <span class="sx">%w(~/.ssh/id_rsa)</span><span class="p">,</span>
</span><span class="line"> <span class="n">forward_agent</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class="line"> <span class="n">auth_methods</span><span class="p">:</span> <span class="sx">%w(publickey)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td>
</tr></table></div></figure></p>

<p>を書いておけばこの3台のサーバーに一斉にデプロイしてくれます。(上の例だとnginxですが、まあいいでしょう。)</p>

<h2>Shibuya.lisp</h2>

<p>Lisp Meet Up #10で発表してきました。内容は<code>fluentd</code>をCommon Lispから使う話。<br/>
スライド</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/27444839" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/blackenedgold/common-lisp-27444839" title="Common Lisp でビッグデータを作ろう">Common Lisp でビッグデータを作ろう</a></strong> from <strong><a href="http://www.slideshare.net/blackenedgold">blackenedgold</a></strong></p>

<p>Ustreamは見つかりませんでした。てへペロ</p>

<p>恐らく、<code>Log4CL</code>はやりたいことと目的が違いますね。全く別のロギングフレームワークを作るのが良さげな気がします。isuconの懇親会で開発者の@tagomorisさんにアドバイスも頂きましたし作るかもしれません。</p>

<h2>mpd</h2>

<p><a href="/blog/2013/09/29/mplayer/">以前、mplayer2が正常に動作しないとかぼやいて</a>ましたが、結局あきらめました。で、代わりに <a href="http://www.musicpd.org/">Music Player Daemon(MPD)</a>なるものを見付けて、しかもRaspberry Piで動き、iPod/Androidから操作できるとのことで、導入しました。</p>

<p>MPDはまさしくRaspberry Piのような機器向で、音楽を鳴らすサーバーと操作するクライアントが完全に分かれてます。</p>

<pre><code>$ sudo apg-get install mpd mpc
</code></pre>

<p>とかでRSPiに入れた気がします。クライアントはAndroidは<code>MPDroid</code>、iPodは<code>MPoD</code>っていうアプリです。</p>

<p><code>scp</code>で手元の曲をRSPiコピーし、iPodから繋ぐも曲が見えない。色々試した結果、<code>scp</code>でコピーしたときにパーミッションの問題が出てたようなのでそこを解決したらちゃんと動きました。</p>

<p>動画(iPod)</p>

<iframe width="560" height="315" src="//www.youtube.com/embed/x5CWtXbCkqo" frameborder="0" allowfullscreen></iframe>


<p>黒ばっかで見づらくて申し訳ありません。iPodからではなくスピーカから音が出てるのが分かりますかね？思ったより音が入ってないので分りづらいですね（汗</p>

<h2>CIM</h2>

<p><a href="https://github.com/fukamachi/shelly/">Shelly</a>を使って <a href="https://gist.github.com/KeenS/7059301">Common Lispスクリプトをexecutableにしよう</a>ってのをやってましたが少しshellyが求めているのと違うようだったので「シェルスクリプトでshelly的な物を実装しよう！ついでにrvmみたいにバージョン管理できたら嬉しいな！！」って思い付きで <a href="https://github.com/KeenS/CIM">Common Lisp Implementation Manager(CIM)</a>を作り始めました。まだCLISP, ECL, GCLのインストールぐらいしかできてません。</p>

<p>初めてシェルスクリプトを書き、初めてBourne Shellを触り(普段はzsh)、早くも挫折しそうです。今めっちゃシェルスクリプトの勉強してます。目的はImplementationの管理じゃなくて統一インターフェースの<code>cl</code>コマンドなのにそこが全然進んでないですね。<code>ql</code>に至っては1行も書いてない。まあ、<code>cl</code>を使って書くつもりなので<code>cl</code>が出来ないことにはどうしようもないんですが。</p>

<p><code>syset</code>とかネーミングセンスが無かったり(発音しずらい。シセット…サイセットって読もうかな)ダウンロードしたアーカイブのチェックサムとか全く見てなかったり色々ツッコみたくなりますが温かい目で見て下さい。気に入ったらpull-reqとかして下さい。</p>

<h2>Octomacs</h2>

<p>Octomacsに一回pull-req送ってからコミッタ気取りのκeenですが、<code>octomacs-preview</code>と<code>octomacs-deploy</code>を実装しました。<code>C-u</code>をつけると<code>generate</code>が付いてきます。テストをしてない（できない？）+サーバーを殺す(<code>octomacs-preview-quit</code>とかの名前かなあ。現状は<code>*octomacs preview*</code>バッファを<code>kill-buffer</code>すればいい)コマンドを実装してないのでpull-reqは投げてませんが使ってみたい方は <a href="https://github.com/KeenS/octomacs">こちら</a>をどうぞ。まあ、今からpushするんですがね。ちゃんとこの記事も<code>octomacs-new-post</code>から始まり、<code>octomacs-preview</code>で確認しつつ<code>octomacs-deploy</code>でデプロイしました。あとは過去の記事を編集する<code>octomacs-edit</code>を実装すれば完璧ですね。</p>

<p>こんなかんじです。<code>CIM</code>がんばります。</p>
]]></content>
  </entry>
  
</feed>
