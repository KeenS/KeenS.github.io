<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Mlyacc on κeenのHappy Hacκing Blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>/categories/mlyacc/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Sat, 31 Jan 2015 11:55:51 UTC</updated>
    
    <item>
      <title>mlyaccを使ってみてハマったところ</title>
      <link>/blog/2015/01/31/mlyaccwotsukattemitehamattatokoro</link>
      <pubDate>Sat, 31 Jan 2015 11:55:51 UTC</pubDate>
      
      <guid>/blog/2015/01/31/mlyaccwotsukattemitehamattatokoro</guid>
      <description>

&lt;p&gt;κeenです。前回の&lt;a href=&#34;http://keens.github.io/blog/2014/12/10/mllexwoshi-tutemiru/&#34;&gt;mllexの記事&lt;/a&gt;の続きです。今回はmlyaccを使ってみました。&lt;/p&gt;

&lt;p&gt;前回はprologをパースするためにこのようなmllexのコードを書いたのでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;datatype lexresult =
         Comment of string
       | LeftParen
       | RightParen
       | LeftBracket
       | RightBracket
       | Comma
       | Dot
       | Bar
       | Medaka
       | UnderScore
       | String of string
       | Number of int
       | Variable of string
       | EOF

val linenum = ref 1
val error = fn x =&amp;gt; print (x ^ &amp;quot;\n&amp;quot;)
val eof = fn () =&amp;gt; EOF
%%
%structure PrologLex                      

alphanum = [A-Za-z0-9];
alpha    = [A-Za-z];
digit    = [0-9];
ws       = [\ \t\n];

%%

{ws}+            =&amp;gt; (lex());
%(.*)\n          =&amp;gt; (Comment yytext);
&amp;quot;(&amp;quot;              =&amp;gt; (LeftParen);
&amp;quot;)&amp;quot;              =&amp;gt; (RightParen);
&amp;quot;[&amp;quot;              =&amp;gt; (LeftBracket);
&amp;quot;]&amp;quot;              =&amp;gt; (RightBracket);
&amp;quot;,&amp;quot;              =&amp;gt; (Comma);
&amp;quot;.&amp;quot;              =&amp;gt; (Dot);
&amp;quot;|&amp;quot;              =&amp;gt; (Bar);
&amp;quot;:-&amp;quot;             =&amp;gt; (Medaka);
&amp;quot;_&amp;quot;              =&amp;gt; (UnderScore);
[a-z]{alphanum}* =&amp;gt; (String yytext);
{digit}+         =&amp;gt; (Number (foldl (fn(a, r)=&amp;gt; (ord(a)-ord(#&amp;quot;0&amp;quot;)) + 10*r) 0 (explode yytext)));
[A-Z]{alphanum}* =&amp;gt; (Variable yytext);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでトークナイズしたトークンをパースすることを考えます。結果はAST作るのが面倒なので文字列にします。&lt;/p&gt;

&lt;p&gt;とりあえずコードを晒してから解説します。prologの仕様を読まずに書いたので用語や文法は誤りを含みます。今度直すので今回はこれで勘弁して下さい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
%%
%name PrologParser
%pos int

%term  Comment of string | LeftParen | RightParen | LeftBracket | RightBracket | Comma | Dot | Bar | Medaka | UnderScore | Number of int | String of string | Variable of string | EOF

%nonterm EXP of string | LIST of string | LISTEXPS of string | TOPDEFINITION of string | SUBDEFINITIONS of string | DEFINITION of string | ARG of string | NAME of string | STMT of string | ATOM of string | START of string

%left Comma
%right Bar
%eop EOF
%noshift EOF
%nodefault

%%

START : STMT (STMT)

STMT           : Comment STMT       (Comment ^ &amp;quot;\n&amp;quot; ^ STMT)
               | TOPDEFINITION STMT (TOPDEFINITION ^ &amp;quot;\n&amp;quot; ^ STMT)
               | (&amp;quot;&amp;quot;)

TOPDEFINITION  : DEFINITION Dot                       (DEFINITION ^ &amp;quot;.&amp;quot;)
               | DEFINITION Medaka SUBDEFINITIONS Dot (DEFINITION ^ &amp;quot;:-\n&amp;quot; ^ SUBDEFINITIONS ^ &amp;quot;.&amp;quot;)

SUBDEFINITIONS : DEFINITION Comma SUBDEFINITIONS      (DEFINITION ^ &amp;quot;,\n&amp;quot; ^SUBDEFINITIONS)
               | DEFINITION                           (&amp;quot;  &amp;quot; ^ DEFINITION)

DEFINITION     : NAME ARG (NAME ^ ARG)

NAME           : String     (String)

               
ARG            : LeftParen EXP RightParen (&amp;quot;(&amp;quot; ^ EXP ^ &amp;quot;)&amp;quot;)
               
               
EXP            : EXP Comma EXP  (EXP1 ^ &amp;quot;, &amp;quot; ^ EXP2)
               | LIST           (LIST)
               | ATOM           (ATOM)

LIST           : LeftBracket LISTEXPS RightBracket ( &amp;quot;[&amp;quot; ^ LISTEXPS ^ &amp;quot;]&amp;quot;)

LISTEXPS       : ATOM Bar LISTEXPS (ATOM ^ &amp;quot; | &amp;quot; ^ LISTEXPS)
               | ATOM (ATOM)

ATOM           : UnderScore               (&amp;quot;_&amp;quot;)
               | Number                   (Int.toString Number)
               | String                   (String)
               | Variable                 (Variable)
               | LeftBracket RightBracket (&amp;quot;[]&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;全体はやはり&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;補助コード
%%
補助ルール
%%
パースルール
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。&lt;/p&gt;

&lt;p&gt;トークンに切り出す部分がないので補助コードはあまり書く必要はないようです。ASTを組み立てる時に必要なことがあるのかな？&lt;/p&gt;

&lt;p&gt;補助ルールは、主なものは終端記号(term)と非終端記号(nonterm)の記述です。パーサに馴染のない人には聞き慣れない言葉かもしれませんが、ASTの葉が終端記号で、節が非終端記号です。あとはパースの終わりの記号にeop、パースの区切にnonshiftを指定しましょう。パースの区切はEOFの他にREPLならNewlineなども候補かもしれません。posの型も必須です。leftやrightは中置演算子があればそれの結合の左右を指定します。複数書くと後の方が優先順位が高くなるようです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%left Add Sub
%left Mul Div
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように。&lt;/p&gt;

&lt;p&gt;パースルールは見て察して下さい。&lt;/p&gt;

&lt;p&gt;これをprolog.yaccなどと名前をつけて(.grmがよく使われるそうですが。)、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mlyacc prolog.yacc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とするとprolog.yacc.smlとprolog.yacc.sigが出来ます。シグネチャは.sigが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;signature PrologParser_TOKENS =
  sig
    type (&#39;a,&#39;b) token
    type svalue
    val EOF : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
    val Variable : string * &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
    val String : string * &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
    val Number : int * &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
    val UnderScore : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
    val Medaka : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
    val Bar : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
    val Dot : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
    val Comma : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
    val RightBracket : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
    val LeftBracket : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
    val RightParen : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
    val LeftParen : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
    val Comment : string * &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
  end
signature PrologParser_LRVALS =
  sig
    structure Tokens :
      sig
        type (&#39;a,&#39;b) token
        type svalue
        val EOF : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
        val Variable : string * &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
        val String : string * &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
        val Number : int * &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
        val UnderScore : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
        val Medaka : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
        val Bar : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
        val Dot : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
        val Comma : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
        val RightBracket : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
        val LeftBracket : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
        val RightParen : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
        val LeftParen : &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
        val Comment : string * &#39;a * &#39;a -&amp;gt; (svalue,&#39;a) token
      end
    structure ParserData :
      sig
        type pos
        type svalue
        type arg
        type result
        structure LrTable : &amp;lt;sig&amp;gt;
        structure Token : &amp;lt;sig&amp;gt;
        structure Actions : &amp;lt;sig&amp;gt;
        structure EC : &amp;lt;sig&amp;gt;
        val table : LrTable.table
        sharing LrTable = Token.LrTable
      end
    sharing type Tokens.svalue = ParserData.svalue
    sharing type Tokens.token = ParserData.Token.token
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、.smlが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;functor PrologParserLrValsFun(&amp;lt;param&amp;gt;: sig
                                         structure Token : &amp;lt;sig&amp;gt;
                                       end) :
                             sig
                               structure ParserData : &amp;lt;sig&amp;gt;
                               structure Tokens : &amp;lt;sig&amp;gt;
                             end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;な感じです。&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;問題点&lt;/h1&gt;

&lt;p&gt;これ、以前のlexのコードと組み合わせても動きません。パーサはレキサが吐いたトークン列をパースするのでレキサとパーサで同じdatatypeを共有している必要があります。パーサはtermの指定からTokensを自動で生成してしまうのでレキサの方を修正する必要があります。&lt;/p&gt;

&lt;p&gt;こうなります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;structure Tokens = Tokens

type pos = int
type svalue = Tokens.svalue
type (&#39;a, &#39;b) token = (&#39;a, &#39;b) Tokens.token
type lexresult = (svalue,pos) token
(* datatype lexresult = *)
(*          Comment of string *)
(*        | LeftParen *)
(*        | RightParen *)
(*        | LeftBracket *)
(*        | RightBracket *)
(*        | Comma *)
(*        | Dot *)
(*        | Bar *)
(*        | Medaka *)
(*        | UnderScore *)
(*        | Number of int *)
(*        | String of string *)
(*        | Variable of string *)
(*        | EOF *)
val pos = ref 0
val linenum = ref 1
val error = fn x =&amp;gt; print (x ^ &amp;quot;\n&amp;quot;)
val eof = fn () =&amp;gt; Tokens.EOF(!pos, !pos)

%%
%header (functor PrologLexFun(structure Tokens: PrologParser_TOKENS));

alphanum = [A-Za-z0-9];
alpha    = [A-Za-z];
digit    = [0-9];
ws       = [\ \t\n];

%%

{ws}+            =&amp;gt; (lex());
%(.*)\n          =&amp;gt; (Tokens.Comment(yytext, !pos, !pos));
&amp;quot;(&amp;quot;              =&amp;gt; (Tokens.LeftParen(!pos, !pos));
&amp;quot;)&amp;quot;              =&amp;gt; (Tokens.RightParen(!pos, !pos));
&amp;quot;[&amp;quot;              =&amp;gt; (Tokens.LeftBracket(!pos, !pos));
&amp;quot;]&amp;quot;              =&amp;gt; (Tokens.RightBracket(!pos, !pos));
&amp;quot;,&amp;quot;              =&amp;gt; (Tokens.Comma(!pos, !pos));
&amp;quot;.&amp;quot;              =&amp;gt; (Tokens.Dot(!pos, !pos));
&amp;quot;|&amp;quot;              =&amp;gt; (Tokens.Bar(!pos, !pos));
&amp;quot;:-&amp;quot;             =&amp;gt; (Tokens.Medaka(!pos, !pos));
&amp;quot;_&amp;quot;              =&amp;gt; (Tokens.UnderScore(!pos, !pos));
[a-z]{alphanum}* =&amp;gt; (Tokens.String(yytext, !pos, !pos));
{digit}+         =&amp;gt; (Tokens.Number ((foldl (fn(a, r)=&amp;gt; (ord(a)-ord(#&amp;quot;0&amp;quot;)) + 10*r) 0 (explode yytext)), !pos, !pos));
[A-Z]{alphanum}* =&amp;gt; (Tokens.Variable(yytext, !pos, !pos));

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;モジュールではなくてファンクタを生成するようになります。シグネチャはこうです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;functor PrologLexFun(&amp;lt;param&amp;gt;: sig
                                structure Tokens : &amp;lt;sig&amp;gt;
                              end) :
                    sig
                      structure UserDeclarations : &amp;lt;sig&amp;gt;
                      exception LexError
                      structure Internal : &amp;lt;sig&amp;gt;
                      structure YYPosInt : &amp;lt;sig&amp;gt;
                      val makeLexer : (int -&amp;gt; string)
                                      -&amp;gt; unit -&amp;gt; Internal.result
                    end
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;組み合わせる&lt;/h1&gt;

&lt;p&gt;まず、必要なモジュールやシグネチャをmlyaccから読み込みます。前回同様mltonのmlyaccを使って、SML/NJで動作確認を行ないました。&lt;/p&gt;

&lt;p&gt;私は分かってないのですが、useってもしかしてSML/NJの固有の機能なんですかね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;use &amp;quot;/home/kim/compile/mlton/lib/mlyacc-lib/base.sig&amp;quot;;
use &amp;quot;/home/kim/compile/mlton/lib/mlyacc-lib/join.sml&amp;quot;;
use &amp;quot;/home/kim/compile/mlton/lib/mlyacc-lib/lrtable.sml&amp;quot;;
use &amp;quot;/home/kim/compile/mlton/lib/mlyacc-lib/stream.sml&amp;quot;;
use &amp;quot;/home/kim/compile/mlton/lib/mlyacc-lib/parser2.sml&amp;quot;;
use &amp;quot;prolog.yacc.sig&amp;quot;;
use &amp;quot;prolog.yacc.sml&amp;quot;;
use &amp;quot;prolog.lex.sml&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mlyacc-libの場所は各自異なるので適宜書き換えて下さい。SML/NJはインストール場所を表わすシンボルを持っているようですが、私はmltonのものを参照しているのでいずれにせよ関係ないですね。&lt;/p&gt;

&lt;p&gt;さて、この.yacc.smlに入ってるファンクタです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;functor PrologParserLrValsFun(&amp;lt;param&amp;gt;: sig
                                         structure Token : &amp;lt;sig&amp;gt;
                                       end) :
                             sig
                               structure ParserData : &amp;lt;sig&amp;gt;
                               structure Tokens : &amp;lt;sig&amp;gt;
                             end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何故こうなってるのかは分からないのですがTokenを欲しがってますね。あげましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;structure PrologParserLrVals =
PrologParserLrValsFun(structure Token = LrParser.Token)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LrValsって言ってるのでLRパーサーで使うデータ型が用意出来たのかな？&lt;/p&gt;

&lt;p&gt;これでレキサで使うTokensとパーサで使うParserDataを持つモジュールが出来たのでレキサのファンクタの餌が用意出来ました。食べさせてあげましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;structure PrologLex =
PrologLexFun(structure Tokens = PrologParserLrVals.Tokens)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは普通にレキサを生成します。&lt;/p&gt;

&lt;p&gt;んで最後にLRパーサとLRパーサで使うデータ型(?)とLRパーサに渡すトークンを生成するレキサを組み合わせます。なんかsharingなる機能を使って組み合わせるらしいのでそれ専用のファンクタが用意されています。sharingなんぞ。いつか&lt;a href=&#34;https://github.com/SMLFamily/The-Definition-of-Standard-ML-Revised&#34;&gt;The Definition of Standard ML Revised&lt;/a&gt;読まねば。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;structure PrologParser =
Join(structure LrParser = LrParser
     structure ParserData = PrologParserLrVals.ParserData
     structure Lex = PrologLex)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やっぱり&lt;code&gt;LrParser&lt;/code&gt;を使ってるのが腑に落ちませんね。どうして生成した時点で含んでないのかな。複数のパーサを作ったときに無駄を無くすため？自前のパーサが使えるようにするため？&lt;code&gt;LrParser.Token&lt;/code&gt;はまだパーサとsharingしてる必要がありそうなので納得出来ますが。&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;使ってみる&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;makeLexer&lt;/code&gt;と&lt;code&gt;parse&lt;/code&gt;を使うようです。&lt;code&gt;makeLexer&lt;/code&gt;は呼ぶ度にトークンを返すものではなく、トークンのストリームを返すものになってるらしいです。&lt;/p&gt;

&lt;p&gt;prologファイル名を受け取ってその中身をパースして、中身を整形した文字列にするコードです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;fun invoke lexstream =
    let
        fun print_error (s, _, _) =
            TextIO.output(TextIO.stdOut,
                          &amp;quot;Error: &amp;quot; ^ s ^ &amp;quot;\n&amp;quot;)
    in
        PrologParser.parse(0, lexstream, print_error, ())
    end

fun parse filename =
    let
        val f = TextIO.openIn filename
        val lexer = PrologParser.makeLexer
                        (fn i =&amp;gt; TextIO.inputN(f, i))
        fun run lexer =
            let
                val (result,lexer) = invoke lexer
            in
                TextIO.output(TextIO.stdOut,
                              &amp;quot;result = &amp;quot; ^ result ^ &amp;quot;\n&amp;quot;)
            end
    in
        run lexer
    end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はposのアップデートをサボったので&lt;code&gt;print_error&lt;/code&gt;内では無視してますが本来は&lt;code&gt;print_error&lt;/code&gt;は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;print_error (s, start:int, end:int)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として受けるべきです。この時startとendはトークンの開始位置と終了位置です。&lt;/p&gt;

&lt;p&gt;他にも説明が足りてない部分がありますが、マニュアルや&lt;a href=&#34;http://www.pllab.riec.tohoku.ac.jp/education/lectures/compiler/code/mlyaccKaisetsu.pdf&#34;&gt;東北大のPDF&lt;/a&gt;を参照して下さい。&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;mlyaccの使い方を書いた&lt;/li&gt;
&lt;li&gt;mllexとmlyaccの組み合わせ方を書いた&lt;/li&gt;
&lt;li&gt;疑問が残った&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次回はASTでも作ってみますが、smlsharpにSMLFormatなるdatatypeの定義とそのプリティプリンタの定義を同時に出来るツールがあるようなのでそれを使ってみます。いくつも中間表現を作ろうと思ったら途中経過も欲しいのでプリティプリンタ重要ですよね。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>