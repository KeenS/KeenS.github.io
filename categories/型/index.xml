<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>型 on κeenのHappy Hacκing Blog</title>
    <link>/categories/%E5%9E%8B/</link>
    <description>Recent content in 型 on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 21 Dec 2019 22:31:35 +0900</lastBuildDate>
    
	<atom:link href="/categories/%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>リソースを管理する型</title>
      <link>/blog/2019/12/21/riso_suwokanrisurukata/</link>
      <pubDate>Sat, 21 Dec 2019 22:31:35 +0900</pubDate>
      
      <guid>/blog/2019/12/21/riso_suwokanrisurukata/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;https://qiita.com/advent-calendar/2019/type&#34;&gt;型 Advent Calendar 2019 - Qiita&lt;/a&gt; 22日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。Session Typeの話をするつもりでしたが気が変わったのでリソースを管理する型の話をします。
リソースといっても所有権の話ではないです。
DBにWriteできるだとかS3からGetできるだとかです。リソースというよりはアクセス権限の方が正確かもしれません。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>手続き型脳で型推論を実装してみた</title>
      <link>/blog/2019/12/08/tetsuzukigatanoudekatasuironwojissoushitemita/</link>
      <pubDate>Sun, 08 Dec 2019 16:58:42 +0900</pubDate>
      
      <guid>/blog/2019/12/08/tetsuzukigatanoudekatasuironwojissoushitemita/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;https://qiita.com/advent-calendar/2019/type&#34;&gt;型 Advent Calendar 2019 - Qiita&lt;/a&gt; 2日目に遡って投稿しているエントリです。
担当に遅刻した訳ではなくて空いてたので前から詰めて投稿しただけです。&lt;/p&gt;

&lt;p&gt;κeenです。世の中に型推論アルゴリズムは色々知られていると思いますが、それを一切無視して型推論を実装してみたので報告します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustで型レベル迷路</title>
      <link>/blog/2019/10/06/rustdekatareberumeiro/</link>
      <pubDate>Sun, 06 Oct 2019 21:55:42 +0900</pubDate>
      
      <guid>/blog/2019/10/06/rustdekatareberumeiro/</guid>
      <description>&lt;p&gt;κeenです。型レベル迷路作ったよ！コンパイルが通ったらゴール！！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Idrisで依存キュー</title>
      <link>/blog/2019/02/28/idrisdeizonkyu_/</link>
      <pubDate>Thu, 28 Feb 2019 00:32:46 +0900</pubDate>
      
      <guid>/blog/2019/02/28/idrisdeizonkyu_/</guid>
      <description>&lt;p&gt;κeenです。なんか雑にIdrisでキューライブラリを作ったので紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1ML - コア言語とモジュール言語の統合</title>
      <link>/slide/1ml___koagengotomoju_rugengonotougou/</link>
      <pubDate>Sun, 24 Sep 2017 23:23:57 +0900</pubDate>
      
      <guid>/slide/1ml___koagengotomoju_rugengonotougou/</guid>
      <description>&lt;a src=&#39;https://connpass.com/event/63454/&#39;&gt;型システム論文読書会 Vol.1&lt;/a&gt;での発表用. &lt;a src=&#39;https://people.mpi-sws.org/~rossberg/1ml/1ml.pdf&gt;1ML – Core and Modules United (F-ing First-Class Modules)&lt;/a&gt;についてざくっと解説</description>
    </item>
    
    <item>
      <title>ジェネリクス勉強会補足</title>
      <link>/blog/2017/06/24/jienerikusubenkyoukaihosoku/</link>
      <pubDate>Sat, 24 Jun 2017 23:22:16 +0900</pubDate>
      
      <guid>/blog/2017/06/24/jienerikusubenkyoukaihosoku/</guid>
      <description>&lt;p&gt;κeenです。本日&lt;a href=&#34;https://connpass.com/event/56773/?utm_campaign=event_participate_to_owner&amp;amp;utm_source=notifications&amp;amp;utm_medium=email&amp;amp;utm_content=title_link&#34;&gt;ジェネリクス勉強会&lt;/a&gt;で発表したのですがいくつか拾いきれないコメントがあったのでここでお返事書きます&lt;/p&gt;

&lt;p&gt;発表スライドは&lt;a href=&#34;https://keens.github.io/slide/jienerikusu_disupatchi_omoteura/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ジェネリクス ディスパッチ 表裏</title>
      <link>/slide/jienerikusu_disupatchi_omoteura/</link>
      <pubDate>Sat, 17 Jun 2017 22:25:35 +0900</pubDate>
      
      <guid>/slide/jienerikusu_disupatchi_omoteura/</guid>
      <description>ジェネリクス勉強会での発表用</description>
    </item>
    
    <item>
      <title>Rustの所有権、ライフタイム、参照、型、しがらみ</title>
      <link>/blog/2016/12/14/rustnoshoyuuken_raifutaimu_sanshou_kata_shigarami/</link>
      <pubDate>Wed, 14 Dec 2016 11:19:12 +0900</pubDate>
      
      <guid>/blog/2016/12/14/rustnoshoyuuken_raifutaimu_sanshou_kata_shigarami/</guid>
      <description>&lt;p&gt;κeenです。Rustには所有権やらライフタイムやら参照やらがあって型システムが面倒ですよね。線形（アフィン）と言われてるのに「あれ？」と思う部分もあるので詳しく探っていこうと思います。&lt;/p&gt;

&lt;p&gt;尚、この記事は型システムに興味のある人向けです。単にRustを書きたい方に有用な情報があるかは分かりません。&lt;/p&gt;

&lt;p&gt;2016-212-14T15:28Z09:00 加筆訂正しました。diffは&lt;a href=&#34;https://github.com/KeenS/KeenS.github.io/commit/f86c03a3793fde1787a9c0eb47f8efda305c2be4&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのstructとtraitって似てるよね</title>
      <link>/blog/2016/12/03/rustnostructtotraittteniteruyone/</link>
      <pubDate>Sat, 03 Dec 2016 22:06:18 +0900</pubDate>
      
      <guid>/blog/2016/12/03/rustnostructtotraittteniteruyone/</guid>
      <description>&lt;p&gt;κeenです。関連型について考えてたらtraitがstructに見えてきたので一筆。小ネタです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustの関連型の使いどころ</title>
      <link>/blog/2016/11/22/rustnokanrenkatanotsukaidokoro/</link>
      <pubDate>Tue, 22 Nov 2016 18:26:47 +0900</pubDate>
      
      <guid>/blog/2016/11/22/rustnokanrenkatanotsukaidokoro/</guid>
      <description>&lt;p&gt;κeenです。昨日は&lt;a href=&#34;https://rust.connpass.com/event/41467/&#34;&gt;RustのLT会！ Rust入門者の集い - connpass&lt;/a&gt;に参加してきました。
そこで&lt;a href=&#34;http://qiita.com/tacke_jp/items/9c7617971dc341146c0f&#34;&gt;関連型に関する発表&lt;/a&gt;があったので感化されて私も一筆。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>型クラスを越えて</title>
      <link>/slide/katakurasuwokoete/</link>
      <pubDate>Sat, 16 Jul 2016 02:53:49 +0900</pubDate>
      
      <guid>/slide/katakurasuwokoete/</guid>
      <description> 型クラス勉強会での発表用。Rustのトレイトについて。 </description>
    </item>
    
    <item>
      <title>ATS2の依存型を使ってAVL木</title>
      <link>/blog/2015/12/29/ats2noizongatawotsukatteavlki/</link>
      <pubDate>Tue, 29 Dec 2015 23:40:45 +0900</pubDate>
      
      <guid>/blog/2015/12/29/ats2noizongatawotsukatteavlki/</guid>
      <description>&lt;p&gt;κeenです。少しばかりATS2を触ってみたので成果報告でも。&lt;/p&gt;

&lt;p&gt;AVL木は左右のノードの高さが高々1しか違わない平衡二分木です。OCamlやSMLでナイーブに実装すると本当に1しか違わないことを保証するのは難しく、精々テストなどで部分的に検査するだけです。&lt;/p&gt;

&lt;p&gt;ところがSMLに似た文法を持つATS2には依存型があり、左右のノードの高さが高々1しか違わないことを型で保証出来ます。
つまり、左右のノードの高さが2以上違う木を作ろうとしてもコンパイルエラーになるのでコンパイルが通れば高さについてはバグがないこと保証されます。&lt;/p&gt;

&lt;p&gt;そういうAVL木を使ってTreeSetを作ってみたので紹介します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>幽霊型を知った</title>
      <link>/blog/2015/05/24/yuureikatawoshitta/</link>
      <pubDate>Sun, 24 May 2015 22:38:47 +0900</pubDate>
      
      <guid>/blog/2015/05/24/yuureikatawoshitta/</guid>
      <description>&lt;p&gt;κeenです。かねてより気になっていた幽霊型(Phantom Type)について知ったのでアウトプット。
&lt;a href=&#34;http://www.cs.rit.edu/~mtf/research/phantom-subtyping/jfp06/jfp06.pdf&#34;&gt;このPDF&lt;/a&gt;がベースになって
ます。&lt;/p&gt;

&lt;p&gt;余談ですが英語がファントム・タイプと中々中二な名前なので和訳も幻影型とかそういう方向に走って欲かったな。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
