<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on κeenのHappy Hacκing Blog</title>
    <link>http://KeenS.github.io/categories/scala/</link>
    <description>Recent content in Scala on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Oct 2014 17:14:10 +0000</lastBuildDate>
    <atom:link href="http://KeenS.github.io/categories/scala/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>#関数型なんたら で喋ってきた</title>
      <link>http://keens.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita</link>
      <pubDate>Sun, 26 Oct 2014 17:14:10 +0000</pubDate>
      
      <guid>http://keens.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita</guid>
      <description>

&lt;p&gt;κeenです。昨日&lt;a href=&#34;http://connpass.com/event/8634/&#34;&gt;函数型なんたらの集い&lt;/a&gt;に参加してきたので報告/感想です。&lt;/p&gt;

&lt;p&gt;会場提供はドワンゴということでトークはニコ生に流された模様。ちらっと覗いてみたらLinuxでも見れましたね。いつのまにかFlashのバグ直ってたんですね。
とはいえ私自身のトーク中のコメントが見れなかったのであまり意味はないのですが…&lt;/p&gt;

&lt;p&gt;プレミアム会員は放送後7日は生放送の内容を見れるそうですね。見れる方々は&lt;a href=&#34;http://live.nicovideo.jp/gate/lv196879029&#34;&gt;コチラ&lt;/a&gt;からどうぞ。次回からはタイムシフト予約しておこう。&lt;/p&gt;

&lt;h1 id=&#34;話した内容:2e493419d503b3224d2e59e7d010df63&#34;&gt;話した内容&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://KeenS.github.io/slide/c6h6-plus-hno3.html&#34;&gt;C6H6+HNO3&lt;/a&gt;というタイトルで、picrinのbenzとnitrosについて。本当はnitrosの依存関係解決器sulfuricを完成させてそれについて話し、nitroを書こう!って言う予定だったんですが着手が遅れて完成しないまま発表になりました。&lt;/p&gt;

&lt;p&gt;普段関数型言語のヒトは型やらモナドで殴ってる印象があったのでマクロで殴ろうと思ったのですがマクロの話のところで焦ってしまって話が飛んでしまい、殴れずに終わりました。&lt;/p&gt;

&lt;p&gt;ガチの組み込み屋さんから組み込み機器で動作検証したのかとの質問がありましたがそもそも持ってないです。そろそろ1.0が出ると思うのでそのあたりでやります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GCがconservativeかとの質問に対して「はい」と答えてしまいましたが間違いでした。&lt;/strong&gt; conservativeなのはcall/ccでした。GCはexactですね。&lt;a href=&#34;http://picrin.readthedocs.org/en/latest/intro.html&#34;&gt;ドキュメント&lt;/a&gt;に載ってます。&lt;/p&gt;

&lt;p&gt;wasabizの名前に反応した人が多かったようですね。やっぱ有名人なのかぁ。&lt;/p&gt;

&lt;h1 id=&#34;興味深かった話:2e493419d503b3224d2e59e7d010df63&#34;&gt;興味深かった話&lt;/h1&gt;

&lt;h2 id=&#34;エンジニアとモナド-http-www-slideshare-net-ruiccrail-engineerusesmonads-ref-http-connpass-com-event-8634-presentation:2e493419d503b3224d2e59e7d010df63&#34;&gt;&lt;a href=&#34;http://www.slideshare.net/RuiccRail/engineerusesmonads?ref=http://connpass.com/event/8634/presentation/&#34;&gt;エンジニアとモナド&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;またモナドで殴る話かと思ったら全然違いました。トップダウンで設計するときにそれぞれを小さなDSLに分割してそれらをモナドで実装し、モナド変換子で組み合わせると良いよねとのこと。タスクアサインもモナド単位になるし分かり易い。スピードのために実際には単相化すると良いとか現実的な話をしてて非常に良かったです。&lt;/p&gt;

&lt;p&gt;Lispで考えるとこうはいかないなと思います。トップダウンで設計するのが他の言語以上に向いてない気がします。というか、ボトムアップに向きすぎてる。小っさく始めて抽象が欲しければマクロを書いて…って。オブジェクト指向で作るにしてもオブジェクトとメソッドが分離してるのでボトムアップと相性が良い。この辺はポールグレアムの「ハッカーと画家」に詳しいです。&lt;/p&gt;

&lt;h2 id=&#34;shapelessの紹介-http-xuwei-k-github-io-slides-functional-something-shapeless-0:2e493419d503b3224d2e59e7d010df63&#34;&gt;&lt;a href=&#34;http://xuwei-k.github.io/slides/functional-something-shapeless/#0&#34;&gt;shapelessの紹介&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;興味を持ったのはshaplessそのものではなくてヘテロなリストやヘテロなハッシュに型をつける話。&lt;code&gt;{ 1 =&amp;gt; &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot; =&amp;gt; 2}&lt;/code&gt;に型がつくのは面白すぎます。「高度に多相化された静的型は動的型と区別がつかなくなる」っぽかったです。&lt;/p&gt;

&lt;h2 id=&#34;パターンマッチいろいろ:2e493419d503b3224d2e59e7d010df63&#34;&gt;パターンマッチいろいろ&lt;/h2&gt;

&lt;p&gt;議論を呼んだ発表。パターンマッチを拡張する話。例えば年月日に対して&lt;code&gt;YMD(y, 12 25)&lt;/code&gt;でクリスマスならそのときの年を取り出せるだとかさらにアンドを使えばHMSも一緒にマッチ出来るだとか。
そこからEgisonに話が飛んでEgisonの例のようにポーカーの役をScalaでパターンマッチする例の紹介。&lt;/p&gt;

&lt;p&gt;議論を呼んだというのはパターンマッチにガードが吸収されてる件ですね。データ型のコンストラクタとエクストラクタが一対一対応してこそパターンマッチは真価を発揮する派vsパターンマッチの表現力が高ければ高い方が良い派の対立ですね。さらに前者は型の表現力が足りてないのなら型をもっと複雑にすべき派とガードを付けて網羅性の証明をすれば良い派に分かれます。私はパターンマッチには表現力があればあるほど良いよね派。&lt;/p&gt;

&lt;p&gt;これはそもそもパターンに対する立場の違いがある気がするんですよね。私はパターンマッチは同じデータに対する条件判定のシンタックスシュガーとして捉えています。マッチと束縛を一緒に行なうのは便利なのとパフォーマンスのため。ガードが必要なのはパターンの表現力が足りないため。だからパターンがリッチならリッチな方が良い。そもそもLispでは網羅性のチェックは期待出来ませんので。そもそもの話動的言語はコンパイル時の検査をあきらめてその代わり表現力を得ようという思想ですからね。&lt;/p&gt;

&lt;p&gt;パターンが複雑になるとメモリが爆発するとの指摘がありましたがそれに直面した人がいるらしく、パターンによる分岐の枝を実行時に伸ばしていくようなパターンマッチライブラリも存在します。（Lispは実行時にもマクロが動いていて、実行時にコードを生成することも可能なのです。）&lt;/p&gt;

&lt;h1 id=&#34;懇親会その他:2e493419d503b3224d2e59e7d010df63&#34;&gt;懇親会その他&lt;/h1&gt;

&lt;p&gt;名古屋の&lt;s&gt;型々&lt;/s&gt;方々と色々喋れました。偶々でこれきさん、みずぴーさんと同じテーブルに座り、昼御飯も一緒に。普段休日出勤してる印象が強く、名古屋に行かないと会えないと思っていたブレイスさんといよさんも一緒でした。でこれき先生はやっぱり大先生だった。&lt;/p&gt;

&lt;p&gt;よんたさんにSML#のコードリーディング会開いて下さいって言ったら良いよって言ってもらいました。そろそろ64bit版も出るそうなのでリリース記念コードリーディング会&amp;amp;芋煮会やろうって話になりました。&lt;/p&gt;

&lt;p&gt;OCamlのユニコードライブラリを作ってる方とも話しました。内部でropeで持ってるらしく、その話を聞きました。ropeのユニコード化はどうやら普通に文字列をUTF-8で保持し、ropeに文字列長のフィールドを保たせるだけで良いよう。ただ、picrinはCとの連携のためちょくちょくCの文字列に変換してまた新たにropeを作って、とするので若干勝手というかボトルネックが違いそう。&lt;/p&gt;

&lt;p&gt;Schemeのネイティブコンパイラを作ってる方とも話しました。Schemeの実装について喋ったり、GCについて喋ったり。GCについては興味深いことを聴いたのでもう1本エントリー書きます。あとはプロセス代数とかモデル検査とか。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:2e493419d503b3224d2e59e7d010df63&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;楽しかった。どうしてもLispは関数型とはあまり言われない（し、私も関数型言語とは思ってない）のでLisperが少なかったのですが私自身はMLも好きなので楽しめました。GCとTaPLとHaskellとScalaとEgisonに対するモチベーションが上がりました。&lt;/p&gt;

&lt;p&gt;最後に開催して下さった主催の方々、会場を提供して下さったドワンゴ様、ありがとう御座いました。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>