<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clasp | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/categories/clasp/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-12-03T02:31:28+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[claspを少し触ってみた]]></title>
    <link href="http://KeenS.github.io/slide/clasp.html"/>
    <updated>2014-10-28T16:17:00+09:00</updated>
    <id>http://KeenS.github.io/slide/clasp.markdown</id>
    <content type="html"><![CDATA[<h1>claspを少し触ってみた</h1>

<hr />

<p>Lisp Meet Up presented by Shibuya.lisp #21<br/>
2014-10-29<br/>
κeen(@blackenedgold)</p>

<h1>About Me</h1>

<hr />

<p><img src="/images/icon.png" alt="κeenのアイコン" /> <!-- .element: style="position:relative;right 0;" --></p>

<ul>
<li>κeen</li>
<li>東大数学科の4年生</li>
<li>ソーシャルアカウントは上のアイコン達から。</li>
<li>Lisp, Ruby, OCaml, Shell Scriptあたりを書きます</li>
</ul>


<h1>clasp</h1>

<hr />

<ul>
<li>Github: <a href="https://github.com/drmeister/clasp">drmeister/clasp</a></li>
<li>2014-09-18に0.1リリース(現在0.11プレビューが出ている)</li>
<li>今は0.11プレビューが出ている</li>
<li>ANSI Common Lisp準拠を目指す(現在80 ~90%)</li>
<li>ECLからのフォーク</li>
<li>LLVMベースのJIT(<a href="http://llvm.org/docs/MCJITDesignAndImplementation.html">MCJIT</a>)搭載</li>
<li>C++とLispで書かれている</li>
<li>C++との連携を意識</li>
</ul>


<p>Note:
C++との連携の部分を強調。今回は0.11プレビューでの話</p>

<h1>メモリ管理</h1>

<hr />

<ul>
<li>Memory Pool Systemと Boehm GCから選べる</li>
<li>ビルドするときにどっちかを選ぶ</li>
</ul>


<h1>メモリ管理</h1>

<hr />

<h2><a href="http://www.hboehm.info/gc/">Boehm GC</a></h2>

<ul>
<li>Mark &amp; Sweepのライブラリ</li>
<li>枯れた有名なライブラリ</li>
<li>Lisp有名どころではGaucheが使う</li>
<li>RedHat系だとこれを使ってないとrpmリジェクトされやすいらしい(?)</li>
</ul>


<p>Note:
他にはMozilla, W3M, GNU GCJ, GNU Obj-Cなどなど</p>

<h1>メモリ管理</h1>

<hr />

<h2><a href="http://www.ravenbrook.com/project/mps/">Memory Pool System</a></h2>

<ul>
<li>複数のGCアルゴリズムを組み合わせて使えるらしい</li>
<li>since 1994</li>
<li>あまり分からないです&gt;&lt;</li>
</ul>


<h1>依存ライブラリ</h1>

<hr />

<ul>
<li>LLVM <strong>3.6</strong></li>
<li>LLVM/clang <strong>3.5</strong> compiler</li>
<li>Boost build v2</li>
<li>boost libraries ver 1.55</li>
<li>Boehm 7.2</li>
<li>gmp-6.0.0</li>
<li>expat-2.0.1</li>
<li>zlib-1.2.8</li>
<li>readline-6.2</li>
</ul>


<p><span style="font-size:600%">無理</span></p>

<h1>externals-clasp</h1>

<hr />

<ul>
<li>Github: <a href="https://github.com/drmeister/externals-clasp">drmeister/externals-clasp</a></li>
<li>依存ライブラリを揃えるのが難しいとの声から作られた</li>
<li>依存ライブラリを全てビルド<!-- .element: class="fragment grow" --></li>
</ul>


<p><span style="font-size:300%">＼LLVMをビルド／</span></p>

<p><span style="font-size:300%">＼Boostをビルド／</span></p>

<p><span style="font-size:200%">ビルド時間はお察しです</span></p>

<h1>本体のビルド</h1>

<hr />

<p>Twitter実況をどうぞ↓↓</p>

<h1>本体のビルド</h1>

<hr />

<blockquote class="twitter-tweet" lang="ja"><p>clangがメモリ6GB以上食い続けてて怖い。何やってんの。</p>&mdash; κeen (@blackenedgold) <a href="https://twitter.com/blackenedgold/status/526417151486205952">2014, 10月 26</a></blockquote>


<h1>本体のビルド</h1>

<hr />

<blockquote class="twitter-tweet" lang="ja"><p>clangの起動時間1時間超えてますよ…</p>&mdash; κeen (@blackenedgold) <a href="https://twitter.com/blackenedgold/status/526418636735401984">2014, 10月 26</a></blockquote>


<h1>本体のビルド</h1>

<hr />

<blockquote class="twitter-tweet" lang="ja"><p>HDDプチプチ言ってるし今にも壊れそう</p>&mdash; κeen (@blackenedgold) <a href="https://twitter.com/blackenedgold/status/526420001587068929">2014, 10月 26</a></blockquote>


<h1>本体のビルド</h1>

<hr />

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/nobkz">@nobkz</a> claspのコンパイル中です。&#10;clangなのにIOネックという謎の状態です。</p>&mdash; κeen (@blackenedgold) <a href="https://twitter.com/blackenedgold/status/526420473232367616">2014, 10月 26</a></blockquote>


<h1>本体のビルド</h1>

<hr />

<blockquote class="twitter-tweet" lang="ja"><p>clangの消費メモリ7GB超えた</p>&mdash; κeen (@blackenedgold) <a href="https://twitter.com/blackenedgold/status/526423982992420864">2014, 10月 26</a></blockquote>


<p><span style="font-size:300%">ビルドは自己責任で</span></p>

<h1>使ってみる</h1>

<hr />

<h2>起動オプション</h2>

<p><code>
/usr/local/clasp/bin/clasp_mps_o --help
clasp options
-I/--ignore-image    - Don't load the boot image/start with init.lsp
-i/--image file      - Use the file as the boot image
-N/--non-interactive - Suppress all repls
-v/--version         - Print version
-s/--verbose         - Print more info while booting
-f/--feature feature - Add the feature to *features*
-e/--eval {form}     - Evaluate a form
-l/--load {file}     - LOAD the file
-r/--norc            - Don't load the ~/.clasprc file
-n/--noinit          - Don't load the init.lsp (very minimal environment)
-s/--seed #          - Seed the random number generator
-- {ARGS}*           - Trailing are added to core:*command-line-arguments*
</code></p>

<h1>使ってみる</h1>

<hr />

<h2>ASDF</h2>

<ul>
<li><!-- .element: class="fragment" data-fragment-index="1" -->動かない

<ul>
<li><!-- .element: class="fragment" data-fragment-index="2" -->ASDFの処理系依存の部分(<code>#+</code>)の問題</li>
<li><!-- .element: class="fragment" data-fragment-index="2" -->ECLと見做されるけどECLのコードは動かない</li>
</ul>
</li>
</ul>


<h1>使ってみる</h1>

<hr />

<h2>cl-ppcre</h2>

<ul>
<li><a href="https://gist.github.com/KeenS/4e25cb6e424ebe4e7a4a">手動ロードスクリプト</a></li>
<li><!-- .element: class="fragment" data-fragment-index="1" -->動かない

<ul>
<li><!-- .element: class="fragment" data-fragment-index="2" --><code>schar</code>がない</li>
<li><!-- .element: class="fragment" data-fragment-index="2" -->ANSI Common Lispにあるのに…</li>
</ul>
</li>
</ul>


<h1>使ってみる</h1>

<hr />

<h2>C++との連携</h2>

<ul>
<li><!-- .element: class="fragment" data-fragment-index="1" -->ドキュメントがない</li>
<li><!-- .element: class="fragment" data-fragment-index="2" -->サンプルコードもない</li>
<li><!-- .element: class="fragment" data-fragment-index="3" -->遂行不能</li>
</ul>


<h1>使ってみる</h1>

<hr />

<h2>LLVMの呼び出し</h2>

<ul>
<li><a href="https://github.com/drmeister/clasp/blob/master/src/llvmo/demo.lsp">clasp/src/llvmo/demo.lisp</a></li>
<li><!-- .element: class="fragment" data-fragment-index="1" -->動かない</li>
</ul>


<h1>使ってみる</h1>

<hr />



<table>
<thead>
<tr>
<th>処理系              </th>
<th>  <code>(time (fib 29))</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>clasp-0.1(boehm)    </td>
<td> <div class="graph fragment" style="width:calc(264.3px * 3);" data-fragment-index="1">26.43s</div></td>
</tr>
<tr>
<td>clasp-0.1(mps)      </td>
<td> <div class="graph fragment" style="width:calc(172.8px * 3);" data-fragment-index="1">17.28s</div></td>
</tr>
<tr>
<td>clasp-0.11(boehm)   </td>
<td> <div class="graph fragment" style="width:calc(213.2px * 3);" data-fragment-index="2">21.32s</div></td>
</tr>
<tr>
<td>clasp-0.11(mps)     </td>
<td> <div class="graph fragment" style="width:calc(187.9px * 3);" data-fragment-index="2">18.79s</div></td>
</tr>
<tr>
<td>ECL-13.5.1          </td>
<td> <div class="graph" style="width:calc( 16.0px * 3);">1.603s</div></td>
</tr>
<tr>
<td>ECL-13.5.1(compile) </td>
<td> <div class="graph" style="width:calc(  1.9px * 3);">0.192s</div></td>
</tr>
<tr>
<td>ABCL-1.3.1          </td>
<td> <div class="graph" style="width:calc( 32.9px * 3);">3.292s</div></td>
</tr>
<tr>
<td>ABCL-1.3.1(compile) </td>
<td> <div class="graph" style="width:calc(  2.4px * 3);">0.241s</div></td>
</tr>
</tbody>
</table>


<h1>使ってみる</h1>

<hr />

<table>
<thead>
<tr>
<th>処理系              </th>
<th>  <code>(time (fib 29))</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>CLISP-2.49          </td>
<td> <div class="graph" style="width:calc( 38.4px * 3);">3.847s</div></td>
</tr>
<tr>
<td>CLISP-2.49(compile) </td>
<td> <div class="graph" style="width:calc(  7.1px * 3);">0.7146s</div></td>
</tr>
<tr>
<td>ccl-1.10            </td>
<td> <div class="graph" style="width:calc(  0.4px * 3);">0.04033s</div></td>
</tr>
<tr>
<td>sbcl-1.2.5          </td>
<td> <div class="graph" style="width:calc(  0.6px * 3);">0.06469s</div></td>
</tr>
<tr>
<td>alisp-9.0           </td>
<td> <div class="graph" style="width:calc(  230px * 3);">23.09s</div></td>
</tr>
<tr>
<td>alisp-9.0(compile)  </td>
<td> <div class="graph" style="width:calc(  0.6px * 3);">0.06194s</div></td>
</tr>
</tbody>
</table>


<p><span style="font-size:200%">LLVM/JITなのになぜ遅い？</span></p>

<h1>LLVM/JITで遅い？</h1>

<hr />

<ul>
<li>LLVMって速いんじゃ？</li>
<li>JIT搭載した○○が速いって聞いたよ

<ul>
<li>JVM</li>
<li>lua-jit</li>
<li>Rubinius</li>
<li>pypy</li>
</ul>
</li>
</ul>


<h1>言葉の罠: LLVM</h1>

<hr />

<ul>
<li>遅いコードはどんなに頑張っても遅い</li>
<li>ECLのバックエンドにClang(=LLVM)を使ってもSBCLに勝てないのと同じ</li>
</ul>


<h1>言葉の罠: JIT搭載</h1>

<hr />

<ul>
<li>JIT(実行時コンパイル)の意味は広い</li>
<li>実行時にネイティブコードを吐けばJITと言える</li>
<li>claspは実行直前にコンパイルするだけ</li>
<li>多くの速いJIT処理系はTracing JITを使う

<ul>
<li>またの名を適応的コンパイル</li>
<li>実行時の情報に基いて実行中に最適化する</li>
<li><code>(declare ...)</code> を自動生成してる的な</li>
</ul>
</li>
</ul>


<h1>Tracing JITへの道</h1>

<hr />

<ul>
<li>LLVMのJITは実行直前にコンパイルするだけ

<ul>
<li><!-- .element: class="fragment" data-fragment-index="1" -->Tracing JITのバックエンドには使える</li>
</ul>
</li>
<li>実行時最適化には最適化用のコードが必要

<ul>
<li><!-- .element: class="fragment" data-fragment-index="2" -->Common Lispでは<code>(declare ...)</code>用のコードを使い回せる</li>
</ul>
</li>
<li><!-- .element: class="fragment" data-fragment-index="3" -->案外近い</li>
</ul>


<h1>結論</h1>

<hr />

<ul>
<li><!-- .element: class="fragment" data-fragment-index="1" -->遅い</li>
<li><!-- .element: class="fragment" data-fragment-index="2" -->時期尚早</li>
<li><!-- .element: class="fragment" data-fragment-index="3" -->今後機能や速度改善があれば使えるようになるかも</li>
</ul>


<p><span style="font-size:600%">以上</span><br/>
何か質問あればどうぞ</p>
]]></content>
  </entry>
  
</feed>
