<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala Meet Up on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/scala-meet-up/</link>
    <description>Recent content in Scala Meet Up on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 24 May 2016 23:40:36 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/scala-meet-up/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DOT/dottyについて調べてみた</title>
      <link>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</link>
      <pubDate>Tue, 24 May 2016 23:40:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</guid>
      <description>DOT/dottyについて調べてみた  サイバーエージェント Scala Meet Up
2016-05-27
===
About Me   κeen @blackenedgold Github: KeenS 基盤開発グループ Lisp, ML, Rust, Shell Scriptあたりを書きます Scala初心者  Scala歴1年未満&amp;gt;&amp;lt;    ===
Scalaコンパイラ   型推論（特にimplicit）が遅い コンパイルフェーズが多い  中間オブジェクトが多くて遅くなる   多くのクラスファイルを生成する  コンパイラのくせにディスクIOが多い   気を抜いてると Any に推論される
e.g.) if(x) 1 else &amp;quot;a&amp;quot; そもそものScalaの設計に起因する点が多い  抜本的変更が必要    ===
Scala基礎   Scalaが成立するのに最低限必要な機能って？  e.g.) case class はなくても class だけでどうにかなる   「最低限の機能」を減らせばコンパイラがシンプルになる  他の機能はただのシンタックスシュガーになる コンパイラのバグを減らせる 機能追加時の矛盾確認が楽   コア言語  ===</description>
    </item>
    
    <item>
      <title>テストについて、Scalaと。</title>
      <link>//KeenS.github.io/slide/tesutonitsuite_scalato_/</link>
      <pubDate>Tue, 12 Apr 2016 22:31:51 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/tesutonitsuite_scalato_/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS サイバーエージェントのエンジニア  基盤開発グループでScalaで基盤開発してます   Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
Scalaのテスト   ScalaTest  機能豊富 複数のテストスタイルを選べる 他のフレームワークとの統合がある   Specs2  普通に使いやすい   他にもScalaCheck、JUnit、Gatlingなどなど  ===
ScalaTestのスタイルたち   FunSuite  xUnitっぽいらしい   FlatSpec  xUnitからBDDに移行した人向けらしい   FunSpec  RSpecっぽいBDD用の    ===
ScalaTestのスタイルたち   WordSpec  Specs2に似てる。   FreeSpec  何段にでもネスト出来る。自由。   Spec  テスト=メソッド。速いらしい。    ===</description>
    </item>
    
    <item>
      <title>HAMT ~ イミュータブルで高速なハッシュマップ ~</title>
      <link>//KeenS.github.io/slide/hamt/</link>
      <pubDate>Sun, 31 Jan 2016 16:17:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/hamt/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS 基盤開発グループの新卒 Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
scala.collections.immutable.HashMap   今日の話題。これの実装をみていく。 イミュータブル キー-バリューペア 値を追加する度に新たなハッシュマップを作る   ===
HashMap   O(1)のアクセス効率 空間効率は悪い ハッシュ関数が定義出来れば何でもキーに使える 普通はミュータブルに使う  大量のメモリをアロケートするのでコピーはつらい    ===
メモリ効率悪そう？  val hash = HashMap.empty + (3 -&amp;gt; 1) // +---+---+---+---+---+---- // | / | 3 | / | / | / | ... // +---+---+---+---+---+---- // | // +-+ // |1| // +-+ ===</description>
    </item>
    
    <item>
      <title>DSLとTagless Final</title>
      <link>//KeenS.github.io/slide/dsltotagless_final/</link>
      <pubDate>Sun, 13 Dec 2015 22:42:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/dsltotagless_final/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS AMoAdの新卒エンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  Scalaは初心者 ※ Scala初心者の新卒が頑張ってLispを作ってみた ===    注意   Scala初心者なのでScalaではなくScalaっぽい疑似コードで説明します  コード例動かす時間が無かっただけ   Scala初心者なのでScalaのコードは少なめに説明します  ===
DSLを作る  以下のようなHTTPなユーザをエミュレートするDSLを考える
val scenario = and( get(&amp;#34;/&amp;#34;), get(&amp;#34;/users&amp;#34;).andThen(res =&amp;gt; post(&amp;#34;/follow&amp;#34;, first(users.getJsonData)))) val Right(_) = runScenario(scenario, &amp;#34;user&amp;#34;) ===
DSLを作る  普通は以下のようなAST作ってをラップする
trait ScenarioDSL sealed case class Get(url: String) extends ScenarioDSL sealed case class Post(url: String, data: JSON) extends ScenarioDSL sealed case class And(first, ScenarioDSL, second ScenarioDSL) extends ScenarioDSL sealed case class AndThen(first: ScenarioDSL, callBack: (Response) =&amp;gt; ScenarioDSL) extends ScenarioDSL def get(url: String): ScenarioDSL= Get(url) .</description>
    </item>
    
  </channel>
</rss>