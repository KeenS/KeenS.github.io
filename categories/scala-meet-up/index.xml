<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala Meet Up on κeenのHappy Hacκing Blog</title>
    <link>http://KeenS.github.io/categories/scala-meet-up/</link>
    <description>Recent content in Scala Meet Up on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Dec 2015 22:42:39 +0900</lastBuildDate>
    <atom:link href="http://KeenS.github.io/categories/scala-meet-up/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>DSLとTagless Final</title>
      <link>http://keens.github.io/slide/DSLtoTagless_Final/</link>
      <pubDate>Sun, 13 Dec 2015 22:42:39 +0900</pubDate>
      
      <guid>http://keens.github.io/slide/DSLtoTagless_Final/</guid>
      <description>&lt;section data-markdown
    data-separator=&#34;\n\n&#34;
    data-vertical=&#34;\n\n&#34;
    data-notes=&#34;^Note:&#34;&gt;
&lt;script type=&#34;text/template&#34;&gt;
# DSLtとTagless Final
----------------------
サイバーエージェント アドテクスタジオ
Scala Meet Up 2015-12-13

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# About Me
---------
![κeenのアイコン](/images/icon.png) &lt;!-- .element: style=&#34;position:absolute;right:0;z-index:-1&#34; --&gt;

 + κeen
 + [@blackenedgold](https://twitter.com/blackenedgold)
 + Github: [KeenS](https://github.com/KeenS)
 + AMoAdの新卒エンジニア
 + Lisp, ML, Rust, Shell Scriptあたりを書きます


# DSLを作る
-----------

以下のようなASTで表されるDSLを考える

``` scala
なんか実用的な例
```


# DSLを作る
-----------

普通はASTをラップして以下のようにする

``` scala

```


# DSLを便利に
-------------

例えば、このDSLを文字列にする関数を追加する

``` scala

```


# DSLの拡張
-----------

このDSLに新たに    を追加する

``` scala

```


# Expression Prolem
-------------------

この時に問題が出る

* DSLそのものに手を加える必要がある
  + DSLを使う全てのコードに変更が必要
  + そもそも、ライブラリだったら変更出来るの？
* 実際には使ってなくても全ての関数で新しい機能に対応しないといけない


# それ、Tagless Finalで解決出来るよ
----------------------------------

* 元のコードをいじらず
* 必要な所だけを修正して
* しかも元々の実装よりも速い

ASTの作り方があります。


# 型クラスの復習
---------------

型クラスは

* 型の振る舞うインターフェースを定めて
* インスタンスの型ごとに「後付けで」実装を与えると
* 多相的に扱えるアドホックポリモーフィズム

でした


# 型クラスの復習
---------------

``` rust

```


# Rustに翻訳
-------------

Scalaで説明するとややこしいので一旦先の例をRustに翻訳します

``` rust
DSLのAST
```


# Rustに翻訳
-------------

``` rust
DSLのラッパ
```


# Rustに翻訳
-------------

``` rust
DSLのstringify
```

# Tagless Final
----------------


initialなアプローチとfinalなアプローチ、taglessness
ScalaでのTagless Final(Scala)

&lt;/script&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>