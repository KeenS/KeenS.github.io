<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala Meet Up on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/scala-meet-up/</link>
    <description>Recent content in Scala Meet Up on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 24 May 2016 23:40:36 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/scala-meet-up/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DOT/dottyについて調べてみた</title>
      <link>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</link>
      <pubDate>Tue, 24 May 2016 23:40:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</guid>
      <description># DOT/dottyについて調べてみた ---------------------- サイバーエージェント Scala Meet Up 2016-05-27 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループ + Lisp, ML, Rust, Shell Scriptあたりを書きます + Scala初心者 + Scala歴1年未満&amp;gt;&amp;lt; === # Scalaコンパイラ ---------------- * 型推論（特にimplicit）が遅い * コンパイルフェーズが多い + 中間オブジェクトが多くて遅くなる * 多くのクラスファイルを生成する + コンパイラのくせにディスクIOが多い * 気を抜いてると `Any` に推論される e.g.) `if(x) 1 else &#34;a&#34;` * そもそものScalaの設計に起因する点が多い + 抜本的変更が必要 === # Scala基礎 ----------- * Scalaが成立するのに最低限必要な機能って？ + e.g.) `case class` はなくても `class` だけでどうにかなる * 「最低限の機能」を減らせばコンパイラがシンプルになる + 他の機能はただのシンタックスシュガーになる + コンパイラのバグを減らせる + 機能追加時の矛盾確認が楽 * コア言語 === # Featherlight Scala --------------------- * Scalaのシンタックスシュガーを減らした感じ * 小さな言語 * 元のScalaはこれをベースに議論されてきた === # 形式言語理論 ------------- * 最低限必要な機能を形式的にモデル化 + 全ての動作は予め決められた「規則」に基く + 実際に書いて動かすものではない * 形式的にすることで「証明」とかが出来る + 「型検査に通れば実行時に型エラーが起きない」 + 「型検査が必ず終了する」 * 逆に、「このモデルだとこの機能は実現出来ない」とかも分かる === # Dependent Object Type ------ * Scalaのコアをモデル化したもの（要出典） * 形式言語 * ジェネリクスもなければクラスも継承もない、パッケージもない。 * 小さい言語ながら表現力豊か * 全ての値はオブジェクト。 + オブジェクトのフィールドとメソッドと型メンバーだけ + 型はそのまま * Path Dependent Type * サブタイピング === # About DOT --------- * 型付の健全性が証明された * System FSystem DDOT * existential typeを自然に表現出来る * 交差型と合併型 + `A extends B` - `A &amp; B` + 合併型は主に型推論の結果に出てくる === ```scala package scala.</description>
    </item>
    
    <item>
      <title>テストについて、Scalaと。</title>
      <link>//KeenS.github.io/slide/tesutonitsuite_scalato_/</link>
      <pubDate>Tue, 12 Apr 2016 22:31:51 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/tesutonitsuite_scalato_/</guid>
      <description># テストについて、Scalaと。 ---------------------- サイバーエージェント アドテクスタジオ ScalaMeetUp テスト回 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + 基盤開発グループでScalaで基盤開発してます + Lisp, ML, Rust, Shell Scriptあたりを書きます === # Scalaのテスト --------------- * ScalaTest + 機能豊富 + 複数のテストスタイルを選べる + 他のフレームワークとの統合がある * Specs2 + 普通に使いやすい * 他にもScalaCheck、JUnit、Gatlingなどなど === # ScalaTestのスタイルたち ----------- * FunSuite + xUnitっぽいらしい * FlatSpec + xUnitからBDDに移行した人向けらしい * FunSpec + RSpecっぽいBDD用の === # ScalaTestのスタイルたち ----------- * WordSpec + Specs2に似てる。 * FreeSpec + 何段にでもネスト出来る。自由。 * Spec + テスト=メソッド。速いらしい。 === # ScalaTestのスタイルたち ----------- * PropSpec + プロパティベースのテスト。ScalaCheckとの統合。 * FeatureSpec + シナリオテスト。 === # その他の機能 ------------- * mockitoのシュガー * Matcher DSL * 複数のランナー（複数のツールとの統合） === # Axionのテスト コード紹介を多めに === # 単体テスト --------------- * 普通の単体テストはWordSpec * ホーアの3つ組に基いて事前条件、コマンド、事後条件(不変条件)に分ける + 「{事前条件}が成り立つ時{コマンド}を実行し、停止するなら{事後条件(不変条件)}が成り立つ」の列挙 * [テストについて考えてみた | κeenのHappy Hacκing Blog](http://keens.</description>
    </item>
    
    <item>
      <title>HAMT ~ イミュータブルで高速なハッシュマップ ~</title>
      <link>//KeenS.github.io/slide/hamt/</link>
      <pubDate>Sun, 31 Jan 2016 16:17:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/hamt/</guid>
      <description># Hash-Array Mapped Trie ---------------------- ~ イミュータブルで高速なハッシュマップ ~ サイバーエージェント AdTech Scala Meetup LT大会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループの新卒 + Lisp, ML, Rust, Shell Scriptあたりを書きます === # scala.collections.immutable.HashMap ------------------------------------- * 今日の話題。これの実装をみていく。 * イミュータブル * キー-バリューペア * 値を追加する度に新たなハッシュマップを作る === # HashMap ---------------- * `O(1)`のアクセス効率 * 空間効率は悪い * ハッシュ関数が定義出来れば何でもキーに使える * 普通はミュータブルに使う + 大量のメモリをアロケートするのでコピーはつらい === # メモリ効率悪そう？ ------------------------- ```scala val hash = HashMap.empty + (3 - 1) // +---+---+---+---+---+---- // | / | 3 | / | / | / | .</description>
    </item>
    
    <item>
      <title>DSLとTagless Final</title>
      <link>//KeenS.github.io/slide/dsltotagless_final/</link>
      <pubDate>Sun, 13 Dec 2015 22:42:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/dsltotagless_final/</guid>
      <description># DSLとTagless Final ---------------------- サイバーエージェント アドテクスタジオ Scala Meet Up 2015-12-18 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + AMoAdの新卒エンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます - Scalaは初心者 ※ [Scala初心者の新卒が頑張ってLispを作ってみた](http://adtech.cyberagent.io/scalablog/2015/12/05/scala-lisp/) === # 注意 ------ * Scala初心者なのでScalaではなくScalaっぽい疑似コードで説明します + ~~コード例動かす時間が無かっただけ~~ * Scala初心者なのでScalaのコードは少なめに説明します === # DSLを作る ----------- 以下のようなHTTPなユーザをエミュレートするDSLを考える ``` scala val scenario = and( get(&#34;/&#34;), get(&#34;/users&#34;).andThen(res = post(&#34;/follow&#34;, first(users.getJsonData)))) val Right(_) = runScenario(scenario, &#34;user&#34;) ``` === # DSLを作る ----------- 普通は以下のようなAST作ってをラップする ``` scala trait ScenarioDSL sealed case class Get(url: String) extends ScenarioDSL sealed case class Post(url: String, data: JSON) extends ScenarioDSL sealed case class And(first, ScenarioDSL, second ScenarioDSL) extends ScenarioDSL sealed case class AndThen(first: ScenarioDSL, callBack: (Response) = ScenarioDSL) extends ScenarioDSL def get(url: String): ScenarioDSL= Get(url) .</description>
    </item>
    
  </channel>
</rss>