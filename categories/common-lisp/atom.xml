<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: common lisp | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/categories/common-lisp/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-07-29T20:42:08+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #16 でLTしてきました。]]></title>
    <link href="http://KeenS.github.io/blog/2014/04/25/lisp-meet-up-number-16/"/>
    <updated>2014-04-25T01:35:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/04/25/lisp-meet-up-number-16</id>
    <content type="html"><![CDATA[<p>κeenです。年度末/年度始めで色々あり、しばらく更新できてませんでしたが <a href="http://atnd.org/events/49370">Lisp Meet Up Presented by Shibuya.lisp #16</a>に参加してきたのでレポートです。</p>

<!-- more -->


<p>最近はLisp Meet Upも盛況で毎回ほぼ満席ですね。今回も満席でした。というか立ち見出てました。</p>

<p>自己紹介では初参加の方が多くてCLerが多い印象でした。昔研究とかでCL使ってて久し振りに、とか。私個人的にはTwitterでフォローしてる方々とお会い出来て楽しかったです。</p>

<p>LTは私とTOYOZUMIさんが告知してました。しかしTOYOZUMIさんは当日体調が悪くて欠席したので私と飛び入りのchikuさんで計2件のLTがありました。TOYOZUMIさんは何回かに分けて発表するうちの1回だったので次回LTしていただけるかと思います。</p>

<p>私のやつは↓です。時間ギリギリで作ったのであんまりいじめないで下さい。因みにまだソースはgithubに上げてないです（後述）</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/33794330" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/blackenedgold/lisp-meetup16" title="CL21で色々なデータ構造を実装してみようとした">CL21で色々なデータ構造を実装してみようとした</a></strong> from <strong><a href="http://www.slideshare.net/blackenedgold">blackenedgold</a></strong></p>

<p>会場からはCL21作者のにとりさんから「abstract-sequenceは最低限実装しなきゃいけないメソッドは少ない」との指摘がありましたがqueueとして機能するために色々頑張ったのです。</p>

<p>abstract-setとかは欲しいですねとの声もありました。issueに上げておきますかな</p>

<p>また、chikuさんからheapの実装について色々と指摘があり、 <a href="http://www.amazon.co.jp/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD%E3%83%80%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3-%E7%AC%AC3%E7%89%88-%E7%B7%8F%E5%90%88%E7%89%88-%E4%B8%96%E7%95%8C%E6%A8%99%E6%BA%96MIT%E6%95%99%E7%A7%91%E6%9B%B8-%E3%82%B3%E3%83%AB%E3%83%A1%E3%83%B3/dp/476490408X">Introduction to Algorithms</a>という本を紹介されました。とりあえず大学の図書館から借りてきたのでそれを読んだらcl21-data-collectionsに手を加えてgithubに上げます。</p>

<p>次はchikuさんから <a href="https://github.com/chiku-samugari/chiku.util">chiku-utils</a>というオレオレライブラリの紹介がありました。スライドは見付け次第貼りますね。結構便利そうな関数やマクロがあったので一度見てみると良いかもしれません。</p>

<p>その後は休憩からのぐだぐだ時間でした。chikuさんの発表の中で出てきた<code>keymin</code>という関数について会場から一般的には<code>argmin</code>と言うとの指摘があり、その場でかにたんが<code>argmin</code>の定義の数式を書いたことから私とかにたんとラジカルこうじさんでマスハラをしあってました。というか主にかにたんがマスハラしてました。Lispの話はあまりしませんでしたね… あとは私がゼミで <a href="http://www.amazon.co.jp/gp/product/0124077269/ref=oh_details_o00_s00_i00?ie=UTF8&amp;psc=1">パタヘネ</a>を読んでることからパタヘネってC言語の入門書だよねとかの会話とか。StumpWMについてもちょっと話したかな？</p>

<p>そうだ。次回のScheme回は <a href="https://bitbucket.org/ktakashi/sagittarius-scheme/overview">Sagittarius</a>の作者のKeiさんが次回LTする気満々とのことで話題に上がってました。それに <a href="https://github.com/wasabiz/picrin">picrin</a>の作者のわざびず君も来るかもとかですしTOYOZUMIさんの連作もありますし次回は長くなるか2回に分けるかになるかもしれません。</p>

<p>その後の懇親会は9人が参加でしたがアルコールを飲む方はあまりいませんでしたね。飲んでたのは3~4人かな?多くの方が普通にお酒に弱いだとかバイクで来てるだとか次の日仕事があるとかですね。もう普通に食事でも良いのでは。私のいたテーブルでの会話は佐野さんがLispの本をめっちゃ持ってるだとかでしたね。実践Common Lispを訳者ということを割り引いても多いくらい持ってるそうです。CLtL2とかもめっちゃ持ってるそうです。謎ですね。</p>

<p>今回のまとめ</p>

<ul>
<li>かにたんをホワイトボードに近付けてはいけない</li>
</ul>


<p>最後になりますがイベント管理や会場手配など運営の方々ありがとう御座いまいした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #14でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14/"/>
    <updated>2014-02-27T14:57:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14</id>
    <content type="html"><![CDATA[<p>どうも、κeenです。Rubyをアップグレードしようとしたら<code>rvm</code>が動かなくて、あれ？ってなったら私が<code>echo -&gt; echo</code>とかいう謎のsymlinkを作ってたせいでした。このブログはOctopressで作ってるのでその間更新遅れました。</p>

<p>さて、毎月恒例 <a href="http://atnd.org/events/47730">Lisp Meet Up Presented by Shibuya.lisp #14</a>でLTしてきたので報告です。今回は「Real World OCamlを読んだ感想」というタイトルです。</p>

<!-- more -->


<p>まあ、感想とは言っても内容を軽く紹介したあとにLispにインポートしてみたという内容です。</p>

<p>今回はいつも以上にスライドが説明不足なのでどうにか頑張ってUstreamを探して下さい</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31658546" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/blackenedgold/real-world-ocamllisp" title="Real World OCamlを読んでLispと協調してみた">Real World OCamlを読んでLispと協調してみた</a></strong> from <strong><a href="http://www.slideshare.net/blackenedgold">blackenedgold</a></strong></p>

<p>会場からはquicksortの例がメモリ使用量的にquicksortとは言えないとか怒られました。あとは<code>append</code>が演算子<code>@</code>で書けちゃうとコスト高いのにみんな頻繁に使っちゃうんじゃないかとかのツッコミもありました。</p>

<p>Meet Up自体は自己紹介から始まりました初めての参加の方が14人中3人だったかな？もっと増えると嬉しいですね。京都から来た博士過程の方とか「ハッカーと画家」を読んでLispに興味を持った方とかが居ました。</p>

<p>で、私のLTは上の通り。前述の通りUstreamでも流されてます。</p>

<p>次はかにたん(@kazh98)さんから。かにたんここ2ヶ月くらいMeet Upで見掛けないなと思ってたら数学の論文に”Gauche”って文字列を入れる仕事をしてたようです。LTはRacketの新バージョンの機能FFIを使って線形代数ライブラリのバインディングを作る話でした。ジョーク飛しながら軽快に喋ってて楽しかったです。スライドはこちら。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31635279" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/kazh98/racket-31635279" title="すべてをRacketに取り込もう！ ~Racket FFI と Package システムの使い方~">すべてをRacketに取り込もう！ ~Racket FFI と Package システムの使い方~</a></strong> from <strong><a href="http://www.slideshare.net/kazh98">Kazuhiro Hishinuma</a></strong></p>

<p>そのあとは休憩からのぐだぐだタイムで私はCommon Lisperで <a href="http://cl21.org/">CL21</a>の<code>lambda</code>の略称を考えてたりしました。私は<code>^</code>良いと思うんですけど英字キーボードだと<code>S-6</code>なので押しにくいそうです。<code>fn</code>は<code>function</code>の略称っぽくてダメという話。<code>function</code>はCommon Lispでは既に別の意味がありますからね。</p>

<p>懇親会では私含めて就活生が二人居るので就活の話になりましたがLisperってまともな就活してないんですね…<br/>
大学中退してバイト先に就職した、友達の始めたベンチャーに参加してから今の職場に転職した、就活せずにふらふらしてたらShibuya.lispでLispの求人があったからそこに行った…。</p>

<p>そういえばまた隣がにとりさんだったので最近何やってますかと訊いたら<code>Utopian</code>に向けて着々と準備進めてますとの返事をいただきました。まだ計画あったんですねと返すと</p>

<blockquote><p>昨日「Utopianってまだ計画あったんですね」って言われたけど、3年前からClack、Caveman、ningle、CL-DBI、SxQL、Caveman2、Integralってずっとリリースし続けてるのは全部Utopianの為ですよ</p>

<p>— 深町英太郎 (fukamachi) (@nitro_idiot) <a href="https://twitter.com/nitro_idiot/statuses/438909695881797632">2014, 2月 27</a><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p></blockquote>

<p>とのこと。私もUtopianの下地を作るためにRubyにあってLispにないものを色々考えてたので色々話してたらCL21のコミット権もらっちゃいました。私はライブラリ(DateTimeとかQueueなどのデータ構造とか)を整備したいのですがそれらは0.2で追加される予定だそうなので今はissue潰しですかね。</p>

<p>まあ、そんなところです。そういえばClojureの会社に潜入したといういちせさん(＠ichisemasashi)にどんな感じか訊くの忘れてましたね…まあ、次回もいらっしゃるでしょうから次回訊けば良いですかね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CIMの解説をしてみる コマンド編]]></title>
    <link href="http://KeenS.github.io/blog/2014/01/27/cim-explanation/"/>
    <updated>2014-01-27T13:55:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/01/27/cim-explanation</id>
    <content type="html"><![CDATA[<p>先日LTで紹介したCIMが思いの外反響を呼んでる(Githubのstarが15)ので解説でもしてみます。</p>

<p>コマンド編の次は実装編です。これでバグにエンカウントしたときの調査とか完璧ですね。</p>

<!-- more -->


<h1>インストーラ</h1>

<p>READMEにあるように</p>

<pre><code>curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
</code></pre>

<p>で<code>~/.cim/</code>にインストールできます。パスを変えたければ</p>

<pre><code>CIM_HOME=/path/to/cim curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
</code></pre>

<p>でOK。Cシェル系なら</p>

<pre><code>env CIM_HOME /path/to/cim curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
</code></pre>

<p>でしょうか。</p>

<p>ここでは<code>curl</code>を使ってますが<code>wget -O -</code>とか<code>fetch -o -</code>など標準出力に吐ければなんでも良いです。</p>

<p>あ、でも<code>CIM_HOME</code>を指定してインストールしたときにバグがある気がしてきました。今から直します。</p>

<p>CIMを使うにはシェルの起動時に初期化が必要ですが、インストーラが初期化ファイルを読みにいく処理を<code>.*rc</code>に書き出してくれます。Bourne Shellは<code>.profile</code>ですね。<br/>
書き出すファイルは<code>$SHELL</code>を見てます。<code>csh</code>、<code>tcsh</code>、<code>sh</code>、<code>bash</code>、<code>zsh</code>に対応してます。</p>

<p>あと<code>~/.emacs.d/eshell/</code>が存在したら<code>~/.emacs.d/eshell/profile</code>にも初期化処理を書き出します。一時期パスが間違ってて<code>~/.emacs.d/profile</code>に書き出してました。ごめんなさい。<br/>
vimshell(だっけ？)でも初期化さえしてしまえば使えると思うので誰か初期化処理書いて下さい。</p>

<h1><code>cim</code></h1>

<p>とりあえず<code>help</code>見ておきましょう。</p>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help
</span><span class="line">CIM &mdash; Common Lisp Implementation Manager
</span><span class="line">
</span><span class="line">Commands currently available
</span><span class="line">install &lt;impl[-version]&gt; ;; Install the impl.
</span><span class="line">use &lt;impl[-version]&gt; ;; Use specified impl as <code>cl' command's backend.
&lt;/span&gt;&lt;span class="line"&gt;resume [rm] [resume..] ;; Resume suspended installation(s) or give it up.
&lt;/span&gt;&lt;span class="line"&gt;list &amp;lt;command&amp;gt; ;; List available target of &amp;lt;command&amp;gt;
&lt;/span&gt;&lt;span class="line"&gt;reinstall &amp;lt;impl[-version]&amp;gt; ;; Reinstall the impl.
&lt;/span&gt;&lt;span class="line"&gt;clean &amp;lt;impl&amp;gt;|all ;; Clean downloaded archive and src of the impl.
&lt;/span&gt;&lt;span class="line"&gt;distclean &amp;lt;impl&amp;gt;|all ;; Clean built dists.
&lt;/span&gt;&lt;span class="line"&gt;uninstall &amp;lt;impl[-version]&amp;gt; ;; Uninstall the impl.
&lt;/span&gt;&lt;span class="line"&gt;purge &amp;lt;impl&amp;gt;|all ;; Just clean and uninstall the impl.
&lt;/span&gt;&lt;span class="line"&gt;info ;; Display current state.
&lt;/span&gt;&lt;span class="line"&gt;get ;; Upgrade cim itself.
&lt;/span&gt;&lt;span class="line"&gt;version ;; Show the version
&lt;/span&gt;&lt;span class="line"&gt;help &amp;lt;command&amp;gt; ;; Show help for &amp;lt;command&amp;gt;. If no commands are specified, show this help.
&lt;/span&gt;&lt;span class="line"&gt;
&lt;/span&gt;&lt;span class="line"&gt;If you want detailed help, type</code>cim help &lt;command&gt;&lsquo;.</span></code></pre></td>
</tr></table></div></figure></p>

<h2><code>cim install</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help install
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim install &lt;impl[-version]&gt;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Install the given lisp implementation to cim directory.
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If you want to pass specific options to &lsquo;configure&rsquo; script,
</span><span class="line">prefix &lsquo;flags=&rsquo;.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # install sbcl-1.1.14
</span><span class="line"> cim install sbcl-1.1.14
</span><span class="line"><br/>
</span><span class="line"> # install latest clisp with option.
</span><span class="line"> flags=&lsquo;&mdash;with-libsigsegv-prefix=/usr/local&rsquo; cim install clisp
</span><span class="line">
</span><span class="line">To show available lisp implementations, type &lsquo;cim list install&rsquo;.
</span></code></pre></td>
</tr></table></div></figure></p>

<p>インストールします。はい。<code>&lt;impl[-version]&gt;</code>ってのは<code>sbcl</code>とか<code>clisp-2.48</code>とかですね。バージョンを指定しなかったら最新版になります。<code>cim list install</code>でインストール可能なものを表示しますが載ってない古いバージョンとかもインストールできる筈です。多分。</p>

<p><code>configure</code>スクリプトに渡すフラグを指定したいときは<code>flags='flag....' cim install</code>とします。ヘルプにあるように<code>libsigsegv</code>のパスを指定しないとFreeBSDでclispをインストールできなかったので用意しました。</p>

<p>Allegroはライセンス表示した方が良いのかなーとか考えてます。</p>

<h2><code>cim use</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim use &lt;impl[-version]&gt; [&mdash;default]
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Use &lt;impl&gt; as background for &lsquo;cl&rsquo; command. It also affects bare lisp command.
</span><span class="line">If version is not given, use latest version.
</span><span class="line">If &mdash;default is given, use the specified implementation at initial state.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # use the latest sbcl
</span><span class="line"> cim use sbcl
</span><span class="line"> sbcl &mdash;version
</span><span class="line"> &ndash;&gt; SBCL 1.1.14
</span><span class="line"> # use old sbcl
</span><span class="line"> cim use sbcl-1.1.10
</span><span class="line"> sbcl &mdash;version
</span><span class="line"> &ndash;&gt; SBCL 1.1.10
</span><span class="line">
</span><span class="line"> # use ccl-1.9 and set it default
</span><span class="line"> cim use ccl-1.9 &mdash;default
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>cl</code>コマンドのバックエンドの切り替えと処理系のバージョンの両方を切り替えます。処理系の指定の仕方は<code>install</code>に同じ。じゃなかった。<code>install</code>に加えて<code>/bin:/usr/bin:/usr/local/bin</code>にあるものを<code>xxx-system</code>として指定できます。<code>sbcl-system</code>とか。</p>

<p>例えば</p>

<pre><code>cim use clisp-2.48
</code></pre>

<p>ってやると<code>cl</code>コマンドがバックエンドとしてclispのバージョン2.48を使うようになりますし、<code>clisp</code>コマンドのバージョンも2.48になります。この<code>clisp</code>の部分はリンクを貼り替えてて、一つのシェルで変更すると他のシェルにも影響が及ぶ問題があるのでそのうち直します。これ結構面倒なのでそのうちです。<br/>
clisp = clisp-2.48な状態で<code>cim use sbcl</code>するとclisp = clisp-2.48なまま<code>cl</code>のバックエンドがsbclになります。上手く使って下さい。</p>

<p><code>--default</code>を付けると次回からのデフォルト値を指定したものにしつつ<code>cim use</code>します。</p>

<h2><code>cim resume</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help resume
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim resume [rm] &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Resume interrupted installation of &lt;impl&gt;. If &lt;version&gt; is not given, the latest version is used.
</span><span class="line">If &lsquo;rm&rsquo; is given, remove &lt;impl&gt; from &lsquo;resume&rsquo; list.
</span><span class="line">If target is &lsquo;all&rsquo;, do on all the available target.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # resume the installation of clisp with configure flags
</span><span class="line"> flags=&lsquo;&mdash;with-libsigsegv-path=/usr/local&rsquo; cim resume clisp
</span><span class="line">
</span><span class="line"> # remove all the available target.
</span><span class="line"> cim resume rm all
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>cim install</code>がエラー終了したり<code>Ctrl-C</code>で中断したりしたやつを再開してくれるコマンドです。<code>cim install sbcl</code>を中断したなら<code>cim resume sbcl</code>で再開できます。<code>cim resume all</code>で中断された全てのインストールを再開します。終了ステータスは再開してもまたエラーで終了したやつの数になります。</p>

<p><code>cim resume rm sbcl</code>だと<code>cim list resume</code>の結果から<code>sbcl</code>を削除できます。<code>resume</code>はしませんよ。<code>cim resume rm all</code>とかも可能です。</p>

<h2><code>cim list</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help list
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim list &lt;subcommand&gt;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">List available target for subcommand.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # list available lisp implementation to install
</span><span class="line"> cim list install
</span><span class="line">
</span><span class="line"> # show available target for list
</span><span class="line"> cim list list
</span><span class="line">
</span><span class="line"> # targets for subsubcommands are also available
</span><span class="line"> cim list resume rm
</span></code></pre></td>
</tr></table></div></figure></p>

<p>さっきから出てきてるので分かるかと思いますが、可能なターゲットを表示します。将来的には<code>zsh</code>の補完候補にも使うつもりです。そのときは<code>-b, --batch</code>オプションでhuman readableかmachine readableかを分けようかなと。</p>

<h2><code>cim reinstall</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help reinstall
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim reinstall &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Force install already installed implementaion(s). Downloaded archives are resued if available
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If target is &lsquo;all&rsquo;, do on all the available targets.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # reinstall sbcl-1.1.14
</span><span class="line"> cim reinstall sbcl-1.1.14
</span><span class="line"><br/>
</span><span class="line"> # reinstall all installed lisp impls
</span><span class="line"> cim reinstall all
</span><span class="line">
</span><span class="line">To show available lisp implementations, type &lsquo;cim list reinstall&rsquo;.
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>cim install</code>は既にインストールされているものはインストールできないのですが、<code>reinstall</code>を使えば可能です。ダウンロードしたアーカイブがあればそれを使います。なければダウンロードから始めます。<code>all</code>は察しのようにインストール済のものを全て<code>reinstall</code>します。</p>

<h2><code>cim clean</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help clean
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim clean &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Remove donwloaded archives and extracted sources of the given lisp implementations.
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If target is &lsquo;all&rsquo;, do on all the available targets.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # clean sbcl-1.1.14
</span><span class="line"> cim clean sbcl-1.1.14
</span><span class="line"><br/>
</span><span class="line"> # clean all installed lisp impls
</span><span class="line"> cim clean all
</span><span class="line">
</span><span class="line">To show available lisp implementations, type &lsquo;cim list clean&rsquo;.
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>cim install</code>は基本的に不要なものも削除しないので、それが嫌なら<code>clean</code>を使いましょうというスタンスです。アーカイブとソースを削除します。</p>

<h2><code>cim distclean</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$cim help distclean
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim distclean &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Clean built files of the given lisp implementation. It doesn&rsquo;t mean uninstall.
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If target is &lsquo;all&rsquo;, do on all the available targets.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # distclean sbcl-1.1.14
</span><span class="line"> cim distclean sbcl-1.1.14
</span><span class="line"><br/>
</span><span class="line"> # distclean all installed lisp impls
</span><span class="line"> cim distclean all
</span><span class="line">
</span><span class="line">To show available lisp implementations, type &lsquo;cim list distclean&rsquo;.
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>cim clean</code>より控えめなコマンドです。コンパイルするときに<code>make</code>で生成されたファイルを削除します。<code>make clean</code>的な。</p>

<h2><code>cim uninstall</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help uninstall
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim uninstall &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Uninstall the given lisp implementaion(s). It does&rsquo;t remove donwloaded archives and extracted sources.
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If target is &lsquo;all&rsquo;, do on all the available targets.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # uninstall sbcl-1.1.14
</span><span class="line"> cim uninstall sbcl-1.1.14
</span><span class="line"><br/>
</span><span class="line"> # uninstall all installed lisp impls
</span><span class="line"> cim uninstall all
</span><span class="line">
</span><span class="line">To show available lisp implementations, type &lsquo;cim list uninstall&rsquo;.
</span></code></pre></td>
</tr></table></div></figure></p>

<p>アンインストールします。はい。ただしダウンロードしたアーカイブとソースは削除しません。</p>

<h2><code>cim purge</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help purge
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim purge &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Uninstall and clean up downloaded files of the given lisp implementation.
</span><span class="line">This command is equivalent to &lsquo;clean&rsquo; and &lsquo;uninstall&rsquo;.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # purge the latest sbcl
</span><span class="line"> cim purge sbcl
</span><span class="line">
</span><span class="line">To show available target for &lsquo;purge&rsquo;, type &lsquo;cim list purge&rsquo;
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>uninstall</code>のアーカイブとソースを削除する版です。</p>

<h2><code>cim info</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help info
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim info
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Display information for current cim. It includes environment variables that cim uses, what current and default lisp implementation is, what version of each implementation is used, and where system lisp is.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> # display info
</span><span class="line"> cim info
</span></code></pre></td>
</tr></table></div></figure></p>

<p>現在の状態を表示します。こんな感じ。</p>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim info
</span><span class="line">CIM_ID = 22176
</span><span class="line">CIM_HOME = /home/kim/.cim
</span><span class="line">
</span><span class="line">current lisp = sbcl-system
</span><span class="line">default lisp = sbcl-system
</span><span class="line">
</span><span class="line">abcl = abcl-1.2.1
</span><span class="line">alisp = alisp-9.0
</span><span class="line">ccl = ccl-1.9
</span><span class="line">clisp = clisp-2.49
</span><span class="line">ecl = ecl-13.5.1
</span><span class="line">gcl = gcl-2.6.9
</span><span class="line">sbcl = sbcl-system
</span><span class="line">
</span><span class="line">sbcl-system = /usr/local/bin/sbcl
</span><span class="line">gcl-system = /usr/bin/gcl
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>CIM_ID</code>ってのは<code>cim</code>がそれぞれのシェルの状態を管理するためのIDです。まあ、そのシェルのプロセスIDですね。逆にプロセスIDの取得と環境変数の設定さえできれば<code>cim</code>は動かせるのでEmacsでも簡単に動きます。</p>

<h2><code>cim get</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help get
</span><span class="line">Usage:
</span><span class="line"> cim get
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Upgrade to the latest cim.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> cim get
</span></code></pre></td>
</tr></table></div></figure></p>

<p>cim自身のアップデートです。なんでこんな名前かというと<code>rvm</code>がそうだからです。現状はgithubのKeenS/CIMのmasterからとってきます。stable版ができたらstableに変更しますね。実はブランチを指定してとってくる方法もあったりはします。<code>cim get --branch stable</code>か <code>CIM_INSTALL_BRANCH=stable cim get</code>です。まだブランチが無いので意味ないんですけどね。</p>

<p>この辺で気付いたかもしれませんが結構環境変数で制御できるようにデザインされてます。rubyがそんな感じだからです。</p>

<h2><code>cim version</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help version
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim version
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Show current cim&rsquo;s version
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> cim version
</span></code></pre></td>
</tr></table></div></figure></p>

<p>めちゃくちゃバグがあるのにversionが1.0.0に見えるの気のせいです。きっと100点中の1点なんですよ。</p>

<h2><code>cim help</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help help
</span><span class="line">Help for &lsquo;help&rsquo; is not prepared, sorry.</span></code></pre></td>
</tr></table></div></figure></p>

<p>あー。<code>help</code>のhelp用意してなかったー。まあ、上で使ったのが全てです。</p>

<h1><code>cl</code></h1>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cl -h
</span><span class="line">Usage: cl [switchs] [&mdash;] [programfile] [argumensts]
</span><span class="line">
</span><span class="line">-C DIR set <em>default-pathname-defaults</em> DIR.
</span><span class="line">-d, &mdash;debug set debugging flags (push :debug into <em>features</em>)
</span><span class="line">-e, &mdash;eval SEXP one line of script. Several -e&rsquo;s are allowed. Omit [programfile]
</span><span class="line">-f, &mdash;load FILE load the FILE
</span><span class="line">-i EXT edit <em>argv</em> files in place and make backup with the extension .EXT
</span><span class="line">-l LIBRARY quickload the LIBRARY
</span><span class="line">-L LIBRARY quickload and use-package the LIBRARY
</span><span class="line">-r, &mdash;repl run repl
</span><span class="line">-q, &mdash;no-init do not load $CIM_HOME/init.lisp
</span><span class="line">&mdash;no-rl do not use rlwrap. This is effective only when &mdash;repl is specified
</span><span class="line">&mdash;no-right do not display right prompt. This is effective only when &mdash;repl is specified
</span><span class="line">&mdash;no-color do not use color. This is effective only when &mdash;repl is specified
</span><span class="line">-h, &mdash;help print this help
</span><span class="line">-v, &mdash;version print the version
</span><span class="line">
</span><span class="line">If neither programfile, -e (&mdash;eval) nor -r (&mdash;repl) are specified, cl reads scripts from the standard input and then eval them.
</span></code></pre></td>
</tr></table></div></figure></p>

<p>まあ、見たら分かりますね。ruby由来のオプションとShelly由来のオプションと私の好みのオプションがあります。<code>cl</code>を起動する方法は</p>

<ul>
<li><code>cl script.lisp</code></li>
<li><code>cl &lt; script.lisp</code></li>
<li><code>cl -e sexp</code></li>
<li><code>cl -r</code></li>
</ul>


<p>です。<code>cl script.lisp</code>はシェバン(最初の行が<code>#!</code>なもの)を無視します。</p>

<p>また、これも環境変数<code>LISP_IMPL</code>でバックエンドを制御できます。これはShelly由来ですね。</p>

<p>もう一つ、デバッガは起動しません。スクリプトやワンライナーはエラーを吐いて終了して欲しいですし次に述べますがREPLも目的からしてデバッガは相応しくないと思うからです。因みにですが<code>-d</code>オプションをつけてもデバッガは起動しません。理由はオプション解析のほとんどをLispに任せているので起動時のオブションである<code>--disable-debugger</code>を制御できないからです。需要が高そうならシェルスクリプト内で解析して頑張ってみます。</p>

<p>あ、<code>-c, --compile FILE</code>オプションつけ忘れてた。いつか入れます。<code>(compile-file FILE)</code>で可能でしょうからすぐに入るはずです。</p>

<h2><code>cl -r</code></h2>

<p>一応開発向けではなくて、ちょっと試したいときや初心者が本を片手に動かすときを想定して作ってます。エラーはメッセージのみ表示。ちょっと試したいときはあんまりデバッガを必要としませんしスタックトレースもどうせ深さ1~2なのであまり必要でないからです。なにより初心者にとってデバッガは何をして良いか分かりませんし覚えても処理系毎に操作が違います。その辺を分り易い統一インターフェースを作ることも考えたのですが「それって<code>swank</code>」って結論に至ったのでこのままです。</p>

<h1><code>ql</code></h1>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">ql &mdash; Command line interface for quicklisp
</span><span class="line">
</span><span class="line">Commands currently available
</span><span class="line">deps &lt;system&gt; ;; Install dependencies of &lt;system&gt;.
</span><span class="line">help [command] ;; Show help.
</span><span class="line">install[quickload] &lt;system&gt;&hellip; ;; Install given system.
</span><span class="line">list {remote | local} ;; List available/installed systems.
</span><span class="line">search[system-propos] &lt;keyword&gt; ;; Search quicklisp.
</span><span class="line">uninstall &lt;system&gt; ;; Uninstall system.
</span><span class="line">update [system] ;; Update dist info and installed systems.</span></code></pre></td>
</tr></table></div></figure></p>

<p>一番未完成なコマンドです。主な理由は私が<code>quicklisp</code>の使い方を分かってないからです。</p>

<h2><code>ql deps</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help deps
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql deps [&mdash;path &lt;path&gt;] &lt;system&gt;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Install dependencies of given system. If path is specified, install dependencies there.
</span><span class="line">Once you run &lsquo;ql &mdash;path &lt;path&gt; deps&rsquo;, you don&rsquo;t need to specify &lsquo;&mdash;path&rsquo; because the path is written out to &lsquo;.quicklisp-path&rsquo; in current directory.
</span><span class="line">You can run &lsquo;ql deps&rsquo; for a local system if &lsquo;.asd&rsquo; file is in current directory.
</span><span class="line">This command is useful when you want to separate quicklisps for local project.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql deps &mdash;path ./quicklisp my-project
</span></code></pre></td>
</tr></table></div></figure></p>

<p>rubyの<code>bundler</code>を参考に作りました。<code>Gemfile</code>に対応する<code>QLfile</code>でも読もうかと思いましたが良く考えたら<code>.asd</code>で十分じゃんとの思いに至ったのでカレントパスの<code>asd</code>ファイルを読みます。<br/>
が、奴は依存システムのバージョンまでは指定できなかった気がするのでやっぱり必要な気がします。</p>

<p><code>ql deps --path ./ql myapp</code>とすると依存システム(+新たな<code>quicklisp</code>本体)を<code>./ql</code>にインストールしてくれます。<code>quicklisp</code>本体のインストールは不要ですがどうやったら回避できるかは今模索中です。<br/>
<code>--path</code>の位置が<code>cim use --default</code>と違うのでご注意下さい。これは主に内部で使ってる<code>parse-option</code>の欠陥に由来します。<br/>
一度指定すると<code>.quicklisp-path</code>にパスを書き出してくれるので次回からは必要なくなります。カレントディレクトリに複数の<code>asd</code>ファイルがあってそれぞれでパスを使い分けたいとかはできません。<br/>
あと、最大の欠陥として<code>./ql</code>にシステムをインストールしてもそれを読み込みにいくコマンドがないので実用性ゼロです← まあ、<code>cl</code>あたりを弄ってカレントパスに<code>.quicklisp-path</code>があったら読みにいくようにします。その辺は<code>.lisp-impl</code>とかも含めて考えます。</p>

<h2><code>ql help</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help help
</span><span class="line">Help for &lsquo;help&rsquo; is not prepared, sorry.
</span></code></pre></td>
</tr></table></div></figure></p>

<p>こいつもhelp用意してなかった。まあ、良いや。</p>

<h2><code>ql install</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help install
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql install &lt;system&gt;&hellip;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Install given system(s) to $CIM_HOME/quicklisp.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> # install clack
</span><span class="line"> ql install clack
</span></code></pre></td>
</tr></table></div></figure></p>

<p>なんでこいつがhelpの先頭に居ないんでしょうね。<code>cim</code>に比べて適当ですね。</p>

<p><code>ql quickload</code>っていう別名も持ってます。<code>ql help</code>には<code>quickload</code>が本名で<code>install</code>がエイリアスって書いてありましたが実装ミスりました。</p>

<p>名前の通り<code>ql:quickload</code>します。<code>system</code>は複数指定できます。</p>

<h2><code>ql list</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql list
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql list {remote | [local]}
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">List installed systems. if &lsquo;remote&rsquo; is given, list all the available systems. &lsquo;ql list local&rsquo; is equivalent to &lsquo;ql list&rsquo;.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql list remote
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>cim list</code>と使い方が違ってアレですね。現状<code>quicklisp</code>に登録されているもの全てを表示する<code>ql list remote</code>とインストールしたものだけを表示する<code>ql list [local]</code>があります。<code>ql deps</code>でパスを指定したやつらにも使いたかったのですが方法が分かんないのでとりあえず先送りです。</p>

<h2><code>ql search</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help search
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql search &lt;keyword&gt;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Search quicklisp for &lt;keyword&gt;.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql search http
</span></code></pre></td>
</tr></table></div></figure></p>

<p>別名<code>system-apropos</code>。別名と本名が<code>ql help</code>と違うのも単に<code>ql:system-apropos</code>を呼ぶのも<code>ql install</code>と同じです。出力結果をもうちょっと制御したいなと思ってます。</p>

<h2><code>ql uninstall</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help uninstall
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql uninstall &lt;system&gt;&hellip;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Uninstall given system(s).
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql uninstall caveman clack
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>ql:uninstall</code>に同じ。以上。</p>

<h2><code>ql update</code></h2>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help update
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql update [client]
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Update installed systems. If target &lsquo;client&rsquo; is given, update quicklisp itself.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql update client
</span></code></pre></td>
</tr></table></div></figure></p>

<p><code>ql:update-all-dists</code>か<code>ql:update-client</code>かを選べます。最初はsystem毎にアップデートしたかったのですが無理っぽいので止めました。</p>

<h1>おわりに</h1>

<p>とりあえずCIMの機能はこれで全部です。あ、開発用に<code>cim reset</code>とかありますけど使わないで下さい。とういうか使うなよ。絶対使うなよ。</p>

<p>これら使ってみてバグがあったらgithubのissueに投げるなりtwitterで報告するなりして下さい。</p>

<p>ところでCIMは私はちむと読んでます。しー・あい・えむと読む人も居るようです。何でも良いです。プロジェクトとしてのちむとコマンドとしてのちむを区別するためにコマンドは小文字で<code>cim</code>、そして<code>cim</code>、<code>cl</code>、<code>ql</code>を含んだプロジェクトは大文字でCIMと書くことにします。今考えました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #13でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13/"/>
    <updated>2014-01-24T02:29:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13</id>
    <content type="html"><![CDATA[<p>もう12時回ったので昨日になってしまいましたが <a href="http://atnd.org/events/46746#comments">Lisp Meet Up presented by Shibya.lisp #13</a>に参加してLTしてきたので報告(?)エントリです。</p>

<!-- more -->


<p>先月東京に戻ってきた深町さんがめちゃくちゃ宣伝してたせいか20人参加希望があり、19人参加しました。</p>

<p>自己紹介ではClojureが多いなーってのとRubyistが混ってたりしたのが印象的でした。Emacs Lispの人も居たり。</p>

<p>LTは一人目がにとり(深町英太郎 (fukamachi))(@nitro_idiot)さん。今更ながら呼び方に困りましたね。内容はO/Rマッパーの <a href="https://github.com/fukamachi/integral"><code>integral</code></a>の機能と実装について。<br/>
非Common Lisperが多い中Meta Object Protocolについて色々説明したりと大変そうでした。私はCommon LisperなのでMOPにそんな使い方がるのかとか結構面白かったです。<br/>
<s>スライドはまだ上げてないみたいです。そのうち上がるでしょう。</s>上がりました。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30362150" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/fukamachi/lisp-meet-up-presented-by-shibuyalisp-13" title="Integral - New O/R Mapper for Common Lisp">Integral – New O/R Mapper for Common Lisp</a></strong> from <strong><a href="http://www.slideshare.net/fukamachi">fukamachi</a></strong></p>

<p>二人目が私。最近作ってる <a href="https://github.com/KeenS/CIM"><code>CIM</code></a>についてです。スライド見るのが速いですね。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30338391" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/blackenedgold/cim-common-lisp-implementation-manager" title="CIM - Common Lisp Implementation Managerを作りました">CIM – Common Lisp Implementation Managerを作りました</a></strong> from <strong><a href="http://www.slideshare.net/blackenedgold">blackenedgold</a></strong></p>

<p>実際にそれぞれのコマンドを動かしてみた結果、予想してなかったエラーなとがあったものの割と聴衆の反応は良かったです。あとはPure Bourne Shell Scriptで挑んで爆死した話とかしたりですね。「詳解シェルスクリプト」を読んだり<code>man</code>ページ読んだりして頑張ったんですよ。</p>

<p>それが終わったら一旦休憩。そしたらわざわざ深町さんが私のところに来て下さって「Shellyより良いプロダクトになると思います。頑張って下さい。」との御言葉を頂きました。非常に嬉しかったです。私が作ったものが認められた。しかも着想の元になったShellyの作者の深町さんから。<br/>
でもその後実際に何人か使ってみてくれたのですが、バグが立て続けに3つくらい発覚して「…これ、テスト必要ですね」と絶句。分かってます。分かってますけど難しいんです泣。<br/>
他はgithubでCIMを探そうとしてる方が居たんですが同じ名前のレポジトリがめちゃくちゃあって検索性悪いなとか。何故か私のハンドルネームの最初の文字がk(ケー)ではなくκ(カッパ)なのを知ってたり。</p>

<p>その後の懇親会では向かいが深町さん、隣が佐野さん(実践Common Lispの訳者)で、Common Lispの今後とか色々な話をしてました。 <a href="http://redmonk.com/sogrady/2014/01/22/language-rankings-1-14/">ここ</a>のグラフでCommon Lispがありえない位置にいるしどうやったら普及するんだろうねーとか。</p>

<p>運営のchikuさん potixさん、発表を聞いてCIMを試してくれたりGithubにstarくれたりしたみなさんありがとう御座いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ClackのHandlerの書き方]]></title>
    <link href="http://KeenS.github.io/blog/2013/12/06/lisp-advent-calendar-7/"/>
    <updated>2013-12-06T00:06:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/12/06/lisp-advent-calendar-7</id>
    <content type="html"><![CDATA[<p>(この記事は <a href="http://qiita.com/advent-calendar/2013/lisp">Lisp Advent Calendar</a> 7日目のためのエントリです。<br/>
 ( <a href="http://meymao.hatenablog.com/entry/2013/12/06/140029">6日目</a> meymaoさんより「Lisperがクリスマスに贈るべきプレゼント三選」)<br/>
 ( <a href="http://www.principia-m.com/ts/0081/index-jp.html">8日目</a> athos0220さんよりマクロとクロージャで作る並行プログラミング言語))</p>

<p>ClackのHandlerの書き方についてちゃちゃっと解説します。</p>

<!-- more -->


<p>さっくりゆるふわな感じで行くので <a href="http://clacklisp.org/">clack公式</a>だとか <a href="http://clacklisp.org/tutorial/ja/">チュートリアル</a>だとかも参考にして下さい。とは言ってもCommon Lispな方なら知ってるでしょう。</p>

<h2>Clackって？</h2>

<p>PerlのPlackやRubyのRackと同じくCommon Lispの統一HTTPサーバーインターフェースです。開発時はHunchentootで、本番はFastCGIでみたいなことが簡単にできます。</p>

<h2>Handlerって？</h2>

<p>HunchentootやFastCGIといったバックエンドとClackとの間でリクエストやレスポンスの受け渡しを担当します。さっくり言うとHandlerを書けばClackで使えるサーバーが増える訳です。今(2013-12現在)のところ、Hunchentoot、FastCGI、Apache + mod_lisp2があるようです。</p>

<p>じゃあ、実際に軽量サーバーの <a href="https://github.com/gigamonkey/toot">toot</a>のハンドラを書きながら解説しますね</p>

<h2>準備</h2>

<p><code>git clone git@github.com:fukamachi/clack.git</code>してclackのソースコードを持ってきます。他のHanderがそうしてるようなので</p>

<ul>
<li><code>clack/clack-handler-toot.asd</code></li>
<li><code>clack/src/core/handler/toot.lisp</code></li>
</ul>


<p>を作ります。<code>core</code>じゃなくて<code>contrib</code>だろとかそもそも自分のリポジトリに作れよとかは自由にやって下さい。<code>clack/clack-handler-toot.asd</code>は適当に似た名前のやつをコピーすれば良いんじゃないですかね？（適当</p>

<h2>書き方</h2>

<p>いたって簡単で、<code>run (app &amp;key debug (port 5000)) -&gt; acceptor</code>と<code>stop (acceptor) -&gt; 多分決まってない</code>を実装すれば良いです。</p>

<p>とはいっても<code>stop</code>は1行で終わりますが<code>run</code>は大きく分けて</p>

<ol>
<li>. サーバーを立ち上げる</li>
<li>. サーバーから渡されたリクエスト(多くの場合<code>request</code>オブジェクト)をplistにして<code>app</code>に渡す</li>
<li>. <code>app</code>のlist形式の返値を適切な形(多くの場合<code>response</code>オブジェクト)にしてサーバーに返す</li>
<li>. エラーハンドリング</li>
</ol>


<p>の4つの作業があります。一つ一つ説明していきますね。</p>

<h3>1 サーバーを立ち上げる</h3>

<p>tootの場合は<code>toot:start-server (&amp;key handler port)</code>を使いました。スレッド立てるのはclackがやってくれます。はい。</p>

<h3>2 サーバー渡されたリクエスト(多くの場合<code>request</code>オブジェクト)をplistにして<code>app</code>に渡す</h3>

<p>tootの場合、<code>key</code>の<code>handler</code>が<code>requesut</code>オブジェクトを受け取って<code>response</code>オブジェクトを返せば良いので</p>

<pre><code>(lambda (req)
    .....
    (call app (handle-request req))
    .....
)
</code></pre>

<p>って感じで<code>handle-request</code>に実装を書きます。</p>

<p><code>handle-request</code>の内部は<code>req</code>を <a href="http://clacklisp.org/tutorial/ja/04-the-environment.html">clack公式のチュートリアル</a>に載っているプロパティに一つ一つ変換していきます。このプロパティとバックエンドのオブジェクトのスロット名と実際のHTTPヘッダの名前が必ずしも一致しないのが泣き所です。さらに、大抵のサーバーの場合リクエストオブジェクトのスロットの詳細まではドキュメントに載ってないのでソースを参照しながら書くことになります。また、そもそも対応する値が無くて、他の情報を切り貼りして作らないといけなかったり、どうしようもなくて空にしないといけないこともあります。</p>

<p>tootハンドラは</p>

<pre><code>(defun handle-request (req)
  "Convert Request from server into a plist
before pass to Clack application."
  (let ((content-length (and (request-header :content-length req)
                             (parse-integer (request-header :content-length req) :junk-allowed t)))
    (port-and-host (get-port-and-host req)))
    (append
     (list
      :request-method (request-method req)
      :script-name ""
      :path-info (url-decode (request-path req))
      :server-name (car port-and-host)
      :server-port (cdr port-and-host)
      :server-protocol (server-protocol req)
      :request-uri (request-uri req)
      :url-scheme :HTTP;(request-scheme req)
      :remote-addr (remote-addr req)
      :remote-port (remote-port req)
      :query-string (request-query req)
      :content-length content-length
      :content-type (request-header :content-type req)
      :raw-body (let ((stream (toot::request-body-stream req)))
                  ;(when content-length
                    ;(setf (flex:flexi-stream-bound stream) content-length))
                  stream)
      :clack.uploads nil
      :clack.handler :toot)


     (loop for (k . v) in (toot::request-headers req)
           unless (find k '(:request-method :script-name :path-info :server-name :server-port :server-protocol :request-uri :remote-addr :remote-port :query-string :content-length :content-type :accept :connection))
             append (list (intern (format nil "HTTP-~:@(~A~)" k) :keyword)
                          v)))))
</code></pre>

<p>こんな感じに実装されてます。tootからインポートしたものの他、一部ヘルパー関数も使ってますが挙動はまあ、名前から察して下さい。</p>

<h3>3 <code>app</code>の返値のplistを適切な形(多くの場合<code>response</code>オブジェクト)にしてサーバーに返す</h3>

<p><code>app</code>を<code>call</code>してやると<code>(status headers body)</code>という形式のlistが返ってきます。<code>status</code>は数値、<code>headers</code>はplist、<code>body</code>はパスネーム又は文字列のリストです。</p>

<p>さっきはこんな感じで呼んだのでした。</p>

<pre><code>(lambda (req)
    .....
    (call app (handle-request req))
    .....
)
</code></pre>

<p>もうお分かりかと思いますが</p>

<pre><code>(lambda (req)
    (handle-response
        (call app (handle-request req)))
)
</code></pre>

<p>として、実装は<code>handle-response</code>に書きます。…が、tootは<code>response</code>オブジェクトではなく<code>request</code>オブジェクトに変更を加えたものを返すようなので</p>

<pre><code>(lambda (req)
    (handle-response
        req
        (call app (handle-request req)))
)
</code></pre>

<p>として、<code>app</code>の返値を元に<code>req</code>を書き換えます。こちらもあまりドキュメントが無いので頑張ってソース読むしかないです。因みに<code>body</code>はパスネームならそのファイルの内容を、文字列のリストならそれぞれを改行(<code>&lt;br&gt;</code>ではなく<code>\n</code>)で連結したものを返す必要があります。</p>

<p>tootハンドラの実装載せときますね。</p>

<pre><code>(defun handle-response (req res)
  (destructuring-bind (status headers body) res
    (etypecase body
      (pathname
       (multiple-value-call #'serve-file
     (values req body (parse-charset (getf headers :content-type)))))
      (list
       ;; XXX: almost same as Clack.Handler.Hunchentoot's one.
       (setf (status-code req) status)
       (loop for (k v) on headers by #'cddr
             with hash = (make-hash-table :test #'eq)
             if (gethash k hash)
               do (setf (gethash k hash)
                        (format nil "~:[~;~:*~A, ~]~A" (gethash k hash) v))
             else if (eq k :content-type)
               do (multiple-value-bind (v charset)
                      (parse-charset v)
                    (setf (gethash k hash) v)
                    (setf (toot::response-charset req) charset))
             else do (setf (gethash k hash) v)
             finally
          (loop for k being the hash-keys in hash
                using (hash-value v)
                do (setf (response-header k req) v)))
       (toot::send-response req (with-output-to-string (s)
      (format s "~{~A~^~%~}" body)))))))
</code></pre>

<p>です。</p>

<pre><code>(destructuring-bind (status headers body) res
  (etypecase body
    (pathname ...)
    (list ...)))
</code></pre>

<p>がテンプレートですね。<code>pathname</code>のときはtootに丸投げして<code>list</code>のときは<code>headers</code>とかを真面目に処理してます。</p>

<h3>4 エラーハンドリング</h3>

<p>早い話が500 internal server errorです。普通、Lispはエラーが起きるとデバッガに落ちますがサーバーは走り続ける必要がるのであらゆるエラーを無視する必要があります。が、しかしデバッグするとき(<code>run</code>のキーワード引数に<code>debug</code>がありましたね)はデバッガに落ちると嬉しいです。なので例のラムダを少し変更します。</p>

<pre><code>(lambda (req)
              (handle-response
               req
               (if debug (call app (handle-request req))
           (aif (handler-case (call app (handle-request req))
              (condition () nil))
            it
            '(500 nil nil)))))
</code></pre>

<p>これで完成です。</p>

<h2>テスト</h2>

<p>Clackにはテストが付いてます。テストケース自体は<code>clack/src/core/test/suite.lisp</code>に書かれてます。</p>

<p><code>clack/t/core/handler/hunchentoot.lisp</code>を参考に<code>clack/t/core/handler/toot.lisp</code>を作り、<code>clack/clack-test.asd</code>の<code>hunchentoot</code>を<code>toot</code>に書き換えたら準備完了です。<code>(ql:quickload :clack-test)</code>しましょう。テストが走ります。そして恐らくエラーが出て止まるでしょう。変な値を返すとサーバーじゃなくてテストの方がエラーで死ぬんですね。</p>

<p>そしたら<code>clack/src/core/test/suite.lisp</code>を開いて期待された値がなんだったかを調べてサーバーを修正します。で、また<code>(ql:quickload :clack-test)</code>の繰り返し。でも一回<code>quickload</code>しちゃうと読み直してくれないので私は一々<code>M-x slime-restart-inferior-lisp</code>してました。なんか違う気がする。これだけじゃなくてテスト全般。溢れるバッドノウハウ感。</p>

<p>とりあえずバックエンドにバグがあるとかのどうしようもない場合を除いてテストに全部合格すれば完成です</p>

<h2>完成したら</h2>

<p>どうしたらいいんでしょうね。分かんないです。clackにpull-req送るんでしょうか。あるいはquicklispに登録?私はとりあえず <a href="https://github.com/KeenS/clack">ブランチに置いてます</a>が恐らく誰も使ってないですし知らないと思います。</p>

<h2>で、何作ればいい？</h2>

<p><a href="https://github.com/fukamachi/clack/issues?state=open">clackのissue</a>にまだ作られてないものがリストされてます。「自分では需要はないけどなんか作ってみたい」といった奇特な方はそこから試すと良いんじゃないでしょうか。GAEとかmongrel2とか需要ありそうな気がします。</p>

<h2>まとめ</h2>

<p>誰得</p>
]]></content>
  </entry>
  
</feed>
