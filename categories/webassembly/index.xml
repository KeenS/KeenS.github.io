<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebAssembly on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/webassembly/</link>
    <description>Recent content in WebAssembly on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 10 Nov 2018 00:49:26 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/webassembly/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WebAssemblyとABI</title>
      <link>//KeenS.github.io/slide/webassemblytoabi/</link>
      <pubDate>Sat, 10 Nov 2018 00:49:26 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/webassemblytoabi/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS Idein Inc.のエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
WebAssmblyとは   Webブラウザで動く アセンブリ ではない  ===
WASMの動作環境   ブラウザ NodeJS CommonWA losfair/IceCore : Build efficient and reliable backend applications in WebAssembly. Introducing Wasmjit: A kernel mode WebAssembly runtime for Linux | Packt Hub piranna/wasmachine: Put WebAssembly in your washing machine  ===
言語としてのWASM   アセンブラっぽい雰囲気 スタックマシン 無限のレジスタ(変数)とスタックがある コードの単位は関数 上位にモジュールがある モジュール毎に1仮想マシン(インスタンス)  ===</description>
    </item>
    
    <item>
      <title>WebAssemblyでGC</title>
      <link>//KeenS.github.io/blog/2017/12/07/webassemblynogc/</link>
      <pubDate>Thu, 07 Dec 2017 23:19:41 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/12/07/webassemblynogc/</guid>
      <description>&lt;p&gt;κeenです。この記事は&lt;a href=&#34;https://qiita.com/advent-calendar/2017/webassembly&#34;&gt;WebAssembly Advent Calendar 2017&lt;/a&gt; 8日目の記事です。WebAssemblyでガーベジコレクションする話。
2017-12-08: ページサイズに関する誤りを訂正しました。その他加筆。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WebAssemblyとコンパイラとランタイム</title>
      <link>//KeenS.github.io/slide/webassemblytokonpairatorantaimu/</link>
      <pubDate>Thu, 16 Feb 2017 15:46:21 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/webassemblytokonpairatorantaimu/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS Idein Inc.のエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
何の話   WebAssemblyをバックエンドに使う言語を作りたい KeenS/webml: An ML like toy language compiler 既に発表したものの補足記事的な  コンパイラの人からみたWebAssembly | κeenのHappy Hacκing Blog ある程度再度説明します    ===
アジェンダ   なぜWebAssembly コンパイラ コード生成 ランタイム  ===
なぜWebAssembly ===
なぜWebAssembly   なんかバイナリでテンション上がる ポータブルでコンパクトで速い 機能的にJSを越えるかもしれない…？ コンパイラがブラウザで動くと言語導入のハードル下がる  気軽に試せる コンパイラだけでなく吐いたコードもブラウザで動かしたい    ===
WASM over LLVM   既存のJS環境と協調する  JSとの相互呼び出しとか   non-determinismが少ない 細かいアラインメント考える必要がない API安定しそう  ===</description>
    </item>
    
    <item>
      <title>コンパイラの人からみたWebAssembly</title>
      <link>//KeenS.github.io/slide/konpairanoninkaramitawebassembly/</link>
      <pubDate>Sun, 22 Jan 2017 13:35:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/konpairanoninkaramitawebassembly/</guid>
      <description>コンパイラの人からみたWebAssembly  コンパイラ勉強会 - connpass
===
About Me   κeen @blackenedgold Github: KeenS Idein Inc.のエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
アジェンダ   WebAssemblyの概要 具体的な話 WebAssembly吐こうとした話  ===
WebAssemblyの概要 ===
JavaScript   ブラウザ上で動くスクリプト言語 動的型付 高級 GCとかある 今までブラウザで動く唯一の言語だった 遅い  各ブラウザJITなどで補強    ===
asm.js   プラウザ上で動く言語 低級 GCなし JSのサブセット  asm.jsをサポートしないプラウザでも動かせる   コンパイラから生成されることを想定  emscriptenなど    ===
function geometricMean(start, end) { start = start|0; // start has type int  end = end|0; // end has type int  return +exp(+logSum(start, end) / +((end - start)|0)); } .</description>
    </item>
    
  </channel>
</rss>