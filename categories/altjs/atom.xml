<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: altjs | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/categories/altjs/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-12-07T00:28:29+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[(S式で書く(altJS)達)]]></title>
    <link href="http://KeenS.github.io/slide/sshi-deshu-kualtjs.html"/>
    <updated>2014-07-13T21:17:00+09:00</updated>
    <id>http://KeenS.github.io/slide/sshi-deshu-kualtjs.markdown</id>
    <content type="html"><![CDATA[<h1>(S式で書く(altJS)達)</h1>

<p>&lt;2014-06-08 日><br/>
κeen(@blackenedgold)<br/>
天下一altJS武闘会(#tenka1altJS)<br/>
@渋谷プライムプラザ四階</p>

<h2>自己紹介</h2>

<ul>
<li>κeen</li>
<li>東大数学科の4年生</li>
<li>Twit : @blackenedgold</li>
<li>Github : KeenS</li>
<li>Blog : <a href="http://KeenS.github.io/">κeenのHappy Hacκing Blog</a></li>
<li>Shibuya.lispにいます。(2014-06〜運営になりました)</li>
<li>Lisp, Ruby, OCaml, Shell Scriptあたりを書きます</li>
</ul>


<h2>お品書き</h2>

<ul>
<li>(ボツ) Shen.js</li>
<li>(ボツ) Embedable Common Lisp with Emscripten</li>
<li>(ボツ) Picrin with Emscripten</li>
<li>(ボツ) オレオレaltJSの作り方の話</li>
<li>ParenScript</li>
</ul>


<h2>Shen.js</h2>

<p>Shenの公式ページより</p>

<ul>
<li>パターンマッチ</li>
<li>λ計算ベース</li>
<li>マクロ</li>
<li>遅延評価も可能</li>
<li>静的型検査</li>
<li>関数的なPrologの統合</li>
<li>ビルトインコンパイラコンパイラ</li>
</ul>


<p>これのJS実装もある。</p>

<h3>例</h3>

<p><code>lisp
(define factorial
  0 -&gt; 1
  X -&gt; (* X (factorial (- X 1))))
</code></p>

<p>そもそもaltJSじゃない…</p>

<p>ボツ</p>

<h2>ECL with Emscripten</h2>

<ul>
<li>ANSI Common Lisp準拠のCommon Lisp処理系</li>
<li>LispをコンパイルしてCを吐く</li>
<li>Emscriptenでコンパイルすれば…</li>
</ul>


<p><code>#include &lt;ecl/ecl-cmp.h&gt;</code>
が悪さをしてコンパイル出来ない</p>

<p>ボツ</p>

<h2>picrin</h2>

<ul>
<li>R7RS small準拠を目指すScheme処理系</li>
<li>R7RS準拠の中では唯一Emscriptenで
コンパイル出来るらしい</li>
<li>SDLもEmscriptenで動くらしいから
組み合わせればウハウハじゃね？</li>
</ul>


<p>コンパイル出来ない…
( <code>va_args</code> は64bit x Clang3.3では
コンパイル出来ないとか言われる。回避策も効かない)</p>

<p>ボツ</p>

<h2>オレオレaltJSの作り方の話</h2>

<p>escodegenを使う
```javascript
{</p>

<pre><code>type: 'BinaryExpression',
operator: '+',
left: { type: 'Literal', value: 40 },
right: { type: 'Literal', value: 2 }
</code></pre>

<p>}
→40 + 2
```</p>

<p>オレオレaltJS(S式)<br/>
 ↓ read<br/>
リスト<br/>
 ↓ 変換  (find-file &ldquo;~/Lisp/translate.lisp&rdquo;)<br/>
リスト<br/>
 ↓ cl-json<br/>
JSON<br/>
 ↓ escodegen<br/>
JS</p>

<p>escodegenのドキュメントがあんまりない…</p>

<p>ボツ</p>

<h2>ParenScript</h2>

<ul>
<li>Common Lisp製</li>
<li>Weblocks(WAF)に採用されるなどの実績/伝統</li>
<li>Common LispのサブセットをJSにコンパイル</li>
<li>実際はCommon Lispのマクロなので
Common Lispに組み込んで使える</li>
<li>ランタイムライブラリは必要ない</li>
<li>Lispを無理矢理変換するというより
LispっぽくJSを書ける感じ</li>
</ul>


<h3>例</h3>

<p>~/Lisp/parenscript.lisp</p>

<ul>
<li><code>(@ obj property)</code> でプロパティ参照</li>
<li><code>(chain obj function/property)</code> でメソッドチェーン
など</li>
</ul>


<p>以上</p>
]]></content>
  </entry>
  
</feed>
