<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Altjs on κeenのHappy Hacκing Blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>/categories/altjs/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Sun, 13 Jul 2014 00:00:00 UTC</updated>
    
    <item>
      <title>(S式で書く(altJS)達)</title>
      <link>/slide/sshi-deshu-kualtjs/</link>
      <pubDate>Sun, 13 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>/slide/sshi-deshu-kualtjs/</guid>
      <description>&lt;section data-markdown
    data-separator=&#34;\n\n&#34;
    data-vertical=&#34;\n\n&#34;
    data-notes=&#34;^Note:&#34;&gt;
&lt;script type=&#34;text/template&#34;&gt;
# (S式で書く(altJS)達)
&lt;2014-06-08 日&gt;  
κeen(@blackenedgold)  
天下一altJS武闘会(#tenka1altJS)  
@渋谷プライムプラザ四階

## 自己紹介
 + κeen
 + 東大数学科の4年生
 + Twit : @blackenedgold
 + Github : KeenS
 + Blog : [κeenのHappy Hacκing Blog](http://KeenS.github.io/)
 + Shibuya.lispにいます。(2014-06〜運営になりました)
 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます

## お品書き
 - (ボツ) Shen.js
 - (ボツ) Embedable Common Lisp with Emscripten
 - (ボツ) Picrin with Emscripten
 - (ボツ) オレオレaltJSの作り方の話
 - ParenScript

## Shen.js
Shenの公式ページより

  + パターンマッチ
  + λ計算ベース
  + マクロ
  + 遅延評価も可能
  + 静的型検査
  + 関数的なPrologの統合
  + ビルトインコンパイラコンパイラ

これのJS実装もある。

## 例

```lisp
(define factorial
  0 -&gt; 1
  X -&gt; (* X (factorial (- X 1))))
```

そもそもaltJSじゃない…

ボツ

## ECL with Emscripten
  + ANSI Common Lisp準拠のCommon Lisp処理系
  + LispをコンパイルしてCを吐く
  + Emscriptenでコンパイルすれば…

`#include &lt;ecl/ecl-cmp.h&gt;`
が悪さをしてコンパイル出来ない

ボツ

##  picrin
  + R7RS small準拠を目指すScheme処理系
  + R7RS準拠の中では唯一Emscriptenで
    コンパイル出来るらしい
  + SDLもEmscriptenで動くらしいから
    組み合わせればウハウハじゃね？

コンパイル出来ない…
( `va_args` は64bit x Clang3.3では
コンパイル出来ないとか言われる。回避策も効かない)

ボツ

##  オレオレaltJSの作り方の話
escodegenを使う

```javascript
{
    type: &#39;BinaryExpression&#39;,
    operator: &#39;+&#39;,
    left: { type: &#39;Literal&#39;, value: 40 },
    right: { type: &#39;Literal&#39;, value: 2 }
}
→40 + 2
```

オレオレaltJS(S式)  
 ↓ read  
リスト  
 ↓ 変換  (find-file &#34;~/Lisp/translate.lisp&#34;)  
リスト  
 ↓ cl-json  
JSON  
 ↓ escodegen  
JS

escodegenのドキュメントがあんまりない…

ボツ

## ParenScript
  + Common Lisp製
  + Weblocks(WAF)に採用されるなどの実績/伝統
  + Common LispのサブセットをJSにコンパイル
  + 実際はCommon Lispのマクロなので
    Common Lispに組み込んで使える
  + ランタイムライブラリは必要ない
  + Lispを無理矢理変換するというより
    LispっぽくJSを書ける感じ

### 例
~/Lisp/parenscript.lisp

 + `(@ obj property)` でプロパティ参照
 + `(chain obj function/property)` でメソッドチェーン
など

以上
&lt;/script&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>