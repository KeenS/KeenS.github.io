<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lisp meet up | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/categories/lisp-meet-up/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-11-09T16:53:21+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[claspを少し触ってみた]]></title>
    <link href="http://KeenS.github.io/slide/clasp.html"/>
    <updated>2014-10-28T16:17:00+09:00</updated>
    <id>http://KeenS.github.io/slide/clasp.markdown</id>
    <content type="html"><![CDATA[<h1>claspを少し触ってみた</h1>

<hr />

<p>Lisp Meet Up presented by Shibuya.lisp #21<br/>
2014-10-29<br/>
κeen(@blackenedgold)</p>

<h1>About Me</h1>

<hr />

<p><img src="/images/icon.png" alt="κeenのアイコン" /> <!-- .element: style="position:relative;right 0;" --></p>

<ul>
<li>κeen</li>
<li>東大数学科の4年生</li>
<li>ソーシャルアカウントは上のアイコン達から。</li>
<li>Lisp, Ruby, OCaml, Shell Scriptあたりを書きます</li>
</ul>


<h1>clasp</h1>

<hr />

<ul>
<li>Github: <a href="https://github.com/drmeister/clasp">drmeister/clasp</a></li>
<li>2014-09-18に0.1リリース(現在0.11プレビューが出ている)</li>
<li>今は0.11プレビューが出ている</li>
<li>ANSI Common Lisp準拠を目指す(現在80 ~90%)</li>
<li>ECLからのフォーク</li>
<li>LLVMベースのJIT(<a href="http://llvm.org/docs/MCJITDesignAndImplementation.html">MCJIT</a>)搭載</li>
<li>C++とLispで書かれている</li>
<li>C++との連携を意識</li>
</ul>


<p>Note:
C++との連携の部分を強調。今回は0.11プレビューでの話</p>

<h1>メモリ管理</h1>

<hr />

<ul>
<li>Memory Pool Systemと Boehm GCから選べる</li>
<li>ビルドするときにどっちかを選ぶ</li>
</ul>


<h1>メモリ管理</h1>

<hr />

<h2><a href="http://www.hboehm.info/gc/">Boehm GC</a></h2>

<ul>
<li>Mark &amp; Sweepのライブラリ</li>
<li>枯れた有名なライブラリ</li>
<li>Lisp有名どころではGaucheが使う</li>
<li>RedHat系だとこれを使ってないとrpmリジェクトされやすいらしい(?)</li>
</ul>


<p>Note:
他にはMozilla, W3M, GNU GCJ, GNU Obj-Cなどなど</p>

<h1>メモリ管理</h1>

<hr />

<h2><a href="http://www.ravenbrook.com/project/mps/">Memory Pool System</a></h2>

<ul>
<li>複数のGCアルゴリズムを組み合わせて使えるらしい</li>
<li>since 1994</li>
<li>あまり分からないです&gt;&lt;</li>
</ul>


<h1>依存ライブラリ</h1>

<hr />

<ul>
<li>LLVM <strong>3.6</strong></li>
<li>LLVM/clang <strong>3.5</strong> compiler</li>
<li>Boost build v2</li>
<li>boost libraries ver 1.55</li>
<li>Boehm 7.2</li>
<li>gmp-6.0.0</li>
<li>expat-2.0.1</li>
<li>zlib-1.2.8</li>
<li>readline-6.2</li>
</ul>


<p><span style="font-size:600%">無理</span></p>

<h1>externals-clasp</h1>

<hr />

<ul>
<li>Github: <a href="https://github.com/drmeister/externals-clasp">drmeister/externals-clasp</a></li>
<li>依存ライブラリを揃えるのが難しいとの声から作られた</li>
<li>依存ライブラリを全てビルド<!-- .element: class="fragment grow" --></li>
</ul>


<p><span style="font-size:300%">＼LLVMをビルド／</span></p>

<p><span style="font-size:300%">＼Boostをビルド／</span></p>

<p><span style="font-size:200%">ビルド時間はお察しです</span></p>

<h1>本体のビルド</h1>

<hr />

<p>Twitter実況をどうぞ↓↓</p>

<h1>本体のビルド</h1>

<hr />

<blockquote class="twitter-tweet" lang="ja"><p>clangがメモリ6GB以上食い続けてて怖い。何やってんの。</p>&mdash; κeen (@blackenedgold) <a href="https://twitter.com/blackenedgold/status/526417151486205952">2014, 10月 26</a></blockquote>


<h1>本体のビルド</h1>

<hr />

<blockquote class="twitter-tweet" lang="ja"><p>clangの起動時間1時間超えてますよ…</p>&mdash; κeen (@blackenedgold) <a href="https://twitter.com/blackenedgold/status/526418636735401984">2014, 10月 26</a></blockquote>


<h1>本体のビルド</h1>

<hr />

<blockquote class="twitter-tweet" lang="ja"><p>HDDプチプチ言ってるし今にも壊れそう</p>&mdash; κeen (@blackenedgold) <a href="https://twitter.com/blackenedgold/status/526420001587068929">2014, 10月 26</a></blockquote>


<h1>本体のビルド</h1>

<hr />

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/nobkz">@nobkz</a> claspのコンパイル中です。&#10;clangなのにIOネックという謎の状態です。</p>&mdash; κeen (@blackenedgold) <a href="https://twitter.com/blackenedgold/status/526420473232367616">2014, 10月 26</a></blockquote>


<h1>本体のビルド</h1>

<hr />

<blockquote class="twitter-tweet" lang="ja"><p>clangの消費メモリ7GB超えた</p>&mdash; κeen (@blackenedgold) <a href="https://twitter.com/blackenedgold/status/526423982992420864">2014, 10月 26</a></blockquote>


<p><span style="font-size:300%">ビルドは自己責任で</span></p>

<h1>使ってみる</h1>

<hr />

<h2>起動オプション</h2>

<p><code>
/usr/local/clasp/bin/clasp_mps_o --help
clasp options
-I/--ignore-image    - Don't load the boot image/start with init.lsp
-i/--image file      - Use the file as the boot image
-N/--non-interactive - Suppress all repls
-v/--version         - Print version
-s/--verbose         - Print more info while booting
-f/--feature feature - Add the feature to *features*
-e/--eval {form}     - Evaluate a form
-l/--load {file}     - LOAD the file
-r/--norc            - Don't load the ~/.clasprc file
-n/--noinit          - Don't load the init.lsp (very minimal environment)
-s/--seed #          - Seed the random number generator
-- {ARGS}*           - Trailing are added to core:*command-line-arguments*
</code></p>

<h1>使ってみる</h1>

<hr />

<h2>ASDF</h2>

<ul>
<li><!-- .element: class="fragment" data-fragment-index="1" -->動かない

<ul>
<li><!-- .element: class="fragment" data-fragment-index="2" -->ASDFの処理系依存の部分(<code>#+</code>)の問題</li>
<li><!-- .element: class="fragment" data-fragment-index="2" -->ECLと見做されるけどECLのコードは動かない</li>
</ul>
</li>
</ul>


<h1>使ってみる</h1>

<hr />

<h2>cl-ppcre</h2>

<ul>
<li><a href="https://gist.github.com/KeenS/4e25cb6e424ebe4e7a4a">手動ロードスクリプト</a></li>
<li><!-- .element: class="fragment" data-fragment-index="1" -->動かない

<ul>
<li><!-- .element: class="fragment" data-fragment-index="2" --><code>schar</code>がない</li>
<li><!-- .element: class="fragment" data-fragment-index="2" -->ANSI Common Lispにあるのに…</li>
</ul>
</li>
</ul>


<h1>使ってみる</h1>

<hr />

<h2>C++との連携</h2>

<ul>
<li><!-- .element: class="fragment" data-fragment-index="1" -->ドキュメントがない</li>
<li><!-- .element: class="fragment" data-fragment-index="2" -->サンプルコードもない</li>
<li><!-- .element: class="fragment" data-fragment-index="3" -->遂行不能</li>
</ul>


<h1>使ってみる</h1>

<hr />

<h2>LLVMの呼び出し</h2>

<ul>
<li><a href="https://github.com/drmeister/clasp/blob/master/src/llvmo/demo.lsp">clasp/src/llvmo/demo.lisp</a></li>
<li><!-- .element: class="fragment" data-fragment-index="1" -->動かない</li>
</ul>


<h1>使ってみる</h1>

<hr />



<table>
<thead>
<tr>
<th>処理系              </th>
<th>  <code>(time (fib 29))</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>clasp-0.1(boehm)    </td>
<td> <div class="graph fragment" style="width:calc(264.3px * 3);" data-fragment-index="1">26.43s</div></td>
</tr>
<tr>
<td>clasp-0.1(mps)      </td>
<td> <div class="graph fragment" style="width:calc(172.8px * 3);" data-fragment-index="1">17.28s</div></td>
</tr>
<tr>
<td>clasp-0.11(boehm)   </td>
<td> <div class="graph fragment" style="width:calc(213.2px * 3);" data-fragment-index="2">21.32s</div></td>
</tr>
<tr>
<td>clasp-0.11(mps)     </td>
<td> <div class="graph fragment" style="width:calc(187.9px * 3);" data-fragment-index="2">18.79s</div></td>
</tr>
<tr>
<td>ECL-13.5.1          </td>
<td> <div class="graph" style="width:calc( 16.0px * 3);">1.603s</div></td>
</tr>
<tr>
<td>ECL-13.5.1(compile) </td>
<td> <div class="graph" style="width:calc(  1.9px * 3);">0.192s</div></td>
</tr>
<tr>
<td>ABCL-1.3.1          </td>
<td> <div class="graph" style="width:calc( 32.9px * 3);">3.292s</div></td>
</tr>
<tr>
<td>ABCL-1.3.1(compile) </td>
<td> <div class="graph" style="width:calc(  2.4px * 3);">0.241s</div></td>
</tr>
</tbody>
</table>


<h1>使ってみる</h1>

<hr />

<table>
<thead>
<tr>
<th>処理系              </th>
<th>  <code>(time (fib 29))</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>CLISP-2.49          </td>
<td> <div class="graph" style="width:calc( 38.4px * 3);">3.847s</div></td>
</tr>
<tr>
<td>CLISP-2.49(compile) </td>
<td> <div class="graph" style="width:calc(  7.1px * 3);">0.7146s</div></td>
</tr>
<tr>
<td>ccl-1.10            </td>
<td> <div class="graph" style="width:calc(  0.4px * 3);">0.04033s</div></td>
</tr>
<tr>
<td>sbcl-1.2.5          </td>
<td> <div class="graph" style="width:calc(  0.6px * 3);">0.06469s</div></td>
</tr>
<tr>
<td>alisp-9.0           </td>
<td> <div class="graph" style="width:calc(  230px * 3);">23.09s</div></td>
</tr>
<tr>
<td>alisp-9.0(compile)  </td>
<td> <div class="graph" style="width:calc(  0.6px * 3);">0.06194s</div></td>
</tr>
</tbody>
</table>


<p><span style="font-size:200%">LLVM/JITなのになぜ遅い？</span></p>

<h1>LLVM/JITで遅い？</h1>

<hr />

<ul>
<li>LLVMって速いんじゃ？</li>
<li>JIT搭載した○○が速いって聞いたよ

<ul>
<li>JVM</li>
<li>lua-jit</li>
<li>Rubinius</li>
<li>pypy</li>
</ul>
</li>
</ul>


<h1>言葉の罠: LLVM</h1>

<hr />

<ul>
<li>遅いコードはどんなに頑張っても遅い</li>
<li>ECLのバックエンドにClang(=LLVM)を使ってもSBCLに勝てないのと同じ</li>
</ul>


<h1>言葉の罠: JIT搭載</h1>

<hr />

<ul>
<li>JIT(実行時コンパイル)の意味は広い</li>
<li>実行時にネイティブコードを吐けばJITと言える</li>
<li>claspは実行直前にコンパイルするだけ</li>
<li>多くの速いJIT処理系はTracing JITを使う

<ul>
<li>またの名を適応的コンパイル</li>
<li>実行時の情報に基いて実行中に最適化する</li>
<li><code>(declare ...)</code> を自動生成してる的な</li>
</ul>
</li>
</ul>


<h1>Tracing JITへの道</h1>

<hr />

<ul>
<li>LLVMのJITは実行直前にコンパイルするだけ

<ul>
<li><!-- .element: class="fragment" data-fragment-index="1" -->Tracing JITのバックエンドには使える</li>
</ul>
</li>
<li>実行時最適化には最適化用のコードが必要

<ul>
<li><!-- .element: class="fragment" data-fragment-index="2" -->Common Lispでは<code>(declare ...)</code>用のコードを使い回せる</li>
</ul>
</li>
<li><!-- .element: class="fragment" data-fragment-index="3" -->案外近い</li>
</ul>


<h1>結論</h1>

<hr />

<ul>
<li><!-- .element: class="fragment" data-fragment-index="1" -->遅い</li>
<li><!-- .element: class="fragment" data-fragment-index="2" -->時期尚早</li>
<li><!-- .element: class="fragment" data-fragment-index="3" -->今後機能や速度改善があれば使えるようになるかも</li>
</ul>


<p><span style="font-size:600%">以上</span><br/>
何か質問あればどうぞ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #20でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/09/30/lisp-meet-up-number-20/"/>
    <updated>2014-09-30T09:35:05+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/09/30/lisp-meet-up-number-20</id>
    <content type="html"><![CDATA[<p>κeenです。lisp meet up # 20に参加したのでレポートです。</p>

<!-- more -->


<p>20人の募集に19人参加予定。会場は今回初めてのところでした。</p>

<h1>LT</h1>

<p>LTはTOYOZUMIさんが仕事で来れなくなったので私の1件のみ。内容はpicrinのチューニングの話と思わせてほとんどがその前振りのGCの話。</p>

<p>スライドはこちら。</p>

<p><a href="http://keens.github.io/slide/picrin-gc.html">Picrinのチューニングの話、もといGCの話 | κeenのHappy Hacκing Blog</a></p>

<p>TOYOZUMIさんのdocstringの話聞きたかった</p>

<h2>飛び入り</h2>

<ul>
<li>ブラウザ上でbiwa schemeの環境(REPLだけでなくオートインデントとか)を作ってる</li>
<li>関連して、websocketでswankと対話できるやつ作ってる</li>
<li>関連して、ブラウザ上で動くLispに似てそうなBlockyというヴィジュアル言語がある
なんかの話がありました。</li>
</ul>


<h1>余った時間</h1>

<p>chikuさんが前でGCの話してました。んで話が尽きたあたりで私がpicrinの宣伝しました。<code>(picrin control list)</code>の話です。非同期プロミス然りpicrinにはトリッキーな機能が多いですね。</p>

<p>結局ライブコーディングはしませんでしたね。</p>

<h1>懇親会</h1>

<p>Raspberry Piの話とかちょいとGCの話とかVarnishの話とかaltJSとか。ブログの話題が出たのでOctopress推しといたり。なんでみんなGithub Pages + Octopress使わないん？便利ですやん。</p>

<p>結構色々話してた気がするんですが覚えてないですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Picrinのチューニングの話、もといGCの話]]></title>
    <link href="http://KeenS.github.io/slide/picrin-gc.html"/>
    <updated>2014-09-29T14:37:00+09:00</updated>
    <id>http://KeenS.github.io/slide/picrin-gc.markdown</id>
    <content type="html"><![CDATA[<h1>Picrinのチューニングの話、もといGCの話</h1>

<hr />

<p>Lisp Meet Up presented by Shibuya.lisp #20<br/>
2014-09-29<br/>
κeen(@blackenedgold)</p>

<h1>自己紹介</h1>

<hr />

<ul>
<li>κeen</li>
<li>東大数学科の4年生</li>
<li>ソーシャルアカウントは上のアイコン達から。</li>
<li>Lisp, Ruby, OCaml, Shell Scriptあたりを書きます</li>
<li><a href="https://github.com/picrin-scheme/picrin">picrin</a>のコミッタです</li>
</ul>


<h1>picrin</h1>

<hr />

<p><img src="/images/picrin/picrin-logo-fin01-02.png" alt="picrin" /></p>

<h1>picrin</h1>

<hr />

<ul>
<li>R7RS compatibility</li>
<li>bytecode interpreter (based on stack VM)</li>
<li>internal representation by nan-boxing</li>
<li>conservative call/cc implementation (users can freely interleave native stack with VM stack)</li>
<li>exact GC (simple mark and sweep, partially reference count is used as well)</li>
<li>string representation by rope data structure</li>
</ul>


<h1>picrin</h1>

<hr />

<ul>
<li>R7RS compatibility</li>
<li><strong>bytecode interpreter (based on stack VM)</strong></li>
<li>internal representation by nan-boxing</li>
<li>conservative call/cc implementation (users can freely interleave native stack with VM stack)</li>
<li><strong>exact GC (simple mark and sweep, partially reference count is used as well)</strong></li>
<li><strong>string representation by rope data structure</strong></li>
</ul>


<h1>picrin開発者の不満</h1>

<hr />

<ul>
<li>picrinの起動が遅い<!-- .element: class="fragment" data-fragment-index="1" -->

<ul>
<li>2秒くらいかかる <!-- .element: class="fragment" data-fragment-index="1" --></li>
</ul>
</li>
<li>picrinのテストが遅い<!-- .element: class="fragment" data-fragment-index="2" -->

<ul>
<li>16秒くらいかかる <!-- .element: class="fragment" data-fragment-index="2" --></li>
</ul>
</li>
</ul>


<h1>少しGCの話</h1>

<hr />

<p>GC(ごみ集め)とは</p>

<ul>
<li>使われていないオブジェクトを自動的に解法する

<ul>
<li>メモリ管理に煩わせられないで済む</li>
<li>メモリーリークを防ぐ。</li>
</ul>
</li>
<li>「使われていないオブジェクト」を判定するのはいくつかアルゴリズムがある</li>
</ul>


<h1>GCのアルゴリズム</h1>

<hr />

<h2>主なGCのアルゴリズム</h2>

<ul>
<li>マーク&amp;スイープ</li>
<li>参照カウント</li>
<li>Copying GC</li>
</ul>


<h1>GCのアルゴリズム</h1>

<hr />

<h2>マーク&amp;スイープ</h2>

<ol>
<li>あらかじめ全てのオブジェクトはどこかで一元管理する<!-- .element: class="fragment" data-fragment-index="1" --></li>
<li>一元管理元(ヒープ(ページ))でメモリが足りなくなったらGCを開始<!-- .element: class="fragment" data-fragment-index="2" --></li>
<li>スタックに載っているオブジェクト、変数に格納されているオブジェクトにマークする<!-- .element: class="fragment" data-fragment-index="3" --></li>
<li>そこから辿れるオブジェクトも再帰的にマークする<!-- .element: class="fragment" data-fragment-index="4" --></li>
<li>ヒープからマークされていないオブジェクトを開放する<!-- .element: class="fragment" data-fragment-index="5" --></li>
<li>それでもメモリが足りなければ一ヒープのページを増やす<!-- .element: class="fragment" data-fragment-index="6" --></li>
<li>増やせなければメモリを使い果したのでabort<!-- .element: class="fragment" data-fragment-index="7" --></li>
</ol>


<h1>GCのアルゴリズム</h1>

<hr />

<h2>マーク&amp;スイープの特徴</h2>

<ul>
<li>そこそこ速い</li>
<li>正確に集められる</li>
<li>GC以外ではメモリ管理を考えなくて良い(≒プラグインは書き易い)</li>
<li>長生きのオブジェクトは何度もマークされる(=>世代別GC)</li>
<li>負荷は1点に集中する</li>
<li>メモリの断片化が起きる(=オブジェクトのアロケートが遅くなる)</li>
</ul>


<h1>GCのアルゴリズム</h1>

<hr />

<h2>参照カウント</h2>

<ol>
<li>オブジェクトに他から参照されている数(参照カウント)を記憶させる<!-- .element: class="fragment" data-fragment-index="1" --></li>
<li>オブジェクトの参照を変えるときはその都度参照カウントを変える<!-- .element: class="fragment" data-fragment-index="2" --></li>
<li>参照カウントが0になったら開放する<!-- .element: class="fragment" data-fragment-index="3" --></li>
</ol>


<h1>GCのアルゴリズム</h1>

<hr />

<h2>参照カウントの特徴</h2>

<ul>
<li>負荷は分散する</li>
<li>GCの実装は楽</li>
<li>少し遅い(必ずfreeする必要がある)</li>
<li>正確でない(循環参照に弱い)(cf. 大相撲の星の回しあい)</li>
<li>プラグインは面倒</li>
</ul>


<h1>GCのアルゴリズム</h1>

<hr />

<h2>Copying GC</h2>

<ol>
<li>オブジェクトプールを2つ用意する(1, 2)とする<!-- .element: class="fragment" data-fragment-index="1" --></li>
<li>オブジェクトを確保するときは必ず1に確保する<!-- .element: class="fragment" data-fragment-index="2" --></li>
<li>1のメモリが足りなくなったらgcを開始<!-- .element: class="fragment" data-fragment-index="3" --></li>
<li>1の生きているオブジェクトを再帰的に2に移動する<!-- .element: class="fragment" data-fragment-index="4" --></li>
<li>1に残っているものは全てゴミとして良い<!-- .element: class="fragment" data-fragment-index="5" --></li>
<li>1、2のラベルを付け換える<!-- .element: class="fragment" data-fragment-index="6" --></li>
</ol>


<h1>GCのアルゴリズム</h1>

<hr />

<h2>Copying GCの特徴</h2>

<ul>
<li>正確</li>
<li>メモリの断片化が起きない(Windowsのデフラグ)(=アロケートが速くなる)</li>
<li>負荷は1点に集中する</li>
<li>遅い(オブジェクトの移動が必要)</li>
<li>メモリ食う(オブジェクトプール2つ分)</li>
<li>ポインタも変わるため、ハッシュの再計算などが必要</li>
</ul>


<h1>GCのアルゴリズム</h1>

<hr />

<h2>GCの主な属性</h2>

<ul>
<li>世代別

<ul>
<li>新しいオブジェクトだけGCの対象にする<!-- .element: class="fragment" data-fragment-index="1" --></li>
</ul>
</li>
<li>正確

<ul>
<li>ゴミは必ず回収する<!-- .element: class="fragment" data-fragment-index="2" --></li>
</ul>
</li>
<li>インクリメンタル

<ul>
<li>一度にやらずに少しづつGCを進める<!-- .element: class="fragment" data-fragment-index="3" --></li>
</ul>
</li>
</ul>


<h1>picrinのGC</h1>

<hr />

<p><img src="/images/picrin/picrin-logo-fin01-02.png" alt="picrin" /></p>

<h1>picrinのGC</h1>

<hr />

<ul>
<li>基本は普通の正確なマーク&amp;スイープ

<ul>
<li>Copying GCはlightweightでない</li>
</ul>
</li>
<li>ropeには参照カウント

<ul>
<li>ropeには循環参照が起きない</li>
</ul>
</li>
</ul>


<h1>picrinのGC</h1>

<hr />

<ul>
<li>基本はマーク&amp;スイープ</li>
</ul>


<blockquote><ol>
<li>スタックに載っているオブジェクト、変数に格納されているオブジェクトにマークする</li>
</ol>
</blockquote>

<ul>
<li>schemeの変数はそのまま</li>
<li>Cの変数は読めないのでアリーナという場所を用意してC内ではそこに一時保管してもらう

<ul>
<li>スコープはFILOなのでスタックを用いればヒープより速くアロケート出来る</li>
</ul>
</li>
</ul>


<h1>picrinのチューニング</h1>

<h2>プロファイルをとってみる</h2>

<hr />

<p><code>
 % cumulative self self total
time seconds seconds calls s/call s/call name
37.14 0.78 0.78 13136494 0.00 0.00 XROPE_DECREF
23.81 1.28 0.50 1544 0.00 0.00 gc_sweep_phase
15.72 1.61 0.33 59344814 0.00 0.00 gc_mark_object
10.00 1.82 0.21 1544 0.00 0.00 gc_mark_phase
6.67 1.96 0.14 1544 0.00 0.00 gc_mark_trie
2.38 2.01 0.05 6523 0.00 0.00 pic_apply
</code></p>

<p><span style="font-size:200%">ほとんどGCですね。<br/>
本当にありがとう御座いました。</span></p>

<h1>解決案</h1>

<hr />

<ul>
<li>GCのアルゴリズムを変える</li>
<li>オブジェクトをアロケートしないようにする</li>
<li>パラメーターをいじる</li>
</ul>


<h1>解決案</h1>

<hr />

<ul>
<li>GCのアルゴリズムを変える</li>
<li>オブジェクトをアロケートしないようにする</li>
<li><strong>パラメーターをいじる</strong></li>
</ul>


<h1>GCに関連するパラメータ</h1>

<hr />

<p>元々tinyに設計されている
```C
/<em> アリーナのサイズ </em>/</p>

<h1>define PIC_ARENA_SIZE 1000</h1>

<p>/<em> ヒープページのサイズ </em>/</p>

<h1>define PIC_HEAP_PAGE_SIZE 10000</h1>

<p>/<em> シンボルプール(ハッシュ)のサイズ </em>/</p>

<h1>define PIC_SYM_POOL_SIZE 128</h1>

<p>```</p>

<h1>GCに関連するパラメータ</h1>

<hr />

<p>チューニング後
```C
/<em> アリーナのサイズ </em>/</p>

<h1>define PIC_ARENA_SIZE 8 * 1024</h1>

<p>/<em> ヒープページのサイズ </em>/</p>

<h1>define PIC_HEAP_PAGE_SIZE 2 * 1024 * 1024</h1>

<p>/<em> シンボルプール(ハッシュ)のサイズ </em>/</p>

<h1>define PIC_SYM_POOL_SIZE 2048</h1>

<p>```</p>

<h1>結果</h1>

<hr />

<ul>
<li><p>昔</p>

<blockquote><p>テストに16秒</p></blockquote></li>
<li><p>変更後</p>

<blockquote><p>time make test-r7rs<br/>
make test-r7rs  <strong>1.68s</strong> user 0.23s system 98% cpu 1.931 total
<!-- .element: class="fragment" data-fragment-index="1" --></p></blockquote></li>
</ul>


<h1>今後</h1>

<hr />

<ul>
<li>GCのアルゴリズムを変える</li>
<li>世代別GCにしたいよねー</li>
<li>そもそもマーク&amp;スイープの実装が適当すぎるだとか。協議中。</li>
<li>組み込み目指すならインクリメンタル性必要では？</li>
<li>オブジェクトをアロケートしないようにする

<ul>
<li>バイトコンパイルするときにもめちゃくちゃアロケートしてる。その辺どうにかする。</li>
<li><a href="https://github.com/picrin-scheme/picrin/pull/207">Fast Reader</a></li>
</ul>
</li>
</ul>


<h1>まとめ</h1>

<hr />

<ul>
<li>基本的なGCの解説をした</li>
<li>picrinのGCの戦略を話した</li>
<li>GCチューニング大事</li>
</ul>


<p><span style="font-size:600%">以上</span><br/>
何か質問あればどうぞ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #19でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19/"/>
    <updated>2014-07-30T00:30:40+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19</id>
    <content type="html"><![CDATA[<p>κeenです毎月恒例の<a href="https://atnd.org/events/53246">Lisp Meet Up presented by Shibuya.lisp</a>でLTしてきたのでレポートです。</p>

<!-- more -->


<p>今回は募集20に対して参加登録20、参加18、LT4本と集りの良い会でした。</p>

<p>自己紹介ではほぼCLの人ばっかりでした。珍しいところ（？）では数理システムの方が居たり会場を提供して下さってるサイバーエージェントの方が覗きにきてたり。</p>

<p>LT1本目はTOYOZUMIさんから連作の一つのCommon Lisp最適化発展。画像のエッジ検出をするときの関数の最適化の話でした。カーネルを渡すだけで最適なコードを生成するそうです。コーナーケースのif式をループの外に追い出してたりと半分成程、あとはよく分かんない話してるなーって。<br/>
最終的には<code>eval</code>を使ってるらしく、本当に速度出るの？って気になりましたが本人もやってみたところ速くなってビックリだったそうです。</p>

<p>スライドはこちら。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/37456264" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/toyozumiKouichi/common-lisp-37456264" title="Common lisp最適化発展" target="_blank">Common lisp最適化発展</a> </strong> from <strong><a href="http://www.slideshare.net/toyozumiKouichi" target="_blank">Toyozumi Kouichi</a></strong> </div></p>

<p>動画は今回から私が担当なので処理が終ったらリンク張ります。</p>

<p>次はTakagiさんよりcl-cudaについて。話聞く前は「どうせC APIをCFFIで叩いただけだろ(ホジ」って思ってましたがさすがにGPGPUはそんなに簡単じゃなかったようです。
cl-cudaはLispのAPIを叩いたらCUDA向けのCコードを吐いてCUDA専用のコンパイラ通してモジュールとして動的に読み込んで、ってやってくれるそうです。すごい。
完成度も、CUDAを研究に使ってたchikuさんによると普通使う分にはほぼ困らなくて、あとは構造体のサポートがあれば良いかも程度だそうです。すごい。</p>

<p>スライドはまだ見付けてないです。</p>

<p>3番目は私から、WebブラウザベースのIDE、<a href="https://c9.io/">Cloud9</a>の紹介とLispの対応状況について。
スライドはこのブログに載せてますが、こちら</p>

<p><a href="http://keens.github.io/slide/cloud-9.html">Cloud 9の紹介 | κeenのHappy Hacκing Blog</a></p>

<p>もうちょっと説明が欲しそうな雰囲気だったので別記事立てますね。@potix2さんが社内チャットに流したところなり反応が良かったようなので普通にIDEとして優れてるんじゃないでしょうか。</p>

<p>最後はかにたん(@kazh98)から床下からLispが出てきた話。うん。本当に床下からLispが出てきた話でした。かにたんの研究室すごいですね。みなさんの家の床下にもLispがあるかもしれませんよm9っ。</p>

<p>最後の最後にかにたんの研究室から出てきたLispについてTOYOZUMIさんがモニタをスクリーンに映しつつみんなで色々議論。なんかWEBのマニュアルがポルトガル語で書かれてたのでポルトガル語喋れる人捜したけど居なかったり。次回、床下Lispを動かしてみようってなりました。</p>

<p>そこでもう閉場の時間だったので懇親会へ。11名が参加。</p>

<p>私とかにたんとpotix2さんがschemeの実装の話してたり@mhkojiさんがhunchentootがありえないくらい遅いって話してたり色々でしたね。
CIMの話も出てました。実用上Windowsサポートは外せないってことで@snmstsさんがCでCIMを書き直してるだとか@nitro_idiotさんがshellyでCIMを使うにあたってCIM側でコアのマネジメントして欲しいって言ってただとか。</p>

<p>C CIMは面白そうですね。ビルドしなきゃいけないから手軽さの問題が…とかlibcurlに依存するとLinuxが…とか言ってたら「ディストリのパッケージシステムに乗せてしまえば問題無い」と一刀両断。その発想はなかった。むしろパッケージシステムに入った方が手軽。</p>

<p>今からCloud9の記事とCIMのコアマネジメント頑張りますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud 9の紹介]]></title>
    <link href="http://KeenS.github.io/slide/cloud-9.html"/>
    <updated>2014-07-29T01:29:00+09:00</updated>
    <id>http://KeenS.github.io/slide/cloud-9.markdown</id>
    <content type="html"><![CDATA[<h1>Cloud 9の紹介</h1>

<hr />


<p>Lisp Meet Up #19 presented by Shibuya.lisp<br/>
κeen(@blackenedgold)</p>

<h2>自己紹介</h2>

<hr />


<ul>
<li>κeen</li>
<li>東大数学科の4年生</li>
<li>ソーシャルアカウントは上のアイコン達から。</li>
<li>Lisp, Ruby, OCaml, Shell Scriptあたりを書きます</li>
</ul>


<h2>Lispがあまり使われない原因</h2>

<hr />




<ul>
<li class="fragment">認知度が低い</li>
<li class="fragment"><strong>開発環境構築の難易度高い</strong></li>
</ul>


<h2>Cloud 9について</h2>

<hr />


<ul>
<li>WEBベースのIDEサービス</li>
<li>40以上の言語に対応（らしい）</li>
<li>この間正式リリース</li>
<li>1アカウント毎に1Docker環境与えられる</li>
<li>IDEはオープンソース</li>
<li>よく分かってない</li>
</ul>


<h2>こんなん</h2>

<p><img src="http://KeenS.github.io/images/cloud9/login.png" alt="ログイン画面" /></p>

<p><img src="http://KeenS.github.io/images/cloud9/dashboard.png" alt="ダッシュボード" /></p>

<p><img src="http://KeenS.github.io/images/cloud9/workspace.png" alt="ワークスペース" /></p>

<p><img src="http://KeenS.github.io/images/cloud9/lookandfeel.png" alt="こんなかんじ" /></p>

<p><img src="http://KeenS.github.io/images/cloud9/CIMworks.png" alt="CIMも動く" /></p>

<p><img src="http://KeenS.github.io/images/cloud9/clworks.png" alt="CLもRun出来る" /></p>

<h2>デモ</h2>

<h2>良いところ</h2>

<hr />


<ul>
<li>難易度低い</li>
<li>Lisp環境動く</li>
<li>Githubとの連携</li>
<li>どこからでも同じ環境にアクセス</li>
<li>キーバインドはうれしい各宗教対応の<br/>
{Mac, Windows}x{Default, Emacs, Vim, Sublime}</li>
</ul>


<h2>微妙なところ</h2>

<hr />


<ul>
<li>シンタックスハイライト微妙<br/>
（せめてキーワード引数はどうにか）</li>
<li>補完微妙</li>
<li>インデント微妙</li>
<li>swank使いたい</li>
</ul>


<p><span style="font-size:600%">以上</span><br/>
何か質問あればどうぞ</p>
]]></content>
  </entry>
  
</feed>
