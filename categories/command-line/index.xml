<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Command Line on κeenのHappy Hacκing Blog</title>
    <link>/categories/command-line/</link>
    <description>Recent content in Command Line on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 29 Nov 2015 23:25:54 +0900</lastBuildDate>
    <atom:link href="/categories/command-line/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cargoの使い方</title>
      <link>/blog/2015/11/29/cargonotsukaikata</link>
      <pubDate>Sun, 29 Nov 2015 23:25:54 +0900</pubDate>
      
      <guid>/blog/2015/11/29/cargonotsukaikata</guid>
      <description>

&lt;p&gt;この記事は&lt;a href=&#34;http://qiita.com/advent-calendar/2015/rust-lang&#34;&gt;Rust Advent Calendar 2015&lt;/a&gt; 3日目の記事です。&lt;br /&gt;
前 &lt;a href=&#34;/blog/2015/11/29/rustdechiisanatsu_ruwotsukuttemiru_kouhen_/&#34;&gt;Rustで小さなツールを作ってみる(後編)&lt;/a&gt;&lt;br /&gt;
次  szkttyさん インデックス構文によるアクセスを実装する&lt;/p&gt;

&lt;p&gt;κeenです。Rustを使うにはCargoを使う必要がありますが、&lt;code&gt;cargo help&lt;/code&gt;を見てもあまり情報が載っていないので少しばかり書きましょう。&lt;/p&gt;

&lt;h1 id=&#34;new:e4bd6fb248740806b055cd17a0b9a9cc&#34;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Create a new cargo package at &amp;lt;path&amp;gt;

Usage:
    cargo new [options] &amp;lt;path&amp;gt;
    cargo new -h | --help

Options:
    -h, --help          Print this message
    --vcs VCS           Initialize a new repository for the given version
                        control system (git or hg) or do not initialize any version
                        control at all (none) overriding a global configuration.
    --bin               Use a binary instead of a library template
    --name NAME         Set the resulting package name
    -v, --verbose       Use verbose output
    -q, --quiet         No output printed to stdout
    --color WHEN        Coloring: auto, always, never
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これはみなさんよく使うのでほとんど説明不要でしょう。&lt;code&gt;cargo new&lt;/code&gt;または&lt;code&gt;cargo new --bin&lt;/code&gt;の形でよく使います。
オプションを見て分かる通り、&lt;code&gt;cargo new foo-rs --name foo&lt;/code&gt;のようにパスとcrateの名前を変えたりデフォルトのvcsにmercurialを使うことも出来ます。&lt;/p&gt;

&lt;h1 id=&#34;build:e4bd6fb248740806b055cd17a0b9a9cc&#34;&gt;&lt;code&gt;build&lt;/code&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Compile a local package and all of its dependencies

Usage:
    cargo build [options]

Options:
    -h, --help               Print this message
    -p SPEC, --package SPEC  Package to build
    -j N, --jobs N           The number of jobs to run in parallel
    --lib                    Build only this package&#39;s library
    --bin NAME               Build only the specified binary
    --example NAME           Build only the specified example
    --test NAME              Build only the specified test target
    --bench NAME             Build only the specified benchmark target
    --release                Build artifacts in release mode, with optimizations
    --features FEATURES      Space-separated list of features to also build
    --no-default-features    Do not build the `default` feature
    --target TRIPLE          Build for the target triple
    --manifest-path PATH     Path to the manifest to compile
    -v, --verbose            Use verbose output
    -q, --quiet              No output printed to stdout
    --color WHEN             Coloring: auto, always, never

If the --package argument is given, then SPEC is a package id specification
which indicates which package should be built. If it is not given, then the
current package is built. For more information on SPEC and its format, see the
`cargo help pkgid` command.

Compilation can be configured via the use of profiles which are configured in
the manifest. The default profile for this command is `dev`, but passing
the --release flag will use the `release` profile instead.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;恐らく一番よく使うタスクですね。ビルド対象を色々指定できるのはいいとして、実は&lt;code&gt;-j&lt;/code&gt;オプションがあります。並行ビルド出来るやつですね。体感速度は変わりませんが。&lt;/p&gt;

&lt;h1 id=&#34;run:e4bd6fb248740806b055cd17a0b9a9cc&#34;&gt;&lt;code&gt;run&lt;/code&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Run the main binary of the local package (src/main.rs)

Usage:
    cargo run [options] [--] [&amp;lt;args&amp;gt;...]

Options:
    -h, --help              Print this message
    --bin NAME              Name of the bin target to run
    --example NAME          Name of the example target to run
    -j N, --jobs N          The number of jobs to run in parallel
    --release               Build artifacts in release mode, with optimizations
    --features FEATURES     Space-separated list of features to also build
    --no-default-features   Do not build the `default` feature
    --target TRIPLE         Build for the target triple
    --manifest-path PATH    Path to the manifest to execute
    -v, --verbose           Use verbose output
    -q, --quiet             No output printed to stdout
    --color WHEN            Coloring: auto, always, never

If neither `--bin` nor `--example` are given, then if the project only has one
bin target it will be run. Otherwise `--bin` specifies the bin target to run,
and `--example` specifies the example target to run. At most one of `--bin` or
`--example` can be provided.

All of the trailing arguments are passed to the binary to run. If you&#39;re passing
arguments to both Cargo and the binary, the ones after `--` go to the binary,
the ones before go to Cargo.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行可能ファイルのプロジェクトだった時に成果物を走らせます。あるいはexampleも走らせられます。とはいってもまだビルドしてなかったらビルドもするのでビルド向けのオプションがいっぱいありますね。&lt;/p&gt;

&lt;p&gt;実行可能ファイルが複数あるなら&lt;code&gt;cargo run --bin xxx&lt;/code&gt;で指定して走らせます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--release&lt;/code&gt;ビルドした成果物を走らせたかったら&lt;code&gt;cargo run --release&lt;/code&gt;しないといけません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cargo run -- args&lt;/code&gt;で成果物に引数を渡せます。&lt;/p&gt;

&lt;h1 id=&#34;test:e4bd6fb248740806b055cd17a0b9a9cc&#34;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Execute all unit and integration tests of a local package

Usage:
    cargo test [options] [--] [&amp;lt;args&amp;gt;...]

Options:
    -h, --help               Print this message
    --lib                    Test only this package&#39;s library
    --bin NAME               Test only the specified binary
    --example NAME           Test only the specified example
    --test NAME              Test only the specified integration test target
    --bench NAME             Test only the specified benchmark target
    --no-run                 Compile, but don&#39;t run tests
    -p SPEC, --package SPEC  Package to run tests for
    -j N, --jobs N           The number of jobs to run in parallel
    --release                Build artifacts in release mode, with optimizations
    --features FEATURES      Space-separated list of features to also build
    --no-default-features    Do not build the `default` feature
    --target TRIPLE          Build for the target triple
    --manifest-path PATH     Path to the manifest to build tests for
    -v, --verbose            Use verbose output
    -q, --quiet              No output printed to stdout
    --color WHEN             Coloring: auto, always, never
    --no-fail-fast           Run all tests regardless of failure

All of the trailing arguments are passed to the test binaries generated for
filtering tests and generally providing options configuring how they run. For
example, this will run all tests with the name `foo` in their name:

    cargo test foo

If the --package argument is given, then SPEC is a package id specification
which indicates which package should be tested. If it is not given, then the
current package is tested. For more information on SPEC and its format, see the
`cargo help pkgid` command.

The --jobs argument affects the building of the test executable but does
not affect how many jobs are used when running the tests.

Compilation can be configured via the `test` profile in the manifest.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テスト走らせるやつです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cargo test&lt;/code&gt;とだけすると全てのテストが走ります。地味にrustdocの中に書いたexampleも走ります。&lt;/p&gt;

&lt;h1 id=&#34;search:e4bd6fb248740806b055cd17a0b9a9cc&#34;&gt;&lt;code&gt;search&lt;/code&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Search packages in crates.io

Usage:
    cargo search [options] &amp;lt;query&amp;gt;
    cargo search [-h | --help]

Options:
    -h, --help               Print this message
    --host HOST              Host of a registry to search in
    -v, --verbose            Use verbose output
    -q, --quiet              No output printed to stdout
    --color WHEN             Coloring: auto, always, never
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;crates.ioからパッケージを捜してきてくれます。よく使いますね。インデックスのアップデートが地味に重い。&lt;/p&gt;

&lt;h1 id=&#34;fetch:e4bd6fb248740806b055cd17a0b9a9cc&#34;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;だんだんニッチなタスクを紹介していきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fetch dependencies of a package from the network.

Usage:
    cargo fetch [options]

Options:
    -h, --help               Print this message
    --manifest-path PATH     Path to the manifest to fetch dependencies for
    -v, --verbose            Use verbose output
    -q, --quiet              No output printed to stdout
    --color WHEN             Coloring: auto, always, never

If a lockfile is available, this command will ensure that all of the git
dependencies and/or registries dependencies are downloaded and locally
available. The network is never touched after a `cargo fetch` unless
the lockfile changes.

If the lockfile is not available, then this is the equivalent of
`cargo generate-lockfile`. A lockfile is generated and dependencies are also
all updated.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dependenciesを全てローカルに持ってくるタスクです。&lt;/p&gt;

&lt;h1 id=&#34;generate-lockfile:e4bd6fb248740806b055cd17a0b9a9cc&#34;&gt;&lt;code&gt;generate_lockfile&lt;/code&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Generate the lockfile for a project

Usage:
    cargo generate-lockfile [options]

Options:
    -h, --help               Print this message
    --manifest-path PATH     Path to the manifest to generate a lockfile for
    -v, --verbose            Use verbose output
    -q, --quiet              No output printed to stdout
    --color WHEN             Coloring: auto, always, never
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cargo.lockの生成をします。&lt;code&gt;cargo update&lt;/code&gt;がロックファイルがないと怒ってくるのでそういう時に使うのでしょう。&lt;/p&gt;

&lt;h1 id=&#34;package:e4bd6fb248740806b055cd17a0b9a9cc&#34;&gt;&lt;code&gt;package&lt;/code&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Assemble the local package into a distributable tarball

Usage:
    cargo package [options]

Options:
    -h, --help              Print this message
    -l, --list              Print files included in a package without making one
    --no-verify             Don&#39;t verify the contents by building them
    --no-metadata           Ignore warnings about a lack of human-usable metadata
    --manifest-path PATH    Path to the manifest to compile
    -v, --verbose           Use verbose output
    -q, --quiet             No output printed to stdout
    --color WHEN            Coloring: auto, always, never
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cargoにはcrates.ioにデプロイする機能もあります。他にも&lt;code&gt;publish&lt;/code&gt;, &lt;code&gt;login&lt;/code&gt;, &lt;code&gt;yank&lt;/code&gt;も見ておきましょう。&lt;/p&gt;

&lt;h1 id=&#34;install:e4bd6fb248740806b055cd17a0b9a9cc&#34;&gt;&lt;code&gt;install&lt;/code&gt;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Install a Rust binary
Usage:
    cargo install [options] [&amp;lt;crate&amp;gt;]
    cargo install [options] --list
Specifying what crate to install:
    --vers VERS               Specify a version to install from crates.io
    --git URL                 Git URL to install the specified crate from
    --branch BRANCH           Branch to use when installing from git
    --tag TAG                 Tag to use when installing from git
    --rev SHA                 Specific commit to use when installing from git
    --path PATH               Filesystem path to local crate to install
Build and install options:
    -h, --help                Print this message
    -j N, --jobs N            The number of jobs to run in parallel
    --features FEATURES       Space-separated list of features to activate
    --no-default-features     Do not build the `default` feature
    --debug                   Build in debug mode instead of release mode
    --bin NAME                Only install the binary NAME
    --example EXAMPLE         Install the example EXAMPLE instead of binaries
    --root DIR                Directory to install packages into
    -v, --verbose             Use verbose output
    -q, --quiet               Less output printed to stdout
    --color WHEN              Coloring: auto, always, never
This command manages Cargo&#39;s local set of install binary crates. Only packages
which have [[bin]] targets can be installed, and all binaries are installed into
the installation root&#39;s `bin` folder. The installation root is determined, in
order of precedence, by `--root`, `$CARGO_INSTALL_ROOT`, the `install.root`
configuration key, and finally the home directory (which is either
`$CARGO_HOME` if set or `$HOME/.cargo` by default).
There are multiple sources from which a crate can be installed. The default
location is crates.io but the `--git` and `--path` flags can change this source.
If the source contains more than one package (such as crates.io or a git
repository with multiple crates) the `&amp;lt;crate&amp;gt;` argument is required to indicate
which crate should be installed.
Crates from crates.io can optionally specify the version they wish to install
via the `--vers` flags, and similarly packages from git repositories can
optionally specify the branch, tag, or revision that should be installed. If a
crate has multiple binaries, the `--bin` argument can selectively install only
one of them, and if you&#39;d rather install examples the `--example` argument can
be used as well.
The `--list` option will list all installed packages (and their versions).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まだリリースチャネルには来てませんが、&lt;code&gt;install&lt;/code&gt;も入る予定です。binプロジェクトをソースを持ってきてそのままビルド、インストールまでするやつです。勿論、ローカルのものもインストール出来ますよ。
&lt;a href=&#34;https://github.com/rust-lang-nursery/rustfmt&#34;&gt;rustfmt&lt;/a&gt;のようにREADMEのインストール方法に&lt;code&gt;cargo install&lt;/code&gt;を書いているものもあります。これが使えるようになると配布がぐっと楽になりますね。&lt;/p&gt;

&lt;h1 id=&#34;プラグイン:e4bd6fb248740806b055cd17a0b9a9cc&#34;&gt;プラグイン&lt;/h1&gt;

&lt;p&gt;Cargoのサブコマンドを自分で作るのは簡単です。&lt;code&gt;cargo foo&lt;/code&gt;というタスクを作りたいのなら&lt;code&gt;cargo-foo&lt;/code&gt;という名前の実行可能ファイルをパスに置いておくだけです。&lt;/p&gt;

&lt;p&gt;試してみましょう&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt;EOF &amp;gt; ~/bin/cargo-foo
#!/bin/sh
echo args are: &amp;quot;\$@&amp;quot;
echo \\\$0 is: \$0
EOF
$ chmod +x  ~/bin/cargo-foo
$ cargo foo aa bb cc
args are: foo aa bb cc
$0 is: /home/kim/bin/cargo-foo
$ cargo help foo aa bb cc
args are: foo -h
$0 is: /home/kim/bin/cargo-foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょっと独特な引数の渡り方をしてますね。しかし予め了解しておけば特に問題はなさそうです。1つサブコマンドを作ってみましょう。&lt;/p&gt;

&lt;p&gt;指定した名前のパッケージをCargo.tomlのdependenciesに書き足してくれるサブコマンドです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
usage(){
    cat &amp;lt;&amp;lt;EOF
Add the dependency of crate to Cargo.toml

Usage:
    cargo use &amp;lt;crate&amp;gt; [version]
    cargo use -h | --help

Description:
    Add the dependency of crate to Cargo.toml.
    If vension is omitted, adopt the latest version.

EOF
}

version(){
    cargo search &amp;quot;$1&amp;quot; | grep -Eo &amp;quot;^$1 \(.*?\)&amp;quot; | sed &amp;quot;s/^$1 (\(.*\))/\1/&amp;quot;
}

find_cargo(){
    # TODO: look up parent directories
    ls | grep &#39;^Cargo.toml$&#39;
}

ensure_dep_exists(){
    cargo=&amp;quot;$1&amp;quot;
    if ! grep -F &#39;[dependencies]&#39; &amp;quot;$cargo&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1; then
        echo &#39;[dependencies]&#39; &amp;gt;&amp;gt; &amp;quot;$cargo&amp;quot;
    fi
}

insert_dep(){
    cargo=&amp;quot;$1&amp;quot;
    crate=&amp;quot;$2&amp;quot;
    version=&amp;quot;$3&amp;quot;
    # FIXME: Because Linux and Mac behaves defferently on null string argument, don&#39;t use it and adopt workaround.
    sed -i&#39;&#39; &amp;quot;/\[dependencies\]/{a\
$crate = \&amp;quot;$version\&amp;quot;
}&amp;quot; &amp;quot;$cargo&amp;quot;
}

run(){
    CARGO_TOML=&amp;quot;$(find_cargo)&amp;quot;
    if [ $? != 0 ]
    then
        echo &amp;quot;Cargo.toml not found&amp;quot; 1&amp;gt;&amp;amp;2
        exit 1
    fi

    if [ -z &amp;quot;$1&amp;quot; ]; then
        usage
        exit 1
    else
        CRATE=&amp;quot;$1&amp;quot;
    fi

    if [ -z &amp;quot;$2&amp;quot; ]; then
        VERSION=&amp;quot;$(version $1)&amp;quot;
    else
        VERSION=&amp;quot;$2&amp;quot;
    fi

    ensure_dep_exists &amp;quot;$CARGO_TOML&amp;quot;
    insert_dep &amp;quot;$CARGO_TOML&amp;quot; &amp;quot;$CRATE&amp;quot; &amp;quot;$VERSION&amp;quot;    
}

main(){
    # $1 is &amp;quot;use&amp;quot; when called as a cargo plugin
    if [ &amp;quot;$1&amp;quot; != use ]; then
        echo &amp;quot;Use this as a cargo plugin&amp;quot;
        usage
        exit 1
    fi
    shift
    if [ &amp;quot;$1&amp;quot; = -h ] || [ &amp;quot;$1&amp;quot; = --help ]; then
        usage
        exit
    else
        run &amp;quot;$@&amp;quot;
    fi
}


main &amp;quot;$@&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まだ洗練されていませんがお気に入りのタスクです。誰かCLIからCargo.tomlをいじれるツール作ってくれないかな。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ファイル削除コマンド色々</title>
      <link>/blog/2015/07/05/fairusakujokomandoiroiro</link>
      <pubDate>Sun, 05 Jul 2015 14:18:37 +0900</pubDate>
      
      <guid>/blog/2015/07/05/fairusakujokomandoiroiro</guid>
      <description>

&lt;p&gt;ファイル生成/削除コマンドについて覚え書き。&lt;/p&gt;

&lt;h1 id=&#34;空ファイル生成:40d37f886c175b93db8e875ce685ddc6&#34;&gt;空ファイル生成&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ touch file
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;サイズ指定でファイル生成:40d37f886c175b93db8e875ce685ddc6&#34;&gt;サイズ指定でファイル生成&lt;/h1&gt;

&lt;p&gt;0埋め/高速なら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dd if=/dev/zero of=file bs=size count=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ランダム/低速なら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dd if=/dev/random of=file bs=size count=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こっちは圧縮されてもサイズが極端に変わらない。&lt;/p&gt;

&lt;h1 id=&#34;ファイルの切り詰め:40d37f886c175b93db8e875ce685ddc6&#34;&gt;ファイルの切り詰め&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ truncate -s size file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記で作ったファイルのサイズを変えたりログファイルを一旦クリアしたりに便利。&lt;/p&gt;

&lt;h1 id=&#34;普通の削除:40d37f886c175b93db8e875ce685ddc6&#34;&gt;普通の削除&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ rm file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただしハードディスク上にはデータは残るのでセキュリティ的には完全ではない。&lt;/p&gt;

&lt;h1 id=&#34;ディスク上からも完全削除:40d37f886c175b93db8e875ce685ddc6&#34;&gt;ディスク上からも完全削除&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ shred -u file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-u&lt;/code&gt;がなかったらファイルを壊すが削除はしない。&lt;/p&gt;

&lt;p&gt;shredが出てこなかったので調べたついでにまとめた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>あなたの知らないShebang</title>
      <link>/blog/2015/06/26/anatanoshiranaishebang</link>
      <pubDate>Fri, 26 Jun 2015 23:24:44 +0900</pubDate>
      
      <guid>/blog/2015/06/26/anatanoshiranaishebang</guid>
      <description>

&lt;p&gt;κeenです。最近は何故かBlack君って呼ばれます。Shebangの書き方にはいくつかあって、それを利用したふと面白い方法を思い付いたので共有を。&lt;/p&gt;

&lt;p&gt;さて、ご存知Shebangといえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにファイルの1行目が&lt;code&gt;#!&lt;/code&gt;から始まっているとシェルがそれ以降の文字列を実行可能ファイルのパス名として捜して実行してくれるものですが、実は&lt;code&gt;#!&lt;/code&gt;は唯一のフォーマットではありません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#!&lt;/code&gt;がデファクトになる前なのかそもそもシェルにコメントがなかった時代のものなのかは知りませんが昔は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;: /bin/sh
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;code&gt;:&lt;/code&gt;で始めていたらしいです。因みに&lt;code&gt;:&lt;/code&gt;は「何もしないコマンド」です。実質的にコメントとして扱ったり副作用のある変数展開だけを行なったりプログラマティックコメントアウトだったりの用途で使われてます。&lt;/p&gt;

&lt;p&gt;さて、シェルは全て文字列なのでクォートしてもしなくても構いません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;quot;:&amp;quot; &amp;quot;/bin/sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としてもちゃんと動いてくれます。なぜわざわざクォートするかというと&lt;a href=&#34;//KeenS.github.io/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru/&#34;&gt;割と処理系ポータブルなCommon Lisp実行可能ファイルを作る | κeenのHappy Hacκing Blog&lt;/a&gt;のように別の言語のスクリプトとして実行される時に文字列リテラルになってくれると単純に無視されるので互換性が高まるのです。&lt;/p&gt;

&lt;p&gt;ということで完全版ポータブルなCommon Lisp実行可能ファイルはこうなります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&amp;quot;:&amp;quot; &amp;quot;/bin/sh&amp;quot;

#|
run_if_exists(){
 command -v $1 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; exec &amp;quot;$@&amp;quot;
}
 run_if_exists cl &amp;quot;$0&amp;quot; &amp;quot;$@&amp;quot;
 run_if_exists sbcl --noinform --no-sysinit --no-userinit --script &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists clisp -norc --quiet --silent -on-error exit  &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists ecl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists mkcl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists alisp -qq -#! &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists ccl --no-init --quiet --batch --load &amp;quot;$0&amp;quot;  --eval &#39;(quit)&#39; -- &amp;quot;$@&amp;quot;
 run_if_exists abcl --noinform --noinit --nosystem --batch --load &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists lisp -quiet -noinit -batch -load &amp;quot;$0&amp;quot; -eval &#39;(quit)&#39; -- &amp;quot;$@&amp;quot;
 echo &amp;quot;No lisp implementation found&amp;quot;
 exit 1
|#

(write-line (lisp-implementation-type))
(force-output)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;abclとcclが利用可能になりました。あとCIMも捜すようにしました。roswellは作者に訊いて下さい。&lt;/p&gt;

&lt;p&gt;ちなみに、shebangの解釈はシェルに依存するのですが、B Shell, csh, tcsh, dash, Bash, zshで動作確認しました。古い機能なので新しいシェルほど切り捨てている可能性があったのですがBashやzshが大丈夫だったので良かったです。
一応非推奨な気がしますがこれしか方法がないので仕方ないですね。&lt;/p&gt;

&lt;p&gt;ということでみなさんスクリプト書きましょう。&lt;/p&gt;

&lt;h1 id=&#34;追記:97aff0076544159c37193ad080a89d0a&#34;&gt;追記&lt;/h1&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/blackenedgold&#34;&gt;@blackenedgold&lt;/a&gt; shebangの解釈はシェルじゃなくてOSのexec()がやります。で、#!や認識できるバイナリ以外は、exec()がエラーを返した後でシェルがファイルを見て、テキストファイルならシェルスクリプトとして実行ってやってます。なので先頭が:の場合は(続&lt;/p&gt;&amp;mdash; Kilo Kawai (@anohana) &lt;a href=&#34;https://twitter.com/anohana/status/614551978526445570&#34;&gt;2015, 6月 26&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/blackenedgold&#34;&gt;@blackenedgold&lt;/a&gt; shebangとしてではなく、シェルがシェルスクリプトとして読んでるだけなので、その後に/bin/shとか書いてあっても関係ないはず (シェルによってはそこも見るかもしれませんが)&lt;/p&gt;&amp;mdash; Kilo Kawai (@anohana) &lt;a href=&#34;https://twitter.com/anohana/status/614552151759589376&#34;&gt;2015, 6月 26&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;ということで実験してみたところ、先頭の&lt;code&gt;&amp;quot;:&amp;quot; &amp;quot;/bin/sh&amp;quot;&lt;/code&gt;はどのシェルも読み飛ばす模様(つまり、&lt;code&gt;&amp;quot;:&amp;quot; &amp;quot;/usr/bin/ruby&amp;quot;&lt;/code&gt;と書いてもrubyが実行される訳ではない)。&lt;/p&gt;

&lt;p&gt;で、先程の 完全版から&lt;code&gt;&amp;quot;:&amp;quot; &amp;quot;/bin/sh&amp;quot;&lt;/code&gt;を取り除いて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#|
run_if_exists(){
 command -v $1 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; exec &amp;quot;$@&amp;quot;
}
 run_if_exists cl &amp;quot;$0&amp;quot; &amp;quot;$@&amp;quot;
 run_if_exists sbcl --noinform --no-sysinit --no-userinit --script &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists clisp -norc --quiet --silent -on-error exit  &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists ecl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists mkcl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists alisp -qq -#! &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists ccl --no-init --quiet --batch --load &amp;quot;$0&amp;quot;  --eval &#39;(quit)&#39; -- &amp;quot;$@&amp;quot;
 run_if_exists abcl --noinform --noinit --nosystem --batch --load &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists lisp -quiet -noinit -batch -load &amp;quot;$0&amp;quot; -eval &#39;(quit)&#39; -- &amp;quot;$@&amp;quot;
 echo &amp;quot;No lisp implementation found&amp;quot;
 exit 1
|#

(write-line (lisp-implementation-type))
(force-output)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としても動いたのでこれが最終版ということになります。&lt;/p&gt;

&lt;p&gt;大学の講究でMINIX本やったどころかexecのところ自分の担当だったのに恥かしい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>tarballベースの軽量バックアップツール&#39;Sheltar&#39;を作った</title>
      <link>/blog/2015/05/06/tarballbe_sunokeiryoubakkuapputsu_rutsukutta</link>
      <pubDate>Wed, 06 May 2015 20:45:53 +0900</pubDate>
      
      <guid>/blog/2015/05/06/tarballbe_sunokeiryoubakkuapputsu_rutsukutta</guid>
      <description>

&lt;p&gt;κeenです。みなさんバックアップは何使ってますか？大抵のOSには標準でバックアップツールが付いてますがそれ使ってます？私も使ってます。
しかしやつらはそのOSでしか動かない/動かす方法があまり知られていないのでマシンがクラッシュしたりマシンを失くした時に困ります。&lt;/p&gt;

&lt;p&gt;そこで候補に上がるのが安心と信頼のtarballですが今度は増分バックアップが取りづらいという問題があります。なのでtarballベースの差分バックアップツールを作りました。&lt;/p&gt;

&lt;p&gt;まあ、捜せば同じようなものが色々あるでしょうが捜し回るのが面倒だし色々インストールするのも嫌なのでえいやと作ってしまいました。&lt;/p&gt;

&lt;p&gt;タイトルにある通り&lt;a href=&#34;https://github.com/KeenS/sheltar&#34;&gt;Sheltar&lt;/a&gt;といいます。ポータブルなB Shellスクリプト製です。どこでも動くと思います。バックアップ（避難）だしshellだしtarだしって適当に付けたら意外にもコンフリクトがありませんでした。しかも&lt;a href=&#34;http://ultra.wikia.com/wiki/Sheltar&#34;&gt;ウルトラ怪獣&lt;/a&gt;にも居るという奇跡的な名前です。&lt;/p&gt;

&lt;h1 id=&#34;目的:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;目的&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E5%A2%97%E5%88%86%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97&#34;&gt;増分バックアップ&lt;/a&gt;をとる&lt;/li&gt;
&lt;li&gt;UbuntuとMac間でのデータ同期にも使いたい(家のルータがしょぼいのでrsyncを使いたくなく、USBメモリ経由とかが良い)&lt;/li&gt;
&lt;li&gt;なのでファイル形式はポータブルなtarballで&lt;/li&gt;
&lt;li&gt;メタデータとかは極力置かず、最悪他のツールからでもバックアップデータをサルベージ出来るようにしたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。 GNU tarには増分バックアップ用のオプションがありますがファイル抽出は手作業でやる必要があります。
また、(多分)BSD tarには増分バックアップ用のオプションがないのでそこもカバーする必要があるかなと思って作りました。&lt;/p&gt;

&lt;p&gt;あとオプションがあるとはいっても一々覚えてられないのでスクリプト化してしまいたかったってのもあります。&lt;/p&gt;

&lt;h1 id=&#34;使い方:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;使い方&lt;/h1&gt;

&lt;h2 id=&#34;step0:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;STEP0&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/KeenS/sheltar&#34;&gt;ここ&lt;/a&gt;からSheltarを入手しましょう。&lt;code&gt;sheltar&lt;/code&gt;スクリプト1つで完結しているのでcloneしなくてもrawをwgetしてきても大丈夫です。&lt;/p&gt;

&lt;h2 id=&#34;step1:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;STEP1&lt;/h2&gt;

&lt;p&gt;増分バックアップなので複数のtarballが作られます。バックアップ用のディレクトリを用意しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir /mnt/dev1/backup
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step2:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;STEP2&lt;/h2&gt;

&lt;p&gt;バックアップしたいファイルをリストアップしましょう。バックアップは継続的に行なうものなので1回限りのコマンドライン引数で渡す訳にはいきませんね。&lt;/p&gt;

&lt;p&gt;pngファイルをバックアップしたいとしましょうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find Pictures -name &#39;*.png&#39; &amp;gt;&amp;gt; list.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで良さそうです。ディレクトリの中身全部をバックアップしたいなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo Pictures/ &amp;gt;&amp;gt; list.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でも構いません。最後の&amp;rsquo;/&amp;lsquo;重要です。最初のバックアップの時には問題ありませんが&amp;rsquo;/&amp;lsquo;がないと増分バックアップの時にディレクトリ自体のlast modified timeを見て変更を判断します。&lt;/p&gt;

&lt;h2 id=&#34;step3:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;STEP3&lt;/h2&gt;

&lt;p&gt;あとは実行するだけですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sheltar backup /mnt/dev1/backup list.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;その後、増分バックアップを取るのも同じく&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sheltar backup /mnt/dev1/backup list.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で可能です。前回のアーカイブファイルのlast modified time より新しいファイルだけをバックアップしてくれます。&lt;/p&gt;

&lt;p&gt;因みに今のところバックアップディレクトリに余計なものがあると正しく動作してくれないので注意です。&lt;/p&gt;

&lt;h2 id=&#34;復元:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;復元&lt;/h2&gt;

&lt;p&gt;全部のファイルをカレントディレクトリにぶちまけたいなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sheltar extract /mnt/dev1/backup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。抽出するファイルを指定したいなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sheltar extract /mnt/dev1/backup file1 file2 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とします。&lt;/p&gt;

&lt;p&gt;カレントディレクトリに同名ファイルが既にある場合は新しい方を残します。&lt;/p&gt;

&lt;h1 id=&#34;その他:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;まだまだ未完成です。欲しい機能があったら&lt;a href=&#34;https://github.com/KeenS/sheltar/issues&#34;&gt;issue&lt;/a&gt;に投げてくれると実装するかもしれません。&lt;a href=&#34;https://github.com/KeenS/sheltar/pulls&#34;&gt;Pull Request&lt;/a&gt;もお待ちしております
あと、ドックフードはまだ食べてません。一応テストはしてますが…。Macをまともに使う気になったら使い始めると思います。&lt;/p&gt;

&lt;p&gt;あ、そうそう。今回比較的コメントを多く書いたのでシェルスクリプトを勉強したい方はソース読んでみて下さい。
こんな感じです。Doxygenがシェルスクリプトに対応してないので疑似ドキュメント形式のコメントですが。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Extract the all files from backups in $ST_BACKUP_DIR.
# A file with the same name as extracting file will be preserved if it is newer than its counterpart.
## @filesystem extract all the backup files to CWD
st_extract_all()
{
    # This is preferable to `for TARBALL in $(ls)` because the names of listed files
    # can contain whilespaces
    ls --sort=time -r &amp;quot;${ST_BACKUP_DIR}&amp;quot; | while read TARBALL
    do
        tar xf &amp;quot;${ST_BACKUP_DIR}/${TARBALL}&amp;quot; \
            --keep-newer-files               \
            --preserve-permissions           \
            --preserve-order
    done
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>AsciiDocを使ってお手軽manページ生成</title>
      <link>/blog/2015/01/24/generate-manpage</link>
      <pubDate>Sat, 24 Jan 2015 10:58:29 +0000</pubDate>
      
      <guid>/blog/2015/01/24/generate-manpage</guid>
      <description>

&lt;p&gt;コマンドラインツールを作ってるみなさん、man書いてますか？コマンドラインツールを使う人は時代の変化に取り残された遺物なのでWebにドキュメント置いても読んでくれませんよ。&lt;/p&gt;

&lt;p&gt;いや、私のようにmanだけを頼りにツールを使う人もいるのでちゃんと書いて下さいね。面倒だって?AsciiDocを使えば簡単に書けますよ!&lt;/p&gt;

&lt;h1 id=&#34;manとは:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;Manとは&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;man hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で見れるやつですね。&lt;/p&gt;

&lt;h2 id=&#34;troff:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;troff&lt;/h2&gt;

&lt;p&gt;manはtroffというフォーマットで書く必要があります。どんな感じかというと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-troff&#34;&gt;.ie n \{\
\h&#39;-04&#39;\(bu\h&#39;+03&#39;\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
use the latest sbcl
.RE
.sp
.if n \{\
.RS 4
.\}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はい。人間が書くものではないですね。なので別の形式(AsciiDoc)から変換することを考えます。&lt;/p&gt;

&lt;h2 id=&#34;セクションナンバー:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;セクションナンバー&lt;/h2&gt;

&lt;p&gt;コマンド（など）はセクションに分かれています。manを書くときに必要になる知識なので覚えておきましょう。コマンドラインから使うものの他、Cの関数やコンフィグファイルについての項目もあります。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一般コマンド&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;システムコール&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ライブラリ関数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;デバイス&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ファイルフォーマット（コンフィグファイル）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ゲーム&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;その他&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;システムメンテナンス(sudoとか)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;カーネル&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;一般デベロッパが使うのは1、5、6、8あたりでしょうか。6のゲームには普通のゲームの他、phase of moon、盈虚(えいきょ、月齢のこと)を表示する&lt;code&gt;pom&lt;/code&gt;コマンドなどがあります。&lt;/p&gt;

&lt;p&gt;manを書くときにはmanを必ずどこかのセクションに割り当てます。&lt;/p&gt;

&lt;p&gt;manを使う時は&lt;code&gt;man hoge&lt;/code&gt;だと全てのセクションのhogeのmanを捜しますが&lt;code&gt;man 1 hoge&lt;/code&gt;だとセクション1のみから捜します。割とセクション1と2で同名のmanがあることがあるので重宝します。また、そのような混同を防ぐためにコマンドやシステムコールの後には括弧書きでセクションナンバーを書くのが慣習です。manならman(1)のように。&lt;/p&gt;

&lt;p&gt;因みに&lt;code&gt;man n intro&lt;/code&gt;とするとセクションナンバーnの説明が見れます。&lt;/p&gt;

&lt;h1 id=&#34;asciidoc:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;AsciiDoc&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.methods.co.nz/asciidoc/&#34;&gt;AsciiDoc Home Page&lt;/a&gt;
MarkdownとかrSTとかの類いです。リーダブルなAsciiなDocを書いて色々な形式に変換出来ます。HTMLやDocBookなどの形式に変換出来ます。普通にそのままのテキストでも十分リーダブルだと思います。拡張子は.txtを使います。そのままでも読めるんだぜオーラが出てますね。&lt;/p&gt;

&lt;p&gt;有名どころだとgitが使ってるとか。バッククォートをあまり使わないので個人的にはリーダブルさが他より高い気がします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://powerman.name/doc/asciidoc&#34;&gt;ここ&lt;/a&gt;にチートシートがあるのでだいたいはそこを見てもらえば良いのですが、例を出すと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asciidoc&#34;&gt;TITLE
=====
keen mail@address
0.0.1, 2015-01-24

Header
------
[source, lisp]
(write-line &amp;quot;Hello, World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;な感じです。
タイトル、=で下線のあとにファイルの属性がきます。Author、Mail、Revision、Dateはよく使うのでこのようにリーダブルに書けます。他の属性は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:attr: value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように書く必要があります。Authorなどもこのように書いても構いません。&lt;/p&gt;

&lt;p&gt;独特なのがパラグラフ毎にマークアップしていくところですね。パラグラフの区切は空行です。上の&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asciidoc&#34;&gt;[source, lisp]
(write-line &amp;quot;Hello, World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにパラグラフの前にマークアップコマンドを置けます。1パラグラフに収まらないものは例えばソースコードなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asciidoc&#34;&gt;----
(defun hello (name)
  (format t &amp;quot;Hello, ~a~%&amp;quot; name))

(hello &amp;quot;κeen&amp;quot;)
----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように&lt;code&gt;-&lt;/code&gt;4つで囲む、などの記法もあります。&lt;/p&gt;

&lt;h1 id=&#34;manのフォーマット:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;manのフォーマット&lt;/h1&gt;

&lt;p&gt;さて、話戻ってmanのフォーマットです。みなさん見慣れてるかと思いますが、manは最初はNAME、SYNOPSIS、DESCRIPTIONのセクションが並ぶことを要求します。&lt;/p&gt;

&lt;h1 id=&#34;asciidocからman生成:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;AsciiDocからman生成&lt;/h1&gt;

&lt;p&gt;manが一定のフォーマットを要求するのでAsciiDoc側も一定のフォーマットで書いてやる必要があります。&lt;/p&gt;

&lt;p&gt;NAME、SYNOPSIS、DESCRIPTIONは勿論のこと、タイトルが「コマンド名(n)」となっている必要があります。コマンド名にはスペースが入ってはいけません。gitのようにサブコマンドに分かれているものはハイフンで繋ぐようです。nはセクションナンバーですね。&lt;/p&gt;

&lt;p&gt;NAMEについて捕捉しておくと、NAMEの書式も決まっていて、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;command-name - one line description
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のフォーマットである必要があります。&lt;code&gt;apropos(1)&lt;/code&gt;で表示するためでしょうね、きっと。&lt;/p&gt;

&lt;h2 id=&#34;例:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;例&lt;/h2&gt;

&lt;p&gt;実際に私が書いたものを載せますね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-asciidoc&#34;&gt;cim-use(1)
==========
keen(@blackenedgold) 3han5chou7@gmail.com
:man manual: CIM Manual

NAME
----
cim-use -  Use specified impl as &#39;cl&#39; command&#39;s backend.

SYNOPSIS
--------
[verse]
cim use &amp;lt;impl[-version]&amp;gt; [--default]

DESCRIPTION
-----------

Use &amp;lt;impl&amp;gt; as background for cl command. It also affects bare lisp command.
If version is not given, use latest version.
If --default is given, use the specified implementation at initial state.

EXAMPLES
--------
* use the latest sbcl
----
$ cim use sbcl
$ sbcl --version
SBCL 1.1.14
----

* use old sbcl
----
$ cim use sbcl-1.1.10
$ sbcl --version
SBCL 1.1.10
----

* use ccl-1.9 and set it default
----
$ cim use ccl-1.9 --default
----

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:man manual:の属性はヘッダに表示されるものです。&lt;/p&gt;

&lt;p&gt;んで変換は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a2x  --doctype manpage --format manpage filename.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;。&lt;/p&gt;

&lt;p&gt;これ、ファイル名に関らずcim-use.1というファイルを生成します。&lt;/p&gt;

&lt;p&gt;んでファイルの内容は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;man ./cim-use.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で見れます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CIM-USE(1)			  CIM Manual			    CIM-USE(1)



NAME
       cim-use - Use specified impl as &#39;cl&#39; command&#39;s backend.

SYNOPSIS
       cim use &amp;lt;impl[-version]&amp;gt;	[--default]

DESCRIPTION
       Use &amp;lt;impl&amp;gt; as background	for cl command.	It also	affects	bare lisp
       command.	If version is not given, use latest version. If	--default is
       given, use the specified	implementation at initial state.

EXAMPLES
       o   use the latest sbcl

	   $ cim use sbcl
	   $ sbcl --version
	   SBCL	1.1.14

       o   use old sbcl

	   $ cim use sbcl-1.1.10
	   $ sbcl --version
	   SBCL	1.1.10

       o   use ccl-1.9 and set it default

	   $ cim use ccl-1.9 --default

AUTHOR
       keen(@blackenedgold) 3han5chou7@gmail.com
	   Author.



				  01/21/2015			    CIM-USE(1)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他の例だと、&lt;a href=&#34;https://github.com/git/git/tree/master/Documentation&#34;&gt;gitのドキュメント&lt;/a&gt;を見るとよさそうです。あそこはWEB用にもビルドしてるのでAsciiDocのコンフィグ書いてWEBとmanで条件分岐するマクロとかも書いてます。変態ですね。&lt;/p&gt;

&lt;h1 id=&#34;ビルド:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;ビルド&lt;/h1&gt;

&lt;p&gt;私は以下のようなスクリプトを書いてビルドしてます。並列ビルド、タイムスタンプセンシティブビルド対応。DOC_ROOTはデファルトでそのスクリプトが置いてあるディレクトリです。環境変数で制御出来ます。make.shって名前で保存したなら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ DOC_ROOT=your/root ./make.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように。その他AUTO_POLLなども設定出来ます。必要ならお使い下さい。&lt;a href=&#34;https://github.com/KeenS/CIM&#34;&gt;CIM&lt;/a&gt;の配布物に含まれるのでBSDライセンスです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh

: ${DOC_ROOT:=$(cd $(dirname $0); pwd)}
: ${MAN_DIR:=${DOC_ROOT}/man/man1}
: ${AUTO_POLL:=false}
: ${POLL_INTERVAL:=5}

txt2man(){
    if [ ! -e &amp;quot;${MAN_DIR}/$(basename $1 .txt).1&amp;quot; ] || [ &amp;quot;$1&amp;quot; -nt &amp;quot;${MAN_DIR}/$(basename $1 .txt).1&amp;quot; ]; then
        echo &amp;quot;Building $1&amp;quot;
        if a2x -v  --doctype manpage --format manpage -D &amp;quot;${MAN_DIR}&amp;quot; &amp;quot;$1&amp;quot; &amp;gt; &amp;quot;log/$(basename $1 .txt).log&amp;quot; 2&amp;gt;&amp;amp;1
        then
            echo &amp;quot;O Built $1&amp;quot;
        else
            echo &amp;quot;X Bulid failed: $1. See log/$(basename $1 .txt).log&amp;quot;
            return 1
        fi
    fi
}

cd &amp;quot;${DOC_ROOT}&amp;quot;
while &amp;quot;${AUTO_POLL}&amp;quot;; do
      for f in *.txt; do
          txt2man &amp;quot;$f&amp;quot; &amp;amp;
      done

      wait
      if  &amp;quot;${AUTO_POLL}&amp;quot;; then
          sleep &amp;quot;${POLL_INTERVAL}&amp;quot;
      fi
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;運用:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;運用&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;man&lt;/code&gt;はMANPATH環境変数を元にmanを捜します。捜すのはMANPATH直下ではなく、セクションナンバー1なら/man/path/man1/name.1を捜します。それっぽいところに置きましょう。&lt;/p&gt;

&lt;p&gt;因みにFreeBSDではちょっと面倒です。詳しくは&lt;code&gt;manpath(1)&lt;/code&gt;を見て下さい。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:4d61a4bd8cdcafe4425f20a0f8c33270&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;manpageは重要&lt;/li&gt;
&lt;li&gt;だけど手で書くものではない&lt;/li&gt;
&lt;li&gt;AsciiDoc使うと便利!&lt;/li&gt;
&lt;li&gt;便利なスクリプト用意しといたよ&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>印刷フォマット済みのテキストファイルをPDF化する</title>
      <link>/blog/2015/01/24/a2pdf</link>
      <pubDate>Sat, 24 Jan 2015 10:23:00 +0000</pubDate>
      
      <guid>/blog/2015/01/24/a2pdf</guid>
      <description>&lt;p&gt;小ネタ。古いドキュメントやらポータブルな仕様を落としてくると中身が印刷フォーマット済み(ページネーションやヘッダ、フッタをアスキーアートで表現してる)であることがあります。
それらを普通のテキスト形式だと読みづらいのでPDF化する話。&lt;/p&gt;

&lt;p&gt;結論から言うと&lt;a href=&#34;http://search.cpan.org/~jonallen/a2pdf-1.11/lib/Script/a2pdf.pm&#34;&gt;a2pdf - search.cpan.org&lt;/a&gt;を使いました。選んだ理由は&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;余計な装飾を付与しない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^L&lt;/code&gt;(pagebreak)でちゃんと改ページする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;です。使い方は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ a2pdf --noheader --noperl-syntax --noline-numbers  foo.txt -o foo.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でok。本当は&lt;code&gt;--nofooter&lt;/code&gt;も付けたいんですがそれつけるとエラー出たのでやむなくフッタは甘受。元々perlのソースコードをPDF化するためのものらしく、デフォルトでそのような設定になってるので無効化する必要があります。&lt;/p&gt;

&lt;p&gt;生成速度なんですけどPDF化すると105ページあるテキストの変換に73秒かかりました。少し遅いですね。このくらいだったらサクっとCommon Lispで書いてしまった方が速かったのかなぁ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Common Lispのポータビリティとユニバーサリティ</title>
      <link>/blog/2015/01/22/common-lisp-portability-and-univesality</link>
      <pubDate>Thu, 22 Jan 2015 07:51:02 +0000</pubDate>
      
      <guid>/blog/2015/01/22/common-lisp-portability-and-univesality</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://clfreaks.org/post/108341635899/1-cim-vs-roswell&#34;&gt;clfreaks&lt;/a&gt;の収録時に他のLisperと話してて価値観というか目標を共有出来てないなと思ったのでここで心情を語る次第。今のCommon Lispの使われ方には問題がある。&lt;/p&gt;

&lt;p&gt;Common Lispにはポータビリティというかユニバーサリティというか、そういうものがない。いや、処理系の作者達はしっかり作ってるのだけどLisperがそういう使い方をしていない。&lt;/p&gt;

&lt;p&gt;例えば、Rubyで出来たアプリケーションを使いたいとしよう。Jekyllがいいかな。大抵のシステムには入ってるだろうが一応処理系のインストールから始めてみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;aptなりpkgなりyumなりで処理系をインストールする。それが気に入らなければソースからインストールしてもいい。&lt;/li&gt;
&lt;li&gt;処理系をインストールするとgemがついてくるので&lt;code&gt;gem install jekyll&lt;/code&gt;を叩く。&lt;/li&gt;
&lt;li&gt;あとはJekyllを使うだけ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あるいは、Octopressなら処理系のインストールのあとは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git cloneしてくる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gem install bundler&lt;/code&gt;でbundlerをインストールする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bundle install&lt;/code&gt;で依存gemをインストールする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bundle exec rake preview&lt;/code&gt;でサーバーが起動する。&lt;/li&gt;
&lt;li&gt;止めたければCtrl-Cで止まる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Common Lispで出来たアプリケーションを使いたいとしよう。&lt;a href=&#34;https://github.com/vsedach/cliki2&#34;&gt;cliki&lt;/a&gt;。がいいかな。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;処理系のインストールはRubyと同じくパッケージマネージャで入る。あるいはソースからインストールしてもいい。この際処理系選びは既に終わっているとする。&lt;/li&gt;
&lt;li&gt;clikiをgit cloneしてくる。&lt;/li&gt;
&lt;li&gt;ASDFに読んでもらうために~/common-lisp以下にclikiを移動する。&lt;/li&gt;
&lt;li&gt;依存パッケージのインストールのためにquicklispをインストールする。

&lt;ul&gt;
&lt;li&gt;quicklisp.lispをダウンロードしてくる。&lt;/li&gt;
&lt;li&gt;REPLを起動する。どうやって？処理系依存だから自分で調べろ。&lt;/li&gt;
&lt;li&gt;Lispの式をいくつか評価してquicklispをインストールする。~/quicklispが出現するがこの際目を瞑る。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;REPLで&lt;code&gt;(ql:quickload :cliki)&lt;/code&gt;を評価して依存パッケージをインストールする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(start-cliki-server port homedir wikis)&lt;/code&gt;でサーバーが起動する。REPLも起動しっぱなし。&lt;/li&gt;
&lt;li&gt;止めたければ

&lt;ul&gt;
&lt;li&gt;Ctrl-Cでinteractive-interruptコンディションを発生させる。デバッガが起動する。&lt;/li&gt;
&lt;li&gt;デバッガからREPLのtoplevelに戻る。デバッガの操作?処理系依存だから自分で調べろ。&lt;/li&gt;
&lt;li&gt;REPLを終了する。どうやって？処理系依存だから自分で調べろ。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「アプリケーションは~/common-lispじゃなくて/var/wwwに置きたいんだけど」 - 「コンフィグ書いたら変えられるよ。ASDFのコンフィグ書いてね。コンフィグの書き方はLisperの常識だよね」&lt;br /&gt;
「~/quicklisp邪魔なんだけど」 - 「ああ、それも変えられるよ。好きな場所に移動して処理系の初期化ファイル書き直してね。初期化ファイル？処理系依存だから自分で調べろ。どう直すか？簡単なLispの式だから自分で直せるよね？」&lt;/p&gt;

&lt;p&gt;多分言いたいことは伝わったかと思う。コマンドラインから扱えないとかパッケージマネージャが我が儘とか色々あるんだけど全ては「Lisperのためだけのものになっている」の一言で表せられる。&lt;/p&gt;

&lt;p&gt;quicklispが我が儘なのはまだ許せる。インストール先のディレクトリが固定されてないと管理しづらいから。しかしASDFがライブラリじゃなくてアプリケーションにまで特定のパスにあることを要求してくるのは納得がいかない。コンパイルやらロードやらテストやらの機能があるんだから.asdファイルのあるディレクトリをルートとしてそこだけで完結してほしい。以前、&lt;a href=&#34;/blog/2014/11/30/quicklisp/&#34;&gt;こんな記事&lt;/a&gt;を書いた所為でASDFの信者と思われているみたいだが、どっちかというとASDFの方が嫌いだ。ASDFが憖っか依存関係の解決までするがためにアプリケーションの置き場まで制約を受ける。手を広げたがために本来の機能が使い辛くなっている。Lisperが制約を受けるのはまだいい。アプリケーションのユーザにまで制約が及ぶのは耐えられない。&lt;/p&gt;

&lt;p&gt;コマンドラインから扱えない問題は多分ノウハウがなかったからだと思う。&lt;a href=&#34;/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru/&#34;&gt;以前の記事&lt;/a&gt;で紹介した方法は多分知られていなかった。あとは複雑で使い辛いと評判(だった)のcl-launchか。アプリケーションはおろかquicklispすらREPLに入らないと使えない。ユーザがLispを微塵も知らない可能性すらあるのに。さらに、コマンドラインから使えないということは他のUnixツール群と組み合わせることも困難になる。また、&lt;a href=&#34;http://blog.8arrow.org/entry/20120323/1332516342&#34;&gt;ここ&lt;/a&gt;にあるようにREPLでアプリケーションを起動していると問題もある。&lt;/p&gt;

&lt;p&gt;私はこの問題を解決するためにCIMを作った。clfreaksの時にも喋ったがCIMのメインの機能は&lt;code&gt;cl&lt;/code&gt;コマンドと&lt;code&gt;ql&lt;/code&gt;コマンドだ。&lt;code&gt;cim&lt;/code&gt;コマンドはただの付加価値のためにつけたおまけである。&lt;/p&gt;

&lt;p&gt;もしclコマンドが広く使われるようになればshebangにclを使うだけで実行可能ファイルが作れて、コマンドラインから使えるようになる。qlを使えばREPLに入らずにパッケージをインストール出来る。スクリプトがエラーを出してもデバッガに入るようなことはない。Ctrl-Cでちゃんと止まる。&lt;/p&gt;

&lt;p&gt;これで一部ユニバーサリティの問題は解決出来たんだけだまだまだ未解決問題がある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;CIMのインストールが必要になる。&lt;/li&gt;
&lt;li&gt;コマンドラインツールは解決したにしてもディレクトリ丸ごと持ってくるようなアプリケーションはASDFの制約をうける&lt;/li&gt;
&lt;li&gt;コンパイルの問題&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1はやっぱりLispを知らない人に使ってもらいたいならCIMのインストールは省きたい。処理系とquicklispだけ入れたら使えてほしい。やっぱりquicklispに変わってもらうしかないのかな。配布物に実行可能形式を含めてたらPATHも通して欲しいし。&lt;/p&gt;

&lt;p&gt;2のASDFの制約の問題はASDFを環境変数で制御出来るようなのでうまいことする方法を考えている。良い方法があったらまたアウトプットする。&lt;/p&gt;

&lt;p&gt;3は現状CIMで扱いかねてる問題。マクロ展開の問題からコンパイルするのが望ましいんだけどコンパイル後のファイルに互換性がない。しかも互換性がないのに同じ拡張子を使う。そこを上手く扱ってくれるのはASDFなんだけどやっぱり奴は我が儘だし何よりコンパイルしてしまうとAllegroを除いてshebangが効かなくなる。&lt;/p&gt;

&lt;p&gt;解決案はいくつか上がってるんだけどまだ決定的なものはない。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;コンパイルをあきらめる&lt;/li&gt;
&lt;li&gt;本体だけASDFでコンパイルしてエントリポイントになるスクリプトはコンパイルしない&lt;/li&gt;
&lt;li&gt;スタンドアロンバイナリ配布する&lt;/li&gt;
&lt;li&gt;ECLを使ってCのファイルを配布する&lt;/li&gt;
&lt;li&gt;ユーザー側にスタンドアロンバイナリを作らせる&lt;/li&gt;
&lt;li&gt;特定の処理系を要求する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1は下の策。&lt;/p&gt;

&lt;p&gt;2は個人的に推したいところだけどやっぱりASDFが憎い。&lt;/p&gt;

&lt;p&gt;3はクロスコンパイルが壊滅的なCommon Lispでは現実的ではない。&lt;/p&gt;

&lt;p&gt;4はCommon Lispの利点の一つにSBCLやCCLやCMU CLの速度が速いというのがあるから出来れば自由に処理系を選ばせたい。あとECLのランタイムのインストールが必要になる。&lt;/p&gt;

&lt;p&gt;5はやっぱりASDFが憎い。それに依存ライブラリもロードするにはquicklispもロードする必要があって、以前の記事の通りバイナリに邪魔なものが入るしそうでなくてもバイナリが素で60MBとかになる。stripするとアプリケーションとして動かなくなるからstripも出来ない。&lt;/p&gt;

&lt;p&gt;6はコンパイル後のファイルがポータブルな処理系はABCL、CLISP、XCLあたりだが、起動の遅いABCL、微妙に仕様に従ってなくて開発も停滞気味なCLISP、既に開発されていない上にマイナーでライブラリのサポートも薄いXCLとあまり選びたくないものばかり。&lt;/p&gt;

&lt;p&gt;因みに非Lispユーザにも使われているCommon LispアプリケーションにStumpWMがあるが、5の方法を採用している。しかしASDFを使わずにMakefileでコンパイルしている。依存ライブラリも手でインストールする必要がある。出来ればCommon Lispのツールチェーンに載せたまま配布したいところ…&lt;/p&gt;

&lt;p&gt;研究が必要。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>割と処理系ポータブルなCommon Lisp実行可能ファイルを作る</title>
      <link>/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru</link>
      <pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru</guid>
      <description>&lt;p&gt;κeenです。Lisp Advent Calendarはもう枠埋まっちゃったので普通にブログで。&lt;/p&gt;

&lt;p&gt;コマンドラインから実行可能なLispファイルをそれなりに多くの処理系で動くように作る話。&lt;/p&gt;

&lt;p&gt;この話はCIMの生い立ちとも関連するんだけどシェルからLispを使いたいときは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env sbcl --script

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんて書いてた人も多いんじゃないかと思うんだけどこれは色々問題がある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;envは環境に依っては/usr/local/bin/envだったりする&lt;/li&gt;
&lt;li&gt;envは環境に依っては複数引数を取れない。&amp;rdquo;sbcl &amp;ndash;script&amp;rdquo;という名前のファイルを捜しにいく&lt;/li&gt;
&lt;li&gt;sbclでしか動かない&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この問題の扱いは一応解決策がある&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

#|
exec sbcl --script &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
|#

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3行目の&lt;code&gt;#|&lt;/code&gt;がシェルのコメントでありLispのブロックコメントであるのがポイント。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;シェルは&lt;code&gt;#!/bin/sh&lt;/code&gt;を見てシェルスクリプトとして実行する&lt;/li&gt;
&lt;li&gt;1,3行目はコメントなのでシェルは無視&lt;/li&gt;
&lt;li&gt;4行目でsbclにそのファイルを引数として与えてexecする。execしたあとはシェルには戻らないのでその後何が書いてあっても構わない&lt;/li&gt;
&lt;li&gt;sbclを&lt;code&gt;--script&lt;/code&gt;付きで読んでるので1行目の&lt;code&gt;#!&lt;/code&gt;で始まる行は無視する&lt;/li&gt;
&lt;li&gt;3~5行目はブロックコメントなのでsbclは無視&lt;/li&gt;
&lt;li&gt;それ以降がLispとして実行される&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;というカラクリになっている。こういうのをピジン言語っていうんだけ？&lt;/p&gt;

&lt;p&gt;まあいいや。&lt;/p&gt;

&lt;p&gt;ところでこのブロックコメントの中にはシェルスクリプト書き放題だよね？そのシェルスクリプト内でどのLisp使うか決めたらポータブルになりそうじゃない？&lt;/p&gt;

&lt;p&gt;こういうのはどう？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#!/bin/sh

#|
run_if_exists(){
 command -v $1 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; exec &amp;quot;$@&amp;quot;
}
 run_if_exists sbcl --noinform --no-sysinit --no-userinit --script &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists clisp -norc --quiet --silent -on-error exit  &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists ecl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists mkcl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists alisp -qq -#! &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
|#

(write-line (lisp-implementation-type))
(force-output)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cclとabclは1行目のシェバンを読み飛ばせなかった&amp;amp;評価結果をエコーバックしない方法が見当らなかったからパス。CMUCLは自分の環境で動かないから検証出来てない。&lt;/p&gt;

&lt;p&gt;これでポータブルに実行は可能。コマンドライン引数の扱いとかはライブラリを頼ってくれ。因みにCIMでは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;  #+allegro  (cdr (system:command-line-arguments))
  #+sbcl (do*  ((var sb-ext:*posix-argv* (cdr list))
                (list var var))
               ((string= (car list) &amp;quot;--&amp;quot;) (return (cdr list))))
  #+clisp ext:*args*
  #+ecl (do*  ((var (si:command-args) (cdr list))
               (list var var))
              ((string= (car list) &amp;quot;--&amp;quot;) (return (cdr list))))
  #+abcl extensions:*command-line-argument-list*
  #+gcl (do*  ((var si::*command-args* (cdr list))
               (list var var))
              ((string= (car list) &amp;quot;--&amp;quot;) (return (cdr list))))
  #+cmu ext:*command-line-words*
  #+ccl ccl:*unprocessed-command-line-arguments*
  #+mkcl (do*  ((var (si:command-args) (cdr list))
               (list var var))
              ((string= (car list) &amp;quot;--&amp;quot;) (return (cdr list))))
  #+lispworks system:*line-arguments-list*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としている。参考までに。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shell Scriptでオプションをパースするときの必勝法</title>
      <link>/blog/2014/02/19/option-parse-for-shell</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/02/19/option-parse-for-shell</guid>
      <description>&lt;p&gt;κeenです。CIMの解説 実装編の執筆はもうちょい掛かりそうです。だいたいコードが落ち着いたら書きます。&lt;/p&gt;

&lt;p&gt;今回は長いオプションと短いオプションをシェルスクリプトでパースするときの話です。&lt;/p&gt;

&lt;p&gt;シェルスクリプトでは&lt;code&gt;case&lt;/code&gt;を使う方法と&lt;code&gt;getopts&lt;/code&gt;を使う方法があります。&lt;code&gt;case&lt;/code&gt;だと長いオプションと短いオプションを扱えるものの短いオプションをまとめるのに苦労し、&lt;code&gt;getopts&lt;/code&gt;だと短いオプションをまとめられるものの長いオプションを扱えません。&lt;/p&gt;

&lt;p&gt;そこで解決策。&lt;code&gt;--foo ARG&lt;/code&gt; &lt;code&gt;-f ARG&lt;/code&gt; &lt;code&gt;-h&lt;/code&gt;をパースし、他のオプションも許可（無視）、&lt;code&gt;--&lt;/code&gt;でパースを止めるとします。&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;$#&#34;&lt;/span&gt; -gt 0 &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ARG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;$1&#34;&lt;/span&gt;;&lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;nb&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;$ARG&#34;&lt;/span&gt; in
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; --foo&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; do_something_with &lt;span class=&#34;s2&#34;&gt;&#34;$ARG&#34;&lt;/span&gt;;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; --&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;break&lt;/span&gt;;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; --*&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; -*&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;nv&#34;&gt;OPTIND&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;while &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;getopts&lt;/span&gt; :f:h OPT &lt;span class=&#34;s2&#34;&gt;&#34;$ARG&#34;&lt;/span&gt;; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt; case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;$OPT&#34;&lt;/span&gt; in
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; f&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; do_something_with &lt;span class=&#34;s2&#34;&gt;&#34;$OPTARG&#34;&lt;/span&gt;;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; h&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; do_something;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt; done&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;単純に&lt;code&gt;case&lt;/code&gt;と&lt;code&gt;getopts&lt;/code&gt;を組み合わせます。ポイントは&lt;code&gt;-*)&lt;/code&gt;の節の&lt;code&gt;OPTIND=1&lt;/code&gt;と&lt;code&gt;getopts&lt;/code&gt;の第3引数でしょうか。&lt;/p&gt;

&lt;p&gt;因みにこの例だと引数を消費します。引数を消費したくなければ&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;$#&#34;&lt;/span&gt; -gt 0 &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ARG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;$1&#34;&lt;/span&gt;;&lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;を&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt;for &lt;/span&gt;ARG;do
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;に書き換えれば良く、&lt;code&gt;--&lt;/code&gt;でパースを止めたくなければ&lt;code&gt;--) break;;&lt;/code&gt;の節を無くせば良く、&lt;/p&gt;

&lt;p&gt;他のオプションを許したくなければ&lt;code&gt;--*);;&lt;/code&gt;の節を&lt;code&gt;--*)exit 1;;&lt;/code&gt;などにし、&lt;code&gt;getopts&lt;/code&gt;の引数文字列&lt;code&gt;:f:h&lt;/code&gt;の&lt;code&gt;:&lt;/code&gt;をとって&lt;code&gt;getopts fh ...&lt;/code&gt;とすれば良いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FreeBSDのmanページを手動インストールする</title>
      <link>/blog/2014/02/01/freebsd-manpage</link>
      <pubDate>Sat, 01 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/02/01/freebsd-manpage</guid>
      <description>&lt;p&gt;FreeBSD10をインストールするときにdocをインストールしなかったら後で困ったのでメモ。環境はUbuntu13.10上のkvmに入れたFreeBSD10です。&lt;/p&gt;

&lt;p&gt;本来なら&lt;code&gt;sudo bsdconfig&lt;/code&gt;(9.xまでは&lt;code&gt;sudo sysinstall&lt;/code&gt;)でメニューを選んでいけばインストールできるのですが、&lt;code&gt;ping&lt;/code&gt;か何かがおかしくてサーバーの名前解決ができない。&lt;code&gt;ping FreeBSD.org&lt;/code&gt;や&lt;code&gt;ping 4.4.4.4&lt;/code&gt;が返ってこない。しかし&lt;code&gt;curl&lt;/code&gt;などは普通に動きます。&lt;/p&gt;

&lt;p&gt;とりあえず&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ftp anonymous@ftp.jp.freebsd.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でログインし、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ftp&amp;gt; cd pub/FreeBSD/releases/i386/10.0-RELEASE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と進んで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ftp&amp;gt; get doc.txz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;します。んで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ftp&amp;gt; bye
$ unxz -cd doc.txz | sudo tar xf - -C /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でインストール完了。&lt;/p&gt;

&lt;p&gt;普通に配置するだけで良いんですね。mandbとかあるのかと思ってた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CIMの解説をしてみる コマンド編</title>
      <link>/blog/2014/01/27/cim-explanation</link>
      <pubDate>Mon, 27 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/01/27/cim-explanation</guid>
      <description>

&lt;p&gt;先日LTで紹介したCIMが思いの外反響を呼んでる(Githubのstarが15)ので解説でもしてみます。&lt;/p&gt;

&lt;p&gt;コマンド編の次は実装編です。これでバグにエンカウントしたときの調査とか完璧ですね。&lt;/p&gt;

&lt;h1 id=&#34;インストーラ:9fa821018233c79deba43b4db5dc1ada&#34;&gt;インストーラ&lt;/h1&gt;

&lt;p&gt;READMEにあるように&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;~/.cim/&lt;/code&gt;にインストールできます。&lt;s&gt;パスを変えたければ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CIM_HOME=/path/to/cim curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でOK。Cシェル系なら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;env CIM_HOME /path/to/cim curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でしょうか。&lt;/s&gt;&lt;/p&gt;

&lt;p&gt;2014-10-20更新&lt;br /&gt;
CIM_HOMEの設定方法が間違ってました。正しくは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | CIM_HOME=/path/to/cim /bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、Cシェル系なら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | env CIM_HOME /path/to/cim /bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です&lt;br /&gt;
更新ここまで&lt;/p&gt;

&lt;p&gt;ここでは&lt;code&gt;curl&lt;/code&gt;を使ってますが&lt;code&gt;wget -O -&lt;/code&gt;とか&lt;code&gt;fetch -o -&lt;/code&gt;など標準出力に吐ければなんでも良いです。&lt;/p&gt;

&lt;p&gt;あ、でも&lt;code&gt;CIM_HOME&lt;/code&gt;を指定してインストールしたときにバグがある気がしてきました。今から直します。&lt;/p&gt;

&lt;p&gt;CIMを使うにはシェルの起動時に初期化が必要ですが、インストーラが初期化ファイルを読みにいく処理を&lt;code&gt;.*rc&lt;/code&gt;に書き出してくれます。Bourne Shellは&lt;code&gt;.profile&lt;/code&gt;ですね。&lt;br /&gt;
書き出すファイルは&lt;code&gt;$SHELL&lt;/code&gt;を見てます。&lt;code&gt;csh&lt;/code&gt;、&lt;code&gt;tcsh&lt;/code&gt;、&lt;code&gt;sh&lt;/code&gt;、&lt;code&gt;bash&lt;/code&gt;、&lt;code&gt;zsh&lt;/code&gt;に対応してます。&lt;/p&gt;

&lt;p&gt;あと&lt;code&gt;~/.emacs.d/eshell/&lt;/code&gt;が存在したら&lt;code&gt;~/.emacs.d/eshell/profile&lt;/code&gt;にも初期化処理を書き出します。一時期パスが間違ってて&lt;code&gt;~/.emacs.d/profile&lt;/code&gt;に書き出してました。ごめんなさい。&lt;br /&gt;
vimshell(だっけ？)でも初期化さえしてしまえば使えると思うので誰か初期化処理書いて下さい。&lt;/p&gt;

&lt;h1 id=&#34;cim:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cim&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;とりあえず&lt;code&gt;help&lt;/code&gt;見ておきましょう。&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;19&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cim help
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;CIM -- Common Lisp Implementation Manager
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Commands currently available
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;install &amp;lt;impl[-version]&amp;gt; ;; Install the impl.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;use &amp;lt;impl[-version]&amp;gt; ;; Use specified impl as `cl&#39; command&#39;s backend.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;resume [rm] [resume..] ;; Resume suspended installation(s) or give it up.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;list &amp;lt;command&amp;gt; ;; List available target of &amp;lt;command&amp;gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;reinstall &amp;lt;impl[-version]&amp;gt; ;; Reinstall the impl.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;clean &amp;lt;impl&amp;gt;|all ;; Clean downloaded archive and src of the impl.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;distclean &amp;lt;impl&amp;gt;|all ;; Clean built dists.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;uninstall &amp;lt;impl[-version]&amp;gt; ;; Uninstall the impl.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;purge &amp;lt;impl&amp;gt;|all ;; Just clean and uninstall the impl.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;info ;; Display current state.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;get ;; Upgrade cim itself.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;version ;; Show the version
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;help &amp;lt;command&amp;gt; ;; Show help for &amp;lt;command&amp;gt;. If no commands are specified, show this help.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If you want detailed help, type `cim help &amp;lt;command&amp;gt;&#39;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;
## `cim install`
&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;19&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cim help install
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim install &amp;lt;impl[-version]&amp;gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Install the given lisp implementation to cim directory.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If version is not specified, install the latest version.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If you want to pass specific options to &#39;configure&#39; script,
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;prefix &#39;flags=&#39;.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Examples:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # install sbcl-1.1.14
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim install sbcl-1.1.14
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # install latest clisp with option.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; flags=&#39;--with-libsigsegv-prefix=/usr/local&#39; cim install clisp
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;To show available lisp implementations, type &#39;cim list install&#39;.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;インストールします。はい。&lt;code&gt;&amp;lt;impl[-version]&amp;gt;&lt;/code&gt;ってのは&lt;code&gt;sbcl&lt;/code&gt;とか&lt;code&gt;clisp-2.48&lt;/code&gt;とかですね。バージョンを指定しなかったら最新版になります。&lt;code&gt;cim list install&lt;/code&gt;でインストール可能なものを表示しますが載ってない古いバージョンとかもインストールできる筈です。多分。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;configure&lt;/code&gt;スクリプトに渡すフラグを指定したいときは&lt;code&gt;flags=&#39;flag....&#39; cim install&lt;/code&gt;とします。ヘルプにあるように&lt;code&gt;libsigsegv&lt;/code&gt;のパスを指定しないとFreeBSDでclispをインストールできなかったので用意しました。&lt;/p&gt;

&lt;p&gt;Allegroはライセンス表示した方が良いのかなーとか考えてます。&lt;/p&gt;

&lt;h2 id=&#34;cim-use:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cim use&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;19&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;21&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;22&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim use &amp;lt;impl[-version]&amp;gt; [--default]
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Use &amp;lt;impl&amp;gt; as background for &#39;cl&#39; command. It also affects bare lisp command.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If version is not given, use latest version.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If --default is given, use the specified implementation at initial state.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Examples:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # use the latest sbcl
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim use sbcl
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; sbcl --version
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; -&amp;gt; SBCL 1.1.14
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # use old sbcl
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim use sbcl-1.1.10
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; sbcl --version
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; -&amp;gt; SBCL 1.1.10
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # use ccl-1.9 and set it default
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim use ccl-1.9 --default
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;cl&lt;/code&gt;コマンドのバックエンドの切り替えと処理系のバージョンの両方を切り替えます。処理系の指定の仕方は&lt;code&gt;install&lt;/code&gt;に同じ。じゃなかった。&lt;code&gt;install&lt;/code&gt;に加えて&lt;code&gt;/bin:/usr/bin:/usr/local/bin&lt;/code&gt;にあるものを&lt;code&gt;xxx-system&lt;/code&gt;として指定できます。&lt;code&gt;sbcl-system&lt;/code&gt;とか。&lt;/p&gt;

&lt;p&gt;例えば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cim use clisp-2.48
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ってやると&lt;code&gt;cl&lt;/code&gt;コマンドがバックエンドとしてclispのバージョン2.48を使うようになりますし、&lt;code&gt;clisp&lt;/code&gt;コマンドのバージョンも2.48になります。この&lt;code&gt;clisp&lt;/code&gt;の部分はリンクを貼り替えてて、一つのシェルで変更すると他のシェルにも影響が及ぶ問題があるのでそのうち直します。これ結構面倒なのでそのうちです。&lt;br /&gt;
clisp = clisp-2.48な状態で&lt;code&gt;cim use sbcl&lt;/code&gt;するとclisp = clisp-2.48なまま&lt;code&gt;cl&lt;/code&gt;のバックエンドがsbclになります。上手く使って下さい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--default&lt;/code&gt;を付けると次回からのデフォルト値を指定したものにしつつ&lt;code&gt;cim use&lt;/code&gt;します。&lt;/p&gt;

&lt;h2 id=&#34;cim-resume:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cim resume&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cim help resume
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim resume [rm] &amp;lt;impl[-version]&amp;gt; | all
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Resume interrupted installation of &amp;lt;impl&amp;gt;. If &amp;lt;version&amp;gt; is not given, the latest version is used.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If &#39;rm&#39; is given, remove &amp;lt;impl&amp;gt; from &#39;resume&#39; list.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If target is &#39;all&#39;, do on all the available target.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Examples:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # resume the installation of clisp with configure flags
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; flags=&#39;--with-libsigsegv-path=/usr/local&#39; cim resume clisp
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # remove all the available target.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim resume rm all
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;cim install&lt;/code&gt;がエラー終了したり&lt;code&gt;Ctrl-C&lt;/code&gt;で中断したりしたやつを再開してくれるコマンドです。&lt;code&gt;cim install sbcl&lt;/code&gt;を中断したなら&lt;code&gt;cim resume sbcl&lt;/code&gt;で再開できます。&lt;code&gt;cim resume all&lt;/code&gt;で中断された全てのインストールを再開します。終了ステータスは再開してもまたエラーで終了したやつの数になります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cim resume rm sbcl&lt;/code&gt;だと&lt;code&gt;cim list resume&lt;/code&gt;の結果から&lt;code&gt;sbcl&lt;/code&gt;を削除できます。&lt;code&gt;resume&lt;/code&gt;はしませんよ。&lt;code&gt;cim resume rm all&lt;/code&gt;とかも可能です。&lt;/p&gt;

&lt;h2 id=&#34;cim-list:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cim list&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;19&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cim help list
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim list &amp;lt;subcommand&amp;gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;List available target for subcommand.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Examples:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # list available lisp implementation to install
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim list install
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # show available target for list
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim list list
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # targets for subsubcommands are also available
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim list resume rm
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;さっきから出てきてるので分かるかと思いますが、可能なターゲットを表示します。将来的には&lt;code&gt;zsh&lt;/code&gt;の補完候補にも使うつもりです。そのときは&lt;code&gt;-b, --batch&lt;/code&gt;オプションでhuman readableかmachine readableかを分けようかなと。&lt;/p&gt;

&lt;h2 id=&#34;cim-reinstall:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cim reinstall&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;19&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cim help reinstall
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim reinstall &amp;lt;impl[-version]&amp;gt; | all
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Force install already installed implementaion(s). Downloaded archives are resued if available
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If version is not specified, install the latest version.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If target is &#39;all&#39;, do on all the available targets.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Examples:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # reinstall sbcl-1.1.14
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim reinstall sbcl-1.1.14
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # reinstall all installed lisp impls
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim reinstall all
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;To show available lisp implementations, type &#39;cim list reinstall&#39;.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;cim install&lt;/code&gt;は既にインストールされているものはインストールできないのですが、&lt;code&gt;reinstall&lt;/code&gt;を使えば可能です。ダウンロードしたアーカイブがあればそれを使います。なければダウンロードから始めます。&lt;code&gt;all&lt;/code&gt;は察しのようにインストール済のものを全て&lt;code&gt;reinstall&lt;/code&gt;します。&lt;/p&gt;

&lt;h2 id=&#34;cim-clean:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cim clean&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;19&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cim help clean
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim clean &amp;lt;impl[-version]&amp;gt; | all
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Remove donwloaded archives and extracted sources of the given lisp implementations.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If version is not specified, install the latest version.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If target is &#39;all&#39;, do on all the available targets.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Examples:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # clean sbcl-1.1.14
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim clean sbcl-1.1.14
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # clean all installed lisp impls
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim clean all
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;To show available lisp implementations, type &#39;cim list clean&#39;.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;cim install&lt;/code&gt;は基本的に不要なものも削除しないので、それが嫌なら&lt;code&gt;clean&lt;/code&gt;を使いましょうというスタンスです。アーカイブとソースを削除します。&lt;/p&gt;

&lt;h2 id=&#34;cim-distclean:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cim distclean&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;19&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$cim help distclean
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim distclean &amp;lt;impl[-version]&amp;gt; | all
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Clean built files of the given lisp implementation. It doesn&#39;t mean uninstall.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If version is not specified, install the latest version.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If target is &#39;all&#39;, do on all the available targets.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Examples:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # distclean sbcl-1.1.14
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim distclean sbcl-1.1.14
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # distclean all installed lisp impls
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim distclean all
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;To show available lisp implementations, type &#39;cim list distclean&#39;.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;cim clean&lt;/code&gt;より控えめなコマンドです。コンパイルするときに&lt;code&gt;make&lt;/code&gt;で生成されたファイルを削除します。&lt;code&gt;make clean&lt;/code&gt;的な。&lt;/p&gt;

&lt;h2 id=&#34;cim-uninstall:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cim uninstall&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;19&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cim help uninstall
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim uninstall &amp;lt;impl[-version]&amp;gt; | all
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Uninstall the given lisp implementaion(s). It does&#39;t remove donwloaded archives and extracted sources.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If version is not specified, install the latest version.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If target is &#39;all&#39;, do on all the available targets.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Examples:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # uninstall sbcl-1.1.14
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim uninstall sbcl-1.1.14
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # uninstall all installed lisp impls
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim uninstall all
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;To show available lisp implementations, type &#39;cim list uninstall&#39;.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;アンインストールします。はい。ただしダウンロードしたアーカイブとソースは削除しません。&lt;/p&gt;

&lt;h2 id=&#34;cim-purge:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cim purge&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cim help purge
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim purge &amp;lt;impl[-version]&amp;gt; | all
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Uninstall and clean up downloaded files of the given lisp implementation.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;This command is equivalent to &#39;clean&#39; and &#39;uninstall&#39;.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Examples:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # purge the latest sbcl
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim purge sbcl
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;To show available target for &#39;purge&#39;, type &#39;cim list purge&#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;uninstall&lt;/code&gt;のアーカイブとソースを削除する版です。&lt;/p&gt;

&lt;h2 id=&#34;cim-info:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cim info&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cim help info
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim info
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Display information for current cim. It includes environment variables that cim uses, what current and default lisp implementation is, what version of each implementation is used, and where system lisp is.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Example:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # display info
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim info
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;現在の状態を表示します。こんな感じ。&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cim info
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;CIM_ID = 22176
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;CIM_HOME = /home/kim/.cim
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;current lisp = sbcl-system
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;default lisp = sbcl-system
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;abcl = abcl-1.2.1
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;alisp = alisp-9.0
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;ccl = ccl-1.9
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;clisp = clisp-2.49
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;ecl = ecl-13.5.1
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;gcl = gcl-2.6.9
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;sbcl = sbcl-system
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;sbcl-system = /usr/local/bin/sbcl
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;gcl-system = /usr/bin/gcl
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;CIM_ID&lt;/code&gt;ってのは&lt;code&gt;cim&lt;/code&gt;がそれぞれのシェルの状態を管理するためのIDです。まあ、そのシェルのプロセスIDですね。逆にプロセスIDの取得と環境変数の設定さえできれば&lt;code&gt;cim&lt;/code&gt;は動かせるのでEmacsでも簡単に動きます。&lt;/p&gt;

&lt;h2 id=&#34;cim-get:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cim get&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cim help get
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim get
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Upgrade to the latest cim.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Examples:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim get
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;cim自身のアップデートです。なんでこんな名前かというと&lt;code&gt;rvm&lt;/code&gt;がそうだからです。現状はgithubのKeenS/CIMのmasterからとってきます。stable版ができたらstableに変更しますね。実はブランチを指定してとってくる方法もあったりはします。&lt;code&gt;cim get --branch stable&lt;/code&gt;か &lt;code&gt;CIM_INSTALL_BRANCH=stable cim get&lt;/code&gt;です。まだブランチが無いので意味ないんですけどね。&lt;/p&gt;

&lt;p&gt;この辺で気付いたかもしれませんが結構環境変数で制御できるようにデザインされてます。rubyがそんな感じだからです。&lt;/p&gt;

&lt;h2 id=&#34;cim-version:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cim version&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cim help version
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim version
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Show current cim&#39;s version
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Example:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; cim version
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;めちゃくちゃバグがあるのにversionが1.0.0に見えるの気のせいです。きっと100点中の1点なんですよ。&lt;/p&gt;

&lt;h2 id=&#34;cim-help:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cim help&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cim help help
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Help for &#39;help&#39; is not prepared, sorry.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;あー。&lt;code&gt;help&lt;/code&gt;のhelp用意してなかったー。まあ、上で使ったのが全てです。&lt;/p&gt;

&lt;h1 id=&#34;cl:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cl&lt;/code&gt;&lt;/h1&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;19&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ cl -h
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage: cl [switchs] [--] [programfile] [argumensts]
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;-C DIR set *default-pathname-defaults* DIR.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;-d, --debug set debugging flags (push :debug into *features*)
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;-e, --eval SEXP one line of script. Several -e&#39;s are allowed. Omit [programfile]
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;-f, --load FILE load the FILE
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;-i EXT edit *argv* files in place and make backup with the extension .EXT
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;-l LIBRARY quickload the LIBRARY
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;-L LIBRARY quickload and use-package the LIBRARY
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;-r, --repl run repl
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;-q, --no-init do not load $CIM_HOME/init.lisp
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;--no-rl do not use rlwrap. This is effective only when --repl is specified
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;--no-right do not display right prompt. This is effective only when --repl is specified
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;--no-color do not use color. This is effective only when --repl is specified
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;-h, --help print this help
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;-v, --version print the version
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;If neither programfile, -e (--eval) nor -r (--repl) are specified, cl reads scripts from the standard input and then eval them.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;まあ、見たら分かりますね。ruby由来のオプションとShelly由来のオプションと私の好みのオプションがあります。&lt;code&gt;cl&lt;/code&gt;を起動する方法は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cl script.lisp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cl &amp;lt; script.lisp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cl -e sexp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cl -r&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;code&gt;cl script.lisp&lt;/code&gt;はシェバン(最初の行が&lt;code&gt;#!&lt;/code&gt;なもの)を無視します。&lt;/p&gt;

&lt;p&gt;また、これも環境変数&lt;code&gt;LISP_IMPL&lt;/code&gt;でバックエンドを制御できます。これはShelly由来ですね。&lt;/p&gt;

&lt;p&gt;もう一つ、デバッガは起動しません。スクリプトやワンライナーはエラーを吐いて終了して欲しいですし次に述べますがREPLも目的からしてデバッガは相応しくないと思うからです。因みにですが&lt;code&gt;-d&lt;/code&gt;オプションをつけてもデバッガは起動しません。理由はオプション解析のほとんどをLispに任せているので起動時のオブションである&lt;code&gt;--disable-debugger&lt;/code&gt;を制御できないからです。需要が高そうならシェルスクリプト内で解析して頑張ってみます。&lt;/p&gt;

&lt;p&gt;あ、&lt;code&gt;-c, --compile FILE&lt;/code&gt;オプションつけ忘れてた。いつか入れます。&lt;code&gt;(compile-file FILE)&lt;/code&gt;で可能でしょうからすぐに入るはずです。&lt;/p&gt;

&lt;h2 id=&#34;cl-r:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;cl -r&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;一応開発向けではなくて、ちょっと試したいときや初心者が本を片手に動かすときを想定して作ってます。エラーはメッセージのみ表示。ちょっと試したいときはあんまりデバッガを必要としませんしスタックトレースもどうせ深さ1~2なのであまり必要でないからです。なにより初心者にとってデバッガは何をして良いか分かりませんし覚えても処理系毎に操作が違います。その辺を分り易い統一インターフェースを作ることも考えたのですが「それって&lt;code&gt;swank&lt;/code&gt;」って結論に至ったのでこのままです。&lt;/p&gt;

&lt;h1 id=&#34;ql:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;ql&lt;/code&gt;&lt;/h1&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;ql -- Command line interface for quicklisp
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Commands currently available
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;deps &amp;lt;system&amp;gt; ;; Install dependencies of &amp;lt;system&amp;gt;.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;help [command] ;; Show help.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;install[quickload] &amp;lt;system&amp;gt;... ;; Install given system.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;list {remote | local} ;; List available/installed systems.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;search[system-propos] &amp;lt;keyword&amp;gt; ;; Search quicklisp.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;uninstall &amp;lt;system&amp;gt; ;; Uninstall system.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;update [system] ;; Update dist info and installed systems.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;一番未完成なコマンドです。主な理由は私が&lt;code&gt;quicklisp&lt;/code&gt;の使い方を分かってないからです。&lt;/p&gt;

&lt;h2 id=&#34;ql-deps:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;ql deps&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ ql help deps
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ql deps [--path &amp;lt;path&amp;gt;] &amp;lt;system&amp;gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Install dependencies of given system. If path is specified, install dependencies there.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Once you run &#39;ql --path &amp;lt;path&amp;gt; deps&#39;, you don&#39;t need to specify &#39;--path&#39; because the path is written out to &#39;.quicklisp-path&#39; in current directory.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;You can run &#39;ql deps&#39; for a local system if &#39;.asd&#39; file is in current directory.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;This command is useful when you want to separate quicklisps for local project.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Example:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ql deps --path ./quicklisp my-project
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;rubyの&lt;code&gt;bundler&lt;/code&gt;を参考に作りました。&lt;code&gt;Gemfile&lt;/code&gt;に対応する&lt;code&gt;QLfile&lt;/code&gt;でも読もうかと思いましたが良く考えたら&lt;code&gt;.asd&lt;/code&gt;で十分じゃんとの思いに至ったのでカレントパスの&lt;code&gt;asd&lt;/code&gt;ファイルを読みます。&lt;br /&gt;
が、奴は依存システムのバージョンまでは指定できなかった気がするのでやっぱり必要な気がします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ql deps --path ./ql myapp&lt;/code&gt;とすると依存システム(+新たな&lt;code&gt;quicklisp&lt;/code&gt;本体)を&lt;code&gt;./ql&lt;/code&gt;にインストールしてくれます。&lt;code&gt;quicklisp&lt;/code&gt;本体のインストールは不要ですがどうやったら回避できるかは今模索中です。&lt;br /&gt;
&lt;code&gt;--path&lt;/code&gt;の位置が&lt;code&gt;cim use --default&lt;/code&gt;と違うのでご注意下さい。これは主に内部で使ってる&lt;code&gt;parse-option&lt;/code&gt;の欠陥に由来します。&lt;br /&gt;
一度指定すると&lt;code&gt;.quicklisp-path&lt;/code&gt;にパスを書き出してくれるので次回からは必要なくなります。カレントディレクトリに複数の&lt;code&gt;asd&lt;/code&gt;ファイルがあってそれぞれでパスを使い分けたいとかはできません。&lt;br /&gt;
あと、最大の欠陥として&lt;code&gt;./ql&lt;/code&gt;にシステムをインストールしてもそれを読み込みにいくコマンドがないので実用性ゼロです← まあ、&lt;code&gt;cl&lt;/code&gt;あたりを弄ってカレントパスに&lt;code&gt;.quicklisp-path&lt;/code&gt;があったら読みにいくようにします。その辺は&lt;code&gt;.lisp-impl&lt;/code&gt;とかも含めて考えます。&lt;/p&gt;

&lt;h2 id=&#34;ql-help:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;ql help&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ ql help help
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Help for &#39;help&#39; is not prepared, sorry.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;こいつもhelp用意してなかった。まあ、良いや。&lt;/p&gt;

&lt;h2 id=&#34;ql-install:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;ql install&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ ql help install
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ql install &amp;lt;system&amp;gt;...
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Install given system(s) to $CIM_HOME/quicklisp.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Example:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; # install clack
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ql install clack
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;なんでこいつがhelpの先頭に居ないんでしょうね。&lt;code&gt;cim&lt;/code&gt;に比べて適当ですね。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ql quickload&lt;/code&gt;っていう別名も持ってます。&lt;code&gt;ql help&lt;/code&gt;には&lt;code&gt;quickload&lt;/code&gt;が本名で&lt;code&gt;install&lt;/code&gt;がエイリアスって書いてありましたが実装ミスりました。&lt;/p&gt;

&lt;p&gt;名前の通り&lt;code&gt;ql:quickload&lt;/code&gt;します。&lt;code&gt;system&lt;/code&gt;は複数指定できます。&lt;/p&gt;

&lt;h2 id=&#34;ql-list:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;ql list&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ ql list
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ql list {remote | [local]}
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;List installed systems. if &#39;remote&#39; is given, list all the available systems. &#39;ql list local&#39; is equivalent to &#39;ql list&#39;.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Example:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ql list remote
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;cim list&lt;/code&gt;と使い方が違ってアレですね。現状&lt;code&gt;quicklisp&lt;/code&gt;に登録されているもの全てを表示する&lt;code&gt;ql list remote&lt;/code&gt;とインストールしたものだけを表示する&lt;code&gt;ql list [local]&lt;/code&gt;があります。&lt;code&gt;ql deps&lt;/code&gt;でパスを指定したやつらにも使いたかったのですが方法が分かんないのでとりあえず先送りです。&lt;/p&gt;

&lt;h2 id=&#34;ql-search:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;ql search&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ ql help search
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ql search &amp;lt;keyword&amp;gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Search quicklisp for &amp;lt;keyword&amp;gt;.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Example:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ql search http
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;別名&lt;code&gt;system-apropos&lt;/code&gt;。別名と本名が&lt;code&gt;ql help&lt;/code&gt;と違うのも単に&lt;code&gt;ql:system-apropos&lt;/code&gt;を呼ぶのも&lt;code&gt;ql install&lt;/code&gt;と同じです。出力結果をもうちょっと制御したいなと思ってます。&lt;/p&gt;

&lt;h2 id=&#34;ql-uninstall:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;ql uninstall&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ ql help uninstall
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ql uninstall &amp;lt;system&amp;gt;...
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Uninstall given system(s).
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Example:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ql uninstall caveman clack
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;ql:uninstall&lt;/code&gt;に同じ。以上。&lt;/p&gt;

&lt;h2 id=&#34;ql-update:9fa821018233c79deba43b4db5dc1ada&#34;&gt;&lt;code&gt;ql update&lt;/code&gt;&lt;/h2&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;$ ql help update
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Usage:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ql update [client]
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Description:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Update installed systems. If target &#39;client&#39; is given, update quicklisp itself.
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;Example:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ql update client
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;ql:update-all-dists&lt;/code&gt;か&lt;code&gt;ql:update-client&lt;/code&gt;かを選べます。最初はsystem毎にアップデートしたかったのですが無理っぽいので止めました。&lt;/p&gt;

&lt;h1 id=&#34;おわりに:9fa821018233c79deba43b4db5dc1ada&#34;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;とりあえずCIMの機能はこれで全部です。あ、開発用に&lt;code&gt;cim reset&lt;/code&gt;とかありますけど使わないで下さい。とういうか使うなよ。絶対使うなよ。&lt;/p&gt;

&lt;p&gt;これら使ってみてバグがあったらgithubのissueに投げるなりtwitterで報告するなりして下さい。&lt;/p&gt;

&lt;p&gt;ところでCIMは私はちむと読んでます。しー・あい・えむと読む人も居るようです。何でも良いです。プロジェクトとしてのちむとコマンドとしてのちむを区別するためにコマンドは小文字で&lt;code&gt;cim&lt;/code&gt;、そして&lt;code&gt;cim&lt;/code&gt;、&lt;code&gt;cl&lt;/code&gt;、&lt;code&gt;ql&lt;/code&gt;を含んだプロジェクトは大文字でCIMと書くことにします。今考えました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mpd 小ネタ</title>
      <link>/blog/2014/01/21/mpd-something</link>
      <pubDate>Tue, 21 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/01/21/mpd-something</guid>
      <description>&lt;p&gt;mpdのちょっとした便利な使い方。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;at&lt;/code&gt;がRSPiにインストールされてる前提で、RSPi上で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ at 7:00
at&amp;gt; mpc toggle
^D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすればRSPiを目覚ましや時報として使えます。停止にはsshログインして&lt;code&gt;mpc toggle&lt;/code&gt;する必要があるのでそこまでする頃には起きてる筈。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rsync小ネタ</title>
      <link>/blog/2013/11/30/something-about-rsync</link>
      <pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/11/30/something-about-rsync</guid>
      <description>&lt;p&gt;&lt;a href=&#34;/blog/2013/11/13/what-recent/&#34;&gt;mpdを導入したとき&lt;/a&gt;にrsyncでパーミッションの問題が発生したと言ってましたが解決策がありました。&lt;/p&gt;

&lt;p&gt;まず基本。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rsync&lt;/code&gt;でバックアップをとるときは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rsync -avz dir/ me@remote:backup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;code&gt;dir&lt;/code&gt;のあとの&lt;code&gt;/&lt;/code&gt;は重要です。&lt;code&gt;dir&lt;/code&gt;自体か&lt;code&gt;dir&lt;/code&gt;の中身かを左右します。&lt;code&gt;zsh&lt;/code&gt;はそこんとこイマイチ理解してないようで悲しいです。因みに&lt;code&gt;-a&lt;/code&gt;は&lt;code&gt;-rltogpD&lt;/code&gt;の略です。でも今回みたいにパーミッションを含めたくないときは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rsync -rltogD -vz dir/ me@remote:backup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;code&gt;-p&lt;/code&gt;を抜くかと思いきや、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rsync -avz --no-p dir/ me@remote:backup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なる記法があるそうです。便利ですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ここ１ヶ月くらいの近況</title>
      <link>/blog/2013/11/13/what-recent</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/11/13/what-recent</guid>
      <description>

&lt;p&gt;#isucon 参戦記がフォロワーの多い@tagomorisさんとか@nitro_idiotさんとかにツイートされて普段の数十倍のアクセスが来てテンション上がったので近況書きますね。&lt;/p&gt;

&lt;h2 id=&#34;isuconの勉強:dbb86b19d55f9a0a2bd4a47585bd22d2&#34;&gt;isuconの勉強&lt;/h2&gt;

&lt;p&gt;件の記事でも書いてますけどMySQLとNginXとCapistranoの勉強しました。SQLって書けると案外楽しいですね。あとN+1問題を学んだり、&lt;code&gt;IF EXISTS TRRIGER&lt;/code&gt;的な文がなくて殺そうかと思ったり。&lt;/p&gt;

&lt;p&gt;NginXはキャッシュとかですね。キャッシュキーに&lt;code&gt;$cookie_isucon_session&lt;/code&gt;とか入れてログインしてるユーザーが来ても対応できたので良かったです（小並感&lt;/p&gt;

&lt;p&gt;Capistranoはどうせだからと3.0を使ったのですが調べても2.x時代の情報ばっかり引っ掛かって苦労しました。その代わり、isucon本戦では複数サーバーへのデプロイ機能を存分に使わせて頂きました。ほぼログインしなくても問題ないですね。&lt;/p&gt;

&lt;p&gt;例えば&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;19&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;21&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;22&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;23&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;24&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;25&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;26&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;my app&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:repo_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;git@bitbucket.org:me/myrepo.git&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:deploy_to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;/home/me/app&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:git&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:deploy_via&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:remote_cache&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:nginx&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:reload&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:web&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:sudo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;service nginx reload&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:restart&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:web&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:sudo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;service nginx restart&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:start&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:web&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:sudo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;service nginx start&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;こんな感じです。で、もう一つ&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:production&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;123.4.5.67&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;me&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;web&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;123.4.5.68&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;me&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;web&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;123.4.5.69&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;me&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;web&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:ssh_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;ss&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sx&#34;&gt;%w(~/.ssh/id_rsa)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;forward_agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;auth_methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sx&#34;&gt;%w(publickey)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;を書いておけばこの3台のサーバーに一斉にデプロイしてくれます。(上の例だとnginxですが、まあいいでしょう。)&lt;/p&gt;

&lt;h2 id=&#34;shibuya-lisp:dbb86b19d55f9a0a2bd4a47585bd22d2&#34;&gt;Shibuya.lisp&lt;/h2&gt;

&lt;p&gt;Lisp Meet Up #10で発表してきました。内容は&lt;code&gt;fluentd&lt;/code&gt;をCommon Lispから使う話。&lt;br /&gt;
スライド&lt;/p&gt;

&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/27444839&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/blackenedgold/common-lisp-27444839&#34; title=&#34;Common Lisp でビッグデータを作ろう&#34;&gt;Common Lisp でビッグデータを作ろう&lt;/a&gt;&lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/blackenedgold&#34;&gt;blackenedgold&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ustreamは見つかりませんでした。てへペロ&lt;/p&gt;

&lt;p&gt;恐らく、&lt;code&gt;Log4CL&lt;/code&gt;はやりたいことと目的が違いますね。全く別のロギングフレームワークを作るのが良さげな気がします。isuconの懇親会で開発者の@tagomorisさんにアドバイスも頂きましたし作るかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;mpd:dbb86b19d55f9a0a2bd4a47585bd22d2&#34;&gt;mpd&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/blog/2013/09/29/mplayer/&#34;&gt;以前、mplayer2が正常に動作しないとかぼやいて&lt;/a&gt;ましたが、結局あきらめました。で、代わりに &lt;a href=&#34;http://www.musicpd.org/&#34;&gt;Music Player Daemon(MPD)&lt;/a&gt;なるものを見付けて、しかもRaspberry Piで動き、iPod/Androidから操作できるとのことで、導入しました。&lt;/p&gt;

&lt;p&gt;MPDはまさしくRaspberry Piのような機器向で、音楽を鳴らすサーバーと操作するクライアントが完全に分かれてます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apg-get install mpd mpc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかでRSPiに入れた気がします。クライアントはAndroidは&lt;code&gt;MPDroid&lt;/code&gt;、iPodは&lt;code&gt;MPoD&lt;/code&gt;っていうアプリです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scp&lt;/code&gt;で手元の曲をRSPiコピーし、iPodから繋ぐも曲が見えない。色々試した結果、&lt;code&gt;scp&lt;/code&gt;でコピーしたときにパーミッションの問題が出てたようなのでそこを解決したらちゃんと動きました。&lt;/p&gt;

&lt;p&gt;動画(iPod)&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/x5CWtXbCkqo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;黒ばっかで見づらくて申し訳ありません。iPodからではなくスピーカから音が出てるのが分かりますかね？思ったより音が入ってないので分りづらいですね（汗&lt;/p&gt;

&lt;h2 id=&#34;cim:dbb86b19d55f9a0a2bd4a47585bd22d2&#34;&gt;CIM&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/fukamachi/shelly/&#34;&gt;Shelly&lt;/a&gt;を使って &lt;a href=&#34;https://gist.github.com/KeenS/7059301&#34;&gt;Common Lispスクリプトをexecutableにしよう&lt;/a&gt;ってのをやってましたが少しshellyが求めているのと違うようだったので「シェルスクリプトでshelly的な物を実装しよう！ついでにrvmみたいにバージョン管理できたら嬉しいな！！」って思い付きで &lt;a href=&#34;https://github.com/KeenS/CIM&#34;&gt;Common Lisp Implementation Manager(CIM)&lt;/a&gt;を作り始めました。まだCLISP, ECL, GCLのインストールぐらいしかできてません。&lt;/p&gt;

&lt;p&gt;初めてシェルスクリプトを書き、初めてBourne Shellを触り(普段はzsh)、早くも挫折しそうです。今めっちゃシェルスクリプトの勉強してます。目的はImplementationの管理じゃなくて統一インターフェースの&lt;code&gt;cl&lt;/code&gt;コマンドなのにそこが全然進んでないですね。&lt;code&gt;ql&lt;/code&gt;に至っては1行も書いてない。まあ、&lt;code&gt;cl&lt;/code&gt;を使って書くつもりなので&lt;code&gt;cl&lt;/code&gt;が出来ないことにはどうしようもないんですが。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;syset&lt;/code&gt;とかネーミングセンスが無かったり(発音しずらい。シセット…サイセットって読もうかな)ダウンロードしたアーカイブのチェックサムとか全く見てなかったり色々ツッコみたくなりますが温かい目で見て下さい。気に入ったらpull-reqとかして下さい。&lt;/p&gt;

&lt;h2 id=&#34;octomacs:dbb86b19d55f9a0a2bd4a47585bd22d2&#34;&gt;Octomacs&lt;/h2&gt;

&lt;p&gt;Octomacsに一回pull-req送ってからコミッタ気取りのκeenですが、&lt;code&gt;octomacs-preview&lt;/code&gt;と&lt;code&gt;octomacs-deploy&lt;/code&gt;を実装しました。&lt;code&gt;C-u&lt;/code&gt;をつけると&lt;code&gt;generate&lt;/code&gt;が付いてきます。テストをしてない（できない？）+サーバーを殺す(&lt;code&gt;octomacs-preview-quit&lt;/code&gt;とかの名前かなあ。現状は&lt;code&gt;*octomacs preview*&lt;/code&gt;バッファを&lt;code&gt;kill-buffer&lt;/code&gt;すればいい)コマンドを実装してないのでpull-reqは投げてませんが使ってみたい方は &lt;a href=&#34;https://github.com/KeenS/octomacs&#34;&gt;こちら&lt;/a&gt;をどうぞ。まあ、今からpushするんですがね。ちゃんとこの記事も&lt;code&gt;octomacs-new-post&lt;/code&gt;から始まり、&lt;code&gt;octomacs-preview&lt;/code&gt;で確認しつつ&lt;code&gt;octomacs-deploy&lt;/code&gt;でデプロイしました。あとは過去の記事を編集する&lt;code&gt;octomacs-edit&lt;/code&gt;を実装すれば完璧ですね。&lt;/p&gt;

&lt;p&gt;こんなかんじです。&lt;code&gt;CIM&lt;/code&gt;がんばります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shellyを使ってCommon LispファイルをExecutableにする</title>
      <link>/blog/2013/09/26/shelly-script</link>
      <pubDate>Thu, 26 Sep 2013 21:25:00 +0000</pubDate>
      
      <guid>/blog/2013/09/26/shelly-script</guid>
      <description>&lt;p&gt;コマンドラインからCommon Lispの関数を実行できる &lt;a href=&#34;https://github.com/fukamachi/shelly&#34;&gt;Shelly&lt;/a&gt;を使ってCommon Lispファイルを実行形式にしてみました。Shellyは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ shly + 1 2
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいに関数を実行できます。&lt;/p&gt;

&lt;p&gt;モチベーションとしては、 &lt;a href=&#34;http://blog.8arrow.org/entry/20120521/1337596483&#34;&gt;Shellyの作者深町さん&lt;/a&gt;がTwitterで「Shellyでloadを使うとスクリプトみたいに実行できる」と発言していたのがきっかけで、Shebangを無視できればUNIX系ではExecutableにできるのでは？と思いついてやってみました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;read&lt;/code&gt;して&lt;code&gt;eval&lt;/code&gt;して…とか考えてましたが、&lt;code&gt;load&lt;/code&gt;に&lt;code&gt;stream&lt;/code&gt;を渡せるようなので案外簡単にできました。&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/KeenS/6688683.js?file=script.lisp&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;(in-package :shelly)
(export (defvar &lt;em&gt;argv&lt;/em&gt; nil))
(in-package :cl-user)&lt;/p&gt;

&lt;p&gt;(defun script (file argv)
  &amp;ldquo;Execute a file as script ignoring shebang&amp;rdquo;
  (setf shelly:&lt;em&gt;argv&lt;/em&gt; argv)
  (let* ((in (open file :if-does-not-exist :error))
     (first-char (read-char in))
     (second-char (read-char in)))
    (cond
      ((and (char= first-char ##) (char= second-char #!))
       (read-line in))
      (t (unread-char second-char in)
     (unread-char first-char in)))
    (load in)
    (values)))
&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/p&gt;

&lt;p&gt;コマンドライン引数を受け取るために&lt;code&gt;*argv*&lt;/code&gt;という変数を用意してます。&lt;/p&gt;

&lt;p&gt;こんなことを&lt;code&gt;~/.shelly/Shellyfile&lt;/code&gt;に書いておき、Lispの初期化ファイルに&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#+shelly
(load &amp;quot;~/.shelly/Shellyfile&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書いてます。この&lt;code&gt;~/.shelly/Shellyfile&lt;/code&gt;にはShelly向けの関数を溜め込んでいく予定です。&lt;/p&gt;

&lt;p&gt;あとは&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;common-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;!shly&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;script&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;Hello ~a~%&#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;shelly:*argv*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;を&lt;code&gt;foo.lisp&lt;/code&gt;に書き込めば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod u+x foo.lisp
$./foo.lisp κeen
Hello κeen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と実行できます。勿論、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$shly script foo.lisp κeen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としても同じです。一部の処理系ではこのようなことが出来ますが、コマンドライン引数の渡し方とかも処理系依存なのでポータブルに書くなら一つ試してみてはいかがでしょうか。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>