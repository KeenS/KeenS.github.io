<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>正規表現 on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE/</link>
    <description>Recent content in 正規表現 on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 18 Oct 2019 02:47:52 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>その正規表現エンジン、インタプリタで満足してる？！</title>
      <link>//KeenS.github.io/slide/sonoseikihyougenenjin_intapuritademanzokushiteru__/</link>
      <pubDate>Fri, 18 Oct 2019 02:47:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/sonoseikihyougenenjin_intapuritademanzokushiteru__/</guid>
      <description>κeen @blackenedgold Github: KeenS GitLab: blackenedgold Idein Inc.のエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
今日話すこと   SATySFi 部分評価と二村射影 多段階計算 (正規表現のコンパイル)  ===
SATySFi   政府の支援によりTeXを倒すために作られた組版処理系  ※多少の誇張を含みます   日本語が扱えて、PDFを直接吐ける ML系の言語で拡張ができる  静的に型が付く   ↓ 作者  ===
Hello SATySFi  @require: stdjareport let-inline \show-int n = embed-string (arabic n) in document (| title = {サンプル文書}; author = {組 版太郎}; |) &amp;#39;&amp;lt; +p { 答え: \show-int(42); } &amp;gt; ===</description>
    </item>
    
    <item>
      <title>SMLで函数型的正規表現マッチ</title>
      <link>//KeenS.github.io/slide/smldekansuukatatekiseikihyougenmatchi/</link>
      <pubDate>Tue, 29 Mar 2016 01:44:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/smldekansuukatatekiseikihyougenmatchi/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS サイバーエージェントのエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
元ネタ  関数型的正規表現マッチ | Preferred Research
===
正規表現  必要最小限の要素は5つだけ
 空文字 アルファベット1つ 正規表現のOR結合 正規表現のAND結合 正規表現の繰り返し  ===
SMLで表してみる  datatype reg = Empty | Sym of t | Or of reg * reg | And of reg * reg | Rep of reg ===
本当に大丈夫？ ===
/(a|b)*c/  And(Rep(Or(Sym &amp;quot;a&amp;quot;, Sym &amp;quot;b&amp;quot;)), Sym &amp;quot;c&amp;quot;) ===</description>
    </item>
    
    <item>
      <title>Onigmoを最大49%高速化した話</title>
      <link>//KeenS.github.io/blog/2015/05/26/onigmowosaidai49_kousokukashitahanashi/</link>
      <pubDate>Tue, 26 May 2015 01:14:54 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/26/onigmowosaidai49_kousokukashitahanashi/</guid>
      <description>&lt;p&gt;κeenです。Rubyでも使われてる高速な正規表現エンジン、Onigmo(鬼雲)を高速化したのでその話を。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>