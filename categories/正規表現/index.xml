<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>正規表現 on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE/</link>
    <description>Recent content in 正規表現 on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 29 Mar 2016 01:44:39 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%8F%BE/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SMLで函数型的正規表現マッチ</title>
      <link>//KeenS.github.io/slide/smldekansuukatatekiseikihyougenmatchi/</link>
      <pubDate>Tue, 29 Mar 2016 01:44:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/smldekansuukatatekiseikihyougenmatchi/</guid>
      <description># SMLで函数型的正規表現マッチ ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # 元ネタ -------- [関数型的正規表現マッチ | Preferred Research](https://research.preferred.jp/2010/11/regexp-play/) === # 正規表現 ---------- 必要最小限の要素は5つだけ 1. 空文字 2. アルファベット1つ 3. 正規表現のOR結合 4. 正規表現のAND結合 5. 正規表現の繰り返し === # SMLで表してみる ----------------- ``` sml datatype reg = Empty | Sym of t | Or of reg * reg | And of reg * reg | Rep of reg ``` === # 本当に大丈夫？ === # `/(a|b)*c/` ----------- ``` sml And(Rep(Or(Sym &#34;</description>
    </item>
    
    <item>
      <title>Onigmoを最大49%高速化した話</title>
      <link>//KeenS.github.io/blog/2015/05/26/onigmowosaidai49_kousokukashitahanashi/</link>
      <pubDate>Tue, 26 May 2015 01:14:54 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/26/onigmowosaidai49_kousokukashitahanashi/</guid>
      <description>κeenです。Rubyでも使われてる高速な正規表現エンジン、Onigmo(鬼雲)を高速化したのでその話を。 先日、正規表現技術入門を読んだというエントリの中で
 ところで本に載ってた鬼雲のコードはDT(編注: Direct Threaded)にしてなかったけど簡単のためなのかな？あるいは厳格にC89に準拠するため？picrinみたくプリプロセッサで分岐すれば使えるのに。
 と書いたところ、鬼雲の作者、K.Takataさんから
@k_takata 「picrinみたくプリプロセッサで分岐すれば使えるのに。」これも知らなかった。
&amp;mdash; K.Takata (@k_takata) 2015, 5月 11 
という反応を頂きました。そしてイシューにも乗ったので言い出しっぺとして実装してみました。こちらのプルリクです。
Direct Threaded VM自体の解説はRubyist Magazineに載っている笹田さんのものが詳しいようです Rubyist Magazine - YARV Maniacs 【第 3 回】 命令ディスパッチの高速化
実装は少し技巧的ですがwhile, switch, case, break, continueなどをマクロでラップしつつDT VMが有効ならそれらと互換性のあるDT用のコード（gotoやラベル）に展開します。元はpicrinで使われていたテクニックです。 このコードは @wasabizが書いたものなのでpicrinがどこを参考にして書かれたかは@wasabizに聞いて下さい。もしかしたらわさびずの発明かもしれませんね。
で、パフォーマンスの方ですが、最初、素直に制御命令を1つづつマクロで書き換えたのですが、こうなりました。
master
 パターン時間 Twain47 ms ^Twain47 ms Twain$47 ms Huck[a-zA-Z]+|Finn[a-zA-Z]+127 ms a[^x]{20}b1172 ms Tom|Sawyer|Huckleberry|Finn151 ms .{0,3}(Tom|Sawyer|Huckleberry|Finn)497 ms [a-zA-Z]+ing4032 ms ^[a-zA-Z]{0,4}ing[^a-zA-Z]96 ms [a-zA-Z]+ing$4175 ms ^[a-zA-Z ]{5,}$1770 ms ^.{16,20}$1757 ms ([a-f](.[d-m].){0,2}[h-n]){2}1849 ms ([A-Za-z]awyer|[A-Za-z]inn)[^a-zA-Z]656 ms &#34;</description>
    </item>
    
  </channel>
</rss>