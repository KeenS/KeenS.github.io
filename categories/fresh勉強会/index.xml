<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fresh勉強会 on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/fresh%E5%8B%89%E5%BC%B7%E4%BC%9A/</link>
    <description>Recent content in Fresh勉強会 on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 22 Jun 2015 22:53:39 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/fresh%E5%8B%89%E5%BC%B7%E4%BC%9A/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Clojureおじさん</title>
      <link>//KeenS.github.io/slide/clojureojisan/</link>
      <pubDate>Mon, 22 Jun 2015 22:53:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/clojureojisan/</guid>
      <description># Clojureおじさん ---------------------- サイバーエージント新卒 第5回 Fresh勉強会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Clojure --------- * 2007年から * JVMで動くLisp系言語 * 函数型 * 動的型付き * 値は基本immutable * 遅延シーケンス * STMがあり、並列処理に強い === # Hello World ------------- ```clojure (println &#34;Hello, World&#34;) ``` === # JVM ------ ## Javaのコードをシームレスに呼べる * `obj.method()` ではなく `(.method obj)` * `Class.staticField` ではなく `Class/staticField` * `obj.</description>
    </item>
    
    <item>
      <title>ボトルネックのイイ話</title>
      <link>//KeenS.github.io/slide/botorunekkunoiihanashi/</link>
      <pubDate>Thu, 04 Jun 2015 00:03:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/botorunekkunoiihanashi/</guid>
      <description># ボトルネックのイイ話 ---------------------- サイバーエージェント15新卒 FRESH勉強会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # ボトルネック -------------  ボトルネック (bottleneck) とは、システム設計上の制約の概念。英語の「瓶の首」の意。一部（主に化学分野）においては律速（りっそく、「速さ」を「律する（制御する）」要素を示すために使われる）、また『隘路（あいろ）』と言う同意語も存在する。 === # Webアプリの主な登場人物 ------------------------ * リバースプロキシ * アプリケーションサーバ * データベース === ![relation of reverse proxy, app and DB](/images/webapp.png) === # レスポンスタイムとスループット ------------------------------ * レスポンスタイム + リクエストを投げてレスポンスが返ってくるまでの時間 + ユーザから見たメトリクス * スループット+ 一定時間内にシステムがどれだけのリクエストを捌けるか + 中の人から見たメトリクス === # スループット ------------- * スループットの最大 ≒ リソースの限界 + ネットワーク帯域 + ディスクIO + メモリ使用量 + CPU負荷 * リソースのどれか1つでも限界になったらそれ以上パフォーマンスは上がらない === # パフォマンスの目安 ------------------- * ネットワーク帯域: bpsで表わす。NICによるが 1Gbpsとか * CPU: パーセンテージで表わす。100xコア数が最大マシンに依る。 * メモリ: Bで表わす。ピンキリだが1GB ~ 128GBくらい？ * ディスクIO: Bpsで表わす。HDDなら 100Bpsとか。SSDなら10倍くらい。 テキトーに調べたので間違ってるかも === # 誰が何を --------- * リバースプロキシ: ネットワーク、メモリ、CPUなど * アプリケーションサーバl: CPU、メモリなど * データベース: CPU、ディスクIOなど === 「CPUは100%に行ってないのにアプリケーションが遅いんだよ」 === # 誤り ------ * ボトルネックはCPUとは限らない * 他のメトリクスも一緒に見るべき === # 推測するな。計測せよ --------------------- * 実際に測ってみないとどこがボトルネックか分からない * 何をしてどれくらいパフォーマンスが上がったのかも分からない + コストパフォーマンスも重要 === 「パフォーマンスが悪いからCPUをグレードアップしよう」 === # 誤り ------ * ボトルネックはCPUとは限らない * 例えばネットワーク帯域が詰まっているのにCPUを改善しても意味がない * 帯域が詰まってるならデータを減らす、NIC（マシン）を増やすなどをする === 「多分アプリケーションを高速化したよ」 === # 誤り ------ * 計測せずに高速化しても意味がない + テストの無いリファクタリングがただの破壊なのと同じ * 高速化した気になって実際はコードが汚なくなっただけの可能性もある === # ボトルネックは変わりうる ------------------------ * 一箇所をずっと改善してても意味がない * ある程度改善したら次のリソースの限界がきてるかもしれない === 「アプリケーションを10倍高速化したのにあんまり速くなってない」 === # 誤り ------ * 10倍くらい極端に高速化すると次のリソースがボトルネックになる * ディスクやネットワークの改善を考えるべき === # リソースの食い合い ------------------- * 1マシンで完結している場合、リソースの食い合いが発生しうる + リバースプロキシとアプリケーションがCPUを食い合うとか * この時、どのようにして解決するのが適切か？ === # 例題 ------ * アプリが80%くらいの負荷 * Rプロキシが20%くらいの負荷 === # 例題 ------ 1.</description>
    </item>
    
  </channel>
</rss>