<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>言語処理系 on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86%E7%B3%BB/</link>
    <description>Recent content in 言語処理系 on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 02 Nov 2019 16:10:02 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86%E7%B3%BB/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>n月刊ラムダノートにパターンマッチについて寄稿しました</title>
      <link>//KeenS.github.io/blog/2019/11/02/ngekkanramudano_tonipata_nmatchinitsuitekikoushimashita/</link>
      <pubDate>Sat, 02 Nov 2019 16:10:02 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2019/11/02/ngekkanramudano_tonipata_nmatchinitsuitekikoushimashita/</guid>
      <description>&lt;p&gt;κeenです。
&lt;a href=&#34;https://www.lambdanote.com/collections/n/products/nmonthly-vol-1-no-3-2019&#34;&gt;n月刊ラムダノート Vol.1, No.3(2019)&lt;/a&gt;に代数的データ型とパターンマッチの基礎の章を寄稿しました。
どんな内容か、どうやって執筆までに至ったのかを話そうと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JITあれこれ</title>
      <link>//KeenS.github.io/blog/2018/12/01/jitarekore/</link>
      <pubDate>Sat, 01 Dec 2018 19:20:40 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/12/01/jitarekore/</guid>
      <description>&lt;p&gt;κeenです。遅刻してしまいましたがこのエントリーは &lt;a href=&#34;https://qiita.com/advent-calendar/2018/lang_dev&#34;&gt;言語実装 Advent Calendar 2018&lt;/a&gt; 1日目の記事です。
最近私の観測範囲内でJITが流行っているのですが一口にJITと言っても色々あるよなーと思ったので私がJITについて知っていることをグダクダ話します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>言語処理系勉強会に参加してきた</title>
      <link>//KeenS.github.io/blog/2018/11/17/gengoshorikeibenkyoukainisankashitekita/</link>
      <pubDate>Sat, 17 Nov 2018 22:59:16 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2018/11/17/gengoshorikeibenkyoukainisankashitekita/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://connpass.com/event/104863/&#34;&gt;言語処理系勉強会 Vol.1 &lt;/a&gt;に参加してきました。そこでの@omochimetaruさんの&lt;a href=&#34;https://gist.github.com/omochi/58f374f2809fb1c9122d2b0b69948256&#34;&gt;SwiftのGenericsとProtocolの実装&lt;/a&gt;の話が面白かったので少し感想を。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lispの多値とその実装達</title>
      <link>//KeenS.github.io/slide/common_lispnotachitosonojissoutachi/</link>
      <pubDate>Thu, 15 Nov 2018 22:55:10 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/common_lispnotachitosonojissoutachi/</guid>
      <description>κeen @blackenedgold Github: KeenS Idein Inc.のエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
今日話すこと   多値のこと Common Lispの多値のこと Common Lispの多値の実装のこと  ===
引数と返り値の数  ===
MLの引数   複数引数に見えるがタプルを1つ取っている  fun foo(v1, v2) = v1 + v2  複数引数と違うの？  違う いい悪いではなく違う。    val tuple = (1, 2) foo tuple (* -&amp;gt; 3 *) ===
Lispの多値   複数の値を返せる  CL-USER&amp;gt; (values 1 2) 1 2  タプルと違うの？  違う いい悪いではなく違う。    CL-USER&amp;gt; (identity (values 1 2)) 1 ===</description>
    </item>
    
    <item>
      <title>Inside Pattern Matchings</title>
      <link>//KeenS.github.io/slide/inside_pattern_machings/</link>
      <pubDate>Sun, 16 Sep 2018 01:26:15 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/inside_pattern_machings/</guid>
      <description>===
About Me   κeen ちゅーんさんだよー @blackenedgold Github: KeenS Idein Inc.のエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
===
発表について   元ネタ Optimizing Pattern Matching (Fabrice Le Fessant, Luc Maranget) 自作SMLコンパイラにパターンマッチを入れようとしたら難しかった  「コードを生成」が割と厄介 次の中間言語の設計に影響を与える  というか専用の中間言語作るくらいの心意気が必要      ===
発表について   既存手法を調べたら非自明だった  → 既存手法の紹介だけでも価値がありそう → 発表するか (本当は実装までしたかったけど進捗だめです)   変数束縛の話はしない  ワイルドカードで我慢して    ===
パターンについて   パターンは値の集合にマッチする ワイルドカードパターンがある 直積にマッチするときは 横 に伸びる 直和にマッチするときは 縦 に伸びる パターンをネストするときは 奥 に伸びる パターンが 網羅的 であるかに関心がある 複数マッチする場合は最初のものにマッチする  ===</description>
    </item>
    
    <item>
      <title>DOT/dottyについて調べてみた</title>
      <link>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</link>
      <pubDate>Tue, 24 May 2016 23:40:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</guid>
      <description>DOT/dottyについて調べてみた  サイバーエージェント Scala Meet Up
2016-05-27
===
About Me   κeen @blackenedgold Github: KeenS 基盤開発グループ Lisp, ML, Rust, Shell Scriptあたりを書きます Scala初心者  Scala歴1年未満&amp;gt;&amp;lt;    ===
Scalaコンパイラ   型推論（特にimplicit）が遅い コンパイルフェーズが多い  中間オブジェクトが多くて遅くなる   多くのクラスファイルを生成する  コンパイラのくせにディスクIOが多い   気を抜いてると Any に推論される
e.g.) if(x) 1 else &amp;quot;a&amp;quot; そもそものScalaの設計に起因する点が多い  抜本的変更が必要    ===
Scala基礎   Scalaが成立するのに最低限必要な機能って？  e.g.) case class はなくても class だけでどうにかなる   「最低限の機能」を減らせばコンパイラがシンプルになる  他の機能はただのシンタックスシュガーになる コンパイラのバグを減らせる 機能追加時の矛盾確認が楽   コア言語  ===</description>
    </item>
    
    <item>
      <title>SML#に学ぶコンパイラ言語におけるREPLの実装方法</title>
      <link>//KeenS.github.io/blog/2015/12/12/sml_nimanabukonpairagengoniokerureplnojissouhouhou/</link>
      <pubDate>Sat, 12 Dec 2015 19:42:52 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/12/sml_nimanabukonpairagengoniokerureplnojissouhouhou/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/lang_dev&#34;&gt;言語実装 Advent Calendar 2015&lt;/a&gt;16日目の記事です。&lt;/p&gt;
&lt;p&gt;κeenです。かねてより気になっていたREPLの実装方法について、SML#のソースコードを読んだのでその話でもします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#でJITコンパイラを作る軽い話</title>
      <link>//KeenS.github.io/blog/2015/12/12/sml_dejitwotsukurukaruihanashi/</link>
      <pubDate>Sat, 12 Dec 2015 17:26:24 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/12/12/sml_dejitwotsukurukaruihanashi/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://www.adventar.org/calendars/848&#34;&gt;ML Advent Calendar 2015&lt;/a&gt;及び&lt;a href=&#34;http://qiita.com/advent-calendar/2015/lang_dev&#34;&gt;言語実装 Advent Calendar 2015&lt;/a&gt;15日目の記事です。&lt;/p&gt;
&lt;p&gt;κeenです。先日流れてきた&lt;a href=&#34;http://www.jonathanturner.org/2015/12/building-a-simple-jit-in-rust.html&#34;&gt;RustでJITコンパイラを作る話&lt;/a&gt;が面白かったのでSML#でもやってみます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCOと例外ハンドル</title>
      <link>//KeenS.github.io/blog/2015/05/31/tcotoreigaihandoru/</link>
      <pubDate>Sun, 31 May 2015 21:02:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/31/tcotoreigaihandoru/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;//KeenS.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou&#34;&gt;先日のエントリー&lt;/a&gt;の最後でループ内で例外ハンドルをすると極端に遅くなるということを書きましたが、それについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>第一級ラベルを持たない言語におけるDirect Threaded VMの実装</title>
      <link>//KeenS.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou/</link>
      <pubDate>Fri, 29 May 2015 20:26:41 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou/</guid>
      <description>&lt;p&gt;こんにちは。κeenです。このブログでちょくちょく出てくるDirect Threaded VMについて。
SMLのようにgotoがない言語だとDT VMの実装出来ないよなー、と思ってた所、ふとアイディアが浮かんだのでそれについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>実装から理解するクロージャ</title>
      <link>//KeenS.github.io/slide/jissoukararikaisurukuro_ja/</link>
      <pubDate>Sun, 17 May 2015 01:33:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/jissoukararikaisurukuro_ja/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS 渋谷のエンジニア Lisp, ML, Shell Scriptあたりを書きます  ===
クロージャとは？   日本語にすると（関数）閉包 関数が外側のローカル変数を補足する 補足されたローカル変数は無限の生存期間を持つ  ローカル変数は本来スコープを抜けると生存期間が終わる 言い換えるとグローバル変数みたいになる でもあくまでスコープはローカル ===    コード例  function genpower(n){ var x = 1; return function(){ x *= n; return x; }; } var p = genpower(2); ===
コード例  p() // =&amp;gt; 2 p() // =&amp;gt; 4 p() // =&amp;gt; 8 x * 2 // x is not defined ===</description>
    </item>
    
    <item>
      <title>誰がUTF-32が使われてないなんて言ったんだ</title>
      <link>//KeenS.github.io/blog/2015/03/31/daregautf-32gatsukawaretenainanteitsuttanda/</link>
      <pubDate>Tue, 31 Mar 2015 19:41:05 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/03/31/daregautf-32gatsukawaretenainanteitsuttanda/</guid>
      <description>&lt;p&gt;最近ではUTF-8でソースコードを書いてUTF-8で出入力をする。それ以外のエンコーディングは使われていない。…だと？誰がそんなこと言ったんだ&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>