<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lisp | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/categories/lisp/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-08-30T15:54:02+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to CIM]]></title>
    <link href="http://KeenS.github.io/slide/introduction-to-cim.html"/>
    <updated>2014-08-30T04:33:00+09:00</updated>
    <id>http://KeenS.github.io/slide/introduction-to-cim.markdown</id>
    <content type="html"><![CDATA[<h1>Introduction to CIM</h1>

<hr />


<p>κeen(@blackenedgold)</p>

<h2>突然ですが</h2>

<p>Common Lispのスクリプトファイルの実行方法知ってますか？</p>

<p>sbcl</p>

<pre><code>sbcl --script $file
</code></pre>

<p>ecl</p>

<pre><code>ecl -shell $file
</code></pre>

<p>ccl</p>

<pre><code>ccl -e $file -e '(quit)'
</code></pre>

<p>&hellip;</p>

<p><strong>シバン可搬性のあるスクリプトが書けない</strong></p>

<h2>そこで、こんなの書きました</h2>

<hr />


<p>```sh
case &ldquo;$LISP_IMPL&rdquo; in</p>

<pre><code>sbcl*)
    sbcl --script $1
    ;;
clisp*)
    clisp -on-error exit -i $1
    ;;
ecl*)
    ecl -shell $1
    ;;
ccl*)
</code></pre>

<p>&hellip;
```</p>

<h2>でも問題がある</h2>

<hr />


<ul>
<li>どの処理系をバックエンドに使うか</li>
<li>処理系のパスをどう捜すか</li>
<li>そもそもどうやって使ってもらうか</li>
</ul>


<h2>κeenの答え</h2>

<hr />


<blockquote><p>処理系の管理までやってしまおう。
そうしたら一緒に使ってもらえる。</p></blockquote>

<p>＿人人人人人人＿<br/>
＞　CIMの誕生　＜<br/>
￣Y<sup>Y</sup><sup>Y</sup><sup>Y</sup><sup>Y</sup>￣</p>

<h2>CIMとは</h2>

<hr />


<ul>
<li>Common Lisp Implementation Manager</li>
<li>ちむ</li>
<li>Rubyのrvmを強く意識</li>
<li>Common Lisp処理系のインストール、切り替え、コマンドラインインターフェースなど。</li>
<li><code>cim</code>、 <code>cl</code>、 <code>ql</code>コマンドから成る</li>
<li>B Shell スクリプト製(マルチプラットフォーム対応のため)</li>
<li>2013/10くらいからぼちぼち開発</li>
</ul>


<h2><code>cim</code>コマンドについて</h2>

<hr />


<p>インストール</p>

<pre><code>cim install sbcl
</code></pre>

<p>バックエンドの切り替え</p>

<pre><code>cim use sbcl
</code></pre>

<p>現在情報</p>

<pre><code>cim info
</code></pre>

<p>CIMのアップデート</p>

<pre><code>cim get
</code></pre>

<p>など。</p>

<h2><code>cl</code>コマンドについて</h2>

<hr />


<ul>
<li>最初に紹介したシェルスクリプトベース</li>
<li>コマンドラインからCommon Lispを使うことを重視</li>
<li>シバン対応も。</li>
<li>REPLは独自実装(デバッガを黙らせるのが主な目的)</li>
<li>オプションはrubyを意識</li>
</ul>


<h2>少しシバンの話</h2>

<hr \>


<h3>だめな例</h3>

<p>```lisp</p>

<h1>!cl</h1>

<p>(write-line &ldquo;ok&rdquo;)
<code>
</code>lisp</p>

<h1>!/home/kim/.cim/bin/cl</h1>

<p>(write-line &ldquo;ok&rdquo;)
<code>
</code>lisp</p>

<h1>!/usr/bin/env cl -q</h1>

<p>(write-line &ldquo;ok&rdquo;)
```</p>

<h3>推奨される例</h3>

<p>```lisp</p>

<h1>!/bin/sh</h1>

<h1>|</h1>

<p>exec cl &mdash;  &ldquo;$0&rdquo; &ldquo;$@&rdquo;
|#
(write-line &ldquo;ok&rdquo;)
```</p>

<h2><code>ql</code>コマンドについて</h2>

<hr />


<ul>
<li>quicklispのコマンドラインインターフェース</li>
<li>まだ未熟</li>
<li>rubyのgem的な。</li>
<li>最近<code>ql install</code>を高速化</li>
</ul>


<h2>その他の話</h2>

<hr />


<h3>対応処理系</h3>

<ul>
<li>処理系はabcl, alisp, ccl, clisp, ecl, sbcl対応</li>
<li>基本ビルドする</li>
<li>gclはANSIじゃないのでドロップ</li>
<li>lispworks他商用ははインストール出来ないのでドロップ</li>
<li>mkcl対応する？</li>
<li>CMU CLはつらい…</li>
</ul>


<h3>実装</h3>

<ul>
<li>B Shell スクリプトで書いたの失敗だった?</li>
<li>つらい</li>
<li>開発速度に影響</li>
<li>テスト（=品質）にも影響</li>
<li>sbclがじゃじゃ馬でつらい</li>
</ul>


<h3>方針</h3>

<ul>
<li>コマンドラインユーティリティである</li>
<li>基本POSIX以外に依存しない</li>
<li>極力環境に影響しない(rvmがひどいのを嫌って)</li>
<li>clコマンドはあくまで薄いラッパ</li>
<li>asdfも使わない</li>
</ul>


<h2><a href="http://www.slideshare.net/blackenedgold/cim-common-lisp-implementation-manager?ref=http://keens.github.io/blog/2014/01/24/lisp-meet-up-number-13/">半年前</a>から何が変わったか</h2>

<hr />


<ul>
<li>バグ潰し</li>
<li>その他細かな改善

<ul>
<li>ダンプされたコアを読み込む機能</li>
<li>SIGINTをハンドル</li>
<li>ビルド時のログ制御</li>
</ul>
</li>
<li>ぼちぼちテスト書き始めた</li>
</ul>


<h2>将来の話</h2>

<hr />


<ul>
<li>テストと品質の安定化</li>
<li>バイナリ配布の処理系は大人しくバイナリ使う？</li>
<li>最適なビルドオプション</li>
<li>コアダンプ機能</li>
<li>Lispスクリプト(実行可能ファイル)インストーラ</li>
<li>cl21との連携（バイナリ生成）</li>
<li>もうちょっとquicklispとの連携</li>
<li>ユーザー拡張</li>
</ul>


<h2>関連リソース</h2>

<hr />


<ul>
<li><a href="http://pupeno.com/2007/08/26/the-problem-with-lisp/">The problem with Lisp </a> : Lispはコマンドが作れないから流行らないという分析</li>
<li><a href="http://keens.github.io/blog/2014/01/27/cim-explanation/">CIMの解説をしてみる コマンド編 | κeenのHappy Hacκing Blog</a> : CIMの解説記事</li>
<li><a href="https://github.com/fukamachi/shelly">shelly</a> : CIMを使うCLのコマンドラインインターフェース</li>
<li><a href="https://github.com/snmsts/lsp">lsp</a> : CIMのC実装</li>
<li><a href="https://github.com/fukamachi/qlot">qlot</a> : <code>ql</code>よりリッチなquicklispラッパ</li>
</ul>


<p><span style="font-size:600%">以上</span><br/>
何か質問あればどうぞ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[授業で半年間moclを使ってみた]]></title>
    <link href="http://KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8.html"/>
    <updated>2014-08-28T17:05:00+09:00</updated>
    <id>http://KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8.markdown</id>
    <content type="html"><![CDATA[<h1>授業で半年間moclを使ってみた</h1>

<hr />


<p>Shibuya.lisp TT #8</p>

<br>


<p>κeen(@blackenedgold)</p>

<h2>自己紹介</h2>

<hr />


<ul>
<li>κeen</li>
<li>東大数学科の4年生</li>
<li>ソーシャルアカウントは上のアイコン達から。</li>
<li>Lisp, Ruby, OCaml, Shell Scriptあたりを書きます</li>
</ul>


<p> 一年前</p>

<h2><a href="http://ks.ms.u-tokyo.ac.jp/">計算数学II</a></h2>

<p><img src="/images/shibuya_lisp_TT8/calculation_math.png" alt="計算数学IIのホームページ" /></p>

<p>自分でテーマを決めて半年間取り組む</p>

<p>チーム<a href="https://sites.google.com/site/2013ks2/home">人造エイリアン</a>
<img src="/images/shibuya_lisp_TT8/android_alien.png" alt="チーム人造エイリアン" /></p>

<h2>Common Lisp でAndroid?</h2>

<h2><a href="https://wukix.com/mocl">mocl</a></h2>

<p><img src="/images/shibuya_lisp_TT8/mocl.png" alt="mocl home" /></p>

<h2>What is mocl</h2>

<hr />


<ul>
<li>iOS, Androidで動くCommon Lisp処理系</li>
<li>LLVMをバックエンドに使う</li>
<li>Networking, Unicode, CLOS, and More. Run Countless CL Libraries.</li>
</ul>


<h2>買ってもらった(・ω・)v</h2>

<p><img src="/images/shibuya_lisp_TT8/mocl_ut.png" alt="mocl home" /></p>

<h2>注意</h2>

<hr />


<p>私が触ったのは1つ前のバージョンです。</p>

<p>一部5月のアップデートで改善されています。</p>

<h2>How it Works</h2>

<hr \>


<p><embed src="http://KeenS.github.io/images/shibuya_lisp_TT8/mocl_flowchart.svg" type="image/svg+xml" height="500px" /></p>

<h2>コードサンプル</h2>

<hr \>


<p>授業で私が作ったオセロのAIのコード
```java
public BoardCanvas(Context context,int width, int height,int color ){</p>

<pre><code>...
CL.cl_init();
CL.init_game(3 - color);
...
</code></pre>

<p>}</p>

<p>void nextHand(){</p>

<pre><code>String[] coord = CL.next().split(" ");
CL.jput(Integer.parseInt(coord[0]), Integer.parseInt(coord[1]) , color);
...
</code></pre>

<p>}
```</p>

<p>```lisp
(declaim (call-in next))
(defun next ()
  (let ((dummy (make-board))</p>

<pre><code>    (max most-negative-fixnum)
    (x) (y) (score))
...
))
</code></pre>

<p>(declaim (call-in init-game))
(defun init-game (color)
  (setf <em>board</em> (make-board))
  (setf <em>ai</em> color))
(declaim (call-in jput))
(defun jput (x y color)
  (put <em>board</em> x y color))
```</p>

<h2>ライブラリについて</h2>

<hr />


<ul>
<li>ASDFが使える</li>
<li><code>MOCL_HOME/systems/</code>以下に配置</li>
<li>quicklispでインストールしたやつは<code>MOCL_HOME/systems/</code>にひたすら<code>ln -s</code></li>
<li>大抵のライブラリは動かない</li>
</ul>


<p>例えば<code>cl-annot</code>を使って
<code>lisp
(declaim (call-in jput))
(defun jput (x y color)
  (put *board* x y color))
</code>
を
<code>lisp
@call-in
(defun jput (x y color)
  (put *board* x y color))
</code>
としたい</p>

<p>私のときはCFFIを始め、ironclad、cl-annotなど、<br/>
使おうとしたライブラリは全て動かなかった</p>

<p>現在の状態は不明</p>

<h2>作業フロー(Android)</h2>

<hr />




<ol>
<li>CLのコードを書いてSBCLで動かす</li>
<li>ある程度動いたらmoclでAndroid用のコードを生成</li>
<li>原因不明のエラーが出るので1に戻る</li>
<li>コンパイルが通れば生成されたCをコンパイル</li>
</ol>




<ol start="5">
<li>JavaからCLを呼び出すコードを書く</li>
<li>アプリをコンパイル</li>
<li>実機/エミュレータに転送</li>
</ol>




<ol start="8">
<li>動かす</li>
<li>動かない</li>
<li>ひたすらlogcat眺める</li>
<li>1に戻る</li>
</ol>


<h3>ここがつらい</h3>

<hr />


<ul>
<li>作業が煩雑</li>
<li>例外のスタックトレースがJNIのせいで追いづらい</li>
<li>logを出すには<code>rt:format</code>という関数のみ使える(ログレベルを設定出来ない)</li>
</ul>


<p>※ 今はREPLが端末で動くので環境は良くなっています。</p>

<h2>制限など</h2>

<hr />


<ul>
<li>Java/Obj-CからCLを呼ぶことしか出来ない

<ul>
<li>プラットフォームのライブラリも呼べない</li>
</ul>
</li>
<li>やりとり出来るのは文字列、数値、真偽値のみ

<ul>
<li>裏でタスクを回すworker的な役割or純粋関数的な役割のみ</li>
</ul>
</li>
</ul>


<p>※ 今はCLからObj-Cを呼ぶことが出来ます。</p>

<h2>成果物</h2>

<hr />


<ul>
<li><a href="https://gist.github.com/KeenS/15e7bb35519818c88c13">コード(抜粋)</a></li>
<li><a href="http://www.slideshare.net/blackenedgold/ss-30373688">最終発表スライド</a></li>
<li><a href="http://www.slideshare.net/blackenedgold/ss-30373688">デモ動画</a></li>
</ul>


<h2>おまけ</h2>

<h2>5月のアップデート内容</h2>

<hr />


<ul>
<li>OS Xアプリケーション対応</li>
<li>端末内でREPLが動く</li>
<li>FFI強化</li>
<li>Lisp内Obj-C構文</li>
<li>iOSとOS XでのネイティブSSL対応</li>
<li>ARM64サポート</li>
<li>ドキュメントの改善</li>
<li>多くのバグフィクス</li>
</ul>


<p><span style="font-size:600%">以上</span><br/>
何か質問あればどうぞ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common LispでSIGINTを捉える]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp/"/>
    <updated>2014-08-27T21:45:37+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp</id>
    <content type="html"><![CDATA[<p>κeenです。もうすぐShibuya.lisp TT #8 ですね。今回はCIMのREPLの改善をしてたらSIGINTを補足しようとして詰まったので共有します。</p>

<!-- more -->


<p>結論を書いちゃうと</p>

<p>```lisp
(defvar <em>interrupt-condition</em>
  ;; It seems abcl does not raise any conditions
  #+allegro &lsquo;excl:interrupt-signal
  #+ccl 'ccl:interrupt-signal-condition
  #+clisp 'system::simple-interrupt-condition
  #+ecl 'ext:interactive-interrupt
  #+sbcl 'sb-sys:interactive-interrupt
  #&ndash;(or allegro ccl clisp ecl sbcl) 'no-conditon-known)</p>

<p>(defmacro with-handle-interrupt (&amp;body body)
  `(handler-case</p>

<pre><code>   #-ccl(progn
          ,@body)
   #+ccl (let ((ccl:*break-hook* (lambda (condition hook)
                                   (declare (ignore hook))
                                   (error condition))))
           ,@body)
   (#.*interrupt-condition* (c)
     (handle-interrupt c))))
</code></pre>

<p>```</p>

<p>こんな感じです。ABCLがコンディションを投げずに即終了してる(?)っぽいのでABCLに対しては無力です。もしかしたらJava側で捉えないといけないのかもしれません。
因みにどうやってそれぞれのコンディション名を調べたかというと、<code>(handler-case (loop) (condition (c) (print c)))</code>を各処理系のREPLで実行して<code>^C</code>しました。
Allegro CLは<code>interrupt-signal</code>がconditionのサブクラスでなかった(<code>serious-condition</code>だった)のでちょいと困りましたね。結局マニュアル読みました。</p>

<p>CIMのコードなので上記以外の処理系には対応してないです。</p>

<p>今回詰まったのはCCLですね。<code>ccl:interrupt-signal-condition</code>は定義してあるもののユーザーより先に処理系が処理するので無意味でした。なので<code>ccl:*break-hook*</code>を使って処理系が捉えるより早くコンディションを発生させました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud9の紹介とLispのセットアップ]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/02/introduction-to-cloud9/"/>
    <updated>2014-08-02T01:02:18+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/02/introduction-to-cloud9</id>
    <content type="html"><![CDATA[<p>κeenです。先日のLisp Meet Upで紹介した<a href="https://c9.io">Cloud9</a>の詳解でも書きます。まあ、そんなに詳しくないんですけどね。</p>

<!-- more -->


<h1>Cloud9について</h1>

<p>先日のスライドを見てない方はまず見て下さい。</p>

<p><a href="http://keens.github.io/slide/cloud-9.html">Cloud 9の紹介 | κeenのHappy Hacκing Blog</a></p>

<p>公式の詳解ムービー(en)もあります。まあ、一般的なIDEの機能は一通り揃ってるようです。git連携とかも。
<a href="https://www.youtube.com/user/c9ide/videos?flow=grid&amp;view=1">CloudNine Ide &ndash; YouTube</a></p>

<p>スライドでバックエンドは一人一つDockerが与えられるって書きましたが自分のVMをバックエンドにも出来るようです。</p>

<p>省略しましたが他のユーザーとの連携機能も多数あって、チャットだとかワークスペースの共有だとかソーシャルコーディング関連も多数機能があります。全社導入の折には役立つ機能なんじゃないでしょうか。</p>

<p>ローカルファイルをアップロードしたり逆にローカルにダウンロードとかも出来るようです。</p>

<p>尚、IDE本体は<a href="https://github.com/ajaxorg/ace">ACEという名前でオープンソースで開発されてる</a>のでプラグインとかのドキュメントはそっちもあたると良いようです。</p>

<h1>Cloud9事始め</h1>

<p>スクショとかは適当にスライドを参照して下さい(手抜き)</p>

<h2>アカウントを作る</h2>

<p><a href="https://c9.io">c9.io</a>にアクセスしてGithubかBitbucketのアカウントでログイン出来ます(以後、Githubでログインしたものとします。Bitbucketの方は適宜読み替えて下さい)。Cloud9で書いたコードをHerokuやらなんやらに直接上げるつもりなら普通にCloud9アカウント作っても良いと思いますが、多くの場合どちらかとの連携を使うと思うので素直にGithubでログインしましょう。</p>

<p>ログインしたらダッシュボードに飛ばされます。demo-projectと自分のGithubのプロジェクトがサイドバーにある筈です。</p>

<h2>細かな設定</h2>

<p>demo-projectでも開きましょうか。demo-projectを選択してstart editingです。</p>

<p>IDEというかEditorの設定が出てくる筈です(多分)。キーバインディングとかタブ幅とか設定しましょう。そして、<code>C-h</code>で<code>backward-delete-char</code>出来ないと死んでしまう方のための設定はこちらです。Preferencesのkeybindingsのedit your keymap fileからkeymap fileに飛んで、
```json
[</p>

<pre><code>{"command": "backspace", "keys":["Ctrl-H", "Backspace"]},
{"command": "replace", "keys":["Alt-Shift-5"]}
</code></pre>

<p>]
<code>``
と編集、保存しましょう。どうも、キーにコマンドを割り当てるのではなく、コマンドにキーを割り当ててる(?)っぽいのでCtrl-Hを持ってる</code>replace`を別のキーにしないと動かないようでした。尚、これはファイルをいじらなくてもsearch keybindingsのところから目的のコマンドを捜して、keystrokeのところをクリックして、割り当てたいキーストロークをすれば割り当て出来るようです。その際、自分のkeymap fileも対応して書き変わります。</p>

<h2>Common Lispのセットアップ</h2>

<p>処理系のインストールはいくつか方法があります。</p>

<ol>
<li><code>apt-get</code>で入れる</li>
<li>バイナリを落してくる</li>
<li><a href="https://github.com/KeenS/CIM">CIM</a>を使う</li>
</ol>


<p>のいずれかの方法で処理系を入れて下さい。<code>apt-get</code>で入れる場合はかなり古いバージョンが入ります。CIMで入れる場合は<code>sudo apt-get install time</code>しておかないとSBCLのビルドが出来ませんでした。他の処理系は確認してないです。どの処理系でも良いんですがとりあえずSBCLを入れたってことで話進めますね。私がそれしか確認してないので。</p>

<p>また、便利のためrlwrapを入れましょう。<code>sudo apt-get install rlwrap</code>です。</p>

<p>そこまでいったらrun scriptを作りましょう。上のメニューバーから[Run]>[Run With]>[New Runner]と進みます。で、run scriptの内容はどの方法で処理系を入れたかに依るのですが、</p>

<p>1の場合</p>

<p>```json
{</p>

<pre><code>"cmd" : ["sudo", "rlwrap", "sbcl", "--load", "$file", "$args"],
"info" : "Started SBCL :: $project_path$file_name",
"env" : {},
"selector" : "source.ext"
</code></pre>

<p>}
```</p>

<p>だそうです(<a href="http://cjelupton.wordpress.com/2014/07/24/hacking-lisp-in-the-cloud-pt-3/">引用元</a>)。<code>sudo</code>がついてるのはWEBアプリの場合0.0.0.0で待つためにroot権限が必要だからかな？</p>

<p>これは実行した後でREPLに入ってデバッガとか扱う感じの設定ですね。<br/>
単に実行したいだけののきは<code>--load</code>の部分を<code>--script</code>に変えれば良さそうです(未確認)<br/>
2の場合も同じ設定でいけそうな気がします。PATHぐらい必要かな?(未確認)</p>

<p>3の場合</p>

<p>```json
{</p>

<pre><code>"cmd" : ["sudo", "cl", "$file", "$args"],
"info" : "Started cl :: $project_path$file_name",
"env" : {"CIM_HOME":"$HOME/.cim","PATH": "$CIM_HOME/bin:$PATH", "LISP_IMPL": "sbcl"},
"selector" : "source.ext"
</code></pre>

<p>}
```</p>

<p>です。本来CIMは<code>$CIM_HOME/init.*</code>を呼ばないと動かないのですが、ショートカットする環境変数を設定することで無理矢理動かしてます。Cloud9のinitスクリプト(jsファイル)があるようなのでそこでCIMをinitしておけば無理せずとも出来そうですがあまり深く踏み込んでないです。</p>

<p>尚、この設定は実行即終了のものです。実行してREPLに入りたい場合は<code>"cmd"</code>を<code>["cl","-rf", "$file", "$args"]</code>にすると出来ます。</p>

<h2>動かしてみる</h2>

<p>上記のrun scriptを設定、保存したらメニューバーから[File]>[New File]と進み、新しいファイルを作ります。<br/>
一番簡単に
<code>lisp
(write-line "Hello Cloud9")
</code>
とでも書きましょうか。そして[>Run]してちょいと待つと実行出来る筈です。動かなかったら手動で[Run]>[Run With]>[My Runner]とかしてみましょう。ここまで来ればセットアップ完了です。</p>

<h1>今後の課題というか要調査というか</h1>

<h2>シンタックスハイライト</h2>

<p>Lisp Meet Upでも喋りましたがハイライトが最悪です。ユーザー定義ハイライターも(少くともACEレベルでは)出来そうなのでどうにかする必要があります。</p>

<h2>インデント</h2>

<p>Lispのインデントはタブn個とかで済むようなものじゃなくてどのオペレータの中にいるかに依って変わります。その辺どうにかなって欲しいですね。
もしかしたらClojureは上手くいってるかもしれないのでそこからインポートしてくれると嬉しいですね。</p>

<h2>swankインターフェース</h2>

<p>initスクリプトがあるって事はもしかしたらIDEもプログラマブルなのかもしれないのでswankインターフェースを作れるかもしれません。</p>

<h2>CIMインターフェース</h2>

<p>initスクリプトがあるって事は(ry。最終目標はメニューバーからどの処理系を使うか選択可能とかで。</p>

<h1>まとめ</h1>

<ul>
<li>Cloud9を紹介した</li>
<li>Common Lispのセットアップ方法を示した</li>
<li>誰か諸問題解決して下さい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #19でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19/"/>
    <updated>2014-07-30T00:30:40+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19</id>
    <content type="html"><![CDATA[<p>κeenです毎月恒例の<a href="https://atnd.org/events/53246">Lisp Meet Up presented by Shibuya.lisp</a>でLTしてきたのでレポートです。</p>

<!-- more -->


<p>今回は募集20に対して参加登録20、参加18、LT4本と集りの良い会でした。</p>

<p>自己紹介ではほぼCLの人ばっかりでした。珍しいところ（？）では数理システムの方が居たり会場を提供して下さってるサイバーエージェントの方が覗きにきてたり。</p>

<p>LT1本目はTOYOZUMIさんから連作の一つのCommon Lisp最適化発展。画像のエッジ検出をするときの関数の最適化の話でした。カーネルを渡すだけで最適なコードを生成するそうです。コーナーケースのif式をループの外に追い出してたりと半分成程、あとはよく分かんない話してるなーって。<br/>
最終的には<code>eval</code>を使ってるらしく、本当に速度出るの？って気になりましたが本人もやってみたところ速くなってビックリだったそうです。</p>

<p>スライドはこちら。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/37456264" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/toyozumiKouichi/common-lisp-37456264" title="Common lisp最適化発展" target="_blank">Common lisp最適化発展</a> </strong> from <strong><a href="http://www.slideshare.net/toyozumiKouichi" target="_blank">Toyozumi Kouichi</a></strong> </div></p>

<p>動画は今回から私が担当なので処理が終ったらリンク張ります。</p>

<p>次はTakagiさんよりcl-cudaについて。話聞く前は「どうせC APIをCFFIで叩いただけだろ(ホジ」って思ってましたがさすがにGPGPUはそんなに簡単じゃなかったようです。
cl-cudaはLispのAPIを叩いたらCUDA向けのCコードを吐いてCUDA専用のコンパイラ通してモジュールとして動的に読み込んで、ってやってくれるそうです。すごい。
完成度も、CUDAを研究に使ってたchikuさんによると普通使う分にはほぼ困らなくて、あとは構造体のサポートがあれば良いかも程度だそうです。すごい。</p>

<p>スライドはまだ見付けてないです。</p>

<p>3番目は私から、WebブラウザベースのIDE、<a href="https://c9.io/">Cloud9</a>の紹介とLispの対応状況について。
スライドはこのブログに載せてますが、こちら</p>

<p><a href="http://keens.github.io/slide/cloud-9.html">Cloud 9の紹介 | κeenのHappy Hacκing Blog</a></p>

<p>もうちょっと説明が欲しそうな雰囲気だったので別記事立てますね。@potix2さんが社内チャットに流したところなり反応が良かったようなので普通にIDEとして優れてるんじゃないでしょうか。</p>

<p>最後はかにたん(@kazh98)から床下からLispが出てきた話。うん。本当に床下からLispが出てきた話でした。かにたんの研究室すごいですね。みなさんの家の床下にもLispがあるかもしれませんよm9っ。</p>

<p>最後の最後にかにたんの研究室から出てきたLispについてTOYOZUMIさんがモニタをスクリーンに映しつつみんなで色々議論。なんかWEBのマニュアルがポルトガル語で書かれてたのでポルトガル語喋れる人捜したけど居なかったり。次回、床下Lispを動かしてみようってなりました。</p>

<p>そこでもう閉場の時間だったので懇親会へ。11名が参加。</p>

<p>私とかにたんとpotix2さんがschemeの実装の話してたり@mhkojiさんがhunchentootがありえないくらい遅いって話してたり色々でしたね。
CIMの話も出てました。実用上Windowsサポートは外せないってことで@snmstsさんがCでCIMを書き直してるだとか@nitro_idiotさんがshellyでCIMを使うにあたってCIM側でコアのマネジメントして欲しいって言ってただとか。</p>

<p>C CIMは面白そうですね。ビルドしなきゃいけないから手軽さの問題が…とかlibcurlに依存するとLinuxが…とか言ってたら「ディストリのパッケージシステムに乗せてしまえば問題無い」と一刀両断。その発想はなかった。むしろパッケージシステムに入った方が手軽。</p>

<p>今からCloud9の記事とCIMのコアマネジメント頑張りますね。</p>
]]></content>
  </entry>
  
</feed>
