<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lisp | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/categories/lisp/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-08-27T22:05:42+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Common LispでSIGINTを捉える]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp/"/>
    <updated>2014-08-27T21:45:37+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp</id>
    <content type="html"><![CDATA[<p>κeenです。もうすぐShibuya.lisp TT #8 ですね。今回はCIMのREPLの改善をしてたら詰まったところがあったので共有します。</p>

<!-- more -->


<p>結論を書いちゃうと</p>

<p>```lisp
(defvar <em>interrupt-condition</em>
  ;; It seems abcl does not raise any conditions
  #+allegro &lsquo;excl:interrupt-signal
  #+ccl 'ccl:interrupt-signal-condition
  #+clisp 'system::simple-interrupt-condition
  #+ecl 'ext:interactive-interrupt
  #+sbcl 'sb-sys:interactive-interrupt
  #&ndash;(or allegro ccl clisp ecl sbcl) 'no-conditon-known)</p>

<p>(defmacro with-handle-interrupt (&amp;body body)
  `(handler-case</p>

<pre><code>   #-ccl(progn
          ,@body)
   #+ccl (let ((ccl:*break-hook* (lambda (condition hook)
                                   (declare (ignore hook))
                                   (error condition))))
           ,@body)
   (#.*interrupt-condition* (c)
     (handle-interrupt c))))
</code></pre>

<p>```</p>

<p>こんな感じです。ABCLがコンディションを投げずに即終了してる(?)っぽいのでABCLに対しては無力です。もしかしたらJava側で捉えないといけないのかもしれません。
因みにどうやってそれぞれのコンディション名を調べたかというと、<code>(handler-case (loop) (condition (c) (print c)))</code>を各処理系のREPLで実行して<code>^C</code>しました。
Allegro CLは<code>interrupt-signal</code>がconditionのサブクラスでなかった(<code>serious-condition</code>だった)のでちょいと困りましたね。結局マニュアル読みました。</p>

<p>CIMのコードなので上記以外の処理系には対応してないです。</p>

<p>今回詰まったのはCCLですね。<code>ccl:interrupt-signal-condition</code>は定義してあるもののユーザーより先に処理系が処理するので無意味でした。なので<code>ccl:*break-hook*</code>を使って処理系が捉えるより早くコンディションを発生させました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud9の紹介とLispのセットアップ]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/02/introduction-to-cloud9/"/>
    <updated>2014-08-02T01:02:18+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/02/introduction-to-cloud9</id>
    <content type="html"><![CDATA[<p>κeenです。先日のLisp Meet Upで紹介した<a href="https://c9.io">Cloud9</a>の詳解でも書きます。まあ、そんなに詳しくないんですけどね。</p>

<!-- more -->


<h1>Cloud9について</h1>

<p>先日のスライドを見てない方はまず見て下さい。</p>

<p><a href="http://keens.github.io/slide/cloud-9.html">Cloud 9の紹介 | κeenのHappy Hacκing Blog</a></p>

<p>公式の詳解ムービー(en)もあります。まあ、一般的なIDEの機能は一通り揃ってるようです。git連携とかも。
<a href="https://www.youtube.com/user/c9ide/videos?flow=grid&amp;view=1">CloudNine Ide &ndash; YouTube</a></p>

<p>スライドでバックエンドは一人一つDockerが与えられるって書きましたが自分のVMをバックエンドにも出来るようです。</p>

<p>省略しましたが他のユーザーとの連携機能も多数あって、チャットだとかワークスペースの共有だとかソーシャルコーディング関連も多数機能があります。全社導入の折には役立つ機能なんじゃないでしょうか。</p>

<p>ローカルファイルをアップロードしたり逆にローカルにダウンロードとかも出来るようです。</p>

<p>尚、IDE本体は<a href="https://github.com/ajaxorg/ace">ACEという名前でオープンソースで開発されてる</a>のでプラグインとかのドキュメントはそっちもあたると良いようです。</p>

<h1>Cloud9事始め</h1>

<p>スクショとかは適当にスライドを参照して下さい(手抜き)</p>

<h2>アカウントを作る</h2>

<p><a href="https://c9.io">c9.io</a>にアクセスしてGithubかBitbucketのアカウントでログイン出来ます(以後、Githubでログインしたものとします。Bitbucketの方は適宜読み替えて下さい)。Cloud9で書いたコードをHerokuやらなんやらに直接上げるつもりなら普通にCloud9アカウント作っても良いと思いますが、多くの場合どちらかとの連携を使うと思うので素直にGithubでログインしましょう。</p>

<p>ログインしたらダッシュボードに飛ばされます。demo-projectと自分のGithubのプロジェクトがサイドバーにある筈です。</p>

<h2>細かな設定</h2>

<p>demo-projectでも開きましょうか。demo-projectを選択してstart editingです。</p>

<p>IDEというかEditorの設定が出てくる筈です(多分)。キーバインディングとかタブ幅とか設定しましょう。そして、<code>C-h</code>で<code>backward-delete-char</code>出来ないと死んでしまう方のための設定はこちらです。Preferencesのkeybindingsのedit your keymap fileからkeymap fileに飛んで、
```json
[</p>

<pre><code>{"command": "backspace", "keys":["Ctrl-H", "Backspace"]},
{"command": "replace", "keys":["Alt-Shift-5"]}
</code></pre>

<p>]
<code>``
と編集、保存しましょう。どうも、キーにコマンドを割り当てるのではなく、コマンドにキーを割り当ててる(?)っぽいのでCtrl-Hを持ってる</code>replace`を別のキーにしないと動かないようでした。尚、これはファイルをいじらなくてもsearch keybindingsのところから目的のコマンドを捜して、keystrokeのところをクリックして、割り当てたいキーストロークをすれば割り当て出来るようです。その際、自分のkeymap fileも対応して書き変わります。</p>

<h2>Common Lispのセットアップ</h2>

<p>処理系のインストールはいくつか方法があります。</p>

<ol>
<li><code>apt-get</code>で入れる</li>
<li>バイナリを落してくる</li>
<li><a href="https://github.com/KeenS/CIM">CIM</a>を使う</li>
</ol>


<p>のいずれかの方法で処理系を入れて下さい。<code>apt-get</code>で入れる場合はかなり古いバージョンが入ります。CIMで入れる場合は<code>sudo apt-get install time</code>しておかないとSBCLのビルドが出来ませんでした。他の処理系は確認してないです。どの処理系でも良いんですがとりあえずSBCLを入れたってことで話進めますね。私がそれしか確認してないので。</p>

<p>また、便利のためrlwrapを入れましょう。<code>sudo apt-get install rlwrap</code>です。</p>

<p>そこまでいったらrun scriptを作りましょう。上のメニューバーから[Run]>[Run With]>[New Runner]と進みます。で、run scriptの内容はどの方法で処理系を入れたかに依るのですが、</p>

<p>1の場合</p>

<p>```json
{</p>

<pre><code>"cmd" : ["sudo", "rlwrap", "sbcl", "--load", "$file", "$args"],
"info" : "Started SBCL :: $project_path$file_name",
"env" : {},
"selector" : "source.ext"
</code></pre>

<p>}
```</p>

<p>だそうです(<a href="http://cjelupton.wordpress.com/2014/07/24/hacking-lisp-in-the-cloud-pt-3/">引用元</a>)。<code>sudo</code>がついてるのはWEBアプリの場合0.0.0.0で待つためにroot権限が必要だからかな？</p>

<p>これは実行した後でREPLに入ってデバッガとか扱う感じの設定ですね。<br/>
単に実行したいだけののきは<code>--load</code>の部分を<code>--script</code>に変えれば良さそうです(未確認)<br/>
2の場合も同じ設定でいけそうな気がします。PATHぐらい必要かな?(未確認)</p>

<p>3の場合</p>

<p>```json
{</p>

<pre><code>"cmd" : ["sudo", "cl", "$file", "$args"],
"info" : "Started cl :: $project_path$file_name",
"env" : {"CIM_HOME":"$HOME/.cim","PATH": "$CIM_HOME/bin:$PATH", "LISP_IMPL": "sbcl"},
"selector" : "source.ext"
</code></pre>

<p>}
```</p>

<p>です。本来CIMは<code>$CIM_HOME/init.*</code>を呼ばないと動かないのですが、ショートカットする環境変数を設定することで無理矢理動かしてます。Cloud9のinitスクリプト(jsファイル)があるようなのでそこでCIMをinitしておけば無理せずとも出来そうですがあまり深く踏み込んでないです。</p>

<p>尚、この設定は実行即終了のものです。実行してREPLに入りたい場合は<code>"cmd"</code>を<code>["cl","-rf", "$file", "$args"]</code>にすると出来ます。</p>

<h2>動かしてみる</h2>

<p>上記のrun scriptを設定、保存したらメニューバーから[File]>[New File]と進み、新しいファイルを作ります。<br/>
一番簡単に
<code>lisp
(write-line "Hello Cloud9")
</code>
とでも書きましょうか。そして[>Run]してちょいと待つと実行出来る筈です。動かなかったら手動で[Run]>[Run With]>[My Runner]とかしてみましょう。ここまで来ればセットアップ完了です。</p>

<h1>今後の課題というか要調査というか</h1>

<h2>シンタックスハイライト</h2>

<p>Lisp Meet Upでも喋りましたがハイライトが最悪です。ユーザー定義ハイライターも(少くともACEレベルでは)出来そうなのでどうにかする必要があります。</p>

<h2>インデント</h2>

<p>Lispのインデントはタブn個とかで済むようなものじゃなくてどのオペレータの中にいるかに依って変わります。その辺どうにかなって欲しいですね。
もしかしたらClojureは上手くいってるかもしれないのでそこからインポートしてくれると嬉しいですね。</p>

<h2>swankインターフェース</h2>

<p>initスクリプトがあるって事はもしかしたらIDEもプログラマブルなのかもしれないのでswankインターフェースを作れるかもしれません。</p>

<h2>CIMインターフェース</h2>

<p>initスクリプトがあるって事は(ry。最終目標はメニューバーからどの処理系を使うか選択可能とかで。</p>

<h1>まとめ</h1>

<ul>
<li>Cloud9を紹介した</li>
<li>Common Lispのセットアップ方法を示した</li>
<li>誰か諸問題解決して下さい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #19でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19/"/>
    <updated>2014-07-30T00:30:40+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19</id>
    <content type="html"><![CDATA[<p>κeenです毎月恒例の<a href="https://atnd.org/events/53246">Lisp Meet Up presented by Shibuya.lisp</a>でLTしてきたのでレポートです。</p>

<!-- more -->


<p>今回は募集20に対して参加登録20、参加18、LT4本と集りの良い会でした。</p>

<p>自己紹介ではほぼCLの人ばっかりでした。珍しいところ（？）では数理システムの方が居たり会場を提供して下さってるサイバーエージェントの方が覗きにきてたり。</p>

<p>LT1本目はTOYOZUMIさんから連作の一つのCommon Lisp最適化発展。画像のエッジ検出をするときの関数の最適化の話でした。カーネルを渡すだけで最適なコードを生成するそうです。コーナーケースのif式をループの外に追い出してたりと半分成程、あとはよく分かんない話してるなーって。<br/>
最終的には<code>eval</code>を使ってるらしく、本当に速度出るの？って気になりましたが本人もやってみたところ速くなってビックリだったそうです。</p>

<p>スライドはこちら。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/37456264" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/toyozumiKouichi/common-lisp-37456264" title="Common lisp最適化発展" target="_blank">Common lisp最適化発展</a> </strong> from <strong><a href="http://www.slideshare.net/toyozumiKouichi" target="_blank">Toyozumi Kouichi</a></strong> </div></p>

<p>動画は今回から私が担当なので処理が終ったらリンク張ります。</p>

<p>次はTakagiさんよりcl-cudaについて。話聞く前は「どうせC APIをCFFIで叩いただけだろ(ホジ」って思ってましたがさすがにGPGPUはそんなに簡単じゃなかったようです。
cl-cudaはLispのAPIを叩いたらCUDA向けのCコードを吐いてCUDA専用のコンパイラ通してモジュールとして動的に読み込んで、ってやってくれるそうです。すごい。
完成度も、CUDAを研究に使ってたchikuさんによると普通使う分にはほぼ困らなくて、あとは構造体のサポートがあれば良いかも程度だそうです。すごい。</p>

<p>スライドはまだ見付けてないです。</p>

<p>3番目は私から、WebブラウザベースのIDE、<a href="https://c9.io/">Cloud9</a>の紹介とLispの対応状況について。
スライドはこのブログに載せてますが、こちら</p>

<p><a href="http://keens.github.io/slide/cloud-9.html">Cloud 9の紹介 | κeenのHappy Hacκing Blog</a></p>

<p>もうちょっと説明が欲しそうな雰囲気だったので別記事立てますね。@potix2さんが社内チャットに流したところなり反応が良かったようなので普通にIDEとして優れてるんじゃないでしょうか。</p>

<p>最後はかにたん(@kazh98)から床下からLispが出てきた話。うん。本当に床下からLispが出てきた話でした。かにたんの研究室すごいですね。みなさんの家の床下にもLispがあるかもしれませんよm9っ。</p>

<p>最後の最後にかにたんの研究室から出てきたLispについてTOYOZUMIさんがモニタをスクリーンに映しつつみんなで色々議論。なんかWEBのマニュアルがポルトガル語で書かれてたのでポルトガル語喋れる人捜したけど居なかったり。次回、床下Lispを動かしてみようってなりました。</p>

<p>そこでもう閉場の時間だったので懇親会へ。11名が参加。</p>

<p>私とかにたんとpotix2さんがschemeの実装の話してたり@mhkojiさんがhunchentootがありえないくらい遅いって話してたり色々でしたね。
CIMの話も出てました。実用上Windowsサポートは外せないってことで@snmstsさんがCでCIMを書き直してるだとか@nitro_idiotさんがshellyでCIMを使うにあたってCIM側でコアのマネジメントして欲しいって言ってただとか。</p>

<p>C CIMは面白そうですね。ビルドしなきゃいけないから手軽さの問題が…とかlibcurlに依存するとLinuxが…とか言ってたら「ディストリのパッケージシステムに乗せてしまえば問題無い」と一刀両断。その発想はなかった。むしろパッケージシステムに入った方が手軽。</p>

<p>今からCloud9の記事とCIMのコアマネジメント頑張りますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud 9の紹介]]></title>
    <link href="http://KeenS.github.io/slide/cloud-9.html"/>
    <updated>2014-07-29T01:29:00+09:00</updated>
    <id>http://KeenS.github.io/slide/cloud-9.markdown</id>
    <content type="html"><![CDATA[<h1>Cloud 9の紹介</h1>

<hr />


<p>Lisp Meet Up #19 presented by Shibuya.lisp<br/>
κeen(@blackenedgold)</p>

<h2>自己紹介</h2>

<hr />


<ul>
<li>κeen</li>
<li>東大数学科の4年生</li>
<li>ソーシャルアカウントは上のアイコン達から。</li>
<li>Lisp, Ruby, OCaml, Shell Scriptあたりを書きます</li>
</ul>


<h2>Lispがあまり使われない原因</h2>

<hr />




<ul>
<li class="fragment">認知度が低い</li>
<li class="fragment"><strong>開発環境構築の難易度高い</strong></li>
</ul>


<h2>Cloud 9について</h2>

<hr />


<ul>
<li>WEBベースのIDEサービス</li>
<li>40以上の言語に対応（らしい）</li>
<li>この間正式リリース</li>
<li>1アカウント毎に1Docker環境与えられる</li>
<li>IDEはオープンソース</li>
<li>よく分かってない</li>
</ul>


<h2>こんなん</h2>

<p><img src="http://KeenS.github.io/images/cloud9/login.png" alt="ログイン画面" /></p>

<p><img src="http://KeenS.github.io/images/cloud9/dashboard.png" alt="ダッシュボード" /></p>

<p><img src="http://KeenS.github.io/images/cloud9/workspace.png" alt="ワークスペース" /></p>

<p><img src="http://KeenS.github.io/images/cloud9/lookandfeel.png" alt="こんなかんじ" /></p>

<p><img src="http://KeenS.github.io/images/cloud9/CIMworks.png" alt="CIMも動く" /></p>

<p><img src="http://KeenS.github.io/images/cloud9/clworks.png" alt="CLもRun出来る" /></p>

<h2>デモ</h2>

<h2>良いところ</h2>

<hr />


<ul>
<li>難易度低い</li>
<li>Lisp環境動く</li>
<li>Githubとの連携</li>
<li>どこからでも同じ環境にアクセス</li>
<li>キーバインドはうれしい各宗教対応の<br/>
{Mac, Windows}x{Default, Emacs, Vim, Sublime}</li>
</ul>


<h2>微妙なところ</h2>

<hr />


<ul>
<li>シンタックスハイライト微妙<br/>
（せめてキーワード引数はどうにか）</li>
<li>補完微妙</li>
<li>インデント微妙</li>
<li>swank使いたい</li>
</ul>


<p><span style="font-size:600%">以上</span><br/>
何か質問あればどうぞ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(S式で書く(altJS)達)]]></title>
    <link href="http://KeenS.github.io/slide/sshi-deshu-kualtjs.html"/>
    <updated>2014-07-13T21:17:00+09:00</updated>
    <id>http://KeenS.github.io/slide/sshi-deshu-kualtjs.markdown</id>
    <content type="html"><![CDATA[<h1>(S式で書く(altJS)達)</h1>

<p>&lt;2014-06-08 日><br/>
κeen(@blackenedgold)<br/>
天下一altJS武闘会(#tenka1altJS)<br/>
@渋谷プライムプラザ四階</p>

<h2>自己紹介</h2>

<ul>
<li>κeen</li>
<li>東大数学科の4年生</li>
<li>Twit : @blackenedgold</li>
<li>Github : KeenS</li>
<li>Blog : <a href="http://KeenS.github.io/">κeenのHappy Hacκing Blog</a></li>
<li>Shibuya.lispにいます。(2014-06〜運営になりました)</li>
<li>Lisp, Ruby, OCaml, Shell Scriptあたりを書きます</li>
</ul>


<h2>お品書き</h2>

<ul>
<li>(ボツ) Shen.js</li>
<li>(ボツ) Embedable Common Lisp with Emscripten</li>
<li>(ボツ) Picrin with Emscripten</li>
<li>(ボツ) オレオレaltJSの作り方の話</li>
<li>ParenScript</li>
</ul>


<h2>Shen.js</h2>

<p>Shenの公式ページより</p>

<ul>
<li>パターンマッチ</li>
<li>λ計算ベース</li>
<li>マクロ</li>
<li>遅延評価も可能</li>
<li>静的型検査</li>
<li>関数的なPrologの統合</li>
<li>ビルトインコンパイラコンパイラ</li>
</ul>


<p>これのJS実装もある。</p>

<h3>例</h3>

<p><code>lisp
(define factorial
  0 -&gt; 1
  X -&gt; (* X (factorial (- X 1))))
</code></p>

<p>そもそもaltJSじゃない…</p>

<p>ボツ</p>

<h2>ECL with Emscripten</h2>

<ul>
<li>ANSI Common Lisp準拠のCommon Lisp処理系</li>
<li>LispをコンパイルしてCを吐く</li>
<li>Emscriptenでコンパイルすれば…</li>
</ul>


<p><code>#include &lt;ecl/ecl-cmp.h&gt;</code>
が悪さをしてコンパイル出来ない</p>

<p>ボツ</p>

<h2>picrin</h2>

<ul>
<li>R7RS small準拠を目指すScheme処理系</li>
<li>R7RS準拠の中では唯一Emscriptenで
コンパイル出来るらしい</li>
<li>SDLもEmscriptenで動くらしいから
組み合わせればウハウハじゃね？</li>
</ul>


<p>コンパイル出来ない…
( <code>va_args</code> は64bit x Clang3.3では
コンパイル出来ないとか言われる。回避策も効かない)</p>

<p>ボツ</p>

<h2>オレオレaltJSの作り方の話</h2>

<p>escodegenを使う
```javascript
{</p>

<pre><code>type: 'BinaryExpression',
operator: '+',
left: { type: 'Literal', value: 40 },
right: { type: 'Literal', value: 2 }
</code></pre>

<p>}
→40 + 2
```</p>

<p>オレオレaltJS(S式)<br/>
 ↓ read<br/>
リスト<br/>
 ↓ 変換  (find-file &ldquo;~/Lisp/translate.lisp&rdquo;)<br/>
リスト<br/>
 ↓ cl-json<br/>
JSON<br/>
 ↓ escodegen<br/>
JS</p>

<p>escodegenのドキュメントがあんまりない…</p>

<p>ボツ</p>

<h2>ParenScript</h2>

<ul>
<li>Common Lisp製</li>
<li>Weblocks(WAF)に採用されるなどの実績/伝統</li>
<li>Common LispのサブセットをJSにコンパイル</li>
<li>実際はCommon Lispのマクロなので
Common Lispに組み込んで使える</li>
<li>ランタイムライブラリは必要ない</li>
<li>Lispを無理矢理変換するというより
LispっぽくJSを書ける感じ</li>
</ul>


<h3>例</h3>

<p>~/Lisp/parenscript.lisp</p>

<ul>
<li><code>(@ obj property)</code> でプロパティ参照</li>
<li><code>(chain obj function/property)</code> でメソッドチェーン
など</li>
</ul>


<p>以上</p>
]]></content>
  </entry>
  
</feed>
