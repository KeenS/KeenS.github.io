<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lisp on κeenのHappy Hacκing Blog</title>
    <link>/categories/lisp/</link>
    <description>Recent content in Lisp on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 29 Jan 2017 22:18:24 +0900</lastBuildDate>
    
	<atom:link href="/categories/lisp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deprecating CIM</title>
      <link>/blog/2017/01/29/deprecating_cim/</link>
      <pubDate>Sun, 29 Jan 2017 22:18:24 +0900</pubDate>
      
      <guid>/blog/2017/01/29/deprecating_cim/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4年間続いたShibuya.lispのLispMeetUp</title>
      <link>/blog/2016/12/01/4nenkantsuzuitashibuya_lispnolispmeetup/</link>
      <pubDate>Thu, 01 Dec 2016 12:40:08 +0900</pubDate>
      
      <guid>/blog/2016/12/01/4nenkantsuzuitashibuya_lispnolispmeetup/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2016/event-management&#34;&gt;IT勉強会/コミュニティ運営 Advent Calendar 2016 - Qiita&lt;/a&gt;2日目の記事です。&lt;/p&gt;

&lt;p&gt;Shibuya.lispの開催しているlispmeetupは約4年間毎月開催しました（現46回開催）。
そこまで長く続いているコミュニティ活動はそんなに多くないのではないでしょうか。
lispmeetupがどうして続いたのかちょっと考察してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SchemeでClassとProtocol</title>
      <link>/slide/schemedeclasstoprotocol/</link>
      <pubDate>Mon, 28 Nov 2016 15:41:36 +0900</pubDate>
      
      <guid>/slide/schemedeclasstoprotocol/</guid>
      <description># ClassとProtocol ---------------------- [Lisp Meet Up presented by Shibuya.lisp #46](https://lisp.connpass.com/event/45517/) Scheme回 === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * サイバーエージェントのエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === # Class ------- * ここでは単に値の集合を表わす * `new` のように新しいインスタンスを作る機能はつけない * ほとんど型と同じ機能 * 唯一の機能 `instance?` を持つ === ``` scheme (instance? 3 ) ; = #t (instance? &#34;foo&#34; ) ; = #f ``` === # Classの実装 ------------- * 事実上述語があればいい * [詳細](https://github.</description>
    </item>
    
    <item>
      <title>Rustの型レベルLispっぽいの作った</title>
      <link>/blog/2016/11/06/rustnokatareberulispppoinotsukutta/</link>
      <pubDate>Sun, 06 Nov 2016 11:49:43 +0900</pubDate>
      
      <guid>/blog/2016/11/06/rustnokatareberulispppoinotsukutta/</guid>
      <description>&lt;p&gt;κeenです。ふとした気紛れでRustの型レベルLispっぽいの作りました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>高速な継続ライブラリに向けて</title>
      <link>/slide/kousokunakeizokuraiburarinimukete/</link>
      <pubDate>Sun, 08 May 2016 21:26:32 +0900</pubDate>
      
      <guid>/slide/kousokunakeizokuraiburarinimukete/</guid>
      <description># 高速な継続ライブラリに向けて ---------------------- [継続勉強会](http://connpass.com/event/28150/) 2016-05-22 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # 継続欲しい ----------- * 色々な場面で便利 * Schemeで使い回してるのうらやましい * Common Lispでも使いたい * 現実には限定継続が欲しい + Common Lispには大域脱出はある === # 限定継続を使う例 ----------------- ## 非同期プログラミング * コールバック形式だと厳しい * 限定継続を使うと綺麗に書き直せる === # 限定継続を使う例 ----------------- ## ゲームのコルーチン * 複数のオブジェクトを制御するのにコルーチンが欲しい * cf [コルーチンをCommon Lispで簡単に定義 - さくらんぼのlambda日記](http://lambdasakura.hatenablog.com/entry/20111026/1319598590) === # 限定継続を使う例 ----------------- ## do記法 * モナドのdo記法は限定継続を使って実装出来る * [Operational monad in scheme](http://www.</description>
    </item>
    
    <item>
      <title>ClojureでSSPを作った話</title>
      <link>/slide/clojuredesspwotsukuttahanashi/</link>
      <pubDate>Mon, 22 Feb 2016 20:19:11 +0900</pubDate>
      
      <guid>/slide/clojuredesspwotsukuttahanashi/</guid>
      <description># ClojureでSSPを作った話 ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # SSPとは ------- ※今回作ったものの話なので実際は少し違う * Supplier Side Platform * メディアからの広告リクエストを受けて表示権をオークションに掛け、落札された広告を表示する 0. 広告リクエストを受け取って 1. 各DSPに競りの通知を投げて 2. 入札を受け取って 3. 落札者と落札価格を決めて 4. 落札通知を出す === # アドテクコンペ --------------- * [ビジネスモデルもエンジニアリングも学べるアドテクスタジオの育成プログラムとは | 株式会社サイバーエージェント](https://www.cyberagent.co.jp/techinfo_detail/id=11380) * サイバーエージェントの学生向けインターン * 3日間、3、4人のチームで **DSP** を作る * 学生は7チーム、1チームあたり2000q/sを捌くことになってる * 学生のDSPを繋ぐための **SSP** が必要になったので作ることに。 ===   日本におけるアドテク市場とサイバーエージェントのアドテク事業について  from CyberAgent, Inc.</description>
    </item>
    
    <item>
      <title>readlineの作り方</title>
      <link>/blog/2016/02/14/readlinenotsukurikata/</link>
      <pubDate>Sun, 14 Feb 2016 22:37:35 +0900</pubDate>
      
      <guid>/blog/2016/02/14/readlinenotsukurikata/</guid>
      <description>&lt;p&gt;κeenです。なんか伏線っぽいもの回収しといた方が良いかなと思ってLinuxっぽい話でも。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lispで高速行列演算</title>
      <link>/blog/2016/02/04/common_lispdekousokugyouretsuenzan/</link>
      <pubDate>Thu, 04 Feb 2016 23:47:34 +0900</pubDate>
      
      <guid>/blog/2016/02/04/common_lispdekousokugyouretsuenzan/</guid>
      <description>&lt;p&gt;κeenです。Common Lispから線形代数ライブラリを使うポストで比較にCommon Lispのコードが出されていたのですがもう少し改良出来そうだったので少しばかり高速化してみました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meetup3周年に寄せて</title>
      <link>/blog/2016/01/27/lisp_meetup3shuunenniyosete/</link>
      <pubDate>Wed, 27 Jan 2016 23:40:11 +0900</pubDate>
      
      <guid>/blog/2016/01/27/lisp_meetup3shuunenniyosete/</guid>
      <description>&lt;p&gt;κeenです。昨日、&lt;a href=&#34;http://lisp.connpass.com/event/25546/&#34;&gt;Lisp Meetup #36&lt;/a&gt;が行なわれました。1回テックトークを挟んでるのでこれでちょうど丸3年、毎月Lisp Meetupが行われたことになります。

Lisp Meetupは&lt;a href=&#34;http://shibuya.lisp-users.org/&#34;&gt;Shibuya.lisp&lt;/a&gt;が基本、毎月開催している草の根活動で、Lisper同士の交流を目的として主に希望者によるトークをメインとした会です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近作ってるLispの話</title>
      <link>/blog/2015/12/20/saikintsukutterulispnohanashi/</link>
      <pubDate>Sun, 20 Dec 2015 22:40:16 +0900</pubDate>
      
      <guid>/blog/2015/12/20/saikintsukutterulispnohanashi/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/lisp&#34;&gt;Lisp Advent Calendar 2015&lt;/a&gt;21日目の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。最近あまりLispを書いてなくてネタがないので最近作ってるLispの話でもしようかと。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClojureでReactive Messaging Pattern</title>
      <link>/blog/2015/12/19/clojuredereactive_messaging_pattern/</link>
      <pubDate>Sat, 19 Dec 2015 22:30:19 +0900</pubDate>
      
      <guid>/blog/2015/12/19/clojuredereactive_messaging_pattern/</guid>
      <description>&lt;p&gt;このエントリは&lt;a href=&#34;http://qiita.com/advent-calendar/2015/clojure&#34;&gt;Clojure Advent Calendar 2015&lt;/a&gt;の16日目の記事です（大遅刻）&lt;/p&gt;

&lt;p&gt;κeenです。ここのところ体調優れず、また、特に面白いネタもなくClojure Advent Calendarに遅刻したことをお詫び申し上げます。&lt;/p&gt;

&lt;p&gt;さて、今日はReactive Messaging PatternをClojureのcore.asyncでやってみたいと思います。Reactive Messaging Pattersは、Java/Scala向けActorシステムの&lt;a href=&#34;http://akka.io/&#34;&gt;Akka&lt;/a&gt;の作者が著した本、&lt;a href=&#34;http://www.amazon.co.jp/Reactive-Messaging-Patterns-Actor-Model-ebook/dp/B011S8YC5G&#34;&gt;Amazon.co.jp: Reactive Messaging Patterns with the Actor Model: Applications and Integration in Scala and Akka&lt;/a&gt;で書かれているデザインパターンです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClojureでDSPを作った話</title>
      <link>/slide/clojurededspwotsukuttahanashi/</link>
      <pubDate>Tue, 27 Oct 2015 21:04:20 +0900</pubDate>
      
      <guid>/slide/clojurededspwotsukuttahanashi/</guid>
      <description># ClojureでDSPを作った話 ---------------------- Lisp Meet Up #3 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # DSPとは -------- * Demand Side Platform * 広告主から広告を集めて広告の表示権を競り落し、適切な広告を出す 0. 広告主を集めて 1. 競りの通知を受け取って 2. 一番コスパが良さそうな広告を選んで 3. 入札して 4. 落札通知を受け取る 5. 落札したら広告を出す === # ひとりDSP ---------- * AdTech Studioの新卒研修 * 2ヶ月間、業務時間の20%を使ってDSPを作る + 実質8営業日 * 業務ロジックを理解することが目的 * 最後に新卒の作ったDSP同士で競争、利益が得点になる * 他には最終発表での得点も * **研修なので好きにやっていい** + Clojureで書くことに * サーバーの他は広告主データと学習用データが与えられる ===   日本におけるアドテク市場とサイバーエージェントのアドテク事業について  from CyberAgent, Inc.</description>
    </item>
    
    <item>
      <title>Internal of b11d</title>
      <link>/slide/internal_of_b11d/</link>
      <pubDate>Mon, 19 Oct 2015 21:33:00 +0900</pubDate>
      
      <guid>/slide/internal_of_b11d/</guid>
      <description># Internal of b11d ---------------------- サイバーエージェント新卒研修 ひとりDSP最終発表会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + AMoAdのサーバーサイド（？）エンジニア + 趣味でLisp, ML, Shell Scriptあたりを書きます + 仕事でScalaとShell Scriptあたりを書きます === # 今回作ったもの ---------------- * b11d (ぶらっくんどごーるど) * Clojure (compojure + middleware)製 + + NginX + MySQL + Supervisord * 出来る限りシンプルになるように作った + 310行 * デプロイその他はシェルスクリプト * 監視はmackerel === # シンプルということ ------------------- * アプリケーションは状態を持たない * IO以外副作用を持たない * つまり、キャッシュを持たない + キャッシュはパフォーマンス上の意味しかない + 早過ぎる最適化は諸悪の根源 * スケールアウトが容易 * compojureのミドルウェアを上手く使った === # シンプルということ2 -------------------- * データベースはだいたい第4正規形（ﾀﾌﾞﾝ） + 全てのカラムは`NOT NULL` + 広告主の所だけ拡張性を持たせるために第1正規形に落とした + 1広告主に対して複数の広告が持てるようになる * 外部キー制約も全部付ける * データが綺麗なのでアプリケーション側でのやることが少ない * 分析する時にも活きる筈 === # デプロイ --------- * 全てシェルスクリプトでオペレーション出来る * 手作業を無くしてミスを無くす + 「あれ？設定書き換えたのに反映されてない」 → 「再起動忘れてた」とかを防ぐ * ☆秘伝☆のシェルテクニック満載！ * アプリケーションが1jarに収まるのでデプロイが楽。 === # 監視 ------ * mackerelで色々モニタリング * Linux, NginX, MySQL, JVM, レスポンスステータス * ほとんどMackerelに乗っかることで本質的でないことに労力を割かない + 本質 = 業務ロジックを理解すること * アプリケーションの死活監視にはsupervisord + 本当はsystemdでやりたかったけどUbuntuのバージョンが古かった === # 落穂拾い ---------- * DBへの書き込みは非同期。Clojureなら簡単に書ける + `(go .</description>
    </item>
    
    <item>
      <title>マクロについて整理してみる</title>
      <link>/blog/2015/07/04/makuronitsuiteseirishitemiru/</link>
      <pubDate>Sat, 04 Jul 2015 15:34:46 +0900</pubDate>
      
      <guid>/blog/2015/07/04/makuronitsuiteseirishitemiru/</guid>
      <description>&lt;p&gt;何故Lisperがマクロについて語るのか。Lisperと議論してみても満足のいく答を得た人はそんなにいないと思う。
それはLisper自身便利とは思っていても何が便利なのかを意識してなくて他人に上手く説明出来ないからじゃないかと思った。
ちょっと思いついた範囲でまとめてみる。

最近ではマクロシステムを持つ言語は珍しくない。Rust, Scala, Template Haskell, Mirahなどなど。最初にCommon Lispのマクロと他の言語のマクロとの違いを少し考えてみたい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>あなたの知らないShebang</title>
      <link>/blog/2015/06/26/anatanoshiranaishebang/</link>
      <pubDate>Fri, 26 Jun 2015 23:24:44 +0900</pubDate>
      
      <guid>/blog/2015/06/26/anatanoshiranaishebang/</guid>
      <description>&lt;p&gt;κeenです。最近は何故かBlack君って呼ばれます。Shebangの書き方にはいくつかあって、それを利用したふと面白い方法を思い付いたので共有を。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lisp処理系拡張の探求 SBCLのマルチスレッドサポート</title>
      <link>/slide/common_lispshorikeikakuchounotankyuu_sbclnomaruchisureddosapo_to/</link>
      <pubDate>Sat, 20 Jun 2015 18:30:52 +0900</pubDate>
      
      <guid>/slide/common_lispshorikeikakuchounotankyuu_sbclnomaruchisureddosapo_to/</guid>
      <description>### Common Lisp 処理系拡張の探求 SBCLのマルチスレッドサポート ---------------------- Lisp Meet Up #29 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # CLのマルチスレッド ---------------------------- ## [bordeaux-threads](https://trac.common-lisp.net/bordeaux-threads/wiki/ApiDocumentation) * 色々な処理系のマルチスレッドサポートの抽象レイヤー * デファクトスタンダード + スレッド + ロック + コンディションヴァリアル === # SBLCのマルチスレッド === # SBLCのマルチスレッド ---------------------------- * スレッド + スレッド内エラー * アトミック操作+ CAS* 排他制御（ロック） * セマフォ * コンディションヴァリアル * バリア * キュー* メールボックス* ゲート* frlock=== # アトミック操作 === # アトミック操作 ---------------- 複雑な動作は同じデータに並行に動かすと壊れうる ``` [var = 1] [incf] | [decf] [1][1] [2]---[var = 2] | | | [var = 0]+---+ go | | V V ``` === # frlock -------- * Fast Read Lock * またの名をRead-Write Lock * Read Lockは多重に取れる。Write Lockは1つしか取れない。 * 基本操作は`frlock-read`と`frlock-write` * 普通のlockと違って複数のReadが速くなる === # まとめ -------- * SBCLのマルチスレッドサポートはbordeaux-threadsよりもリッチ * 処理系の独自サポート面白い * 処理系に依存してしまってもいいんじゃないだろうか   </description>
    </item>
    
    <item>
      <title>ClojureでOpenCV 3.0と戯れる</title>
      <link>/blog/2015/06/07/clojuredeopencv3_0totawamureru/</link>
      <pubDate>Sun, 07 Jun 2015 16:56:51 +0900</pubDate>
      
      <guid>/blog/2015/06/07/clojuredeopencv3_0totawamureru/</guid>
      <description>&lt;p&gt;κeenです。先日OpenCV 3.0がリリースされましたね。
ちょっと触ってみようと思ったのですが公式バインディングがC++、C、Java、Pythonと中々つらい言語ばっかりなので扱いやすいClojureから触った時のメモです。&lt;/p&gt;

&lt;p&gt;2系とはAPIが変わってる部分もあるらしく、苦労しました。
UbuntuでやってるのでMacの人は適当に読み替えて下さい。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Transducerについて</title>
      <link>/slide/transducernitsuite/</link>
      <pubDate>Wed, 03 Jun 2015 22:29:50 +0900</pubDate>
      
      <guid>/slide/transducernitsuite/</guid>
      <description># Transducerについて ---------------------- サイバーエージェント 朝の3分スピーチ === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Transducerって？ ------------------ * Clojure 1.7で入るフレームワーク * 関数のパイプライン化を簡単にする * 入力、出力には依存しない === # Reduce関数について ------------------- * `reduce: (&#39;a - &#39;b - &#39;a) &#39;a - &#39;b list` * `(&#39;a - &#39;b - &#39;a)` でシーケンスを集約する * `(reduce + 0 &#39;(1 2 3)) ;= 6` * 要はreduceは関数を使って集約する。 === # Transducerについて ------------------- * `transduce:((&#39;a - &#39;b - &#39;a) - (&#39;a - &#39;b - &#39;a)) (&#39;a - &#39;b - &#39;a) &#39;a - &#39;b list` * 集約関数を変換する関数もとる * `(transduce xf + 0 &#39;(1 2 3))` * transducerで集約する前に処理を挟める === # すごいところ ------------------------- ## コンポーサビリティ * `((&#39;a - &#39;b - &#39;a) - (&#39;a - &#39;b - &#39;a))` * 変換関数は入力と出力が同じ。 * つまり変換関数を合成出来る * ex) `(comp (filter odd?</description>
    </item>
    
    <item>
      <title>Common Lispで限定継続と遊ぶ</title>
      <link>/slide/common_lispdegenteikeizokutoasobu_/</link>
      <pubDate>Sun, 26 Apr 2015 21:09:07 +0900</pubDate>
      
      <guid>/slide/common_lispdegenteikeizokutoasobu_/</guid>
      <description># Common Lispで限定継続と遊ぶ ---------------------- [Lisp Meet Up #27](https://atnd.org/events/64988) === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # Agenda -------- 0. cl-contの紹介 1. 限定継続の話 2. 限定継続の使い方の話 3. 限定継続の実装の話 === # CL-CONTの紹介 === # CL-CONT --------- * Common Lispの限定継続ライブラリ * 結構古くからあるっぽい * 割と色々なライブラリが使ってる === # CL-CONT --------- ![cl-cont dependers](/images/cl-cont-dependers.png) === # API ----- * 継続を区切るマクロ + `with-call/cc` + `defun/cc` + `lambda/cc` * 継続を取得するマクロ + `call/cc` + `let/cc` ※後で説明するので意味が分からなくても問題ないです。 === # 限定継続の話 === # 継続とは --------- * &#34;</description>
    </item>
    
    <item>
      <title>caveman2、ningle…Common LispのWeb周りのフレームワークを快適に使うためのたった1つのコト</title>
      <link>/slide/caveman2-ningle...common-lispnowebmawarinofure-muwa-kuwokaitekinitsukautatta1tsunokoto/</link>
      <pubDate>Thu, 05 Mar 2015 13:18:44 +0900</pubDate>
      
      <guid>/slide/caveman2-ningle...common-lispnowebmawarinofure-muwa-kuwokaitekinitsukautatta1tsunokoto/</guid>
      <description># caveman2、ningle、datafly…Common LispのWeb周りのフレームワークを快適に使うためのたった1つのコト ---------------------- Clack Meet Up #1 2015-03-05 @サムライト === ずっと俺のターン === # 問題 ------ Common Lispは case * Sensitive * Insensitive どっち? === # 問題 ------- あれ？ ```lisp (eql? &#39;CaseInsensitive &#39;caseinsensitive) ;= t ``` === # 問題 ------- リーダがデフォルトで大文字にするだけ ```lisp (eql? &#39;|CaseSensitive| &#39;|casesensitive|) ;= nil ``` === # Caveman2 --------- ```lisp @route GET &#34;/hello&#34; (defun say-hello (&amp;key (|name| &#34;Guest&#34;)) (format nil &#34;Hello, ~A&#34; |name|)) ``` === # Ningle -------- ```lisp (setf (ningle:route *app* &#34;</description>
    </item>
    
    <item>
      <title>Lispエイリアンの矢印作った</title>
      <link>/blog/2015/03/03/lispeiriannoyajirushitsukutta/</link>
      <pubDate>Tue, 03 Mar 2015 21:30:13 +0900</pubDate>
      
      <guid>/blog/2015/03/03/lispeiriannoyajirushitsukutta/</guid>
      <description></description>
    </item>
    
    <item>
      <title>既存のテンプレートエンジンの問題点と再設計</title>
      <link>/slide/kizonnotenpure-toenjinnomondaitentosaisekkeiaruihaarrowsnitsuite/</link>
      <pubDate>Mon, 02 Mar 2015 23:36:03 +0900</pubDate>
      
      <guid>/slide/kizonnotenpure-toenjinnomondaitentosaisekkeiaruihaarrowsnitsuite/</guid>
      <description>.red { color: red; }  # 既存のテンプレートエンジンの問題点と再設計、あるいはArrowsについて ----------------------------------------------------------------- Clack Meet Up #1 2015-03-05 @サムライト === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 野生のLisper + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます === # Template Engines === # Existing Architeture ---------------------- 0. (リクエスト) 1. アプリ 0. 引数を計算 1. テンプレートに引数を渡す 2. レスポンスをレンダリング 4. レスポンスをサーバに渡す 5. (レスポンス) === # Rendering? ---------------------- * 結合した文字列はクライアントに返ったらその後はゴミ + GCへ負荷がかかる (後述) * クライアントにとって1つの文字列である必要はない * むしろ返せる部分だけ先に返した方が得（後述） === # GC Pressure (SBCL) ----------------- * 世代別Copy GC * 結合した文字列は比較的大きい * `alloc_space`に入らない大きさならアロケートが遅い * GCを頻繁に起動してしまう * 16KBを越えると特別扱いされて遅い/メモリを喰う * LispのWebアプリはレスポンスタイムの分散が大きい（要出展） 参考: [SBCL GENCGC @ x86 Linux](http://cl-www.</description>
    </item>
    
    <item>
      <title>面接でLispを口にして落ちない企業、私気になります！</title>
      <link>/blog/2015/02/10/mensetsudelispwokuchinishiteochinaikigyouwatashikininarimasu/</link>
      <pubDate>Tue, 10 Feb 2015 08:01:35 +0000</pubDate>
      
      <guid>/blog/2015/02/10/mensetsudelispwokuchinishiteochinaikigyouwatashikininarimasu/</guid>
      <description>&lt;p&gt;κeenです。先日の記事がやたら拡散しました。その中で&lt;/p&gt;

&lt;p&gt;「面接でLispは口にしない方が良い。100%落ちる。」&lt;/p&gt;

&lt;p&gt;の一文がえらく気に入られたようです。Lispの風評被害を防ぐために1つアンケートにご協力下さい。

このスプレッドシートです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Common Lispのポータビリティとユニバーサリティ</title>
      <link>/blog/2015/01/22/common-lisp-portability-and-univesality/</link>
      <pubDate>Thu, 22 Jan 2015 07:51:02 +0000</pubDate>
      
      <guid>/blog/2015/01/22/common-lisp-portability-and-univesality/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://clfreaks.org/post/108341635899/1-cim-vs-roswell&#34;&gt;clfreaks&lt;/a&gt;の収録時に他のLisperと話してて価値観というか目標を共有出来てないなと思ったのでここで心情を語る次第。今のCommon Lispの使われ方には問題がある。

Common Lispにはポータビリティというかユニバーサリティというか、そういうものがない。いや、処理系の作者達はしっかり作ってるのだけどLisperがそういう使い方をしていない。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>picrinのcodegenプロセスを説明してみる</title>
      <link>/blog/2015/01/10/picrin-codegen-explanation/</link>
      <pubDate>Sat, 10 Jan 2015 09:40:51 +0000</pubDate>
      
      <guid>/blog/2015/01/10/picrin-codegen-explanation/</guid>
      <description>&lt;p&gt;今、picrinのcodegenプロセスに手を入れる機運が高まってます。picrinはバイトコードインタプリタなのでS式を渡されたらそれをバイトコードに変換する作業が必要です。それがcodegen。本当はcompileなんだけどpicrinのCのソースコードのコンパイルと紛らわしいからcodegen。私も完全にはプロセスを理解してないので説明して理解度を試しつつ問題点を洗い出します。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>実用Common Lispを読んだ</title>
      <link>/blog/2014/12/14/shi-yong-common-lispwodu-nda/</link>
      <pubDate>Sun, 14 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/12/14/shi-yong-common-lispwodu-nda/</guid>
      <description>&lt;p&gt;以前&lt;a href=&#34;/blog/2014/10/20/lisp-ja/&#34;&gt;Common Lispの勉強の手引の記事&lt;/a&gt;を書いたときに実用Common Lispの名を挙げたが読んだことはなかった。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>割と処理系ポータブルなCommon Lisp実行可能ファイルを作る</title>
      <link>/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru/</link>
      <pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru/</guid>
      <description>&lt;p&gt;κeenです。Lisp Advent Calendarはもう枠埋まっちゃったので普通にブログで。&lt;/p&gt;

&lt;p&gt;コマンドラインから実行可能なLispファイルをそれなりに多くの処理系で動くように作る話。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>H2Oにpicrinを溶かす</title>
      <link>/blog/2014/12/07/h2onipicrinworong-kasu/</link>
      <pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/12/07/h2onipicrinworong-kasu/</guid>
      <description>&lt;p&gt;このエントリーは&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2014/lisp&#34;&gt;Lisp Advent Calendar&lt;/a&gt; 7日目&lt;br /&gt;
兼&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/advent-calendar/2014/h2o&#34;&gt;H2O Advent Calendar&lt;/a&gt; 7日目&lt;br /&gt;
の記事です。&lt;/p&gt;

&lt;p&gt;κeenです。タイトルの通りです。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>claspがアップデートされたよ</title>
      <link>/blog/2014/12/06/claspgaatupudetosaretayo/</link>
      <pubDate>Sat, 06 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/12/06/claspgaatupudetosaretayo/</guid>
      <description>&lt;p&gt;このエントリーは&lt;a href=&#34;http://qiita.com/advent-calendar/2014/lisp&#34;&gt;Lisp Advent Calendar 2014&lt;/a&gt;6日目の記事です。&lt;br /&gt;
前: nobkzさんで &lt;a href=&#34;http://qiita.com/nobkz/items/2be2b6806237d8ea6e21&#34;&gt;lfe - (lisp (flavored (erlang)))について基本その1 - Qiita&lt;/a&gt;&lt;br /&gt;
後: 私で &lt;a href=&#34;/blog/2014/12/07/h2onipicrinworong-kasu/&#34;&gt;H2Oにpicrinを溶かす | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;κeenです。アドベントカレンダーめっちゃ書いてますね。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VOPで遊ぶ</title>
      <link>/blog/2014/12/02/vopdeyou-bu/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/12/02/vopdeyou-bu/</guid>
      <description>&lt;p&gt;(:meta&lt;br /&gt;
 ((:this &amp;ldquo;&lt;a href=&#34;http://qiita.com/advent-calendar/2014/lisp&#34;&gt;Lisp Advent Calendar 2014&lt;/a&gt;の3日目の記事&amp;rdquo;)&lt;br /&gt;
  (:prev (:author &amp;ldquo;tk_riple&amp;rdquo; :title &lt;a href=&#34;http://compassoftime.blogspot.jp/2014/12/r7rs.html&#34;&gt;&amp;ldquo;時の羅針盤＠blog: R7RSポータブルライブラリを書く際の落とし穴&amp;rdquo;&lt;/a&gt;))&lt;br /&gt;
  (:next (:author &amp;ldquo;nobkz&amp;rdquo; :tite &amp;ldquo;&lt;a href=&#34;http://qiita.com/nobkz/items/68ee2adbc13caf3eec6f&#34;&gt;Shenの基礎その1 基本的な型 - Qiita&lt;/a&gt;&amp;rdquo;))))&lt;/p&gt;

&lt;p&gt;κeenです。さっきまでVOPで遊んでたので当初の予定を変更してVOPの話をします。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>require, ASDF, quicklispを正しく使う</title>
      <link>/blog/2014/11/30/quicklisp/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/11/30/quicklisp/</guid>
      <description>&lt;p&gt;κeenです。最近のCommon Lispのパッケージ管理は&lt;code&gt;ql:quickload&lt;/code&gt;しか知らないという方も多いのではないでしょうか。しかしそれだけでは機能が足りないこともあります。Common Lispには様々な管理システムがあるので整理しましょう。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>lisp meet up #22でLTしてきた</title>
      <link>/blog/2014/11/28/lisp-meet-up-number-22deltsitekita/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/11/28/lisp-meet-up-number-22deltsitekita/</guid>
      <description>&lt;p&gt;κeenです。先日 Lisp Meet Up #22 でLTしてきたので報告です。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Semantic S式</title>
      <link>/slide/semantic-sshi/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>/slide/semantic-sshi/</guid>
      <description># Semantic S式 --- 2014-11-27 κeen(@blackenedgold) # About Me ---------- ![κeenのアイコン](/images/icon.png) + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます # Semantic Web とは # [Semantic Web](http://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%9E%E3%83%B3%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A6%E3%82%A7%E3%83%96) ---------------- * W3C のティム・バーナーズ＝リーが提唱 * 文章の見た目を記述するんじゃなくて構造を記述しよう * そうすると機械がクローリングするの楽になるよね # Semantic S式とは # Semantic S式 -------------- * Shibuya.lispのκeenが提唱 (昨日思い付いた) * S式の見た目じゃなくて構造で括弧をつけよう * そうするとコーディングが楽になるよね # 良いところ ------------ 1. 意味が分かり易い 2. パースし易い 3. 編集が楽になる 4. 壊れにくい # 1. 意味が分かり易い # 1. 意味が分かり易い -------------------- ## 例1 * Clojure ```clojure (let [a 1 b 2] .</description>
    </item>
    
    <item>
      <title>claspを少し触ってみた</title>
      <link>/slide/clasp/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>/slide/clasp/</guid>
      <description># claspを少し触ってみた ---------------------- Lisp Meet Up presented by Shibuya.lisp #21 2014-10-29 κeen(@blackenedgold) # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます # clasp ------- * Github: [drmeister/clasp](https://github.com/drmeister/clasp) * 2014-09-18に0.1リリース(現在0.11プレビューが出ている) * 今は0.11プレビューが出ている * ANSI Common Lisp準拠を目指す(現在80 ~90%) * ECLからのフォーク * LLVMベースのJIT([MCJIT](http://llvm.org/docs/MCJITDesignAndImplementation.html))搭載 * C++とLispで書かれている * C++との連携を意識 Note: C++との連携の部分を強調。今回は0.11プレビューでの話 # メモリ管理 ------------------ * Memory Pool Systemと Boehm GCから選べる * ビルドするときにどっちかを選ぶ # メモリ管理 ------------------ ## [Boehm GC](http://www.</description>
    </item>
    
    <item>
      <title>#関数型なんたら で喋ってきた</title>
      <link>/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita/</link>
      <pubDate>Sun, 26 Oct 2014 17:14:10 +0000</pubDate>
      
      <guid>/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita/</guid>
      <description></description>
    </item>
    
    <item>
      <title>C6H6&#43;HNO3</title>
      <link>/slide/c6h6-plus-hno3/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>/slide/c6h6-plus-hno3/</guid>
      <description># $\mathbf{C_6H_6+HNO_3}$ ------------------------ 関数型なんたらの集い  κeen(@blackenedgold) # picrinについて --------------- ![ピクリン酸の構造式](/images/picrin/picrin-structure.png) 化学式 $\mathbf{C_6H_3N_3O_7}$、示性式 $\mathbf{C_6H_2(OH)(NO_2)_3}$ で表される芳香族のニトロ化合物。 一般にはフェノールのニトロ化によって得られる。 Note: ニトロ化に硫酸を使うことを触れる。 ![picrinのロゴ](/images/picrin/picrin-logo-fin01-02.png) # About Me ---------- + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, ML, Shell Scriptあたりを書きます + [picrin](https://github.com/picrin-scheme/picrin)のコミッタです # picrinについて ---------------- * github: picrin-scheme/picrin * R7RS-small scheme 処理系 * 速い、軽い、高機能を目指す * 組み込み向けを意識 * 1年くらい開発 * κeenがコミットし始めてから半年弱 # picrinの プロジェクト構成 --------------------------- コア(benz)はC、ビルドツールはCMake。 ``` ├── contrib (nitros) ....... ├── docs ├── etc ├── extlib │ └── benz ├── piclib .</description>
    </item>
    
    <item>
      <title>Common Lispの勉強をするには、あるいは情報を得るには</title>
      <link>/blog/2014/10/20/lisp-ja/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/10/20/lisp-ja/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.8arrow.org/entry/2014/09/05/062028&#34;&gt;深町さんのブログ&lt;/a&gt;で日本語でCommon Lispの質問をする方法が載ってましたが質問じゃなくて単に情報を得たい、勉強をしたいという場合が書かれてなかったので勝手に補遺。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #20でLTしてきました</title>
      <link>/blog/2014/09/30/lisp-meet-up-number-20/</link>
      <pubDate>Tue, 30 Sep 2014 09:35:05 +0000</pubDate>
      
      <guid>/blog/2014/09/30/lisp-meet-up-number-20/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Picrinのチューニングの話、もといGCの話</title>
      <link>/slide/picrin-gc/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/slide/picrin-gc/</guid>
      <description># Picrinのチューニングの話、もといGCの話 --- Lisp Meet Up presented by Shibuya.lisp #20 2014-09-29 κeen(@blackenedgold) # 自己紹介 --- + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます + [picrin](https://github.com/picrin-scheme/picrin)のコミッタです # picrin --- ![picrin](/images/picrin/picrin-logo-fin01-02.png) # picrin --- * R7RS compatibility * bytecode interpreter (based on stack VM) * internal representation by nan-boxing * conservative call/cc implementation (users can freely interleave native stack with VM stack) * exact GC (simple mark and sweep, partially reference count is used as well) * string representation by rope data structure # picrin --- * R7RS compatibility * bytecode interpreter (based on stack VM) * internal representation by nan-boxing * conservative call/cc implementation (users can freely interleave native stack with VM stack) * exact GC (simple mark and sweep, partially reference count is used as well) * string representation by rope data structure # picrin開発者の不満 --- * picrinの起動が遅い+ 2秒くらいかかる * picrinのテストが遅い+ 16秒くらいかかる # 少しGCの話 --- GC(ごみ集め)とは * 使われていないオブジェクトを自動的に解法する + メモリ管理に煩わせられないで済む + メモリーリークを防ぐ。 * 「使われていないオブジェクト」を判定するのはいくつかアルゴリズムがある # GCのアルゴリズム --- ## 主なGCのアルゴリズム * マーク&amp;amp;スイープ * 参照カウント * Copying GC # GCのアルゴリズム --- ## マーク&amp;amp;スイープ 1.</description>
    </item>
    
    <item>
      <title>Shibuya.lisp Tech Talk #8を運営&amp;LTしてきました</title>
      <link>/blog/2014/09/16/lisp-tech-talk-8/</link>
      <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/09/16/lisp-tech-talk-8/</guid>
      <description>&lt;p&gt;κeenです。レポートに追われ試験があり合宿に行きで2週間以上空きましたが8/30にShibuya.lisp TT #8の運営をしつつLT枠での参加もしてきたので報告です。何かそこそこ大きなイベントの運営をされる方の参考になれば。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introduction to CIM</title>
      <link>/slide/introduction-to-cim/</link>
      <pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/slide/introduction-to-cim/</guid>
      <description># Introduction to CIM κeen(@blackenedgold) ## 突然ですが Common Lispのスクリプトファイルの実行方法知ってますか？ sbcl sbcl --script $file ecl ecl -shell $file ccl ccl -e $file -e &#39;(quit)&#39; ... シバン可搬性のあるスクリプトが書けない ## そこで、こんなの書きました ```sh case &#34;$LISP_IMPL&#34; in sbcl*) sbcl --script $1 ;; clisp*) clisp -on-error exit -i $1 ;; ecl*) ecl -shell $1 ;; ccl*) ... ``` ## でも問題がある * どの処理系をバックエンドに使うか * 処理系のパスをどう捜すか * そもそもどうやって使ってもらうか ## κeenの答え  処理系の管理までやってしまおう。  そうしたら一緒に使ってもらえる。 ＿人人人人人人＿ ＞　CIMの誕生　＜ ￣Y^Y^Y^Y^Y￣ ## CIMとは * Common Lisp Implementation Manager * ちむ * Rubyのrvmを強く意識 * Common Lisp処理系のインストール、切り替え、コマンドラインインターフェースなど。 * `cim`、 `cl`、 `ql`コマンドから成る * B Shell スクリプト製(マルチプラットフォーム対応のため) * 2013/10くらいからぼちぼち開発 ## `cim`コマンドについて インストール cim install sbcl バックエンドの切り替え cim use sbcl 現在情報 cim info CIMのアップデート cim get など。 ## `cl`コマンドについて * 最初に紹介したシェルスクリプトベース * コマンドラインからCommon Lispを使うことを重視 * シバン対応も。 * REPLは独自実装(デバッガを黙らせるのが主な目的) * オプションはrubyを意識 ## 少しシバンの話 ### だめな例 ```lisp #!</description>
    </item>
    
    <item>
      <title>授業で半年間moclを使ってみた</title>
      <link>/slide/shibuya-dot-lisp-tt-number-8/</link>
      <pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/slide/shibuya-dot-lisp-tt-number-8/</guid>
      <description># 授業で半年間moclを使ってみた Shibuya.lisp TT #8 κeen(@blackenedgold) ## 自己紹介 + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます 一年前 ## [計算数学II](http://ks.ms.u-tokyo.ac.jp/) ![計算数学IIのホームページ](/images/shibuya_lisp_TT8/calculation_math.png) 自分でテーマを決めて半年間取り組む チーム[人造エイリアン](https://sites.google.com/site/2013ks2/home) ![チーム人造エイリアン](/images/shibuya_lisp_TT8/android_alien.png) ## Common Lisp でAndroid? ## [mocl](https://wukix.com/mocl) ![mocl home](/images/shibuya_lisp_TT8/mocl.png) ## What is mocl * iOS, Androidで動くCommon Lisp処理系 * LLVMをバックエンドに使う * Networking, Unicode, CLOS, and More. Run Countless CL Libraries. ## 買ってもらった(・ω・)v ![mocl home](/images/shibuya_lisp_TT8/mocl_ut.png) ## 注意 私が触ったのは1つ前のバージョンです。 一部5月のアップデートで改善されています。 ## How it Works ## コードサンプル 授業で私が作ったオセロのAIのコード ```java public BoardCanvas(Context context,int width, int height,int color ){ .</description>
    </item>
    
    <item>
      <title>Common LispでSIGINTを捉える</title>
      <link>/blog/2014/08/27/sigint-in-common-lisp/</link>
      <pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/08/27/sigint-in-common-lisp/</guid>
      <description>&lt;p&gt;κeenです。もうすぐShibuya.lisp TT #8 ですね。今回はCIMのREPLの改善をしてたらSIGINTを補足しようとして詰まったので共有します。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloud9の紹介とLispのセットアップ</title>
      <link>/blog/2014/08/02/introduction-to-cloud9/</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/08/02/introduction-to-cloud9/</guid>
      <description>&lt;p&gt;κeenです。先日のLisp Meet Upで紹介した&lt;a href=&#34;https://c9.io&#34;&gt;Cloud9&lt;/a&gt;の詳解でも書きます。まあ、そんなに詳しくないんですけどね。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #19でLTしてきました</title>
      <link>/blog/2014/07/30/lisp-meet-up-number-19/</link>
      <pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/07/30/lisp-meet-up-number-19/</guid>
      <description>&lt;p&gt;κeenです毎月恒例の&lt;a href=&#34;https://atnd.org/events/53246&#34;&gt;Lisp Meet Up presented by Shibuya.lisp&lt;/a&gt;でLTしてきたのでレポートです。

今回は募集20に対して参加登録20、参加18、LT4本と集りの良い会でした。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloud 9の紹介</title>
      <link>/slide/cloud-9/</link>
      <pubDate>Tue, 29 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/slide/cloud-9/</guid>
      <description># Cloud 9の紹介 Lisp Meet Up #19 presented by Shibuya.lisp κeen(@blackenedgold) ## 自己紹介 + κeen + 東大数学科の4年生 + ソーシャルアカウントは上のアイコン達から。 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます ## Lispがあまり使われない原因  認知度が低い 開発環境構築の難易度高い  ## Cloud 9について + WEBベースのIDEサービス + 40以上の言語に対応（らしい） + この間正式リリース + 1アカウント毎に1Docker環境与えられる + IDEはオープンソース + よく分かってない ## こんなん ## デモ ## 良いところ + 難易度低い + Lisp環境動く + Githubとの連携 + どこからでも同じ環境にアクセス + キーバインドはうれしい各宗教対応の {Mac, Windows}x{Default, Emacs, Vim, Sublime} ## 微妙なところ + シンタックスハイライト微妙 （せめてキーワード引数はどうにか） + 補完微妙 + インデント微妙 + swank使いたい 以上 何か質問あればどうぞ   </description>
    </item>
    
    <item>
      <title>(S式で書く(altJS)達)</title>
      <link>/slide/sshi-deshu-kualtjs/</link>
      <pubDate>Sun, 13 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/slide/sshi-deshu-kualtjs/</guid>
      <description># (S式で書く(altJS)達) κeen(@blackenedgold) 天下一altJS武闘会(#tenka1altJS) @渋谷プライムプラザ四階 ## 自己紹介 + κeen + 東大数学科の4年生 + Twit : @blackenedgold + Github : KeenS + Blog : [κeenのHappy Hacκing Blog](http://KeenS.github.io/) + Shibuya.lispにいます。(2014-06〜運営になりました) + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます ## お品書き - (ボツ) Shen.js - (ボツ) Embedable Common Lisp with Emscripten - (ボツ) Picrin with Emscripten - (ボツ) オレオレaltJSの作り方の話 - ParenScript ## Shen.js Shenの公式ページより + パターンマッチ + λ計算ベース + マクロ + 遅延評価も可能 + 静的型検査 + 関数的なPrologの統合 + ビルトインコンパイラコンパイラ これのJS実装もある。 ## 例 ```lisp (define factorial 0 - 1 X - (* X (factorial (- X 1)))) ``` そもそもaltJSじゃない… ボツ ## ECL with Emscripten + ANSI Common Lisp準拠のCommon Lisp処理系 + LispをコンパイルしてCを吐く + Emscriptenでコンパイルすれば… `#include ` が悪さをしてコンパイル出来ない ボツ ## picrin + R7RS small準拠を目指すScheme処理系 + R7RS準拠の中では唯一Emscriptenで コンパイル出来るらしい + SDLもEmscriptenで動くらしいから 組み合わせればウハウハじゃね？ コンパイル出来ない… ( `va_args` は64bit x Clang3.</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #16 でLTしてきました。</title>
      <link>/blog/2014/04/25/lisp-meet-up-number-16/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/04/25/lisp-meet-up-number-16/</guid>
      <description>&lt;p&gt;κeenです。年度末/年度始めで色々あり、しばらく更新できてませんでしたが &lt;a href=&#34;http://atnd.org/events/49370&#34;&gt;Lisp Meet Up Presented by Shibuya.lisp #16&lt;/a&gt;に参加してきたのでレポートです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #14でLTしてきました</title>
      <link>/blog/2014/02/27/lisp-meet-up-number-14/</link>
      <pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/02/27/lisp-meet-up-number-14/</guid>
      <description>&lt;p&gt;どうも、κeenです。Rubyをアップグレードしようとしたら&lt;code&gt;rvm&lt;/code&gt;が動かなくて、あれ？ってなったら私が&lt;code&gt;echo -&amp;gt; echo&lt;/code&gt;とかいう謎のsymlinkを作ってたせいでした。このブログはOctopressで作ってるのでその間更新遅れました。&lt;/p&gt;

&lt;p&gt;さて、毎月恒例 &lt;a href=&#34;http://atnd.org/events/47730&#34;&gt;Lisp Meet Up Presented by Shibuya.lisp #14&lt;/a&gt;でLTしてきたので報告です。今回は「Real World OCamlを読んだ感想」というタイトルです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CIMの解説をしてみる コマンド編</title>
      <link>/blog/2014/01/27/cim-explanation/</link>
      <pubDate>Mon, 27 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/01/27/cim-explanation/</guid>
      <description>&lt;p&gt;先日LTで紹介したCIMが思いの外反響を呼んでる(Githubのstarが15)ので解説でもしてみます。&lt;/p&gt;

&lt;p&gt;コマンド編の次は実装編です。これでバグにエンカウントしたときの調査とか完璧ですね。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lisp Meet Up #13でLTしてきました</title>
      <link>/blog/2014/01/24/lisp-meet-up-number-13/</link>
      <pubDate>Fri, 24 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/01/24/lisp-meet-up-number-13/</guid>
      <description>&lt;p&gt;もう12時回ったので昨日になってしまいましたが &lt;a href=&#34;http://atnd.org/events/46746#comments&#34;&gt;Lisp Meet Up presented by Shibya.lisp #13&lt;/a&gt;に参加してLTしてきたので報告(?)エントリです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>.emacsの整理をした話 &#43; EmacsとViとShellとLispを悪魔合体させたら超絶便利だった</title>
      <link>/blog/2013/12/13/dot-emacs-clean-up/</link>
      <pubDate>Fri, 13 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/12/13/dot-emacs-clean-up/</guid>
      <description>&lt;p&gt;やや長いタイトルですが・・・年末になって大掃除がやってきましたね。みなさんもそろそろ.emacsの大掃除をしましょう。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ClackのHandlerの書き方</title>
      <link>/blog/2013/12/06/lisp-advent-calendar-7/</link>
      <pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/12/06/lisp-advent-calendar-7/</guid>
      <description>&lt;p&gt;(この記事は &lt;a href=&#34;http://qiita.com/advent-calendar/2013/lisp&#34;&gt;Lisp Advent Calendar&lt;/a&gt; 7日目のためのエントリです。&lt;br /&gt;
 ( &lt;a href=&#34;http://meymao.hatenablog.com/entry/2013/12/06/140029&#34;&gt;6日目&lt;/a&gt; meymaoさんより「Lisperがクリスマスに贈るべきプレゼント三選」)&lt;br /&gt;
 ( &lt;a href=&#34;http://www.principia-m.com/ts/0081/index-jp.html&#34;&gt;8日目&lt;/a&gt; athos0220さんよりマクロとクロージャで作る並行プログラミング言語))&lt;/p&gt;

&lt;p&gt;ClackのHandlerの書き方についてちゃちゃっと解説します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacsのdired-modeを使い易くする</title>
      <link>/blog/2013/10/04/emacs-dired/</link>
      <pubDate>Fri, 04 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/10/04/emacs-dired/</guid>
      <description>&lt;p&gt;Emacsの標準ライブラリ&lt;code&gt;dired.el&lt;/code&gt;を読んでたら色々発見があったのでメモ兼dired-modeとはなんじゃらほいって方にも一から解説してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Shellyを使ってCommon LispファイルをExecutableにする</title>
      <link>/blog/2013/09/26/shelly-script/</link>
      <pubDate>Thu, 26 Sep 2013 21:25:00 +0000</pubDate>
      
      <guid>/blog/2013/09/26/shelly-script/</guid>
      <description>&lt;p&gt;コマンドラインからCommon Lispの関数を実行できる &lt;a href=&#34;https://github.com/fukamachi/shelly&#34;&gt;Shelly&lt;/a&gt;を使ってCommon Lispファイルを実行形式にしてみました。Shellyは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ shly + 1 2
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいに関数を実行できます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Common Lispスタイルガイド</title>
      <link>/blog/2013/09/21/google-commonlisp-style-guide/</link>
      <pubDate>Sat, 21 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/09/21/google-commonlisp-style-guide/</guid>
      <description>&lt;p&gt;この度、 &lt;a href=&#34;http://google-styleguide.googlecode.com/svn/trunk/lispguide.xml&#34;&gt;Google Common Lispスタイルガイド&lt;/a&gt;が &lt;a href=&#34;http://google-common-lisp-style-guide-ja.cddddr.org/&#34;&gt;日本語に&lt;/a&gt;なりました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>