<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AdTech on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/adtech/</link>
    <description>Recent content in AdTech on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 22 Feb 2016 20:19:11 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/adtech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ClojureでSSPを作った話</title>
      <link>//KeenS.github.io/slide/clojuredesspwotsukuttahanashi/</link>
      <pubDate>Mon, 22 Feb 2016 20:19:11 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/clojuredesspwotsukuttahanashi/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS サイバーエージェントのエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
SSPとは  ※今回作ったものの話なので実際は少し違う
 Supplier Side Platform メディアからの広告リクエストを受けて表示権をオークションに掛け、落札された広告を表示する 0. 広告リクエストを受け取って  各DSPに競りの通知を投げて 入札を受け取って 落札者と落札価格を決めて 落札通知を出す    ===
アドテクコンペ   ビジネスモデルもエンジニアリングも学べるアドテクスタジオの育成プログラムとは | 株式会社サイバーエージェント サイバーエージェントの学生向けインターン 3日間、3、4人のチームで DSP を作る 学生は7チーム、1チームあたり2000q/sを捌くことになってる 学生のDSPを繋ぐための SSP が必要になったので作ることに。  ===
===
作るもの   各DSPに競りの通知(HTTPリクエスト)を投げる大規模HTTPクライアント  各DSPが2000q/s x 7チーム + 落札通知 = 16000q/s 丁度2000q/sになるような制御も必要   入札を受けてのオークション、結果のロギングなど 管理画面  ===</description>
    </item>
    
    <item>
      <title>ClojureでDSPを作った話</title>
      <link>//KeenS.github.io/slide/clojurededspwotsukuttahanashi/</link>
      <pubDate>Tue, 27 Oct 2015 21:04:20 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/clojurededspwotsukuttahanashi/</guid>
      <description>κeen @blackenedgold Github: KeenS サイバーエージェントのエンジニア Lisp, ML, Shell Scriptあたりを書きます  ===
DSPとは   Demand Side Platform 広告主から広告を集めて広告の表示権を競り落し、適切な広告を出す 0. 広告主を集めて  競りの通知を受け取って 一番コスパが良さそうな広告を選んで 入札して 落札通知を受け取る 落札したら広告を出す    ===
ひとりDSP   AdTech Studioの新卒研修 2ヶ月間、業務時間の20%を使ってDSPを作る  実質8営業日   業務ロジックを理解することが目的 最後に新卒の作ったDSP同士で競争、利益が得点になる 他には最終発表での得点も 研修なので好きにやっていい  Clojureで書くことに   サーバーの他は広告主データと学習用データが与えられる  ===
===
作るもの   競りの通知を受け取って入札するJSON REST API 落札の通知を受け取るJSON REST API  割とシンプル   「一番コスパが良さそうな広告を選ぶ」部分は色々と工夫する 今回は広告を出すところまではやらない クリック情報は落札通知に入ってる  ===</description>
    </item>
    
    <item>
      <title>Internal of b11d</title>
      <link>//KeenS.github.io/slide/internal_of_b11d/</link>
      <pubDate>Mon, 19 Oct 2015 21:33:00 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/internal_of_b11d/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS AMoAdのサーバーサイド（？）エンジニア 趣味でLisp, ML, Shell Scriptあたりを書きます 仕事でScalaとShell Scriptあたりを書きます  ===
今回作ったもの   b11d (ぶらっくんどごーるど) Clojure (compojure + middleware)製    NginX + MySQL + Supervisord     出来る限りシンプルになるように作った  310行   デプロイその他はシェルスクリプト 監視はmackerel  ===
シンプルということ   アプリケーションは状態を持たない IO以外副作用を持たない つまり、キャッシュを持たない  キャッシュはパフォーマンス上の意味しかない 早過ぎる最適化は諸悪の根源   スケールアウトが容易 compojureのミドルウェアを上手く使った  ===
シンプルということ2   データベースはだいたい第4正規形（ﾀﾌﾞﾝ）  全てのカラムはNOT NULL 広告主の所だけ拡張性を持たせるために第1正規形に落とした 1広告主に対して複数の広告が持てるようになる   外部キー制約も全部付ける データが綺麗なのでアプリケーション側でのやることが少ない 分析する時にも活きる筈  ===</description>
    </item>
    
  </channel>
</rss>