<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: デザインスタイル | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/categories/dezainsutairu/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-12-19T15:28:27+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Semantic S式]]></title>
    <link href="http://KeenS.github.io/slide/semantic-sshi.html"/>
    <updated>2014-11-27T15:30:00+09:00</updated>
    <id>http://KeenS.github.io/slide/semantic-sshi.markdown</id>
    <content type="html"><![CDATA[<h1>Semantic S式</h1>

<hr />

<p>2014-11-27<br/>
κeen(@blackenedgold)</p>

<h1>About Me</h1>

<hr />

<p><img src="/images/icon.png" alt="κeenのアイコン" /></p>

<ul>
<li>κeen</li>
<li>東大数学科の4年生</li>
<li>ソーシャルアカウントは上のアイコン達から。</li>
<li>Lisp, Ruby, OCaml, Shell Scriptあたりを書きます</li>
</ul>


<h1>Semantic Web とは</h1>

<h1><a href="http://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%9E%E3%83%B3%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A6%E3%82%A7%E3%83%96">Semantic Web</a></h1>

<hr />

<ul>
<li>W3C のティム・バーナーズ＝リーが提唱</li>
<li>文章の見た目を記述するんじゃなくて構造を記述しよう</li>
<li>そうすると機械がクローリングするの楽になるよね</li>
</ul>


<h1>Semantic S式とは</h1>

<h1>Semantic S式</h1>

<hr />

<ul>
<li>Shibuya.lispのκeenが提唱 (昨日思い付いた)</li>
<li>S式の見た目じゃなくて構造で括弧をつけよう</li>
<li>そうするとコーディングが楽になるよね</li>
</ul>


<h1>良いところ</h1>

<hr />

<ol>
<li>意味が分かり易い</li>
<li>パースし易い</li>
<li>編集が楽になる</li>
<li>壊れにくい</li>
</ol>


<h1>1. 意味が分かり易い</h1>

<h1>1. 意味が分かり易い</h1>

<hr />

<h2>例1</h2>

<ul>
<li><p>Clojure
<code>clojure
(let [a 1
      b 2]
  ...)
</code></p></li>
<li><p>Common Lisp
<code>lisp
(let ((a 1)
      (b 2))
  ....)
</code>
どっちが分かり易い？</p></li>
</ul>


<h1>1. 意味が分かり易い</h1>

<hr />

<h2>例1</h2>

<p>（日本語にしてみる（イメージ））</p>

<ul>
<li>Clojure<br/>
aを1bを2とする</li>
<li>Common Lisp
<table border="1"><tr><td><code>a</code></td><td>1</td></tr><tr><td><code>b</code></td><td>2</td></tr></table>
とする</li>
</ul>


<h1>1. 意味が分かり易い</h1>

<hr />

<h2>例2</h2>

<p>何をしてる？</p>

<p>```lisp
(destructuring-bind (a b)</p>

<pre><code>(some-function)
</code></pre>

<p>  &hellip;)
```</p>

<h1>1. 意味が分かり易い</h1>

<hr />

<h2>例2</h2>

<p>何をしてる？</p>

<p>```lisp
(destructuring-bind ((a b)</p>

<pre><code>(some-function))
</code></pre>

<p>  &hellip;)
```</p>

<h1>1. 意味が分かり易い</h1>

<hr />

<h2>例3</h2>

<p>これの返り値は？
<code>lisp
(getf '(:hoge :foo :huga :baz :piyo :pon :chun) :pon)
</code></p>

<h1>1. 意味が分かり易い</h1>

<hr />

<h2>例3</h2>

<p>これの返り値は？
<code>lisp
(assoc :pon '((:hoge :foo) (:huga :baz) (:piyo :pon) (:chun)))
</code></p>

<h1>2. パースし易い</h1>

<h1>2. パースし易い</h1>

<hr />

<h2>例</h2>

<ul>
<li><p>Clojure
<code>clojure
(let [a 1
      b 2]
  ...)
</code></p></li>
<li><p>Common Lisp
<code>lisp
(let ((a 1)
      (b 2))
  ....)
</code>
どっちが実装し易い？</p></li>
</ul>


<h1>2. パースし易い</h1>

<hr />

<ul>
<li>Common Lispの方は意味で分割してある</li>
<li>括弧は無くてもパースは出来る</li>
<li>機械にパースし易い≒人間にパースし易い</li>
</ul>


<h1>3. 編集が楽になる</h1>

<h1>3. 編集が楽になる</h1>

<hr />

<h2>前提</h2>

<ul>
<li>エディタに文/式/トークン(Lispの場合は全てS式)単位の編集機能がある

<ul>
<li>S式単位でカーソル移動</li>
<li>S式単位の削除/カット</li>
<li>S式単位のスワップ</li>
<li>etc&hellip;.</li>
</ul>
</li>
</ul>


<h1>3. 編集が楽になる</h1>

<hr />

<h2>例（偶によくある）</h2>

<p>この<code>c</code>の束縛を上のletに持っていきたいときどうする？</p>

<p>```lisp
(let ((a 1)</p>

<pre><code>  (b 2))
</code></pre>

<p>  &hellip;.
  (let ((c 3)</p>

<pre><code>    (d 4))
...))
</code></pre>

<p>```</p>

<h1>3. 編集が楽になる</h1>

<hr />

<h2>例（偶によくある）</h2>

<ul>
<li>意味で括弧をつけていれば1カット移動1ペースト</li>
<li>Clojure方式だと2カット移動1ペースト</li>
<li><code>c</code>だけじゃなくて<code>d</code>も、と考えると…</li>
</ul>


<h1>4. 壊れにくい</h1>

<h1>4. 壊れにくい</h1>

<hr />

<h2>例</h2>

<p>ageの計算が壊れているとする</p>

<p><code>lisp
(:name "κeen"
 :age  (year-of-time-interval (date- (today) (date 1992 5 17)))
 :place "Shibuya")
</code></p>

<h1>4. 壊れにくい</h1>

<hr />

<h2>例</h2>

<p>コメントアウトしてみる（壊れた）</p>

<p><code>lisp
(:name "κeen"
 :age  ;(year-of-time-interval (date- (today) (date 1992 5 17)))
 :place "Shibuya")
</code></p>

<h1>4. 壊れにくい</h1>

<hr />

<h2>例</h2>

<p>ageの計算が壊れているとする</p>

<p><code>lisp
((:name "κeen")
 (:age  (year-of-time-interval (date- (today) (date 1992 5 17))))
 (:place "Shibuya"))
</code></p>

<h1>4. 壊れにくい</h1>

<hr />

<h2>例</h2>

<p>(エディタサポートあり)</p>

<p>コメントアウトしてみる（壊れない）</p>

<p><code>lisp
((:name "κeen")
 (:age  ;(year-of-time-interval (date- (today) (date 1992 5 17)))
 )
 (:place "Shibuya"))
</code></p>

<h1>ここまでのまとめ</h1>

<hr />

<ul>
<li>構造が文脈に依存していると

<ul>
<li>人間に分りづらい</li>
<li>プログラムに分りづらい</li>
<li>エディタに分りづらい</li>
<li>壊れやすい</li>
</ul>
</li>
</ul>


<h1>Q. When Semantic?</h1>

<hr />

<h2>A. 言語を設計するとき <!-- .element: class="fragment" data-fragment-index="1" --></h2>

<ul>
<li>つまりマクロを書くとき <!-- .element: class="fragment" data-fragment-index="2" --></li>
</ul>


<h1>Q. When Semantic?</h1>

<hr />

<h2>A. 言語を設計するとき</h2>

<ul>
<li>マクロを書くときそれなりのDSLを設計する</li>
<li>プログラム上は必須ではない括弧もあった方が良いときもある</li>
</ul>


<h1>まとめ</h1>

<hr />

<ul>
<li>括弧が少ない方が書き易いとは限らない

<ul>
<li>「書く」だけなら速くてもwrite onlyになってしまうかも<!-- .element: class="fragment" data-fragment-index="1" --></li>
</ul>
</li>
<li>プログラムの意味を考えながら括弧つけよう

<ul>
<li>Lisperはどうせ括弧は見えない<!-- .element: class="fragment" data-fragment-index="2" --></li>
</ul>
</li>
</ul>


<p><span style="font-size:600%">以上</span><br/>
何か質問あればどうぞ</p>
]]></content>
  </entry>
  
</feed>
