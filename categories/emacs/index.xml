<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/emacs/</link>
    <description>Recent content in Emacs on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 23 Apr 2015 23:01:17 +0900</lastBuildDate>
    <atom:link href="//KeenS.github.io/categories/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SMLSharpを使ってSMLのon-the-flyエラーチェック</title>
      <link>//keens.github.io/blog/2015/04/23/smlsharpwotsukattesmlnoon-the-flyerrorchekkingu</link>
      <pubDate>Thu, 23 Apr 2015 23:01:17 +0900</pubDate>
      
      <guid>//keens.github.io/blog/2015/04/23/smlsharpwotsukattesmlnoon-the-flyerrorchekkingu</guid>
      <description>

&lt;p&gt;κeenです。最近SMLを結構書いてるのですが中置演算子が乱立する言語はLisperにはつらくて、しょっちゅうコンパイルエラーを出します。
そこでSML#をflymakeで動かしてOn The Flyにエラーチェックをします。&lt;/p&gt;

&lt;p&gt;なぜSML#かというと &lt;code&gt;-ftypecheck-only&lt;/code&gt; オプションがあって、シンタックスと型エラーのチェックだけを行なえるからです。&lt;/p&gt;

&lt;p&gt;色々試したのですが設定はこれだけで済みました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;(eval-after-load &#39;flymake
  &#39;(progn 
    (add-to-list &#39;flymake-allowed-file-name-masks &#39;(&amp;quot;.+\\.sml$&amp;quot;
                                                    (lambda ()
                                                      (list &amp;quot;/usr/local/bin/smlsharp&amp;quot; (list &amp;quot;-ftypecheck-only&amp;quot; (buffer-file-name))))
                                                    (lambda () nil)))
    (add-to-list &#39;flymake-err-line-patterns &#39;(&amp;quot;^\\([^: ]*\\):\\([0-9]+\\)\\.\\([0-9]+\\)-[0-9]+\\.[0-9]+ \\(Error\\|Warning\\):&amp;quot;
                                              1 2 3 4))))
(add-hook &#39;sml-mode-hook #&#39;flymake-mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;quot;/usr/local/bin/smlsharp&amp;quot;&lt;/code&gt; のところは各自書き換えて下さい。尚、SML#はエラーメッセージを複数行に跨って出すのですがそれがflymakeと相性が悪いのでエラーメッセージの取得は諦めました。&lt;/p&gt;

&lt;p&gt;多くの場合、 &lt;code&gt;flymake-simple&lt;/code&gt; という枠組みの中で設定を書くのですがテンポラリファイルを作る構造がどうしてもインターフェースファイルと相性が悪かったので生のflymakeを使ってます。
というかflymakeは元々 &lt;code&gt;-ftypecheck-only&lt;/code&gt; みたいなのを前提に作られてたのに実際にコンパイル走らせないとエラーメッセージ取得出来ない言語が多過ぎてフレームワークが出来たのでこれが本来の使い方です。&lt;/p&gt;

&lt;h1 id=&#34;おまけ:311ce9d5e51e732b1928a84bcceb27a3&#34;&gt;おまけ&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nrnrnr/SML-Lint&#34;&gt;SML-Lint&lt;/a&gt;というものがあって、スタイルワーニングを出してくれます。ただ、これはパッチを当てないと使えなかったりスタイルワーニングのみしか出さなかったりするので気が向いた時に紹介します&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacs便利機能/Tips紹介</title>
      <link>//keens.github.io/blog/2014/08/13/emacs-utility-functions</link>
      <pubDate>Wed, 13 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//keens.github.io/blog/2014/08/13/emacs-utility-functions</guid>
      <description>

&lt;p&gt;κeenです。このブログのアクセスログを見てるとEmacsの記事が好評なようなのでここは一つ私の知ってる便利機能を全列挙してみますね。&lt;/p&gt;

&lt;p&gt;どの辺から常識でどの辺からTipsかは私の主観です。だいたいるびきちさんの本に載ってるのは常識扱いです。&lt;/p&gt;

&lt;p&gt;※&lt;code&gt;-!-&lt;/code&gt;でカーソル位置、&lt;code&gt;-¡-&lt;/code&gt;でマーク位置を表すものとします。&lt;br /&gt;
※私はEmacsのtrunkをビルドして使ってるので最新のリリース版のEmacsにも含まれない機能もあるかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;改行-インデント系:cdb428e5d1719accfec2711378c8d313&#34;&gt;改行/インデント系&lt;/h1&gt;

&lt;h2 id=&#34;c-m-ret-c-j-c-o:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-m&lt;/code&gt; &lt;code&gt;RET&lt;/code&gt; &lt;code&gt;C-j&lt;/code&gt; &lt;code&gt;C-o&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;最初の頃は混乱してました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;key&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;lisp function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C-m = RET&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;newline&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C-j&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;newline-and-indent&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;C-o&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;open-line&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;です。&lt;code&gt;C-m&lt;/code&gt;と&lt;code&gt;C-o&lt;/code&gt;の違いはカーソルが現在行に残るか残らないかです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aaa-!-aaa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;↓ &lt;code&gt;C-m&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aaa
-!-aaa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ですが、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aaa-!-aaa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;↓ &lt;code&gt;C-o&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aaa-!-
aaa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C-o&lt;/code&gt;の改行後にインデントする版を捜したのですが&lt;code&gt;C-M-o (split-line)&lt;/code&gt;という近いコマンドはあるもののまさにというのはありませんでした。&lt;/p&gt;

&lt;p&gt;※trunkではデフォルトで&lt;code&gt;electric-indent-mode&lt;/code&gt;がonになってるので&lt;code&gt;C-m/RET&lt;/code&gt;と&lt;code&gt;C-j&lt;/code&gt;が入れ替わります。&lt;br /&gt;
※現在行と改行した先の行両方をインデントする&lt;code&gt;indent-then-newline-and-indent&lt;/code&gt;という関数もあります。&lt;/p&gt;

&lt;h2 id=&#34;m-delete-indentation:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;M-^&lt;/code&gt;(&lt;code&gt;delete-indentation&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;直感的には&lt;code&gt;newline-and-indent&lt;/code&gt;の逆関数です。今の行を上の行にくっつけます。そのとき邪魔になるインデントは取り除いてくれます。&lt;code&gt;M-- M-^&lt;/code&gt;とすると下の行を今の行にくっつけてくれます。&lt;/p&gt;

&lt;h2 id=&#34;c-m-j-indent-new-comment-line:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-M-j&lt;/code&gt;(&lt;code&gt;indent-new-comment-line&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;コメント内で使う&lt;code&gt;C-j&lt;/code&gt;です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;; This is a comment-!-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;↓ &lt;code&gt;C-M-j&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;;;; This is a comment
;;; -!-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;h2 id=&#34;m-m-back-to-indentation:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;M-m&lt;/code&gt;(&lt;code&gt;back-to-indentation&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;現在行の空白文字でない最初の文字に移動します。viでいう&lt;code&gt;^&lt;/code&gt;です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    aaa-!-bbb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;↓&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    -!-aaabbb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;h2 id=&#34;electric-indent-mode:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;electric-indent-mode&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;さっきちらっと触れました。&lt;code&gt;C-m&lt;/code&gt;が&lt;code&gt;newline-and-indent&lt;/code&gt;になって&lt;code&gt;C-j&lt;/code&gt;が&lt;code&gt;newline&lt;/code&gt;になるモードです。&lt;/p&gt;

&lt;h1 id=&#34;削除-kill-ring系:cdb428e5d1719accfec2711378c8d313&#34;&gt;削除/kill-ring系&lt;/h1&gt;

&lt;h2 id=&#34;c-s-backspace-kill-whole-line:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;&amp;lt;C-S-backspace&amp;gt;&lt;/code&gt;(&lt;code&gt;kill-whole-line&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;おなじみ &lt;code&gt;C-k&lt;/code&gt;(&lt;code&gt;kill-line&lt;/code&gt;)は現在位置から行末までを削除しますが、それだとぬるいといって&lt;code&gt;C-k&lt;/code&gt;で現在行をまるごと削除する設定(&lt;code&gt;(setq kill-whole-line t)&lt;/code&gt;)してる人もいますが、実は&lt;code&gt;&amp;lt;C-S-backspace&amp;gt;&lt;/code&gt;で可能なのでした。鍛えられた左手の小指の先と腹でCaps LockとShiftを同時押しすれば難易度もそんなに高くない！&lt;/p&gt;

&lt;h2 id=&#34;c-m-w-append-next-kill:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-M-w&lt;/code&gt;(&lt;code&gt;append-next-kill&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;nextのkillコマンドでkillした内容をkill-ringにappendします。チュートリアルにも載ってた気がするんですがすっかり忘れてました。&lt;/p&gt;

&lt;h1 id=&#34;編集系:cdb428e5d1719accfec2711378c8d313&#34;&gt;編集系&lt;/h1&gt;

&lt;h2 id=&#34;electric-pair-mode:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;electric-pair-mode&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;開き括弧を挿入すると自動で閉じ括弧を挿入してくれます。リージョンを選択して括弧を挿入するとリージョンを囲むように括弧を挿入してくれます。これ大事。挿入後のカーソルは開き/閉じのどちらを入力したかに依ります。まあ、想像付きますね。地味に鉤括弧にも対応。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby-mode&lt;/code&gt;はこの挙動を上書きしてるので殴り殺したくなります。&lt;/p&gt;

&lt;h2 id=&#34;subword-mode:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;subword-mode&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;私はキャメルケースが嫌いという超個人的理由で使ってないのですが、キャメルケースがコーディング規約な言語を使う人には便利でしょう。キャメルケースの1こぶを1単語と見做します。例えば&amp;rdquo;SubWord&amp;rdquo;は&amp;rdquo;Sub&amp;rdquo; &amp;ldquo;Word&amp;rdquo;と認識されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-!-SubWord 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;M-f&lt;/code&gt;(&lt;code&gt;forward-word&lt;/code&gt;)すると通常は
    SubWord-!-
となりますが&lt;code&gt;subword-mode&lt;/code&gt;内だと
    Sub-!-Word
となります。その他word系の操作が全部こぶ単位になります。&lt;/p&gt;

&lt;p&gt;因みにモードラインの表示が&amp;rdquo;, &amp;ldquo;と、微妙な感じです。&lt;/p&gt;

&lt;h2 id=&#34;superword-mode:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;superword-mode&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;subword-mode&lt;/code&gt;の逆です。Lispの&amp;rdquo;this-is-a-symbol&amp;rdquo;といったシンボルが&amp;rdquo;this&amp;rdquo; &amp;ldquo;-is&amp;rdquo; &amp;ldquo;-a&amp;rdquo; &amp;ldquo;-symbol&amp;rdquo;と認識されていたのが&amp;rdquo;this-is-a-symbol&amp;rdquo;と認識されます。&lt;/p&gt;

&lt;p&gt;因みにモードラインの表示は &amp;ldquo;$^2$&amp;rdquo; です。&lt;/p&gt;

&lt;h2 id=&#34;c-x-c-u-upcase-region:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x C-u&lt;/code&gt;(&lt;code&gt;upcase-region&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;リージョンを選択した状態で使うとリージョンを大文字にしてくれます。
これを使ったTipsです。&lt;/p&gt;

&lt;p&gt;シチュエーションは全部大文字の単語(定数とかで良く出てくる)を入力したいが、Caps Lockは既にCtrlにしてあるので使えないって状態です。&lt;br /&gt;
先ず、&lt;code&gt;C-@&lt;/code&gt;します。そして目的の単語を小文字のまま入力します。そして&lt;code&gt;C-x C-u&lt;/code&gt;します。すると全て大文字になります。便利。&lt;code&gt;C-x C-l&lt;/code&gt;(&lt;code&gt;lowercase-region&lt;/code&gt;)でも同じこと出来ますが、使いたいシチュエーションは少ないでしょう。&lt;/p&gt;

&lt;p&gt;尚、このコマンドはデフォルトで無効になっているので普段使いするには一回使ってダイアログを出さないようにするか&lt;code&gt;init.el&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(put &#39;upcase-region &#39;disabled nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加しておく必要があります。&lt;/p&gt;

&lt;h2 id=&#34;m-m-u-upcase-word:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;M-- M-u&lt;/code&gt;(&lt;code&gt;upcase-word&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;upcase-word&lt;/code&gt;はカーソルの次の単語を大文字にしますが、負の前置引数を与えると直前の単語を大文字にしてくれます。ちょっと押し辛いですが一応覚えておきましょう。&lt;code&gt;M-- M-l&lt;/code&gt;(&lt;code&gt;capitalize-word&lt;/code&gt;)もそれなりに使えるかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;complete系:cdb428e5d1719accfec2711378c8d313&#34;&gt;complete系&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;icomplete-mode&lt;/code&gt;するとミニバッファでの入力時に補完候補が随時表示されますが、実はあの候補に色々操作出来るのです。&lt;/p&gt;

&lt;h2 id=&#34;m-p-m-n:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;M-p&lt;/code&gt; / &lt;code&gt;M-n&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ヒストリを辿れます&lt;/p&gt;

&lt;h2 id=&#34;c-j:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-j&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;先頭の候補に決定します。&lt;/p&gt;

&lt;h2 id=&#34;c-c:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-,&lt;/code&gt; / &lt;code&gt;C-.&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;候補を後/先に送ります。キーボードを見て&amp;lt; / &amp;gt;を押せば良いので簡単ですね。&lt;/p&gt;

&lt;h2 id=&#34;c-m-i:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-M-i&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;先頭の候補を補完します。続けて&lt;code&gt;C-M-i&lt;/code&gt;すると順次次候補になります。&lt;/p&gt;

&lt;h2 id=&#34;c-r:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-r&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ヒストリを検索します。&lt;/p&gt;

&lt;h2 id=&#34;c-s:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-s&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ミニバッファ内を前方検索します。あまり需要なさそうですね。&lt;/p&gt;

&lt;h1 id=&#34;isearch:cdb428e5d1719accfec2711378c8d313&#34;&gt;isearch&lt;/h1&gt;

&lt;p&gt;isearchはカーソルをバッファに残したままミニバッファを編集するのでキーバインドが特殊です。&lt;/p&gt;

&lt;h2 id=&#34;c-s-isearch-repeat-forward:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-s&lt;/code&gt;(&lt;code&gt;isearch-repeat-forward&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;検索文字列が空の状態で&lt;code&gt;C-s&lt;/code&gt;すると前回の検索文字列で検索します。&lt;/p&gt;

&lt;h2 id=&#34;c-j-isearch-printing-char:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-j&lt;/code&gt;(&lt;code&gt;isearch-printing-char&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;RETが決定に使われてるので改行はC-jになります。&lt;/p&gt;

&lt;h2 id=&#34;c-w-isearch-yank-word-or-char:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-w&lt;/code&gt;(&lt;code&gt;isearch-yank-word-or-char&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;カーソル下の単語又は文字を検索文字列にします。連続して押すと範囲を広げます。&lt;/p&gt;

&lt;h2 id=&#34;c-m-w-isearch-del-char:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-M-w&lt;/code&gt;(&lt;code&gt;isearch-del-char&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;1文字削除します。&lt;code&gt;DEL&lt;/code&gt;(&lt;code&gt;isearch-delete-char&lt;/code&gt;)とは違って削除してもバッファのポイントは戻りません。&lt;/p&gt;

&lt;h2 id=&#34;c-m-y-isearch-yank-char:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-M-y&lt;/code&gt;(&lt;code&gt;isearch-yank-char&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;カーソル下の文字を検索文字列に足します。&lt;/p&gt;

&lt;h2 id=&#34;m-s-c-e-isearch-yank-line:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;M-s C-e&lt;/code&gt;(&lt;code&gt;isearch-yank-line&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;カーソルから行末までを検索文字列にします。&lt;/p&gt;

&lt;h2 id=&#34;m-s-isearch-toggle-系:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;M-s&lt;/code&gt;(&lt;code&gt;isearch-toggle-&lt;/code&gt;)系&lt;/h2&gt;

&lt;p&gt;isearchには実は文字列検索だけでなく、さまざまな検索方法があります。
&lt;code&gt;M-s _&lt;/code&gt;(&lt;code&gt;isearch-toggle-symbol&lt;/code&gt;)、&lt;code&gt;M-s c&lt;/code&gt;(&lt;code&gt;isearch-toggle-case-fold&lt;/code&gt;)、&lt;code&gt;M-s r&lt;/code&gt;(&lt;code&gt;isearch-toggle-regexp&lt;/code&gt;)、&lt;code&gt;M-s w&lt;/code&gt;(&lt;code&gt;isearch-toggle-word&lt;/code&gt;)、あたりを覚えておくと良いでしょう。&lt;/p&gt;

&lt;h1 id=&#34;バッファ-ウィンドウ系:cdb428e5d1719accfec2711378c8d313&#34;&gt;バッファ/ウィンドウ系&lt;/h1&gt;

&lt;h2 id=&#34;split-threshold:cdb428e5d1719accfec2711378c8d313&#34;&gt;split-threshold&lt;/h2&gt;

&lt;p&gt;Emacsはデフォルトの状態では何かしらのウィンドウを分割するアクション(e.g. &lt;code&gt;list-buffers&lt;/code&gt;)でウィンドウを上下に分割します。しかしワイドディスプレイを使っていると左右に分割して欲しいものです。そこで、この設定です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq split-height-threshold nil)
(setq split-width-threshold 100)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この設定で、幅が100桁以上なら左右、100桁未満なら上下に分割するようになります。100という数字は私が試行錯誤して出した最適解です。&lt;code&gt;split-height-threshold&lt;/code&gt;と&lt;code&gt;split-width-threshold&lt;/code&gt;を同時に設定したら先に&lt;code&gt;split-height-threshold&lt;/code&gt;が判定されるようです。&lt;/p&gt;

&lt;h2 id=&#34;c-x-4-other-window-系:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x 4&lt;/code&gt;(&lt;code&gt;-other-window&lt;/code&gt;)系&lt;/h2&gt;

&lt;p&gt;ウィンドウを分割して隣のウィンドウに別のファイルを開きたい、あるいは既に分割してある隣のウィンドウに別のバッファを持ってきたいといったときに使うのが&lt;code&gt;C-x 4&lt;/code&gt;(&lt;code&gt;-other-window&lt;/code&gt;)系のコマンドです。&lt;code&gt;C-x 4 C-f&lt;/code&gt;(&lt;code&gt;find-file-other-window&lt;/code&gt;)、&lt;code&gt;C-x 4 b&lt;/code&gt;(&lt;code&gt;switch-to-buffer-other-window&lt;/code&gt;)、&lt;code&gt;C-x 4 0&lt;/code&gt;(&lt;code&gt;kill-buffer-and-window&lt;/code&gt;)あたりを覚えておけば良いでしょう。詳しくは&lt;code&gt;C-x 4 C-h&lt;/code&gt;すると見れます。&lt;/p&gt;

&lt;p&gt;似たようなのに、&lt;code&gt;C-x 5&lt;/code&gt;(&lt;code&gt;-other-frame&lt;/code&gt;)系のコマンドがありますが、私はEmacsのフレームを2つ以上出したいという状況に遭遇したことがないので省略します。&lt;/p&gt;

&lt;h2 id=&#34;find-alternate-file:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;find-alternate-file&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;ほぼ&lt;code&gt;find-file&lt;/code&gt;と同じ挙動ですが、現在のバッファをkillしてから新たなファイルを開きます。あるファイルを開こうとして間違ったファイルを開いてしまったときに使います(バッファの内容が空なので間違ったことが直ぐ分かる)。地味に便利なのですがデフォルトでキーが割り当てられていません。&lt;code&gt;C-x C-a&lt;/code&gt;あたりが妥当でしょうか。&lt;/p&gt;

&lt;h1 id=&#34;rectangle-矩形選択-系:cdb428e5d1719accfec2711378c8d313&#34;&gt;rectangle(矩形選択)系&lt;/h1&gt;

&lt;p&gt;最近機能が強化されてるrectangle系です。プリフィクスが&lt;code&gt;C-x r&lt;/code&gt;と押し辛いのが難点ですが、使用頻度が高い訳ではないのでまあ妥当でしょう。&lt;/p&gt;

&lt;p&gt;region-rectangleはカーソルとマークで成す長方形を範囲とします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ab-!-cdefg
hijklmn
opqrs-¡-tu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のとき、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cde
jkl
qrs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;がregion-rectangleに入ります。&lt;/p&gt;

&lt;p&gt;しかしこれだと分り辛いものです。そこで、最近&lt;code&gt;C-x SPC&lt;/code&gt;でregion-rectangleを視覚表示出来るようになりました。るびきちさんの本に載ってる&lt;code&gt;sense-region&lt;/code&gt;に近いです。&lt;/p&gt;

&lt;h2 id=&#34;c-x-r-k-kill-rectangle-c-x-r-d-delete-rectangle-c-x-r-m-w-copy-rectangle-as-kill:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x r k&lt;/code&gt;(&lt;code&gt;kill-rectangle&lt;/code&gt;) / &lt;code&gt;C-x r d&lt;/code&gt;(&lt;code&gt;delete-rectangle&lt;/code&gt;) / &lt;code&gt;C-x r M-w&lt;/code&gt;(&lt;code&gt;copy-rectangle-as-kill&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;名前のままですね。&lt;code&gt;kill-rectangle&lt;/code&gt;や&lt;code&gt;copy-rectangle-as-kill&lt;/code&gt;が保存するkill-ringは通常のkill-ringとは異なります。&lt;/p&gt;

&lt;p&gt;region-rectangleを視覚表示した状態で&lt;code&gt;C-w&lt;/code&gt;すると&lt;code&gt;kill-rectangle&lt;/code&gt;になるようです(他のコマンドは未確認)&lt;/p&gt;

&lt;h2 id=&#34;c-x-r-y-yank-rectangle:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x r y&lt;/code&gt;(&lt;code&gt;yank-rectangle&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;kill-rectangle&lt;/code&gt;や&lt;code&gt;copy-rectangle-as-kill&lt;/code&gt;が保存したものを吐きます。どのように挿入されるかというと、&lt;br /&gt;
rectangleのkill-ringが&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cde
jkl
qrs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、バッファが&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-!-foo
bar
baz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のとき、&lt;code&gt;C-x r y&lt;/code&gt;すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cdefoo
jklbar
qrs-!-baz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。&lt;/p&gt;

&lt;h2 id=&#34;c-x-r-t-string-rectangle:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x r t&lt;/code&gt;(&lt;code&gt;string-rectangle&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;rectangle-regionを文字列で置換します。ちょっと実用的な例を出しましょうかね。&lt;/p&gt;

&lt;p&gt;バッファが&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;pic_-¡-list_first(pic_state *);
pic_list_second(pic_state *);
pic_list-!-_third(pic_state *);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;C-x r t RET vector&lt;/code&gt;すると&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;pic_vector_first(pic_state *);
pic_vector_second(pic_state *);
pic_vector_third(pic_state *);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。最近プレビュー機能が入ったので入力しながらリアルタイムでバッファが書き換わります。最小設定主義のemacsにしては珍しい変更ですね。&lt;/p&gt;

&lt;p&gt;尚、幅0のregion-rectangleに使うとプリフィクスを付けられることも覚えておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-¡-This sentence is
-!-a quotation
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;に&lt;code&gt;C-x r t RET &amp;gt;&lt;/code&gt;すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; This sentence is
&amp;gt; a quotation.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と出来ます。&lt;/p&gt;

&lt;h1 id=&#34;register系:cdb428e5d1719accfec2711378c8d313&#34;&gt;register系&lt;/h1&gt;

&lt;p&gt;register系も&lt;code&gt;C-x r&lt;/code&gt;のブリフィクスを持ちます。非常に高機能なのに押し辛く、rectangleと紛らわしいキーバインドなのは残念です。&lt;/p&gt;

&lt;p&gt;registerの概念は分り辛いのですが、「何でも保存出来る箱」で、しかも「キー1つにつき箱一つ」です。viの名前付きバッファと似ていますが何でも保存出来る点で異なります。&lt;/p&gt;

&lt;p&gt;それぞれの機能を見てちょっと自分で試してみて理解して下さい。&lt;/p&gt;

&lt;h2 id=&#34;c-x-r-spc-point-to-register:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x r SPC&lt;/code&gt;(&lt;code&gt;point-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;レジスタにポイントを登録します。&lt;code&gt;C-x r C-SPC&lt;/code&gt;でも&lt;code&gt;C-x r C-@&lt;/code&gt;でも同じです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;C-x r SPC&lt;/code&gt;すると&amp;rdquo;Point to Register: &amp;ldquo;とプロンプトが出るので、現在のポイントを登録させたいレジスタを選びます。レジスタを選ぶというのは好きなキーを押せばよいです。私は考えるのが面倒なのでaから順番に使っていってます。&lt;/p&gt;

&lt;p&gt;これだけだと分かりにくいので次のコマンドも参考にして下さい。&lt;/p&gt;

&lt;h2 id=&#34;c-x-r-j-jump-to-register:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x r j&lt;/code&gt;(&lt;code&gt;jump-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;point-to-register&lt;/code&gt;でレジスタに登録したポイントに飛びます。例えばaレジスタにポイントを登録したなら&lt;code&gt;C-x r j RET a&lt;/code&gt;でそこに飛べます。最近、現在登録されてるレジスタ一覧が出るようになったので然程迷わないかと思います。&lt;/p&gt;

&lt;h2 id=&#34;c-x-r-x-copy-to-register:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x r x&lt;/code&gt;(&lt;code&gt;copy-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;レジスタに選択範囲の文字列を登録します。&lt;code&gt;C-x r s&lt;/code&gt;でも同じです。&lt;/p&gt;

&lt;p&gt;rectangleと同じプリフィクスを使っているがために非常に覚え辛いキーバインドになってしまっています。しかもkill-ringとの差別化がイマイチ分からないので需要なさそうですね。&lt;/p&gt;

&lt;h2 id=&#34;c-x-r-r-copy-rectangle-to-register:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x r r&lt;/code&gt;(&lt;code&gt;copy-rectangle-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;region-rectangleをレジスタに登録します。&lt;/p&gt;

&lt;h2 id=&#34;c-x-r-i-insert-register:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x r i&lt;/code&gt;(&lt;code&gt;insert-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;レジスタに登録した文字列/rectangle/数字をバッファに挿入します。&lt;code&gt;C-x r g&lt;/code&gt;でも同じです。&lt;/p&gt;

&lt;p&gt;ポイントを挿入しようとすると数字が入るようです(ポイントは内部的には数字)。&lt;/p&gt;

&lt;h2 id=&#34;c-x-r-n-number-to-register:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x r n&lt;/code&gt;(&lt;code&gt;number-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;レジスタに数字を登録します。登録した数字は&lt;code&gt;C-x r +&lt;/code&gt;(&lt;code&gt;increment-regiser&lt;/code&gt;)で増やしたり(負の前置引数を与えれば減らすことも可能)&lt;code&gt;insert-register&lt;/code&gt;でバッファに挿入することも可能。キーボードマクロなんかで役に立つのかな？&lt;/p&gt;

&lt;h2 id=&#34;c-x-r-w-window-configuration-to-register:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x r w&lt;/code&gt;(&lt;code&gt;window-configuration-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;現在のフレームのwindow-configuration(ウィンドウの分割や表示されるバッファ)をレジスタに登録します。復元は&lt;code&gt;C-x r j&lt;/code&gt;(&lt;code&gt;jump-to-register&lt;/code&gt;)です。&lt;/p&gt;

&lt;p&gt;同様の機能を提供するために数々のプラグインが作られてきましたが標準で提供されることになりました。&lt;/p&gt;

&lt;p&gt;これと次の&lt;code&gt;frameset-to-register&lt;/code&gt;は最近入った機能だった気がします。&lt;/p&gt;

&lt;h2 id=&#34;c-x-r-f-frameset-to-register:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x r f&lt;/code&gt;(&lt;code&gt;frameset-to-register&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;frameset(フレームの数や位置、サイズ、そしてそれぞれのフレームのwindow-configuration)をレジスタに登録します。復元は&lt;code&gt;C-x r j&lt;/code&gt;(&lt;code&gt;jump-to-register&lt;/code&gt;)です。&lt;/p&gt;

&lt;h2 id=&#34;蛇足:cdb428e5d1719accfec2711378c8d313&#34;&gt;蛇足&lt;/h2&gt;

&lt;p&gt;キーは割り当てられてませんがキーボードマクロの保存/実行やレジスタにappend/prependするコマンドもあるようです。&lt;/p&gt;

&lt;p&gt;同じ&lt;code&gt;C-x r&lt;/code&gt;のプリフィクスの機能にブックマークがありますが、るびきちさんの本に載ってるので割愛します。&lt;/p&gt;

&lt;h1 id=&#34;vc-バージョン管理-系:cdb428e5d1719accfec2711378c8d313&#34;&gt;vc(バージョン管理)系&lt;/h1&gt;

&lt;p&gt;詳しい使い方は多数の記事があると思うのでそちらに任せるとして、よく使うものを紹介します。尚、るびきちさんの本の頃からは大分進化してるのでvcに関しては参考にしない方が良いかと思います。例えば&lt;code&gt;git init&lt;/code&gt;相当をするコマンド(&lt;code&gt;vc-create-repo&lt;/code&gt;)は追加されてます。その他mergeやpull/pushなども。&lt;/p&gt;

&lt;p&gt;各vcsの対応状況は&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;;; Supported version-control systems presently include CVS, RCS, GNU&lt;br /&gt;
;; Arch, Subversion, Bzr, Git, Mercurial, Monotone and SCCS&lt;br /&gt;
;; (or its free replacement, CSSC).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とあります。かなり多いですね。というかこんなにvcsあったんですね。&lt;/p&gt;

&lt;p&gt;私が最近gitしか使ってないので他のvcsでどうなるかは分かりません。一応vc.el自体vcsの差異を吸収するものなのですが、vcs固有の挙動もあるのです。&lt;/p&gt;

&lt;h2 id=&#34;c-x-v-vc-diff:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x v =&lt;/code&gt;(&lt;code&gt;vc-diff&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git diff &amp;lt;バッファのファイル&amp;gt;&lt;/code&gt;相当です。大体、しばらく作業してそろそろコミットするかーって時に使います。表示されるバッファはdiff-modeになっているのでdiffの部分でRETすると変更箇所にジャンプ出来ます。&lt;/p&gt;

&lt;h2 id=&#34;c-x-v-l-vc-print-log-c-x-v-l-vc-root-log:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x v l&lt;/code&gt;(&lt;code&gt;vc-print-log&lt;/code&gt;) / &lt;code&gt;C-x v L&lt;/code&gt;(&lt;code&gt;vc-root-log&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;C-x v l&lt;/code&gt;(&lt;code&gt;vc-print-log&lt;/code&gt;) で現在ファイルの、 &lt;code&gt;C-x v L&lt;/code&gt;(&lt;code&gt;vc-root-log&lt;/code&gt;) でバージョン管理下全体のログ(コミットグラフ)を見れます。TABでログ間を移動出来たりRETでログを展開したりDでそのログのdiffを見たり色々なことが出来ます。diffを表示させたら勿論RETで変更箇所に飛べます。変更履歴を追うときは圧倒的に便利。&lt;/p&gt;

&lt;p&gt;私もそこまで深追いしてないのでlogバッファでの操作の調査は読者の課題とする。&lt;/p&gt;

&lt;h2 id=&#34;c-x-v-v-vc-next-action:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x v v&lt;/code&gt;(&lt;code&gt;vc-next-action&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;vcの中で一番有名なコマンドでしょうから詳細は省きます。私が強調したいのはコミットログ書くときのlog-editモードです。地味に機能強化されてます。&lt;code&gt;C-c C-d&lt;/code&gt;(&lt;code&gt;log-edit-show-diff&lt;/code&gt;)でdiffを表示したり&lt;code&gt;C-c C-e&lt;/code&gt;(&lt;code&gt;vc-git-log-edit-toggle-amend&lt;/code&gt;)でamendにしたり出来ます。詳しくは&lt;code&gt;C-c ?&lt;/code&gt;(&lt;code&gt;log-edit-mode-help&lt;/code&gt;)して下さい。&lt;/p&gt;

&lt;h2 id=&#34;c-x-v-d-vc-dir:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x v d&lt;/code&gt;(&lt;code&gt;vc-dir&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;ディレクトリ単位での機能を使えます。というかファイル単位でない機能(つまりvcsの多くの機能)を使えます。最近はvcを使うときはこれがメインになってます。色々機能があるので&lt;code&gt;&amp;lt;f1&amp;gt; b&lt;/code&gt;(&lt;code&gt;describe-bindings&lt;/code&gt;)して確認して下さい。&lt;/p&gt;

&lt;h2 id=&#34;c-x-v-u-vc-revert:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-x v u&lt;/code&gt;(&lt;code&gt;vc-revert&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;これは逆に使ってはいけないコマンドです。バッファのファイルのみをリバートする(&lt;code&gt;git checkout -- &amp;lt;バッファのファイル&amp;gt;&lt;/code&gt;相当)と思いきや、&lt;code&gt;git reset --hard&lt;/code&gt;するようです。no more被害者。&lt;/p&gt;

&lt;h1 id=&#34;view-mode:cdb428e5d1719accfec2711378c8d313&#34;&gt;view-mode&lt;/h1&gt;

&lt;p&gt;かなりキーバインドが特殊ですが割と便利な機能です。ここで紹介したもの以外にもキーはバインドされてますが非自明なのは大体こんなもんでしょう。&lt;/p&gt;

&lt;h2 id=&#34;ret-view-scroll-line-forward-y-view-scroll-line-backward:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;RET&lt;/code&gt;(&lt;code&gt;View-scroll-line-forward&lt;/code&gt;) / &lt;code&gt;y&lt;/code&gt;(&lt;code&gt;View-scroll-line-backward&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;上下に1行スクロールします。ありそうで他にない機能です。&lt;/p&gt;

&lt;h2 id=&#34;view-search-regexp-forward-view-search-regexp-backward:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;/&lt;/code&gt;(&lt;code&gt;View-search-regexp-forward&lt;/code&gt;) / &lt;code&gt;\&lt;/code&gt;(&lt;code&gt;View-search-regexp-backward&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;まさかのviバインド。ちゃんと&lt;code&gt;n&lt;/code&gt;(&lt;code&gt;View-search-last-regexp-forward&lt;/code&gt;)と&lt;code&gt;p&lt;/code&gt;(&lt;code&gt;View-search-last-regexp-backward&lt;/code&gt;)も用意されてます。&lt;/p&gt;

&lt;h2 id=&#34;s-isearch-forward-r-isearch-backward:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;s&lt;/code&gt;(&lt;code&gt;isearch-forward&lt;/code&gt;) / &lt;code&gt;r&lt;/code&gt; (&lt;code&gt;isearch-backward&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;C-&lt;/code&gt;がなくなっただけですね。他にも&lt;code&gt;C-&lt;/code&gt;がなくなっただけのコマンドはいっぱいありますが&lt;code&gt;/&lt;/code&gt;/&lt;code&gt;\&lt;/code&gt;との比較で出しました。&lt;/p&gt;

&lt;h2 id=&#34;m-point-to-register-register-to-point:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;m&lt;/code&gt;(&lt;code&gt;point-to-register&lt;/code&gt;) / &lt;code&gt;&#39;&lt;/code&gt;(&lt;code&gt;register-to-point&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;m&lt;/code&gt;でマークして&lt;code&gt;&#39;&lt;/code&gt;でジャンプです。&lt;/p&gt;

&lt;h2 id=&#34;やめる系:cdb428e5d1719accfec2711378c8d313&#34;&gt;やめる系&lt;/h2&gt;

&lt;p&gt;なぜか一杯あります。前提として、view-modeは別のファイルから「view-modeで(時に別ウィンドウで)ファイルを開く」系のコマンドで呼ばれることが多いというのがあります。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;コマンド&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;e&lt;/code&gt;(&lt;code&gt;View-exit&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;view-modeを抜ける。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;E&lt;/code&gt;(&lt;code&gt;View-exit-and-edit&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;view-modeを抜けてバッファを編集出来るようにする。つまり、read-only-modeも抜ける。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;c&lt;/code&gt;(&lt;code&gt;View-leave&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;view-modeを抜けてバッファを切り替えるがバッファはkillしない。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;C&lt;/code&gt;(&lt;code&gt;View-kill-and-leave&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;view-modeを抜けてバッファをkillして以前のバッファに切り替る。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;q&lt;/code&gt;(&lt;code&gt;View-quit&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;view-modeを抜けてウィンドウ内の状態を元に戻し、フォーカスも戻す。大抵バッファをkillする。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Q&lt;/code&gt;(&lt;code&gt;View-quit-all&lt;/code&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;view-modeを抜けてウィンドウ構成を元に戻す。大抵バッファをkillする。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;うん。覚えられね。&lt;/p&gt;

&lt;h1 id=&#34;dired系:cdb428e5d1719accfec2711378c8d313&#34;&gt;dired系&lt;/h1&gt;

&lt;p&gt;便利なのに情報が少ないdired系。私はUbuntuのUnityを捨ててStumpwmを使っているのでファイルエクスプローラは専らEmacsですからよく使います。&lt;a href=&#34;http://localhost:4000/blog/2013/10/04/emacs-dired/&#34;&gt;以前のエントリ&lt;/a&gt;以外の便利機能を紹介します。&lt;/p&gt;

&lt;p&gt;因みに呆れるほどキーがバインドされてるのでここで紹介するのはほんの一部です。画像のサムネイル関連の機能なんかもあります。&lt;/p&gt;

&lt;h2 id=&#34;dired-create-directory:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;+&lt;/code&gt;(&lt;code&gt;dired-create-directory&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;ディレクトリを作ります。&lt;/p&gt;

&lt;h2 id=&#34;dired-hide-ditail-mode:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;(&lt;/code&gt;(&lt;code&gt;dired-hide-ditail-mode&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;初期状態では&lt;code&gt;ls -l&lt;/code&gt;っぽい内容が表示されてますが&lt;code&gt;ls&lt;/code&gt;に変更出来ます。&lt;/p&gt;

&lt;h2 id=&#34;v-dired-view-file:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;v&lt;/code&gt;(&lt;code&gt;dired-view-file&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;ポイント下のファイルをview-modeで開きます。view-modeでは&lt;code&gt;q&lt;/code&gt;でバッファを閉じれるので、あるディレクトリ下のファイルを連続して読みたいときに便利です。&lt;/p&gt;

&lt;h2 id=&#34;o-dired-find-file-other-window:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;o&lt;/code&gt;(&lt;code&gt;dired-find-file-other-window&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;別ウィンドウでファイルを開きます。&lt;/p&gt;

&lt;h2 id=&#34;c-o-dired-display-file:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;C-o&lt;/code&gt;(&lt;code&gt;dired-display-file&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;別ウィンドウでファイルを開きますが、フォーカスは移りません。&lt;/p&gt;

&lt;p&gt;diredに限らず、ファイルへのリンクをリスト表示するバッファでは大抵&lt;code&gt;v&lt;/code&gt;と&lt;code&gt;o&lt;/code&gt;と&lt;code&gt;C-o&lt;/code&gt;が使えます。&lt;/p&gt;

&lt;h2 id=&#34;i-dired-maybe-insert-subdir:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;i&lt;/code&gt;(&lt;code&gt;dired-maybe-insert-subdir&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;バッファの下にポイント下のディレクトリの内容を追加します。ツリー表示にする機能はないようです。&lt;/p&gt;

&lt;h2 id=&#34;dired-regexp-系:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;%&lt;/code&gt;(&lt;code&gt;dired--regexp&lt;/code&gt;)系&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;% C&lt;/code&gt;(&lt;code&gt;dired-do-copy-regexp&lt;/code&gt;)など色々あるのですがとりあえず使いそうなのは&lt;code&gt;% g&lt;/code&gt;(&lt;code&gt;dired-mark-files-containing-regexp&lt;/code&gt;)と&lt;code&gt;% m&lt;/code&gt;(&lt;code&gt;dired-mark-files-regexp&lt;/code&gt;)ですかね。&lt;/p&gt;

&lt;p&gt;拡張子でマークするコマンドがあった気がしたのですが見当りませんでした。&lt;/p&gt;

&lt;h2 id=&#34;検索-置換系:cdb428e5d1719accfec2711378c8d313&#34;&gt;検索/置換系&lt;/h2&gt;

&lt;p&gt;これも色々ある上にキーバインドが覚えづらいです。ポイント下又はマークしたファイル全てに操作を行います。キーを覚えるより&lt;code&gt;M-x&lt;/code&gt;で実行した方が速そうですね。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;キー&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;コマンド&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;dired-do-query-replace-regexp&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;M-s a C-s&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;dired-do-isearch&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;M-s a C-M-s&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;dired-do-isearch-regexp&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&#34;eww-emacs-web-wower:cdb428e5d1719accfec2711378c8d313&#34;&gt;eww (Emacs Web WOWer)&lt;/h1&gt;

&lt;p&gt;elispで書かれたブラウザ(正確にはWOWerらしい)です。レンダリングエンジンにはかつてgnusで使われて今は別プロジェクトになったshr.el(Simple HTML Renderer)が使われています。HTMLの他に簡単なCSSも理解します。&lt;/p&gt;

&lt;p&gt;libxsltなどのSGML解析系のライブラリを有効にしてビルドしないと使えないのでEmacsを野良ビルドする人は要注意です。&lt;/p&gt;

&lt;h2 id=&#34;m-x-eww:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;M-x eww&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;URL又はキーワードで検索します。検索エンンジンは&lt;code&gt;eww-search-prefix&lt;/code&gt;で制御出来ます。&lt;/p&gt;

&lt;p&gt;googleで検索したかったら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq-default eww-search-prefix &amp;quot;https://www.google.co.jp/search?q=&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;h2 id=&#34;キーバインド:cdb428e5d1719accfec2711378c8d313&#34;&gt;キーバインド&lt;/h2&gt;

&lt;p&gt;infoライクに設定されてます。そんなに多くないのですが、一部抜粋すると&lt;code&gt;n&lt;/code&gt;(&lt;code&gt;eww-next-url&lt;/code&gt;)、&lt;code&gt;p&lt;/code&gt;(&lt;code&gt;eww-previous-url&lt;/code&gt;)、&lt;code&gt;l&lt;/code&gt;(&lt;code&gt;eww-back-url&lt;/code&gt;)、&lt;code&gt;r&lt;/code&gt;(&lt;code&gt;eww-forward-url&lt;/code&gt;)、&lt;code&gt;H&lt;/code&gt;(&lt;code&gt;eww-list-histories&lt;/code&gt;)、&lt;code&gt;&amp;amp;&lt;/code&gt;(&lt;code&gt;eww-browse-with-external-browser&lt;/code&gt;)、&lt;code&gt;b&lt;/code&gt;(&lt;code&gt;eww-add-bookmark&lt;/code&gt;)、&lt;code&gt;B&lt;/code&gt;(&lt;code&gt;eww-list-bookmarks&lt;/code&gt;)、&lt;code&gt;q&lt;/code&gt;(&lt;code&gt;quit-window&lt;/code&gt;)です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;n&lt;/code&gt; / &lt;code&gt;p&lt;/code&gt;と&lt;code&gt;l&lt;/code&gt; / &lt;code&gt;r&lt;/code&gt;の違いは、&lt;code&gt;l&lt;/code&gt; / &lt;code&gt;r&lt;/code&gt;はヒストリを辿る機能、&lt;code&gt;n&lt;/code&gt; / &lt;code&gt;p&lt;/code&gt;はヘッダに&lt;code&gt;&amp;lt;link rel=&amp;quot;Next/Prev&amp;quot; ...&amp;gt;&lt;/code&gt;が設定されているときにそれを辿ります。あまり馴染がないかもしれませんが広告料稼ぐためにページ分割しているサイトが多いので結構便利ですよ。&lt;/p&gt;

&lt;h1 id=&#34;newsticker:cdb428e5d1719accfec2711378c8d313&#34;&gt;newsticker&lt;/h1&gt;

&lt;p&gt;最後に最近見付けたRSS/Atomリーダーの紹介です。&lt;/p&gt;

&lt;p&gt;先ず、こんな感じの設定をします。ニュースサイトは自分の好きなものを選んで下さい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(setq-default newsticker-url-list &#39;((&amp;quot;産経&amp;quot; &amp;quot;http://sankei.jp.msn.com/rss/news/points.xml&amp;quot;)
                                    (&amp;quot;朝日-IT/Sci&amp;quot; &amp;quot;http://rss.asahi.com/rss/asahi/science.rdf&amp;quot;)
                                    (&amp;quot;技術評論社&amp;quot; &amp;quot;http://rss.rssad.jp/rss/gihyo/feed/rss2?rss&amp;quot;)
                                    (&amp;quot;Planet Lisp&amp;quot; &amp;quot;http://planet.lisp.org/rss20.xml&amp;quot;)
                                    (&amp;quot;Hacker News&amp;quot; &amp;quot;https://news.ycombinator.com/rss&amp;quot;)))
(setq-default newsticker-url-list-defaults
              &#39;((&amp;quot;LWN (Linux Weekly News)&amp;quot; &amp;quot;http://lwn.net/headlines/rss&amp;quot;)))
(setq-default newsticker-retrieval-interval 0)
(setq newsticker-html-renderer #&#39;shr-render-region)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、&lt;code&gt;M-x newsticker-show-news&lt;/code&gt;でニュースを取ってきてくれます。&lt;/p&gt;

&lt;p&gt;3ペインの画面(treeview)になるかと思いますが、基本操作を覚えれば&lt;code&gt;C-x o&lt;/code&gt;で移動する必要はありません。&lt;/p&gt;

&lt;h2 id=&#34;f-newsticker-treeview-next-feed-f-newsticker-treeview-prev-feed:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;f&lt;/code&gt;(&lt;code&gt;newsticker-treeview-next-feed&lt;/code&gt;) / &lt;code&gt;F&lt;/code&gt;(&lt;code&gt;newsticker-treeview-prev-feed&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;ニュースサイト間を移動します。&lt;/p&gt;

&lt;h2 id=&#34;n-newsticker-treeview-next-item-p-newsticker-treeview-prev-item:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;n&lt;/code&gt;(&lt;code&gt;newsticker-treeview-next-item&lt;/code&gt;) / &lt;code&gt;p&lt;/code&gt;(&lt;code&gt;newsticker-treeview-prev-item&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;ニュース間を移動します。&lt;/p&gt;

&lt;h2 id=&#34;spc-newsticker-treeview-next-page:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;SPC&lt;/code&gt;(&lt;code&gt;newsticker-treeview-next-page&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;ニュースのページを送ります。戻すキーは無いようです。&lt;/p&gt;

&lt;h2 id=&#34;v-newsticker-treeview-browse-url:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;v&lt;/code&gt;(&lt;code&gt;newsticker-treeview-browse-url&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;今開いているニュースをブラウザで開きます。RSSは概要しか送られてこないのでこの機能は必須ですね。&lt;/p&gt;

&lt;h2 id=&#34;q-newsticker-treeview-quit:cdb428e5d1719accfec2711378c8d313&#34;&gt;&lt;code&gt;q&lt;/code&gt;(&lt;code&gt;newsticker-treeview-quit&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;画面を閉じます。&lt;/p&gt;

&lt;h1 id=&#34;最後に:cdb428e5d1719accfec2711378c8d313&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;いかがだったでしょうか。ちょっと長いので途中読み飛ばし気味だったかもしれませんが1つでも覚えていただけたら幸いです。&lt;/p&gt;

&lt;p&gt;因みに、このエントリを書き始めたのは8/13だったのですが、あまりに長く、途中合宿を挟んだりしたので公開は8/20になってしまいました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.emacsの整理をした話 &#43; EmacsとViとShellとLispを悪魔合体させたら超絶便利だった</title>
      <link>//keens.github.io/blog/2013/12/13/dot-emacs-clean-up</link>
      <pubDate>Fri, 13 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>//keens.github.io/blog/2013/12/13/dot-emacs-clean-up</guid>
      <description>

&lt;p&gt;やや長いタイトルですが・・・年末になって大掃除がやってきましたね。みなさんもそろそろ.emacsの大掃除をしましょう。&lt;/p&gt;

&lt;p&gt;私の.emacsは元々1300行ちょいあってEmacsの起動に7~8秒(体感)かかってましたが大掃除&amp;amp;高速化をした結果800行弱、起動に1秒(体感)ほどになったので整理の仕方を共有しますね。&lt;/p&gt;

&lt;p&gt;前提ですが、私はinitローダーとかは使ってません。全部&lt;code&gt;init.el&lt;/code&gt;に書いてます。で、機能毎にページを作って(&lt;code&gt;C-q C-l&lt;/code&gt;)ます。ただ、それだけだと視認性が悪いので見出しとして&lt;code&gt;C-u C-u C-u ;&lt;/code&gt;で&lt;code&gt;;&lt;/code&gt;を64個挿入して次の行にコメントで&lt;code&gt;#&lt;/code&gt;付きのタイトルを付けてます。&lt;/p&gt;

&lt;p&gt;具体的には&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;common-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;nv&#34;&gt;^L&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; #Lisp&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;こんな感じのものが機能毎に書かれてます。これで&lt;code&gt;C-s&lt;/code&gt;や&lt;code&gt;M-x occur&lt;/code&gt;でハッシュタグのように検索することも&lt;code&gt;C-v&lt;/code&gt;でスクロールしていって目grepすることも&lt;code&gt;C-x ]&lt;/code&gt;で機能毎にジャンプすることもできます。&lt;/p&gt;

&lt;h1 id=&#34;1-emacsの最新版を使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;1. Emacsの最新版を使う&lt;/h1&gt;

&lt;p&gt;結構重要です。「標準のやつだと欲いこの機能がないから拡張パッケージ入れた」なんてのも最新版では改善されていたりします。例えば私は&lt;code&gt;emacs-w3m&lt;/code&gt;を使っていましたが、Emacsのmasterブランチには&lt;code&gt;eww&lt;/code&gt;なるEmacs Lisp製のブラウザが入っているのでそれを使うようにしました。&lt;/p&gt;

&lt;p&gt;&lt;s&gt;ただ、これが絶対的正義かというとそうでもなく、パッケージで入れてない分
Ubuntuのインプットメソッドとの連携部分がなかったので&lt;code&gt;uim.el&lt;/code&gt;を入れる
必要が出てきたりと、面倒な部分もありました。Emacs標準のインプットメソッドはどうにも使いものにならず、
&lt;code&gt;ddskk&lt;/code&gt;もuim-skkとコンフリクトする(というか&lt;code&gt;C-j&lt;/code&gt;上書きとかありえない)ので使いません。インプットメソッドの切り替え部分は&lt;/s&gt;&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;common-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;global-set-key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;kbd&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;&amp;lt;hiragana-katakana&amp;gt;&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;uim-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;global-set-key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;kbd&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;&amp;lt;zenkaku-hankaku&amp;gt;&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;uim-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;autoload&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;#&#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;uim-mode&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;uim&#34;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;になりました。&lt;/p&gt;

&lt;p&gt;2013-12-16追記&lt;br /&gt;
これは私が&lt;code&gt;~/.Xresources&lt;/code&gt;に&lt;code&gt;Emacs*useXIM: false&lt;/code&gt;を書いていたのが原因でした。&lt;code&gt;Emacs*useXIM: true&lt;/code&gt;に書き換え、&lt;code&gt;xrdb ~/.Xresources&lt;/code&gt;すると直りました。&lt;/p&gt;

&lt;h1 id=&#34;2-普段使わない設定は全部消す:4e9eff69691c75d8318f2604900514ad&#34;&gt;2. 普段使わない設定は全部消す&lt;/h1&gt;

&lt;p&gt;基本ですね。私は&lt;code&gt;summary-edit.el&lt;/code&gt;だとか&lt;code&gt;multiverse.el&lt;/code&gt;だとかるびきちさんの本を読んで便利そうだから入れたものの、結局使わなかったものの設定&amp;amp;elispをごっそり削除。あとかなりの言語に対してデフォルトで&lt;code&gt;auto-mode-alist&lt;/code&gt;が設定されていたので&lt;code&gt;auto-mode-alist&lt;/code&gt;の設定も全部消して、必要になったら書き足すようにしました。&lt;/p&gt;

&lt;h1 id=&#34;3-普段使っていても代替の効くものは削除:4e9eff69691c75d8318f2604900514ad&#34;&gt;3. 普段使っていても代替の効くものは削除&lt;/h1&gt;

&lt;p&gt;これは高速化の意味と自分の環境に依存しない意味があります。最近、自分のラップトップ以外でもEmacsを触ることが多くあって、デフォルトのキーを上書きして使ってる部分で何度も誤操作したのでそれを減らす目的です。&lt;code&gt;bm.el&lt;/code&gt;は&lt;code&gt;C-x r SPC&lt;/code&gt;の&lt;code&gt;register&lt;/code&gt;系や&lt;code&gt;C-x C-SPC&lt;/code&gt;で対応(registerは覚えれば使い出がありそうなのでいつか解説書くかもです)、&lt;code&gt;open-junk-file.el&lt;/code&gt;は&lt;code&gt;~/tmp&lt;/code&gt;を作って対応、&lt;code&gt;recentf-ext.el&lt;/code&gt;は&lt;code&gt;helm-file-buffers&lt;/code&gt;だとか。&lt;/p&gt;

&lt;p&gt;あと全て&lt;code&gt;helm.el&lt;/code&gt;に置き換えて&lt;code&gt;helm.el&lt;/code&gt;と&lt;code&gt;anything.el&lt;/code&gt;が混在してる状態をどうにかしたかったのですが、&lt;code&gt;php-completion.el&lt;/code&gt;かなにかが依存しててトドメを刺せませんでした。&lt;/p&gt;

&lt;p&gt;あと、&lt;code&gt;viewer&lt;/code&gt;の代替を探していたらタイトルにあるように悪魔合体が起きたので後で書きますね。&lt;/p&gt;

&lt;h1 id=&#34;4-できる限り標準のものを使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;4. できる限り標準のものを使う&lt;/h1&gt;

&lt;p&gt;標準で提供されているパッケージは&lt;code&gt;autoload&lt;/code&gt;が&lt;code&gt;emacs&lt;/code&gt;バイナリに組込まれてる(と思う)ので起動時のオーバーヘッドはありません。&lt;code&gt;flymake.el&lt;/code&gt;や&lt;code&gt;ruby-mode.el&lt;/code&gt;が標準で提供されてるのに気付いたのでそれを使ったりなど。一度&lt;code&gt;(emacsroot)/lisp&lt;/code&gt;以下を眺めてみることをお勧めします。結構発見があるものです。&lt;/p&gt;

&lt;h1 id=&#34;5-autoload-を使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;5.&lt;code&gt;autoload&lt;/code&gt;を使う&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;autoload&lt;/code&gt;とはファイルの読み込みを必要になるまで遅らせる仕組みです。「必要になる」ってのはそのファイルで定義されている関数が呼ばれたときです。賢い&lt;code&gt;require&lt;/code&gt;と思えば良いでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(autoload #&#39;関数名 &amp;quot;関数が呼ばれたときに読むファイル名&amp;quot; nil interactivep)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいに使います。&lt;code&gt;interactivep&lt;/code&gt;の部分は&lt;code&gt;M-x&lt;/code&gt;で呼ぶものなら&lt;code&gt;t&lt;/code&gt;、そうでなければ&lt;code&gt;nil&lt;/code&gt;です。&lt;code&gt;require&lt;/code&gt;を&lt;code&gt;autoload&lt;/code&gt;で書き換えていけば理論上起動時の読み込み0にできるのでかなり高速化できます。&lt;/p&gt;

&lt;p&gt;が、実際は一々&lt;code&gt;autoload&lt;/code&gt;書くのはしんどいので次です。&lt;/p&gt;

&lt;h1 id=&#34;6-できる限り-package-el-を使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;6.できる限り&lt;code&gt;package.el&lt;/code&gt;を使う&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;package.el&lt;/code&gt;は必要な関数の&lt;code&gt;autoload&lt;/code&gt;を自動生成して読み込んでおいてくれるのでかなりの手間が省けます。そして&lt;code&gt;autoload&lt;/code&gt;があるのに&lt;code&gt;require&lt;/code&gt;してると折角の&lt;code&gt;package.el&lt;/code&gt;の配慮が無駄になります。&lt;/p&gt;

&lt;p&gt;自動生成された&lt;code&gt;autoload&lt;/code&gt;は&lt;code&gt;elpa/パッケージのディレクトリ/パッケージ-autoloads.el&lt;/code&gt;にあるので確認しながら&lt;code&gt;init.el&lt;/code&gt;の邪魔なものを消していきます。これでかなり&lt;code&gt;init.el&lt;/code&gt;の行数が減ります。今まで無駄な設定していたんだなと気付きます。&lt;/p&gt;

&lt;h1 id=&#34;7-eval-after-load-を使う:4e9eff69691c75d8318f2604900514ad&#34;&gt;7. &lt;code&gt;eval-after-load&lt;/code&gt;を使う&lt;/h1&gt;

&lt;p&gt;8割程の設定は&lt;code&gt;autoload&lt;/code&gt;で対応できるのですが、踏み込んだ設定をしているとパッケージの内部の関数を使ってしまってどうしてもその式が評価される前にパッケージが読み込まれている必要があることがあります。&lt;/p&gt;

&lt;p&gt;そんなときは&lt;code&gt;eval-after-load&lt;/code&gt;を使います。名前のまんま、ロードした後で&lt;code&gt;eval&lt;/code&gt;してくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(eval-after-load &#39;ファイル名
    &#39;式)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の形で使います。複数の式を使いたい場合は&lt;code&gt;progn&lt;/code&gt;を使って&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(eval-after-load &#39;ファイル名
    &#39;(progn
         式1
         式2...))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように使います。あるパッケージの拡張パッケージなんかもここで読むと良いかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;8-その他:4e9eff69691c75d8318f2604900514ad&#34;&gt;8.その他&lt;/h1&gt;

&lt;p&gt;メールクライアントを標準のものにしようとしましたが、&lt;code&gt;gnus.el&lt;/code&gt;はちょっと受け付けなくてその他はimapを喋らないので断念。でも色々調べてたら&lt;code&gt;mew&lt;/code&gt;より&lt;code&gt;wanderlust&lt;/code&gt;の方が良いようなので使い初めました。表示が綺麗で良いですね。HTMLのレンダリングも&lt;code&gt;emacs-w3m&lt;/code&gt;に頼らず標準の&lt;code&gt;shr.el&lt;/code&gt;を使っているのも◎。&lt;/p&gt;

&lt;p&gt;同じような経緯で&lt;code&gt;JDEE&lt;/code&gt;をやめて&lt;code&gt;malabar.el&lt;/code&gt;を使うようにしました。ただ、私は&lt;code&gt;maven&lt;/code&gt;使いではないので微妙ではあります。まあ、そもそもプロジェクト単位でJavaを書くことがないってのもあるんですが。Androidのスケルトンがantなのでantでできたら嬉しいなーって。&lt;/p&gt;

&lt;h1 id=&#34;emacsとviとshellとlispを悪魔合体させた話:4e9eff69691c75d8318f2604900514ad&#34;&gt;EmacsとViとShellとLispを悪魔合体させた話&lt;/h1&gt;

&lt;p&gt;私はEmacsの狂信者ですが読み専のときはちょいちょいviを使うこともあります。片手で操作できるのは便利です。Emacsで読み専といえば&lt;code&gt;view-mode&lt;/code&gt;です。そこでもhjklを使うべく&lt;code&gt;view-mode-map&lt;/code&gt;に手を加えてましたが、大掃除ということで全部削除。&lt;/p&gt;

&lt;p&gt;その後で&lt;code&gt;emacsroot/lisp/emulate/&lt;/code&gt;以下を読んでいるとなんかviのエミュレーターが3つも見付かりました。&lt;code&gt;vi.el&lt;/code&gt;、&lt;code&gt;vip.el&lt;/code&gt;、&lt;code&gt;viper.el&lt;/code&gt;です。後者になるほどviとの互換性が高くなります。とりあえずは&lt;code&gt;hjkl&lt;/code&gt;が使えれば良いので&lt;code&gt;vi.el&lt;/code&gt;を使ってみたところ、ん〜…といったところ。&lt;code&gt;vip.el&lt;/code&gt;と試して結局&lt;code&gt;viper.el&lt;/code&gt;に落ち着きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &amp;quot;C-x C-q&amp;quot;) #&#39;(lambda ()
                    (interactive)
                    (toggle-viper-mode)
                    (force-mode-line-update)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定はこんな感じです。&lt;code&gt;toggle-viper-mode&lt;/code&gt;してもモードラインの表示が変わらないことがあったので&lt;code&gt;force-mode-line-update&lt;/code&gt;を加えました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;viper.el&lt;/code&gt;は単なるviのエミュレートだけではなく、Levelに応じて良い感じにemacsと悪魔合体してくれます。私は最高レベルの5にしました。”C-x C-s”など基本的なコマンドはそのまま使えるようになってます。&lt;code&gt;:&lt;/code&gt;で始まるvi(ex)のコマンドも使えます。&lt;code&gt;C-z&lt;/code&gt;でemacs&amp;lt;–&amp;gt;viを切り替えたり。非常に便利です。&lt;/p&gt;

&lt;p&gt;尚、私はvi使いであってvim使いではないのでevilは使いません。&lt;/p&gt;

&lt;p&gt;もう一つ、shellの話。今までは&lt;code&gt;multiterm&lt;/code&gt; × &lt;code&gt;zsh&lt;/code&gt;な感じでしたが、「できる限り標準のものを使う」方針で&lt;code&gt;eshell&lt;/code&gt;に切り替えました。&lt;code&gt;eshell&lt;/code&gt;はEmacs Lispで書かれたshellです。これが思った以上に便利です。るびきちさんの本では標準出力とエラー出力の切り分けができてないと書かれてましたがそれは修正されてるようです。&lt;/p&gt;

&lt;p&gt;あとは&lt;code&gt;/dev/kill&lt;/code&gt;だとか&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;だとかバッファへのリダイレクトだとか&lt;code&gt;grep&lt;/code&gt;の上書きだとか色々楽しい拡張もあるのですが、一番は&lt;code&gt;eshell&lt;/code&gt;がLispであること。&lt;code&gt;eshell&lt;/code&gt;上で任意のEmacs Lisp式を実行できます。最近Emacs LispやLispに精通してきたので非常に有り難いです。&lt;br /&gt;
それにファイルを開くときもその後で同じディレクトリのファイルを開くことが多いので一旦 &lt;code&gt;cd&lt;/code&gt;してから&lt;code&gt;find-file&lt;/code&gt;をするとアクセスし易くて捗ります。もう起動時に&lt;code&gt;eshell&lt;/code&gt;が立ち上がるようにして、基本そこから操作するようにしてます。guakeもそんなに使わなくなりました。他の環境でも使えるので安心して依存できます。&lt;/p&gt;

&lt;p&gt;で、ファイルを開くときはどうしてるかというと実はemacsの&lt;code&gt;find-file&lt;/code&gt;ではなくviの&lt;code&gt;:e file-name&lt;/code&gt;です。Emacs上でLispで出来たShellを使いつつviを動かしてます。かなり人を選びますが「EmacsのヘビーユーザーでLispに精通しててviを便利だと思ってる人」は試してみてはいかがでしょうか。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UbuntuでEmacsからGPGを透過的に扱う</title>
      <link>//keens.github.io/blog/2013/12/04/emacs-gpg</link>
      <pubDate>Wed, 04 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>//keens.github.io/blog/2013/12/04/emacs-gpg</guid>
      <description>

&lt;p&gt;暗号化といえばGPGですがEmacsからGPGで暗号化されたファイルを編集しようとすると毎回パスワードを訊かれて鬱陶しいです。これはキーリングを登録することで解決できました。&lt;/p&gt;

&lt;h2 id=&#34;step1-keyringに登録する:4c29e36829eecbe9ac0eee4020d73315&#34;&gt;Step1 Keyringに登録する&lt;/h2&gt;

&lt;p&gt;Dashboardから[key]で検索すると[パスワードと鍵]が見付かります。左上の[+]で新たにキーリングを追加します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//KeenS.github.io/images/2013-12-04-1.png&#34; alt=&#34;こんな感じ&#34; title=&#34;keyring&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GPGを選択します&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//KeenS.github.io/images/2013-12-04-2.png&#34; alt=&#34;こんな感じ&#34; title=&#34;Selecting GPG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;必要な情報を入力します。このメールアドレスは実在しなくても作れますが、ブルートフォースかけられたときの警告とかに使われそうなので実在した方が良い気がします。とりあえず後で使うので覚えておいて下さい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//KeenS.github.io/images/2013-12-04-3.png&#34; alt=&#34;&#39;Input info &amp;quot;こんな感じ&amp;quot;&#34; title=&#34;&#39;Input info &amp;quot;こんな感じ&amp;quot;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あとはパスワードのプロンプトが出るので入力して、エントロピーを発生させたら終わりです。&lt;/p&gt;

&lt;h2 id=&#34;step2-ファイルを準備する:4c29e36829eecbe9ac0eee4020d73315&#34;&gt;Step2 ファイルを準備する&lt;/h2&gt;

&lt;p&gt;ここが肝です。ファイルの先頭に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-*- epa-file-encrypt-to: (my@mailaddress) -*-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を挿入します。既存の暗号化されたファイルでも同じです。&lt;/p&gt;

&lt;h2 id=&#34;step3-暗号化する:4c29e36829eecbe9ac0eee4020d73315&#34;&gt;Step3 暗号化する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;M-x epa-encrypt-file&lt;/code&gt;で暗号化できます。暗号化するファイル名を指定したらキーリングを選べます&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//KeenS.github.io/images/2013-12-04-4.png&#34; alt=&#34;こんな感じ&#34; title=&#34;Selecting GPG&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;step4-編集する:4c29e36829eecbe9ac0eee4020d73315&#34;&gt;Step4 編集する&lt;/h2&gt;

&lt;p&gt;あとはもう透過的に使えます。でもなんか実験してたらファイル保存できなかった。先にGPGで暗号化してたやつはできたのに。要調査です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ここ１ヶ月くらいの近況</title>
      <link>//keens.github.io/blog/2013/11/13/what-recent</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>//keens.github.io/blog/2013/11/13/what-recent</guid>
      <description>

&lt;p&gt;#isucon 参戦記がフォロワーの多い@tagomorisさんとか@nitro_idiotさんとかにツイートされて普段の数十倍のアクセスが来てテンション上がったので近況書きますね。&lt;/p&gt;

&lt;h2 id=&#34;isuconの勉強:dbb86b19d55f9a0a2bd4a47585bd22d2&#34;&gt;isuconの勉強&lt;/h2&gt;

&lt;p&gt;件の記事でも書いてますけどMySQLとNginXとCapistranoの勉強しました。SQLって書けると案外楽しいですね。あとN+1問題を学んだり、&lt;code&gt;IF EXISTS TRRIGER&lt;/code&gt;的な文がなくて殺そうかと思ったり。&lt;/p&gt;

&lt;p&gt;NginXはキャッシュとかですね。キャッシュキーに&lt;code&gt;$cookie_isucon_session&lt;/code&gt;とか入れてログインしてるユーザーが来ても対応できたので良かったです（小並感&lt;/p&gt;

&lt;p&gt;Capistranoはどうせだからと3.0を使ったのですが調べても2.x時代の情報ばっかり引っ掛かって苦労しました。その代わり、isucon本戦では複数サーバーへのデプロイ機能を存分に使わせて頂きました。ほぼログインしなくても問題ないですね。&lt;/p&gt;

&lt;p&gt;例えば&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;19&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;21&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;22&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;23&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;24&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;25&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;26&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;my app&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:repo_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;git@bitbucket.org:me/myrepo.git&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:deploy_to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;/home/me/app&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:git&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:deploy_via&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:remote_cache&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:nginx&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:reload&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:web&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:sudo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;service nginx reload&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:restart&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:web&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:sudo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;service nginx restart&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:start&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;:web&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:sudo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;service nginx start&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;こんな感じです。で、もう一つ&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:stage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:production&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;123.4.5.67&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;me&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;web&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;123.4.5.68&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;me&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;web&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;123.4.5.69&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;me&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;web&#39;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:ssh_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;ss&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sx&#34;&gt;%w(~/.ssh/id_rsa)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;forward_agent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;n&#34;&gt;auth_methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sx&#34;&gt;%w(publickey)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;を書いておけばこの3台のサーバーに一斉にデプロイしてくれます。(上の例だとnginxですが、まあいいでしょう。)&lt;/p&gt;

&lt;h2 id=&#34;shibuya-lisp:dbb86b19d55f9a0a2bd4a47585bd22d2&#34;&gt;Shibuya.lisp&lt;/h2&gt;

&lt;p&gt;Lisp Meet Up #10で発表してきました。内容は&lt;code&gt;fluentd&lt;/code&gt;をCommon Lispから使う話。&lt;br /&gt;
スライド&lt;/p&gt;

&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/27444839&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/blackenedgold/common-lisp-27444839&#34; title=&#34;Common Lisp でビッグデータを作ろう&#34;&gt;Common Lisp でビッグデータを作ろう&lt;/a&gt;&lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/blackenedgold&#34;&gt;blackenedgold&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ustreamは見つかりませんでした。てへペロ&lt;/p&gt;

&lt;p&gt;恐らく、&lt;code&gt;Log4CL&lt;/code&gt;はやりたいことと目的が違いますね。全く別のロギングフレームワークを作るのが良さげな気がします。isuconの懇親会で開発者の@tagomorisさんにアドバイスも頂きましたし作るかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;mpd:dbb86b19d55f9a0a2bd4a47585bd22d2&#34;&gt;mpd&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;//KeenS.github.io/blog/2013/09/29/mplayer/&#34;&gt;以前、mplayer2が正常に動作しないとかぼやいて&lt;/a&gt;ましたが、結局あきらめました。で、代わりに &lt;a href=&#34;http://www.musicpd.org/&#34;&gt;Music Player Daemon(MPD)&lt;/a&gt;なるものを見付けて、しかもRaspberry Piで動き、iPod/Androidから操作できるとのことで、導入しました。&lt;/p&gt;

&lt;p&gt;MPDはまさしくRaspberry Piのような機器向で、音楽を鳴らすサーバーと操作するクライアントが完全に分かれてます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apg-get install mpd mpc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とかでRSPiに入れた気がします。クライアントはAndroidは&lt;code&gt;MPDroid&lt;/code&gt;、iPodは&lt;code&gt;MPoD&lt;/code&gt;っていうアプリです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scp&lt;/code&gt;で手元の曲をRSPiコピーし、iPodから繋ぐも曲が見えない。色々試した結果、&lt;code&gt;scp&lt;/code&gt;でコピーしたときにパーミッションの問題が出てたようなのでそこを解決したらちゃんと動きました。&lt;/p&gt;

&lt;p&gt;動画(iPod)&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/x5CWtXbCkqo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;黒ばっかで見づらくて申し訳ありません。iPodからではなくスピーカから音が出てるのが分かりますかね？思ったより音が入ってないので分りづらいですね（汗&lt;/p&gt;

&lt;h2 id=&#34;cim:dbb86b19d55f9a0a2bd4a47585bd22d2&#34;&gt;CIM&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/fukamachi/shelly/&#34;&gt;Shelly&lt;/a&gt;を使って &lt;a href=&#34;https://gist.github.com/KeenS/7059301&#34;&gt;Common Lispスクリプトをexecutableにしよう&lt;/a&gt;ってのをやってましたが少しshellyが求めているのと違うようだったので「シェルスクリプトでshelly的な物を実装しよう！ついでにrvmみたいにバージョン管理できたら嬉しいな！！」って思い付きで &lt;a href=&#34;https://github.com/KeenS/CIM&#34;&gt;Common Lisp Implementation Manager(CIM)&lt;/a&gt;を作り始めました。まだCLISP, ECL, GCLのインストールぐらいしかできてません。&lt;/p&gt;

&lt;p&gt;初めてシェルスクリプトを書き、初めてBourne Shellを触り(普段はzsh)、早くも挫折しそうです。今めっちゃシェルスクリプトの勉強してます。目的はImplementationの管理じゃなくて統一インターフェースの&lt;code&gt;cl&lt;/code&gt;コマンドなのにそこが全然進んでないですね。&lt;code&gt;ql&lt;/code&gt;に至っては1行も書いてない。まあ、&lt;code&gt;cl&lt;/code&gt;を使って書くつもりなので&lt;code&gt;cl&lt;/code&gt;が出来ないことにはどうしようもないんですが。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;syset&lt;/code&gt;とかネーミングセンスが無かったり(発音しずらい。シセット…サイセットって読もうかな)ダウンロードしたアーカイブのチェックサムとか全く見てなかったり色々ツッコみたくなりますが温かい目で見て下さい。気に入ったらpull-reqとかして下さい。&lt;/p&gt;

&lt;h2 id=&#34;octomacs:dbb86b19d55f9a0a2bd4a47585bd22d2&#34;&gt;Octomacs&lt;/h2&gt;

&lt;p&gt;Octomacsに一回pull-req送ってからコミッタ気取りのκeenですが、&lt;code&gt;octomacs-preview&lt;/code&gt;と&lt;code&gt;octomacs-deploy&lt;/code&gt;を実装しました。&lt;code&gt;C-u&lt;/code&gt;をつけると&lt;code&gt;generate&lt;/code&gt;が付いてきます。テストをしてない（できない？）+サーバーを殺す(&lt;code&gt;octomacs-preview-quit&lt;/code&gt;とかの名前かなあ。現状は&lt;code&gt;*octomacs preview*&lt;/code&gt;バッファを&lt;code&gt;kill-buffer&lt;/code&gt;すればいい)コマンドを実装してないのでpull-reqは投げてませんが使ってみたい方は &lt;a href=&#34;https://github.com/KeenS/octomacs&#34;&gt;こちら&lt;/a&gt;をどうぞ。まあ、今からpushするんですがね。ちゃんとこの記事も&lt;code&gt;octomacs-new-post&lt;/code&gt;から始まり、&lt;code&gt;octomacs-preview&lt;/code&gt;で確認しつつ&lt;code&gt;octomacs-deploy&lt;/code&gt;でデプロイしました。あとは過去の記事を編集する&lt;code&gt;octomacs-edit&lt;/code&gt;を実装すれば完璧ですね。&lt;/p&gt;

&lt;p&gt;こんなかんじです。&lt;code&gt;CIM&lt;/code&gt;がんばります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tiarraにercで接続したときの/loadの問題</title>
      <link>//keens.github.io/blog/2013/10/06/tiarra-erc</link>
      <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>//keens.github.io/blog/2013/10/06/tiarra-erc</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.clovery.jp/tiarra/&#34;&gt;tiarra&lt;/a&gt;に &lt;a href=&#34;http://www.emacswiki.org/ERC&#34;&gt;erc&lt;/a&gt;で接続したときの/loadの問題。&lt;/p&gt;

&lt;p&gt;tiarraは有名なircプロキシ。ercはEmacs上で動くircクライアント。これらを使っているとtiarraが自動でログインしてくれないのでおかしいなと思っていたらtiarraの自動ログインモジュールを有効にしていなかった模様。&lt;/p&gt;

&lt;p&gt;書き換えていざ設定を反映しようとすると若干困りました。どこに&lt;code&gt;/load&lt;/code&gt;と打てばいいんだろ。&lt;/p&gt;

&lt;p&gt;最初に誘導されるバッファ(ircバッファ名がプロキシサーバー名になってるやつ)に&lt;code&gt;/load&lt;/code&gt;と打つと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERC&amp;gt; /load
Incorrect arguments. Usage:
/LOAD line
Load the script provided in the LINE.
If LINE continues beyond the file name, the rest of
it is put in a (local) variable `erc-script-args&#39;,
which can be used in Emacs Lisp scripts.


The optional FORCE argument is ignored here - you can&#39;t force loading
a script after exceeding the flood threshold.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ですって。ああ…。&lt;code&gt;/load&lt;/code&gt;コマンドがercに食われてる…&lt;/p&gt;

&lt;p&gt;流石に解決策あるだろって思って調べたら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/quote load
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERC&amp;gt; /quote load
-192.168.1.4- *** Reloaded configuration file.
-192.168.1.4- *** Module Channel::Join::Connect will be loaded newly.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はい。ちゃんとloadしてくれました。&lt;/p&gt;

&lt;p&gt;以上小ネタでした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacsのdired-modeを使い易くする</title>
      <link>//keens.github.io/blog/2013/10/04/emacs-dired</link>
      <pubDate>Fri, 04 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>//keens.github.io/blog/2013/10/04/emacs-dired</guid>
      <description>&lt;p&gt;Emacsの標準ライブラリ&lt;code&gt;dired.el&lt;/code&gt;を読んでたら色々発見があったのでメモ兼dired-modeとはなんじゃらほいって方にも一から解説してみます。&lt;/p&gt;

&lt;p&gt;とは言ってもいきなり解説しなくて申し訳ないのですが、最初に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(ffap-bindings)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を設定しておきましょう。&lt;code&gt;C-x C-f&lt;/code&gt;が非常に便利になります。だいたいの方が設定してるかと思いますが、まだという方は&lt;code&gt;init.el&lt;/code&gt;に書いて保存し、最後の&lt;code&gt;)&lt;/code&gt;の後にカーソルを持っていって&lt;code&gt;C-x C-e&lt;/code&gt;しましょう。設定が反映されます。この設定で&lt;code&gt;C-x C-f&lt;/code&gt;の入力がファイル以外も受け付けてくれますし、カーソルにポイントされてるファイルやURLをデフォルトで開こうとしてくれます。&lt;/p&gt;

&lt;p&gt;…よし。じゃあ解説始めますよ。&lt;code&gt;C-x C-f ~/&lt;/code&gt;してみて下さい。上の設定をしていたらディレクトリでも開ける筈です。するとホームディレクトリが&lt;code&gt;ls -al&lt;/code&gt;された感じのバッファが出てくると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//KeenS.github.io/images/Screenshot_from_2013-10-04.png&#34; alt=&#34;私のホームはちょっとマズいのがあったので.emacs.dのスクリーンショット&#34; title=&#34;dired-mode-screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これが&lt;code&gt;dired-mode&lt;/code&gt;です。これは普通に&lt;code&gt;n&lt;/code&gt;(&lt;code&gt;C-n&lt;/code&gt;でも可)や&lt;code&gt;p&lt;/code&gt;(&lt;code&gt;C-p&lt;/code&gt;でも可)で移動して、Enterでそのファイルやディレクトリを開けます。これだけでも十分便利なのですが、ここからさらにファイル操作までできます。&lt;/p&gt;

&lt;p&gt;適当なファイルにカーソルを合わせて&lt;code&gt;C&lt;/code&gt;するとコピー先を聞かれるので、入力してあげるとコピーしてくれます。複数ファイルをコピーしたいなら、コピーしたいファイル上で&lt;code&gt;m&lt;/code&gt;してマークを付けて、&lt;code&gt;C&lt;/code&gt;すれば一括でコピーできます。&lt;/p&gt;

&lt;p&gt;勿論、他にもコマンドはあります。同じような使い方のできる代表的なものを挙げると、&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;コマンド&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;操作(実行されるLinuxコマンド)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;コピー(&lt;code&gt;cp&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;リネーム/移動 (&lt;code&gt;mv&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;削除(&lt;code&gt;rm&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;M&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;権限操作(&lt;code&gt;chmod&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;G&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;グループ変更(&lt;code&gt;chgrp&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;O&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;所有権変更(&lt;code&gt;chown&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Z&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;圧縮/展開(&lt;code&gt;compress/uncompress/gunzip/bunzip/unzip&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;B&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;(*.elファイルの)バイトコンパイル&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;!&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;任意のコマンドの実行。デフォルトで空気読んだコマンドになってる。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;他にも無数に操作はありますがファイル操作はこんなものでしょう。あとはバッファを閉じる&lt;code&gt;q&lt;/code&gt;や親ディレクトリに移動する&lt;code&gt;^&lt;/code&gt;、バッファの更新を行なう&lt;code&gt;g&lt;/code&gt;、マークを外す&lt;code&gt;u&lt;/code&gt;(&lt;code&gt;U&lt;/code&gt;で全解除)を覚えていれば操作には困らない筈です。&lt;/p&gt;

&lt;p&gt;が、頻繁に使っているとより良く使いたくなります。そこで今回見付けた設定を紹介します。&lt;/p&gt;

&lt;p&gt;まず&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(add-hook &#39;dired-load-hook (lambda ()
                  (define-key dired-mode-map &amp;quot;r&amp;quot; &#39;wdired-change-to-wdired-mode)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;から。これはdired-modeで&lt;code&gt;r&lt;/code&gt;するとバッファがエディタブルになり、ファイル名を普通に変更できます。そのまま&lt;code&gt;C-x C-s&lt;/code&gt;すればリネームの終了です。&lt;br /&gt;
普通にEmacsの編集コマンドが使えるので &lt;code&gt;M-%&lt;/code&gt;とかで一括拡張子変更とか&lt;code&gt;C-x r t&lt;/code&gt;でファイル名にプリフィクスつけたり自由自在です。&lt;/p&gt;

&lt;p&gt;次に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setq dired-listing-switches (purecopy &amp;quot;-Ahl&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Emacsがdired-modeを表示するとき、実際に裏で &lt;code&gt;ls -al&lt;/code&gt;を走らせているのですが、そのときのオプションを変更できます。但し内部で&lt;code&gt;-l&lt;/code&gt;の結果を利用してるのでこれは必須です。しかしそれ以外は自由に設定できます。因みにWindowsでもEmacsがエミュレートしてくれるので設定可能ですが、一部未実装のものもあるそうです。&lt;/p&gt;

&lt;p&gt;頻繁に使うなら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setq dired-dwim-target t)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もお勧めです。&lt;/p&gt;

&lt;p&gt;これを設定しておくと、ウィンドウを分割して左右にdiredバッファを開いているとき、&lt;code&gt;R&lt;/code&gt;や&lt;code&gt;C&lt;/code&gt;のデフォルトの宛先がもう片方のディレクトリになります。伝わりますかね？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//KeenS.github.io/images/Screenshot_from_2013-10-05.png&#34; alt=&#34;分割した両方のWindowでdired-modeを実行した状態。&#34; title=&#34;dired-mode in both of split window&#34; /&gt;&lt;/p&gt;

&lt;p&gt;のようにdiredでディレクトリA, Bを開いてるときにディレクトリAでファイルのコピーやら移動やらをするときにデフォルトでBに移動やコピーを行なうようになります。いくつかのファイルをディレクトリ間で移動させるときに非常に便利ですね。&lt;/p&gt;

&lt;p&gt;あ、&lt;code&gt;C-x C-f /ftp:user@ftp-server:/path/to/dir&lt;/code&gt;でFTPサーバーのディレクトリ/ファイルにもアクセスできるのは御存じですよね？これと組合せるとEmacsが割と使い易いFTPクライアントに大変身!&lt;/p&gt;

&lt;p&gt;あとは私がどうしても欲しかったtarballですね。&lt;/p&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/KeenS/6828197.js?file=dired-tar.el&#34;&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;(defun dired-tar (tarname files &amp;amp;optional arg)
  &amp;ldquo;A dired-mode extension to archive files marked. With prefix argument, the tarball is gziped.&amp;rdquo;
  (interactive (let ((files (dired-get-marked-files)))&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; (list (read-string &amp;amp;quot;Tarball name: &amp;amp;quot; (concat (file-relative-name (car files)) &amp;amp;quot;.tar.gz&amp;amp;quot;))
           files &amp;amp;quot;P&amp;amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; (let ((tar (if arg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; (if dired-guess-shell-gnutar
         (concat dired-guess-shell-gnutar &amp;amp;quot; zcf %s %s&amp;amp;quot;)
       &amp;amp;quot;tar cf - %2s | gzip &amp;amp;gt; %1s&amp;amp;quot;)
       &amp;amp;quot;tar cf %s %s&amp;amp;quot;)))
(shell-command (format tar tarname (mapconcat &#39;file-relative-name files &amp;amp;quot; &amp;amp;quot;)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;p&gt;(add-hook ‘dired-load-hook (lambda () (define-key dired-mode-map &amp;ldquo;T&amp;rdquo; ‘dired-tar)))
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/p&gt;

&lt;p&gt;これでtarballにまとめたいファイルをマークして&lt;code&gt;T&lt;/code&gt;すればまとめてくれます。&lt;code&gt;C-u T&lt;/code&gt;するとgzip圧縮までしてくれます。因みに解凍/展開はファイル上で&lt;code&gt;!&lt;/code&gt;するとデフォルトコマンドが展開(&lt;code&gt;tar xzvf&lt;/code&gt;など)になってるので専用コマンドは必要ありません。補足ですが個人用なのでテストとかしてません。一旦御自身で動作テストなどをされてから実行されることをお勧めします。&lt;/p&gt;

&lt;p&gt;他にも色々なコマンドがたくさんあったので興味のある方は探求してみて下さい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>octomacs.elを修正しました</title>
      <link>//keens.github.io/blog/2013/09/16/octomacs-el</link>
      <pubDate>Mon, 16 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>//keens.github.io/blog/2013/09/16/octomacs-el</guid>
      <description>&lt;p&gt;EmacsからOctopressに投稿できるOctomacs.elが最新版のrvm.elに対応してないようだったので修正してみました。&lt;/p&gt;

&lt;p&gt;原因はOctomacs.elがrvm.elの内部で使われている関数を使っていたのですが、その関数が最新版で削除されていたからだったみたいです。&lt;/p&gt;

&lt;p&gt;結論として、&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;12&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;13&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;14&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;15&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;18&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;19&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;21&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;22&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;23&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;24&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;25&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;26&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;27&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;28&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;29&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;30&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;31&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;32&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;33&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;34&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;35&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;36&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;37&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;38&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;39&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;40&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;41&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;42&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;43&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;44&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;45&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;46&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;47&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;48&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;49&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;50&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;51&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;52&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;&#34;&gt;&lt;span class=&#34;line&#34;&gt;*** /home/kim/.emacs.d/lisp/octomacs/octomacs.el 2013-09-16 22:29:14.498296762 +0900
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;--- /home/kim/.emacs.d/elpa/octomacs-20121026.1649/octomacs.el 2013-08-31 23:54:13.044373498 +0900
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ***************
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ***4,10****
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;; Author: Jacob Helwig &amp;lt;jacob@technosorcery.net&amp;gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;; Homepage: http://technosorcery.net
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! ;; Version: 0.0.1
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;; URL: https://github.com/jhelwig/octomacs
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;; License:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;--- 4,11 ----
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;; Author: Jacob Helwig &amp;lt;jacob@technosorcery.net&amp;gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;; Homepage: http://technosorcery.net
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! ;; Version: 20121026.1649
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! ;; X-Original-Version: 0.0.1
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;; URL: https://github.com/jhelwig/octomacs
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ;;; License:
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ***************
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; ***133,146****
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (defun octomacs-format-rake-task-with-args (task &amp;amp;optional arguments)
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;Build a shell suitable string of the rake TASK name with the specified ARGUMENTS.&#34;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (let ((arguments-string (if arguments
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! (format &#34;[%s]&#34; (if (listp arguments) (mapconcat &#39;octomacs-shell-escape-string arguments &#34;, &#34;) arguments))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;&#34;)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (format &#34;&#39;%s%s&#39;&#34; task arguments-string)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (defun octomacs-rake-with-rvm (directory task &amp;amp;optional arguments)
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;Run rake task TASK with specified ARGUMENTS in DIRECTORY using rvm&#34;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (let* ((default-directory (file-name-as-directory (expand-file-name directory)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! (rvmrc-info (or (rvm--load-info-rvmrc) (rvm--load-info-ruby-version) (rvm--load-info-gemfile)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (rvm-command (if rvmrc-info
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (concat &#34;rvm &#34; (mapconcat &#39;identity rvmrc-info &#34;@&#34;) &#34; do &#34;)
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;&#34;)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;--- 134,148 ----
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (defun octomacs-format-rake-task-with-args (task &amp;amp;optional arguments)
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;Build a shell suitable string of the rake TASK name with the specified ARGUMENTS.&#34;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (let ((arguments-string (if arguments
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! (format &#34;[%s]&#34; (mapconcat &#39;octomacs-shell-escape-string arguments &#34;, &#34;))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;&#34;)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (format &#34;&#39;%s%s&#39;&#34; task arguments-string)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;  
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (defun octomacs-rake-with-rvm (directory task &amp;amp;optional arguments)
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;Run rake task TASK with specified ARGUMENTS in DIRECTORY using rvm&#34;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (let* ((default-directory (file-name-as-directory (expand-file-name directory)))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! (rvmrc-path (rvm--rvmrc-locate directory))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;! (rvmrc-info (if rvmrc-path (rvm--rvmrc-read-version rvmrc-path) nil))
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (rvm-command (if rvmrc-info
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; (concat &#34;rvm &#34; (mapconcat &#39;identity rvmrc-info &#34;@&#34;) &#34; do &#34;)
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt; &#34;&#34;)))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;こんな感じです。これでちゃんと&lt;code&gt;.rvmrc&lt;/code&gt;やら&lt;code&gt;.ruby-version&lt;/code&gt;やら&lt;code&gt;.ruby-gemset&lt;/code&gt;やらを反映してくれます。 &lt;a href=&#34;https://github.com/jhelwig/octomacs/pull/2&#34;&gt;pull-req投げてみました&lt;/a&gt;。初pull-reqです。英語心配です。&lt;/p&gt;

&lt;p&gt;俺、pull-reqとりこまれたら&lt;code&gt;rake gen_deploy&lt;/code&gt;にも挑戦するんだ…&lt;/p&gt;

&lt;p&gt;あ、因みにこの投稿は&lt;code&gt;init.el&lt;/code&gt;に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setq octomacs-workdir-alist &#39;((&amp;quot;default&amp;quot; . &amp;quot;~/Ruby/octopress&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;して&lt;code&gt;octomacs-new-post&lt;/code&gt;から投稿してます。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>