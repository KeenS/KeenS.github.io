<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Isucon on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/isucon/</link>
    <description>Recent content in Isucon on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 27 Sep 2015 23:58:24 +0900</lastBuildDate>
    <atom:link href="//KeenS.github.io/categories/isucon/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>isucon にCommon Lispチームで出た</title>
      <link>//keens.github.io/blog/2015/09/27/isucon_nicommon_lispchi_mudedeta</link>
      <pubDate>Sun, 27 Sep 2015 23:58:24 +0900</pubDate>
      
      <guid>//keens.github.io/blog/2015/09/27/isucon_nicommon_lispchi_mudedeta</guid>
      <description>

&lt;p&gt;κeenです。 &lt;a href=&#34;isucon.net&#34;&gt;isucon&lt;/a&gt; に&lt;a href=&#34;https://twitter.com/i/notifications?lang=ja&#34;&gt;@nitro_idiot&lt;/a&gt;(深町さん)と&lt;a href=&#34;https://twitter.com/Rudolph_Miller?lang=ja&#34;&gt;@Rudolph_Miller&lt;/a&gt;のCommon Lispチームで出てきました。チーム名clfreaks。勿論Common Lispで再実装しました。&lt;/p&gt;

&lt;p&gt;因みに深町さんは今回使ったWebサーバーのwooを含めCommon Lispのライブラリを多数公開している&lt;a href=&#34;http://github-awards.com/users/search?login=fukamachi&#34;&gt;世界一のCommon Lisper&lt;/a&gt;、ルドルフさんは元Common Lispの会社のCTO。&lt;/p&gt;

&lt;h1 id=&#34;前日:b63483bc4957736680c2a5e5d35a6d40&#34;&gt;前日&lt;/h1&gt;

&lt;p&gt;κeen 「あとはwooがunixソケット使えたら嬉しいんですがまあ、いいでしょう。」&lt;br /&gt;
fukamachi 「今からやれば明日には間に合うな」&lt;br /&gt;
fukamachi 「ローカルでは一応動いた。間に合いそうである」&lt;br /&gt;
fukamachi 「5倍ちょっとくらい速いかな」&lt;/p&gt;

&lt;p&gt;この間1時間半足らず。&lt;/p&gt;

&lt;p&gt;κeen 「練習してて気付いたんですけどデプロイツールってどうしましょう。」&lt;br /&gt;
fukamachi 「κeenさんが使い慣れてるツールで良いです」&lt;br /&gt;
κeen 「シェルスクリプトかー。」&lt;br /&gt;
fukamachi 「やめろ」&lt;/p&gt;

&lt;p&gt;結局capistranoを使うことに。&lt;/p&gt;

&lt;h1 id=&#34;当日の作業:b63483bc4957736680c2a5e5d35a6d40&#34;&gt;当日の作業&lt;/h1&gt;

&lt;p&gt;私がマシン立ち上げてソースをgitに上げるまでやる。残りの二人はソースを読む、私はNginXやMySQLやCapistranの基本設定をする。&lt;/p&gt;

&lt;h2 id=&#34;午前中-common-lispでの再実装:b63483bc4957736680c2a5e5d35a6d40&#34;&gt;午前中 Common Lispでの再実装&lt;/h2&gt;

&lt;p&gt;ルドルフさんが見付けた遅い部分を書き出し、深町さんがCommon Lispの実装を進める。&lt;/p&gt;

&lt;p&gt;私がmysqlの設定をするもなぜか反映されずに詰まる。ルドルフさんと一緒にやるも数時間やっても解決せず。結局新しいインスタンスを立ち上げたら動いた。my.cnfにsym linkを貼ったのが問題だったよう。/etc/my.cnfの問題ではない。&lt;/p&gt;

&lt;h2 id=&#34;午後-実装を進めつつチューニング:b63483bc4957736680c2a5e5d35a6d40&#34;&gt;午後 実装を進めつつチューニング&lt;/h2&gt;

&lt;p&gt;私の方がどうにかなったのでルドルフさんも実装をすすめる。私はインデックスを張ろうとしてalterが帰ってこなくて諦めたりどうせ使わないけどunicornのワーカー数を増やして気分だけでもスコアを上げたりN+1クエリをJOINで書き直したり。&lt;/p&gt;

&lt;h2 id=&#34;comon-lispの実装がとりあえず終了:b63483bc4957736680c2a5e5d35a6d40&#34;&gt;Comon Lispの実装がとりあえず終了&lt;/h2&gt;

&lt;p&gt;バグは残ってる、と言われつつCL実装をmasterにマージしたのがgitのログを見るに15:28。そこからデバッグ。色々ハマったりライブラリにバグがあったり（深町さんのライブラリだったのでその場でbug fix）してログイン処理が通ったのが17時くらい？そこからベンチマークを走らせるとまたtypoとかのバグがあってちまちま直していくも結局間に合わず0点のままFINISH。&lt;/p&gt;

&lt;h1 id=&#34;反省とか:b63483bc4957736680c2a5e5d35a6d40&#34;&gt;反省とか&lt;/h1&gt;

&lt;p&gt;思ったよりアプリケーションが重厚で再実装に時間取られすぎたなー、が一番。あとMysqlの設定でハマったのは本当にやりたくなかった。&lt;/p&gt;

&lt;p&gt;ベンチマーク走らせるとデータが溜まることに気付かずに大分走らせた後でインデックスを張ろうとしたら20分くらい待っても帰ってこなかったのでインデックスを諦めた。なのでruby実装のスコアも800点くらい。
やろうとしたことはN+1クエリを消すとかuserをメモリに載せるとか。&lt;/p&gt;

&lt;p&gt;かなり苦い思いはしたけどCommon Lispに足りないものとか今後の課題とかも見えたし出た価値はあったと思う。例えばデプロイの度にコンパイルが走るが、コンパイルの重いライブラリを使ってるとデプロイが遅くなるので並列ビルド欲しいよね、とか。ただ、大きな目的だったWeサーバーのチューニングまではいけなかった。&lt;/p&gt;

&lt;p&gt;今年は知り合いと出ちゃったので来年は知らない人とチームを組もうかと。&lt;/p&gt;

&lt;p&gt;運営、出題の方々、お疲れ様でした。来年こそは本戦出ます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ISUCONこれまでの流れ</title>
      <link>//keens.github.io/slide/ISUCONkoremadenonagare/</link>
      <pubDate>Fri, 04 Sep 2015 08:47:05 +0900</pubDate>
      
      <guid>//keens.github.io/slide/ISUCONkoremadenonagare/</guid>
      <description>&lt;section data-markdown
    data-separator=&#34;\n\n&#34;
    data-vertical=&#34;\n\n&#34;
    data-notes=&#34;^Note:&#34;&gt;
&lt;script type=&#34;text/template&#34;&gt;
# ISUCONこれまでの流れ
----------------------
雑に書き殴った
&lt;!-- .slide: class=&#34;center&#34; --&gt;

# About Me
---------
![κeenのアイコン](/images/icon.png) &lt;!-- .element: style=&#34;position:absolute;right:0;z-index:-1&#34; --&gt;

 + κeen
 + [@blackenedgold](https://twitter.com/blackenedgold)
 + Github: [KeenS](https://github.com/KeenS)
 + ISUCON3、 4の予選、本戦に出場（学生枠）

# ISUCON1 ブログ
---------------

* node perl ruby
* kazeburoの罠
* ブログのサイドバーが重いやつ
* 割と親切なルール


# ISUCON2 チケット予約サイト
---------------------------

* perl ruby node php java python
* 席ランダムにしてなくてもベンチマーカー通っちゃう
* 変更が1秒以内に反映されていること → 0.9秒毎に裏でバッチを回す
* JOINが3連になってる所があってみんなそこに引っ掛かったがボトルネックはそこじゃない
* ちょっとルールが雑になった


# ISUCON3予選 スニペット投稿サイト
--------------------------------
* go node perl python ruby php
* AWS1台
* Markdown変換がperl製の重いやつ
* AWSだとプロセスのフォークも重い
* titleの抜き出しも重い
* チェッカーが甘くてVarnishを導入しただけで点数爆上がり
* SQLの典型問題とかも
* workloadに気付かなかった人多数
* 学生枠が出来た
* ベンチマーカが通れば何でもアリな風潮


# ISUCON3本戦 画像SNS
--------------------
* go node perl python ruby
* オンプレ5台
* 画像の変換が重い
* 実は帯域もつらい
* 画像のチェッカがあってチェッカが通れば画質を落としても良かった
* 組長の罠
* ベンチマーカーに通れば何でもアリ
* 複数サーバーでのファイルの共有にWebDAVが盲点
* 点数計算の罠に嵌まる人多数
  + 基本点より追加点に目が眩む人がそれなりに
* 推測するな計測せよ
* nodeで初期パスワードが間違っているトラブル


# ISUCON4予選 銀行
--------------------------------------

* go node perl php python ruby
* AWS1台
* ワークロードを桁外れに指定するとベンチマーカーが走り続けるバグ
* ベンチマーカーにアクセスして行動パターンを解析した人が出る（その情報は使ってない。スポーツマンシップ。）
* テンプレートエンジンをやめて静的ファイル
* Go勢のon memory戦略が跋扈
* 「メモリに載せれば勝てるぜ」風潮
* 静的ファイルを返さない反則ギリギリのチューニング
* ベンチマーカーのチューニング
* Varnish潰し
* アプリをC++で書き換えて予選突破したチームも出る


# ISUCON4本戦 動画広告
----------------

* go perl php python ruby
* オンプレ3台
* 最初からRedisに動画が載ってる
* それ外したらスコア頭打ち(帯域がつまる)
* ベンチマーク同士が干渉しあう
* 実はCache-Controlをしたらスコアが爆上がり(上位2チームだけ気付いた)
* 3位のチームは外向きと内向きの2枚のNICを使って団子状のスコアから頭1つだけ出た


#ISUCON5予選 ???
----------------
* perl ruby node php python go java (scala)
* GCP 
* 今までの予選だとベンチマーカが競技者の手元に渡る問題があった。
* かといって外部からのベンチマークは安定しない。
* GCPならGoogleの謎の技術によって安定するらしい。
* @tagomoris 「もはやISUCONは予選で落ちる人の方が多くなった。その人達にとっては予選こそがISUCONなのだ」
  
&lt;/script&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>ボトルネックのイイ話</title>
      <link>//keens.github.io/slide/botorunekkunoiihanashi/</link>
      <pubDate>Thu, 04 Jun 2015 00:03:14 +0900</pubDate>
      
      <guid>//keens.github.io/slide/botorunekkunoiihanashi/</guid>
      <description>&lt;section data-markdown
    data-separator=&#34;\n\n&#34;
    data-vertical=&#34;\n\n&#34;
    data-notes=&#34;^Note:&#34;&gt;
&lt;script type=&#34;text/template&#34;&gt;
# ボトルネックのイイ話
----------------------
サイバーエージェント15新卒  
FRESH勉強会

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# About Me
---------
![κeenのアイコン](/images/icon.png) &lt;!-- .element: style=&#34;position:absolute;right:0;z-index:-1&#34; --&gt;

 + κeen
 + [@blackenedgold](https://twitter.com/blackenedgold)
 + Github: [KeenS](https://github.com/KeenS)
 + 渋谷のエンジニア
 + Lisp, ML, Shell Scriptあたりを書きます

# ボトルネック
-------------

&gt; ボトルネック (bottleneck) とは、システム設計上の制約の概念。英語の「瓶の首」の意。一部（主に化学分野）においては律速（りっそく、「速さ」を「律する（制御する）」要素を示すために使われる）、また『隘路（あいろ）』と言う同意語も存在する。 


# Webアプリの主な登場人物
------------------------

* リバースプロキシ
* アプリケーションサーバ
* データベース


![relation of reverse proxy, app and DB](/images/webapp.png)

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# レスポンスタイムとスループット
------------------------------

* レスポンスタイム 
  + リクエストを投げてレスポンスが返ってくるまでの時間
  + ユーザから見たメトリクス
* スループット&lt;!-- .element: class=&#34;fragment highlight-red&#34;--&gt;
  + 一定時間内にシステムがどれだけのリクエストを捌けるか
  + 中の人から見たメトリクス


# スループット
-------------

* スループットの最大 ≒ リソースの限界
  + ネットワーク帯域
  + ディスクIO
  + メモリ使用量
  + CPU負荷
* リソースのどれか1つでも限界になったらそれ以上パフォーマンスは上がらない

# パフォマンスの目安
-------------------

* ネットワーク帯域: bpsで表わす。NICによるが 1Gbpsとか
* CPU: パーセンテージで表わす。100xコア数が最大マシンに依る。
* メモリ: Bで表わす。ピンキリだが1GB ~ 128GBくらい？
* ディスクIO: Bpsで表わす。HDDなら 100Bpsとか。SSDなら10倍くらい。

テキトーに調べたので間違ってるかも

# 誰が何を
---------

* リバースプロキシ: ネットワーク、メモリ、CPUなど
* アプリケーションサーバl: CPU、メモリなど
* データベース: CPU、ディスクIOなど


&lt;span style=&#34;font-size: 200%&#34;&gt;「CPUは100%に行ってないのにアプリケーションが遅いんだよ」&lt;/span&gt;

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# 誤り
------

* ボトルネックはCPUとは限らない
* 他のメトリクスも一緒に見るべき


# 推測するな。計測せよ
---------------------

* 実際に測ってみないとどこがボトルネックか分からない
* 何をしてどれくらいパフォーマンスが上がったのかも分からない
  + コストパフォーマンスも重要


&lt;span style=&#34;font-size: 200%&#34;&gt;「パフォーマンスが悪いからCPUをグレードアップしよう」&lt;/span&gt;

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# 誤り
------

* ボトルネックはCPUとは限らない
* 例えばネットワーク帯域が詰まっているのにCPUを改善しても意味がない
* 帯域が詰まってるならデータを減らす、NIC（マシン）を増やすなどをする


&lt;span style=&#34;font-size: 200%&#34;&gt;「多分アプリケーションを高速化したよ」&lt;/span&gt;

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# 誤り
------

* 計測せずに高速化しても意味がない
  + テストの無いリファクタリングがただの破壊なのと同じ
* 高速化した気になって実際はコードが汚なくなっただけの可能性もある

# ボトルネックは変わりうる
------------------------

* 一箇所をずっと改善してても意味がない
* ある程度改善したら次のリソースの限界がきてるかもしれない

&lt;span style=&#34;font-size: 200%&#34;&gt;「アプリケーションを10倍高速化したのにあんまり速くなってない」&lt;/span&gt;

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# 誤り
------

* 10倍くらい極端に高速化すると次のリソースがボトルネックになる
* ディスクやネットワークの改善を考えるべき

# リソースの食い合い
-------------------

* 1マシンで完結している場合、リソースの食い合いが発生しうる
  + リバースプロキシとアプリケーションがCPUを食い合うとか
* この時、どのようにして解決するのが適切か？

# 例題
------

* アプリが80%くらいの負荷
* Rプロキシが20%くらいの負荷


# 例題
------

1. アプリが多くCPUを喰ってるからアプリを高速化すべき
2. アプリが多くCPUを必要としてるからRプロキシはアプリにCPUを譲るべき

# 例題
------

1. アプリが多くCPUを喰ってるからアプリを高速化すべき
2. &lt;span style=&#34;color: #aaa;&#34;&gt;アプリが多くCPUを必要としてるからRプロキシはアプリにCPUを譲るべき&lt;/span&gt;

# アムダールの法則
-----------------

* [アムダールの法則 - Wikipedia](http://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%A0%E3%83%80%E3%83%BC%E3%83%AB%E3%81%AE%E6%B3%95%E5%89%87)
* ざっくり言うと比率の小さな部分を高速化しても全体の高速化は高が知れてる

&lt;span style=&#34;font-size: 200%&#34;&gt;「ORマッパ使うと遅そうだから生のSQL使おう」&lt;/span&gt;

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# 誤り
------

* ORマッピングにかかるコストは微小
* 他にもっと効率的に改善出来る部分に手をつけるべき

# リソースの配分
---------------

* 逆に、与えられたリソースからどれをどこに割り当てるかの問題もある
* 理論的には負荷の高い部分に多くリソースを割り当てれば良い。
* しかしアプリケーションの構成を先に決めないといけないので事前に計測は出来ない
  + 知識と経験と勘

# 例題
------

* 画像配信アプリケーション
* VPS5台 
  + ネット1Mbps/メモリ1G/CPU4コア/HDD
* Rプロキシ、アプリ、DBにそれぞれ何台割り当てる？
  + 1つのマシンに複数機能を持たせても良い。

# チューニングは難しい
---------------------

* 様々な部分の知識が必要
* システム全体を見渡した設計力も大事
* 細かなチューニングテクニックも一杯
  + 今回話してないが、キャッシュ戦略とかも
  + Cache-Control
* 知識がないと計測しても数値の意味が分からない

&lt;span style=&#34;font-size: 200%&#34;&gt;「やった。5%高速化した」&lt;/span&gt;

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# 誤り
------

* パフォーマンスは計測の度にゆらぎがある
* 5%くらいなら普通に測定誤差の範囲内
* 逆に、5%くらいの改善をしても意味がない

# チューニングは楽しい
---------------------

* パズルゲームみたいな部分もある
* チューニング次第でスループット何十倍とかいく
* 難しい分一気にパフォーマンスが上がると喜びも一入

# ISUCON

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# ISUCON
--------

* [ISUCON公式Blog](http://isucon.net/)
* Webアプリケーションチューニングコンテスト
* 優勝賞金100万円
* 何でもアリ。どこをいじってもいい。
* 要はさっきの知識をフルで活用出来る


# ISUCON
--------

* 何でもアリは実は珍しい。
  + 他はデータベースのみ、とかアプリは触っちゃだめ、とか雁字搦め
* 前回は185組（1チーム2~3人）の大きな大会
  + 予選で27チームに絞られる
* 界隈の有名人が揃う天下一武闘会の様相
* 楽しい


# 良質な問題
-----------

* 過去問は教育的な問題が多数。
* 過去問は全て公開。
* 腕試しに丁度良い。

# 今年のISUCON
--------------

* 予選 9/26,27
* 本戦 10/31
* 2~3人のチーム
* Google Cloud Platform
* 出題は[@tagomoris](https://twitter.com/tagomoris)さんと[@kamipo](https://twitter.com/kamipo)さん


&lt;span style=&#34;font-size: 300%&#34;&gt;Let&#39;s ISUCON&lt;/span&gt;

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# 参考
------
* [ISUCONで学ぶ Webアプケーションのパフォーマンス向上のコツ 実践編 完全版](http://www.slideshare.net/kazeburo/isucon-summerclass2014action2final)
* [ISUCONの話(夏期講習2014)](http://www.slideshare.net/tagomoris/isucon2014)
* [kamipoさんはすごい人](https://twitter.com/search?q=kamipo%E3%81%95%E3%82%93%E3%81%AF%E3%81%99%E3%81%94%E3%81%84%E4%BA%BA&amp;src=typd&amp;vertical=default&amp;f=tweets)

&lt;/script&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>#isucon で学生賞二連覇してきた</title>
      <link>//keens.github.io/blog/2014/11/09/isucondexue-sheng-shang-er-lian-ba-sitekita</link>
      <pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>//keens.github.io/blog/2014/11/09/isucondexue-sheng-shang-er-lian-ba-sitekita</guid>
      <description>

&lt;p&gt;κeenです。@nemunemu3desuさん（ねむさん）、@cocodripsさん（くーむさん）とチーム「(ρ_-)/超銀杏バスターズ&amp;#92;(･ω･ o)」で&lt;a href=&#34;http://isucon.net/&#34;&gt;ISUCON4&lt;/a&gt;で学生賞とってきた。二連覇わーい。&lt;/p&gt;

&lt;p&gt;※2014-11-09 16:50 ちょっと加筆修正しました&lt;/p&gt;

&lt;p&gt;やったこと&lt;/p&gt;

&lt;h1 id=&#34;本番前:47e0e2af3132d260296545e7de7e6581&#34;&gt;本番前&lt;/h1&gt;

&lt;p&gt;なにもしなかった。しかも前日に体調崩して簡単な打ち合わせも欠席という状態。結局前回と同じく私インフラ、ねむさんアプリ、くーむさんDB。&lt;/p&gt;

&lt;h1 id=&#34;当日:47e0e2af3132d260296545e7de7e6581&#34;&gt;当日&lt;/h1&gt;

&lt;h2 id=&#34;朝:47e0e2af3132d260296545e7de7e6581&#34;&gt;朝&lt;/h2&gt;

&lt;p&gt;起床成功。&lt;/p&gt;

&lt;h2 id=&#34;競技開始-昼御飯:47e0e2af3132d260296545e7de7e6581&#34;&gt;競技開始〜昼御飯&lt;/h2&gt;

&lt;p&gt;くーむさんにssh、ねむさんにgitレポジトリの設定してもらって私はcapistranoの設定。capistrano触るのは去年のisucon以来でうんうん言いながらやってた。&lt;/p&gt;

&lt;p&gt;rack-line-profをしかけてもらってNginXでjsとcss返してベンチ走らせるもなんか動かないしでつまる。運営からベンチに障害があるとのアナウンスがきてローカルで動かすもエラーが出るわプロファイル結果出ないわ。&lt;/p&gt;

&lt;p&gt;foremanが死んでなかったっぽいことが判明したりとちょっと前進するもエラーは残る。&lt;/p&gt;

&lt;p&gt;しばらくにらめっこしてもエラーとれないのでとりあえず昼御飯食べながらプロファイル結果見て作戦会議。ここ遅いよって言われて見てみたらrubyからmp4返してたので第一段はそこをWebDAVサーバーに置くことに。因みにエラーの原因は後にline-profのバグだったことが判明。&lt;/p&gt;

&lt;p&gt;1号サーバーだけCPUが少ないので3号サーバでリクエスト受けて動画のPOSTは1号サーバーで動いてるWebDAVサーバーにスルーパス、GETはリダイレクトな感じにしよう。私がWedDAVサーバー、ねむさんがアプリ、くーむさんは引き続きアプリ読んで次のボトルネック解析。&lt;/p&gt;

&lt;p&gt;因みになんで1号サーバーをWebDAVにしたかというと次の手で2号サーバーもフロントにしたかったから。&lt;/p&gt;

&lt;h2 id=&#34;昼御飯後-15-16時くらい:47e0e2af3132d260296545e7de7e6581&#34;&gt;昼御飯後〜15、16時くらい？&lt;/h2&gt;

&lt;p&gt;静的ファイルならlighttpdかなと思ってWebDAV設定するもyumで入れたやつはWebDAV用にビルドされてなかった。結局NginXにした。&lt;/p&gt;

&lt;p&gt;lighttpd、一瞬で消え去ったと思ってる方も居るかと思いますがRaspberry Piでも元気に動いてくれる良い子なんですよ！！&lt;/p&gt;

&lt;p&gt;ねむさんはWebDAV叩くの初めてみたいで苦戦してたり私の設定ミスもあったりでようやく動く。これでスコアめっちゃ上がる。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;4位浮上うぇーーーーーい &lt;a href=&#34;https://twitter.com/hashtag/isucon?src=hash&#34;&gt;#isucon&lt;/a&gt;&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/530996733145149440&#34;&gt;2014, 11月 8&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;社会人相手に一時的に4位を取ったのは嬉しかった。&lt;/p&gt;

&lt;p&gt;どうやらネットワーク帯域を全部埋めたよう。&lt;/p&gt;

&lt;h2 id=&#34;16時以降:47e0e2af3132d260296545e7de7e6581&#34;&gt;16時以降&lt;/h2&gt;

&lt;p&gt;くーむさんの分析でログをファイルに書き出してる部分がめっちゃ無駄&amp;amp;フロントの2台化を邪魔するのでどうにかしようとの話になる。最初jsonをシリアライズしてるからMongoDB、いや、やっぱ安心と信頼のMySQL、いや、やっぱ既に動いてるRedisと言って結局MySQLに落ち着く。2台からアクセスが来るので1号サーバに置く。&lt;/p&gt;

&lt;p&gt;くーむさんがねむさんにデータベーススキーマの設計とか説明しつつねむさんが実装、私がMySQLのリモートログインとかその他DB全般の設定をする。よく考えたらねむさんPythonアイドルの女子大生とペアプロしてるぞ。&lt;/p&gt;

&lt;p&gt;しかし結果間に合わず。うーむ。&lt;/p&gt;

&lt;h2 id=&#34;最後:47e0e2af3132d260296545e7de7e6581&#34;&gt;最後&lt;/h2&gt;

&lt;p&gt;ベンチマーク毎にWebDAVにファイルが溜っていくのでどうにかしよう。今までは手動削除してたけど本番計測下手したらこけるんじゃねって不安。アプリの初期化API内でWebDAVサーパーのファイルを全部削除しようとするもなんか拒否られる。設定ミスってたかなあ。&lt;/p&gt;

&lt;p&gt;結局CGI(シェル)スクリプトで叩くという荒技。レスポンスが500なのは御愛嬌。しかもNginXがfastCGIしかサポートしてないのでNginXからApacheにフォワードしてからApacheがCGI起動という曲芸のような仕様。MySQLが間に合えばこのシェルスクリプトにDBの初期化も入れるつもりだった。lighttpdならこんなことにはならなかったのに…&lt;/p&gt;

&lt;p&gt;Unicornのワーカー数とかベンチマークのワークロード数とかいじってみるも測定誤差がめっちゃ大きくて参考にならず、4位に浮上したときのパラメータで挑む。&lt;/p&gt;

&lt;h1 id=&#34;結果:47e0e2af3132d260296545e7de7e6581&#34;&gt;結果&lt;/h1&gt;

&lt;p&gt;タイトルにあるように学生賞。全体は12位で一応真ん中よりは上。賞金GET!無料 VPS GET!!しかもVPSはTECHORUS社長の一声で半年から1年になりました。TECHORUS++++&lt;/p&gt;

&lt;p&gt;懇親会で@tagomorisさんに学生チームで帯域を埋めるのは大したもんと褒められた。ヤッター。&lt;/p&gt;

&lt;h1 id=&#34;反省:47e0e2af3132d260296545e7de7e6581&#34;&gt;反省&lt;/h1&gt;

&lt;p&gt;個人的には自由奔放すぎた。もうちょっと協調的だったら、とかREADMEくらい書いたら、とかあった。あと私はインフラ担当だったからどのミドルウェアがどのログ管理してて、っていうのを把握してたけど他の二人は把握出来てないことを把握してなかった。毎回rubyのログはどこにあるんですかとか聞かれてた。Capistranoとか結局私しか使えてなかった。&lt;/p&gt;

&lt;p&gt;チーム全体では最初ごたごたし過ぎた所為で最後MySQL入れるのが間に合わなかったのと静的ファイルをキャッシュしてなかったねっていうの。静的ファイルをキャッシュしようとしたらまぐれでCache-Control設定したかもしれない（実際2位のチームがそうらしい）。sinatraをproductionモードするのを忘れないって競技中にHangoutに書いたのに忘れてた。Unixドメインソケットも使ってなかった。最後焦りすぎたね。&lt;/p&gt;

&lt;h1 id=&#34;最後に:47e0e2af3132d260296545e7de7e6581&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;私は今年で学生枠で出るのは最後でした。来年からは猛者犇めく一般枠での参加になります。予選突破が大きな目標ですね。出来れば次回はCommon Lispで出たい。&lt;/p&gt;

&lt;p&gt;私のインフラ周りの知識や経験はほぼISUCONの経験を通して得られたもので、一年ちょっと前のSQLも見たことない自分に比べるとずいぶん成長したなと思います。LINE、COOKPAD、TECHORUSの方々、運営お疲れ様でした。本当にありがとう御座います。来年も宜しくお願いします。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>#ISUCON 4 予選に学生枠で参加してきました</title>
      <link>//keens.github.io/blog/2014/09/30/isucon4-q</link>
      <pubDate>Tue, 30 Sep 2014 00:51:30 +0000</pubDate>
      
      <guid>//keens.github.io/blog/2014/09/30/isucon4-q</guid>
      <description>

&lt;p&gt;κeenです。ISUCON 4 予選に学生枠で参加してきたのでレポートです。日曜、2日目の方に参加です。&lt;/p&gt;

&lt;h1 id=&#34;メンバー集めと準備:e52c5d6c5561db0d62e81f923bcdbf66&#34;&gt;メンバー集めと準備&lt;/h1&gt;

&lt;p&gt;一番苦労しました。去年と同じく、全く知らない人と組んでます。全然集らなくて、@941さんがメンバー集めの音頭をとってくれたりして、ようやく集りました。941++。&lt;/p&gt;

&lt;p&gt;結局ISUCON夏期講習にいたPythonアイドルのくーむ(&lt;a href=&#34;https://twitter.com/cocodrips&#34;&gt;@cocodrips&lt;/a&gt;)さんとその友達の友達のねむねむ(&lt;a href=&#34;https://twitter.com/nemunemu3desu&#34;&gt;@nemunemu3desu&lt;/a&gt;)さんと出ることになりました。くーむさんは競技プログラミング系Pythonista、ねむねむさんはプログラマのためのWebサービス開発のバイトをやってるWeb系Rubyist。因みに私は去年もISUCONに出て&lt;a href=&#34;//KeenS.github.io/blog/2013/11/11/isucon-final-stage/&#34;&gt;学生賞なんか貰ってる&lt;/a&gt;のでISUCONで要求される技術は一通り、広く浅くといった感じのRubyist。普段はLisp書いてます。「Lispを書く」はダブルミーニングですよ。すごいどうでも良いけどくーむさんは情報系のM2、ねむねむさんは情報系のB4、私は数学科のB4です。&lt;/p&gt;

&lt;p&gt;流石に初対面のメンバーでいきなり競技を始めても何も出来ないので一度3人で顔を合わせて打ち合わせをしました。簡単に書いてますけど待ち合わせとか苦労したんですよ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;データ量とかアルゴリズムに対する感のあるくーむさんにはMySQLのチューニングを任せる&lt;/li&gt;
&lt;li&gt;くーむさんは各社のインターンで実務経験があるのでデプロイとかのコードの流れ、ベンチマークの管理もやって貰う&lt;/li&gt;
&lt;li&gt;その周辺のツールも作って貰う&lt;/li&gt;
&lt;li&gt;Rubyでwebサービスの開発をやってるねむねむさんにはRubyのコードをがんがん弄ってもらう&lt;/li&gt;
&lt;li&gt;Redisを使うことも視野に入れてもらう。Redisの経験はあるようなのでそんなに問題なさそう。&lt;/li&gt;
&lt;li&gt;あとは余ったNginX、Varnishをκeenが担当する&lt;/li&gt;
&lt;li&gt;恐らくNginX、Varnishは然程手間取らないのでアプリとMySQLで苦戦してる方にκeenが入る&lt;/li&gt;
&lt;li&gt;最初のセットアップはAWSアカウントを作ったくーむさんにやって貰う&lt;/li&gt;
&lt;li&gt;最初に計測することが大事なのでデフォルトのままログの設定だけ変えてベンチを走らせて作戦会議をする&lt;/li&gt;
&lt;li&gt;チーム名は3人のアイデンティティを合わせて「(ρ_-)/超銀杏バスターズ(･ω･ o)」とする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりを決めました。&lt;/p&gt;

&lt;p&gt;くーむさんは完全に普段とドメインが違うのでちょっとつらそうでしたがSQLとかRedisとかの本を貸したらめっちゃ勉強してきたみたいでした。
流石、情報科ですね。地力が違いますね。あとはGithubの学生が使えるプライベートリポジトリを用意してくれたり。ベンチマークを走らせたら時刻とgitのコミットIDをセットにしてログ用のレポジトリに突っこむスクリプトの準備もしてくれました。&lt;/p&gt;

&lt;p&gt;ねむねむさんはAWSアカウントを作って去年の予選の問題を予習してきたようでした。あとRedis使うかもって言っといたらRedis in ActionのPDFを見付けてたようなので読んできたんじゃないかなと思います。Rack用のプロファイラを試したようでした。去年も使おうとして結局使えなかったminiprofiler。ねむねむさんにも使えなかったようです。&lt;/p&gt;

&lt;p&gt;私はApacheとかNginXのログフォーマットを整備してパス/メソッド毎の(合計)レスポンスタイムを出す集計スクリプトを用意。その他マスタリングNginXを一通り読み直したりOpenRestyでmemcachedやlua、Redisのプラグインがあることを確認してインストールスクリプトを書いたりしてました。Varnishは間に合いませんでした。&lt;/p&gt;

&lt;h1 id=&#34;当日:e52c5d6c5561db0d62e81f923bcdbf66&#34;&gt;当日&lt;/h1&gt;

&lt;h2 id=&#34;開始:e52c5d6c5561db0d62e81f923bcdbf66&#34;&gt;開始&lt;/h2&gt;

&lt;p&gt;LINEカフェを使わせてもらうので9:20に集合。ちゃんと集まる。家の近いくーむさんがデカいディスプレイを持ってきてました。&lt;/p&gt;

&lt;p&gt;LINEカフェではLINEインターンの経験のあるくーむさんが勝手が分かってるので机を勝手に動かして三人横並びに座る。真ん中にくーむさんの大きいディスプレイがきて良い感じでした。&lt;/p&gt;

&lt;p&gt;10:00に号砲と共に競技開始。早速3人ともAWSの初心者でAMIの起動の仕方が分からず詰まります。ここクリックしてみて？とかいいながらログイン出来たのが10:20くらいですね。isuconユーザーにRSAのpubキーを突っ込むもパスワードを要求されてハマる。くーむさんはLinuxには不慣れなようだったので私がやるも&lt;a href=&#34;//KeenS.github.io/blog/2014/08/21/isucon-summer-2014/&#34;&gt;夏期講習のとき&lt;/a&gt;と同じく解決出来ず。うーん。結局パスワードのまま通しました。&lt;/p&gt;

&lt;p&gt;gitの設定をするときにアプリとログはレポジトリを分けることは決まってましたがログを吐く場所を決めてなかったのでゴタゴタ。/var/logに吐こうとするもMySQLが吐いてくれない。権限の問題じゃね？とか言って777にするという邪悪なことをするとねむねむさんがsshを締め出される。MySQLが吐いてくれなかったのは再起動忘れ。sshを締め出されたのはsshdのログファイルの権限の問題。この辺解決したのが11時過ぎかな？&lt;/p&gt;

&lt;p&gt;ごたごたしてる間はねむねむさんはアプリ読んでくーむさんはインテグレーション周りの準備してくれたり。私もちょっとアプリ読んだりエラーでググったり。&lt;/p&gt;

&lt;h2 id=&#34;作戦会議:e52c5d6c5561db0d62e81f923bcdbf66&#34;&gt;作戦会議&lt;/h2&gt;

&lt;p&gt;12時前なので昼御飯食べながら。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ベンチマークを走らせると明かにMySQLが重いのでインデックスを張る(くーむ)&lt;/li&gt;
&lt;li&gt;アプリはキャッシュ効きそうなのでガンガンRedis使う(ねむねむ)&lt;/li&gt;
&lt;li&gt;とりあえずNginXの最適化とVarnishは入れる(κeen)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;な感じです。&lt;/p&gt;

&lt;h2 id=&#34;作業:e52c5d6c5561db0d62e81f923bcdbf66&#34;&gt;作業&lt;/h2&gt;

&lt;p&gt;Typoがあった以外はNginXとVarnishはスムーズに。&lt;/p&gt;

&lt;p&gt;実際にはくーむさんがログの自動プッシュ周りで苦戦してたのでけんちん汁を食べてる隙に私がインデックスを張ることにしました。ちまちまexplainしながらやるもどうもうまくいかない、と思ったらinit.shのヒアドキュメントが二重になってる…。そこを解消したら一気にスコア上がりました。でもWHERE狙いとORDER BY狙いってどうなんだっけとなって多少過剰なインデックスだったかもしれません。&lt;/p&gt;

&lt;p&gt;それでもうMySQLはCPU使わなくなったのでワークロード上げてみたらスコア12,000くらいになりました。&lt;/p&gt;

&lt;p&gt;なんか静的ファイルでベンチマークエラー出てるとくーむさんから報告がありました。Varnishの設定ミスったかなと思ったらエラーメッセージが無機質だったのでシステム関連っぽい。そこは全て独学でやってきた数学科生のググり力を発揮。調べるとローカルポートを使い果たしていた模様。システムの設定をコピペ。エラー出なくなる。&lt;/p&gt;

&lt;p&gt;RubyがCPU使ってるのでNginXからのリダイレクトをunixドメインソケットに。あんまり効果無し。&lt;/p&gt;

&lt;p&gt;ねむねむさんのRedisキャッシュ化が入って15,000とか。ねむねむさんを信じて「キャッシュして」とだけ言っといたので詳細は不明ですがユーザーはRedisに全部突っ込んだ模様。その後は脱MySQLを目指して黙々と作業してました。&lt;/p&gt;

&lt;p&gt;私は/reportがN+1クエリなので直そうと2時間くらい奮闘。後にスコアには反映されてないことを知らされて絶望。よく見とけば良かった。しかもEmacsのバッファに残ってるものをコミットしてしまってねむねむさんのコミット上書きしてしまったりしました。&lt;/p&gt;

&lt;p&gt;まだRubyがCPUを使ってるのてテンプレートエンジンを置き換えることを考えました。slimが速いと風の噂で訊いたのでくーむさんにお願いしてみるもスコアがた落ち。あれRuby製だったんですね。C製のテンプレートエンジン捜しとかなきゃ。&lt;/p&gt;

&lt;p&gt;さらにくーむさんがCSSやpngのminifyを試みるもチェックサムをとられていたようで失敗。良く見たらMD5とるってレギュレーションに書いてありました。後にminifyでなくインライン化すれば良かったらしいと聞く。&lt;/p&gt;

&lt;h2 id=&#34;最終確認とか:e52c5d6c5561db0d62e81f923bcdbf66&#34;&gt;最終確認とか&lt;/h2&gt;

&lt;p&gt;17時あたりで一旦chkconfigしてリブートしてもベンチが動くことを確認。よかった。一応AMIを作ります。その後でN+1クエリの解決が動くも当然スコアには変動なし。あとはミドルウェアのログを切って脱MySQLは間に合わなくてアプリの微改善が入りパラメータの微調整をし、17,700あたりで競技終了。&lt;/p&gt;

&lt;h1 id=&#34;終わってみて:e52c5d6c5561db0d62e81f923bcdbf66&#34;&gt;終わってみて&lt;/h1&gt;

&lt;p&gt;一応2日目の中では学生1位なものの、1日目10チーム、2日目4チームなので何とも言えないですね。一般枠は40,000でも本戦出場無理ポとか言ってるのに20,000にも全然届かないスコアで本戦出れるかもとか言ってるゆとりの学生です。&lt;/p&gt;

&lt;p&gt;反省は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レギュレーション良く読む&lt;/li&gt;
&lt;li&gt;ベンチマークのスコアリングも確認する

&lt;ul&gt;
&lt;li&gt;静的ファイルは0.1点と思ってたら0.01点だった。この差大きい。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;権限管理は適切に&lt;/li&gt;
&lt;li&gt;hangoutに思ったことを垂れ流す筈だったのに口頭で済ませてしまった

&lt;ul&gt;
&lt;li&gt;それだけならまだしもhangoutに貼ったものが無視されてしまった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;プロファイラ使えるようにならないとね。

&lt;ul&gt;
&lt;li&gt;RubyがCPU喰ってるのは分かってるのにどこがまずいか分かんなかったのは悔しい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;深みに嵌ったらあきらめる&lt;/li&gt;
&lt;li&gt;ブランチ切るとミドルウェアの違いで問題が出る(varnishとnginxの80の取り合い)&lt;/li&gt;
&lt;li&gt;互いのスキルを把握しておく&lt;/li&gt;
&lt;li&gt;開発スタイルを決めておく&lt;/li&gt;
&lt;li&gt;workload、workerprocessは最適値を捜す(コア数が4だったので4~8で決め打ちだったけど後に30くらいまで上げれると聞く)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;かな？私が普段Linuxを使ってるのでLinuxの設定くらいみんな出来ると思ってたら私以外Macerだったってのは予想外でした。本来なら私がAWSアカウント持ってれば問題なかったんですけどクレジットカード持ってないんですよね。つらい。&lt;/p&gt;

&lt;p&gt;開発スタイルはねむねむさんがpull-reqスタイル、私が細かいコミットをマスターに入れるスタイルでした。設定ファイルとアプリの違いもありますがpull-reqスタイルの方がロールバックし易いしそっちに統一した方が良さげですね。&lt;/p&gt;

&lt;p&gt;個人的に、いつも通りケアレスミスが多かったのは反省しなきゃなと思います。「あれ？動かない。あ！そうか！」みたいな。メンバーは「すげー。デバッグ速えー」って言ってましたけど違いますよ？世の中の不当評価はこうして産まれるんだと少し社会を知りました。&lt;/p&gt;

&lt;p&gt;Varnishももうちょっと使い熟さないとなーってのとlua勉強しなきゃなーってのが個人的な本戦に向けた準備ですね。N+1のとこはSQLの練習が出来たので個人的には満足…って言ったらメンバーに怒られますかね。&lt;/p&gt;

&lt;p&gt;全体として、チームは上手く動いてたんじゃないかなと思います。N+1のところで無駄に嵌らずにねむねむさんと2人でアプリの改修やってたら脱MySQLが間に合ったんじゃないかなってのが心残りです。インテグレーションはくーむさんのスクリプトで良い感じだったのでもうちょっと改良して本番にも使いたいですね。あとCapistranoかFabricも準備しないといけませんね。&lt;/p&gt;

&lt;p&gt;本当、やらかしてばっかの私に怒ることなく一緒にやってくれたくーむさん、ねむねむさんには感謝してます。もし予選通ってたら本戦も宜しくお願いします。&lt;/p&gt;

&lt;p&gt;そして忙しい中ISUCONを開催して下さったCOOKPADの方々、941さん、ありがとう御座います。ベンチマーカーの問題にも迅速に対応して下さってこちらは本当に楽しく競技出来ました。&lt;/p&gt;

&lt;p&gt;P.S.&lt;br /&gt;
今回の作業レポジトリは&lt;a href=&#34;https://github.com/cocodrips/isucon2014q&#34;&gt;ここ&lt;/a&gt;、ログレポジトリは&lt;a href=&#34;https://github.com/tomoasleep/isucon2014qlog&#34;&gt;ここ&lt;/a&gt;にありますがまだ非公開です。そのうち公開されると思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>isucon夏期講習2014に参加してきた</title>
      <link>//keens.github.io/blog/2014/08/21/isucon-summer-2014</link>
      <pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>//keens.github.io/blog/2014/08/21/isucon-summer-2014</guid>
      <description>

&lt;p&gt;レポート締切間近のκeenです。ISUCON夏期講習2014に参加してきたのでレポートです。とはいっても去年の夏期講習もISUCONも参加してるので目新しいことはないんですが。主な目的はメンバー集めです。&lt;/p&gt;

&lt;h1 id=&#34;流れ:b412db0bf042fc4f682d16ff06de8ba4&#34;&gt;流れ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;LINEの採用情報:
ISUCONがきっかけでLINEに内定貰った人がいるよう。因みに自分はLINE落ちた。&lt;/li&gt;
&lt;li&gt;ISUCONの概要の説明:
うん。知ってる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/38160090&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/tagomoris/isucon2014&#34; title=&#34;ISUCONの話(夏期講習2014)&#34; target=&#34;_blank&#34;&gt;ISUCONの話(夏期講習2014)&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/tagomoris&#34; target=&#34;_blank&#34;&gt;SATOSHI TAGOMORI&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
+ 過去問を解く:
   去年の予選の問題だった。うん。知ってる。
+ パフォーマンス向上に関しての解説:
   これもISUCON反省会とかそんなんでkazeburoさんが話してた気がする&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/38162132&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/kazeburo/isucon-summerclass2014action1&#34; title=&#34; Webアプリケーションの パフォーマンス向上のコツ 概要編&#34; target=&#34;_blank&#34;&gt; Webアプリケーションの パフォーマンス向上のコツ 概要編&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/kazeburo&#34; target=&#34;_blank&#34;&gt;Masahiro Nagano&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/38163927&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/kazeburo/isucon-summerclass2014action2&#34; title=&#34; Webアプリケーションの パフォーマンス向上のコツ 実践編&#34; target=&#34;_blank&#34;&gt; Webアプリケーションの パフォーマンス向上のコツ 実践編&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/kazeburo&#34; target=&#34;_blank&#34;&gt;Masahiro Nagano&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;morisさんによるライブチューニング:
失敗してた&lt;/li&gt;
&lt;li&gt;懇親会&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;自分の作業:b412db0bf042fc4f682d16ff06de8ba4&#34;&gt;自分の作業&lt;/h1&gt;

&lt;p&gt;前年度参加者がハイパフォーマンス叩き出して俺TUEEEEEEしても意味がないので次回のISUCONで試したいことを試して地雷踏むことにした。&lt;/p&gt;

&lt;h2 id=&#34;sshのrsaauthenticationの設定:b412db0bf042fc4f682d16ff06de8ba4&#34;&gt;sshのRSAAuthenticationの設定&lt;/h2&gt;

&lt;p&gt;何故かハマる。&lt;/p&gt;

&lt;p&gt;id_rsa.pubをauthorized_keysに突っ込んでUserPAMの設定まで確認して&lt;code&gt;sudo service sshd restart&lt;/code&gt;したのにパスワードを求められる。確か色々確認してもう一回sshdリスタートしたら通った気がする。原因不明。&lt;/p&gt;

&lt;p&gt;そういや
    curl &lt;a href=&#34;https://github.com/KeenS.keys&#34;&gt;https://github.com/KeenS.keys&lt;/a&gt; &amp;gt;&amp;gt; .ssh/authorized_keys
のワンライナー使えば良かった。&lt;/p&gt;

&lt;h2 id=&#34;アプリケーションをgitで管理する:b412db0bf042fc4f682d16ff06de8ba4&#34;&gt;アプリケーションをgitで管理する&lt;/h2&gt;

&lt;p&gt;やらかす。&lt;/p&gt;

&lt;p&gt;最初isucon/webapp/ruby/だけをgitで管理した。それだと足りないので次にisucon/全体をgitで管理しようとしたらisucon/webapp/ruby/がサブモジュール扱いされて困った。サブモジュール分かんね。色々試すもついぞisucon/のgitでisucon/webapp/ruby/を管理出来なかった。結局.git吹っ飛ばして再度&lt;code&gt;git init .&lt;/code&gt;した。これは次回までの宿題ですね。&lt;/p&gt;

&lt;p&gt;あと地味にisucon/init.shが.gitignoreされてて困った。&lt;/p&gt;

&lt;h2 id=&#34;サーバーマシンをgitサーバーにする:b412db0bf042fc4f682d16ff06de8ba4&#34;&gt;サーバーマシンをgitサーバーにする&lt;/h2&gt;

&lt;p&gt;前回はbitbucketで管理してたがしばらく使わない内にパスワードを忘れてしまったのと(もしかしたら以前のバイト先のメールアドレスで登録してた?)pingが400msのbitbucketサーバー使うのに気が引けたのでサーバーマシンをgitサーバーにしようと決意。ハマる。&lt;/p&gt;

&lt;p&gt;gitのマニュアルを適当に読んでたのが悪かった。ローカルで&lt;code&gt;git clone iscon@machine:isucon&lt;/code&gt;してもなんか怒られてしばらく悩む。正解は、先ずリモートで&lt;code&gt;git clone --bare isucon isucon.git&lt;/code&gt;してから&lt;code&gt;git clone iscon@machine:isucon.git&lt;/code&gt;だった。&lt;/p&gt;

&lt;p&gt;次にリモートで
    mv isucon isucon.back
    git clone isucon.git isucon
したら.gitignoreとかその辺の関係でベンチマークやら何やらが動かなくなる。自分でベンチマークをビルドする羽目に。&lt;/p&gt;

&lt;p&gt;新たにcloneせずに
    cd isucon
    git remote add origin ../isucon.git
すれば良かったのだろうか。要調査。&lt;/p&gt;

&lt;h2 id=&#34;細かなチューニング:b412db0bf042fc4f682d16ff06de8ba4&#34;&gt;細かなチューニング&lt;/h2&gt;

&lt;p&gt;markdownのバックエンドをrdiscountにしたり。これもGemfileで困る。結局あれはローカルで&lt;code&gt;bundle install --no-deploy&lt;/code&gt;してから&lt;code&gt;git push&lt;/code&gt;したら良かったのだろうか。これも宿題。&lt;/p&gt;

&lt;h2 id=&#34;インデックスを張る:b412db0bf042fc4f682d16ff06de8ba4&#34;&gt;インデックスを張る&lt;/h2&gt;

&lt;p&gt;isucon/config/init.sqlに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX users_idx_username ON users (username);
CREATE INDEX memos_idx_id_is_private_created_at_id ON memos (is_private, created_at, id);
CREATE INDEX memos_idx_id_user_created_at ON memos (`user`, created_at);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を書いてisucon/init.shに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
set -e
mysql -u isu-user isucon &amp;lt; ./config/init.sql &amp;gt; log 2&amp;gt;&amp;amp;1
#データ投入後になにかしらの作業をしたい場合はこのシェルスクリプトに書いてください
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を書くもエラーが出る。結局絶対パスで書いて2〜3回実行したら通ったのでパスの問題だったかと。しかし1回で通らなかったのは謎。&lt;/p&gt;

&lt;p&gt;あとデバッグ大変だった。ベンチマークツールさん、初期化スクリプトでエラー出したらエラーログ吐いて下さいよ。&lt;/p&gt;

&lt;p&gt;そういやリダイレクト先のlogファイルは結局行方不明のままだった。&lt;/p&gt;

&lt;h2 id=&#34;n-1クエリの解決:b412db0bf042fc4f682d16ff06de8ba4&#34;&gt;N+1クエリの解決&lt;/h2&gt;

&lt;p&gt;SQL書けなすぎてJOINとかFORCE INDEX書くのに戸惑った。一々書いてはmysqlのコンソールに貼ってエラーメッセージ読んでってやってた。すんなりやりたい。&lt;/p&gt;

&lt;h2 id=&#34;リバースプロキシをnginxにする:b412db0bf042fc4f682d16ff06de8ba4&#34;&gt;リバースプロキシをNginXにする&lt;/h2&gt;

&lt;p&gt;まずは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install nginx
mv /etc/nginx/nginx.conf ./config/
git add ./config/nginx.conf
git commit -m &#39;add nignx.conf&#39;
sudo ln -s /home/isu-user/isucon/config/nginx.conf /etc/nginx/
sudo service httpd stop
sudo service nginx start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だったかな?最初&lt;code&gt;ln&lt;/code&gt;に絶対パスを使ってなくてエラー出たりしたけど。&lt;/p&gt;

&lt;p&gt;んで&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;location / {
   proxy_pass   http://localhost:5000;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だけ書くも&lt;code&gt;404 http://localhost:5000/なんちゃら Not Found&lt;/code&gt;が出る。そういや、とプロキシヘッダを追加。それでも画像などはとれない。多分rootをいじらなかったのが原因。次の手で静的ファイルをNginXでキャッシュするように設定したら直った。&lt;/p&gt;

&lt;p&gt;あまり記録残してないけどこの辺で2900点くらいで首位だった気がする。因みに初期値は1700くらい。&lt;/p&gt;

&lt;h2 id=&#34;varnishを噛ませる:b412db0bf042fc4f682d16ff06de8ba4&#34;&gt;Varnishを噛ませる&lt;/h2&gt;

&lt;p&gt;前回、ベンチマークツールのチェックが甘くてVarnishを使うだけでスコアが跳ね上がるというのを知っていたのでちょっとチート臭いけどどうせ本番でも必要だしということで練習もかねて使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install varnish
mv /etc/sysconfig/varnish ./config
git add ./config/varnish
git commit -m &#39;varnish&#39;
sudo ln -s /home/isu-user/isucon/config/varnish /etc/sysconfig/varnish
mv /etc/varnish/default.vcl ./config
git add ./config/default.vcl
git commit -m &#39;default.vcl&#39;
sudo ln -s /home/isu-user/isucon/config/default.vcl /etc/varnish/default.vcl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;的なことをやった。あとはvarnishを80番にしてバックエンドを4000番にして、NginXを4000番にした。それだけでスコアが14000くらいになった。varinish簡単だし優秀。&lt;/p&gt;

&lt;h2 id=&#34;my-cnfのチューニング:b412db0bf042fc4f682d16ff06de8ba4&#34;&gt;my.cnfのチューニング&lt;/h2&gt;

&lt;p&gt;もはやvarnishが仕事してる所為でボトルネックはベンチマークツールなのだけど一応。&lt;/p&gt;

&lt;p&gt;とはいってもinnodb_buffer_pool_sizeを2GBから6GBにしただけ。因みに与えられたマシンのメモリは8GB。スコアは一応微増。でもまあ誤差の範囲内。&lt;/p&gt;

&lt;p&gt;この辺でタイムオーバー。&lt;/p&gt;

&lt;h1 id=&#34;懇親会:b412db0bf042fc4f682d16ff06de8ba4&#34;&gt;懇親会&lt;/h1&gt;

&lt;p&gt;目の前の人がClojure推しの人でだいたいそんな話してた。&lt;/p&gt;

&lt;p&gt;チームメンバー捜しは席の周りの人が当日出れない人ばかりだったのと席替えがなかったので失敗に終わる。誰か学生枠で一緒に出ましょうよ。学生賞目指しましょうよ。&lt;/p&gt;

&lt;h1 id=&#34;やり残したこととか反省とか:b412db0bf042fc4f682d16ff06de8ba4&#34;&gt;やり残したこととか反省とか&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ローカルで変更→commit→push→リモートでpull→再起動→ベンチマークのワークフローが結構面倒だったしpull忘れ、再起動忘れがあったのでpushより後を自動化したい。出来ればgitのコミットログとベンチマークのスコアをペアで保存しながら。hook使ったら割と出来そうな気はするんだけどなあ。&lt;/li&gt;
&lt;li&gt;折角サーバー与えられたんだしMySQLのslow logを吐かせるの一回練習しとけば良かった。&lt;/li&gt;
&lt;li&gt;結局capistrano使わなかった。複数台構成なら必須だし復習しておきたかったのに。&lt;/li&gt;
&lt;li&gt;メンバー捜したかった。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;マジでメンバー捜してます。学生枠で出たい人@blackenedgoldまでお願いします。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>チーム「銀杏絶滅しろ」でisucon学生賞もらってきました</title>
      <link>//keens.github.io/blog/2013/11/11/isucon-final-stage</link>
      <pubDate>Mon, 11 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>//keens.github.io/blog/2013/11/11/isucon-final-stage</guid>
      <description>

&lt;p&gt;しばらく間が空きました。まあ、その間のことはいつかまとめて書きます。今回は &lt;a href=&#34;http://isucon.net/&#34;&gt;isucon#3&lt;/a&gt;について。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//KeenS.github.io/blog/2013/10/09/isucon-qualifying-event/&#34;&gt;先日&lt;/a&gt;、isucon#3の予選を突破したと書きましたが、日曜にその決勝戦があったので報告です。&lt;/p&gt;

&lt;h2 id=&#34;準備:a0db09000a2b283953c121b6c55a16b4&#34;&gt;準備&lt;/h2&gt;

&lt;p&gt;とりあえずyokoteさんが予定が入って参加できないので@c0umeさんと二人で毎週会って予選の問題を解き直しつつSQLの勉強とかやってました。MariaDBを試したりもしましたが大して変んないねーとか。最終的に4万点くらいになったのかな？あとisucon#2で複数台構成の練習とか地味にデプロイツールCapistranoのお勉強とかもしてました。非常に便利です。&lt;/p&gt;

&lt;h1 id=&#34;当日:a0db09000a2b283953c121b6c55a16b4&#34;&gt;当日&lt;/h1&gt;

&lt;p&gt;サークルを休む許可も貰えたので何事も心配なく10時にヒカリエに集合。名札とかもらって本格的な感じ。 &lt;img src=&#34;//KeenS.github.io/images/isucon-name-strap.jpg&#34; alt=&#34;名札とチームの看板(?)&#34; title=&#34;name-strap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;お題のアプリは画像版ツイッターで、処理的には投稿された画像を生/中/小にサイズ変更して返すのがほとんど。htmlはインデックスだけであとはjson APIですしDBまわりも画像のアクセスレベルとユーザーのフォロー関係程度で、必要最低限といった感じ。単純にファイスサイズで攻めてきましたね。&lt;/p&gt;

&lt;p&gt;因みにこれ、ストーリーとしてはエンジニア二人で作って騒いでたら社長が聞き付けて「18時に大規模プロモーションかけるからそれまでに対策しといてね。あ、サーバーは4台増やしといたよ」ってなっててそれを見た瞬間のみんなの反応が&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;社長を殺そう &lt;a href=&#34;https://twitter.com/search?q=%23isucon&amp;amp;src=hash&#34;&gt;#isucon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;— tagomoris (@tagomoris) &lt;a href=&#34;https://twitter.com/tagomoris/statuses/398992801850875904&#34;&gt;November 9, 2013&lt;/a&gt;&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とかでしたw&lt;/p&gt;

&lt;p&gt;そうそう、そんなストーリーなもんでサーバー5台中1台にしかアプリがデプロイされてない状態でスタートです。&lt;/p&gt;

&lt;h2 id=&#34;やったこと:a0db09000a2b283953c121b6c55a16b4&#34;&gt;やったこと&lt;/h2&gt;

&lt;p&gt;@c0umeさんがサーバーセットアップしてる間に私がアプリを読んできになったところをスカイプに張っていきました。&lt;/p&gt;

&lt;p&gt;何も考えずにとりあえずnginxを野良ビルドしてgzip配信を有効にしようとするも、なぜかnginx.confが上手く機能せずにハマる。結局conf.d以下を読んでた部分が悪さをしてたと判明。ようやくアプリ側にとりかかる。&lt;/p&gt;

&lt;p&gt;とりあえずリクエストの度に画像を変換してるのでそれをどうにかしようということに。POSTされた時点で変換する方針だったのですが、私は変換した画像の「パスネーム」をDBに突っ込もうって思ってたのですが@c0umeさんは画像の「バイナリデータ」を突っ込もうとしてたらしく、意思疎通ができずに若干揉めました。&lt;/p&gt;

&lt;p&gt;結局、1台リバースプロキシ、3台app、 1台DBの構成で、appで画像のPOSTを受けたら3サイズにコンバートしてDBに突っ込むことに。ですがとりあえず段階を踏もうということで第一段は画像をblobとしてMySQLにツッコみます。第二段でコンバートして突っ込む、第三段でさらにgzip圧縮して突っ込むことにしました。&lt;/p&gt;

&lt;p&gt;私がapp側、@c0umeさんがDB側でやりました。&lt;/p&gt;

&lt;p&gt;外部プロセスを呼んでると遅いと聞いたのでRMagickを使って変換するようにして、さらにファイルに書き出さずに&lt;code&gt;Magick::ImageList#from_blob&lt;/code&gt;と&lt;code&gt;#to_blob&lt;/code&gt;を使って書き換えました。&lt;/p&gt;

&lt;p&gt;今回、RMagickを初めて使ったのですが、ハマることハマること。&lt;code&gt;Magick::ImageList#crop&lt;/code&gt;非破壊的であったり、関連ブログに書いてあるメソッドがないとか言われたり。最終的にDBが終わった@c0umeさんにも手伝ってもらってバグ取りが完了し、ベンチマークが走るようになった時点でもう終わり近く。大きな変更はやめてキャッシュとかレスポンスだけ返して裏で処理を走らせるとかをやりましたがどれもベンチマークが巧妙に作られてて失敗に終りました。あとUnicornに謎のエラーが出続けてましたが特にベンチに影響はなかったので放置しました&lt;/p&gt;

&lt;p&gt;それで初期スコアが1100だったのが5400程度になりました。最後20分くらいは&lt;code&gt;chkconfig&lt;/code&gt;とかでfailしないよう確認作業をしてタイムアップ。暫定学生1位、全体で7位だったかと思います。&lt;/p&gt;

&lt;p&gt;failしないことだけを祈って1時間後の結果発表を待ちます。本計測は3分ですし謎のエラーもありましたし不安要素はいっぱいありました。&lt;/p&gt;

&lt;h2 id=&#34;結果:a0db09000a2b283953c121b6c55a16b4&#34;&gt;結果&lt;/h2&gt;

&lt;p&gt;failしませんでした。よかった。上のチームがfailしたらしく、最終順位は学生1位、全体6位でした。まあ、failしなかったチームは7チームしかいなかったのでなんとも言い難いですが。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//KeenS.github.io/images/isucon-scores.jpg&#34; alt=&#34;最終スコア。一位のLINE選抜チームは2位に4倍差を付けて圧勝しました。&#34; title=&#34;scores-of-each-team&#34; /&gt;&lt;/p&gt;

&lt;p&gt;スコア的には3位と2倍差だったので案外良い線いってたのかもしれません。&lt;/p&gt;

&lt;p&gt;それで、タイトルにあるように学生賞もらいました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//KeenS.github.io/images/isucon-prize.jpg&#34; alt=&#34;中身は現生5万円。&#34; title=&#34;prize&#34; /&gt;&lt;/p&gt;

&lt;p&gt;この5万は2万ずつ二人で分けて、あとの1万でyokoteさんと3人で肉を食べに行きます。&lt;/p&gt;

&lt;p&gt;因みに私はこういう風に使いました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//KeenS.github.io/images/isucon-books.jpg&#34; alt=&#34;欲しいものより普段買いそうにないけど気になるものを選びました。&#34; title=&#34;books&#34; /&gt;&lt;/p&gt;

&lt;p&gt;その後懇親会ではGoとかnodeの人達がライブラリが若くてバグがあって苦しんだりしてた話を聞きました。fujiwara組長のところには行けませんでした。&lt;/p&gt;

&lt;h2 id=&#34;感想:a0db09000a2b283953c121b6c55a16b4&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;たのしかったです（小並感&lt;br /&gt;
ベンチマークツール自体がラウンドロビンでリクエスト飛ばしてくるのでリバースプロキシ不要でしたね。あとはあせりすぎて手汗でタッチパッドの誤反応が頻発したり挙句なぜかカーネルがCPU100%使い始めて作業できなくなったりして冷や冷やしました。@c0umeさんには多大な迷惑お掛けしました。そのPC寿命じゃね？とか言われたり。&lt;/p&gt;

&lt;p&gt;来年は胸を張れるようなスコアを出したいですね。LINE、カヤック、データホテルのみなさんありがとうございました&lt;/p&gt;

&lt;h2 id=&#34;その他:a0db09000a2b283953c121b6c55a16b4&#34;&gt;その他&lt;/h2&gt;

&lt;p&gt;κeenは就活生です。RubyかLispでできる仕事探してます。&lt;/p&gt;

&lt;p&gt;あとamazonほしいものリストも上げときますね。&lt;a href=&#34;http://www.amazon.co.jp/registry/wishlist/TA077537OIUP&#34;&gt;http://www.amazon.co.jp/registry/wishlist/TA077537OIUP&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ISUCON#3予選に参加しました</title>
      <link>//keens.github.io/blog/2013/10/09/isucon-qualifying-event</link>
      <pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>//keens.github.io/blog/2013/10/09/isucon-qualifying-event</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://isucon.net/&#34;&gt;ISUCON&lt;/a&gt;#3の予選に参加してきた話です。&lt;/p&gt;

&lt;p&gt;ISUCON(Iikanjini SpeedUp CONtest)とは椅子を投げないなどの一部のルールを除き、基本なんでもアリのWebアプリケーションチューニングコンテストです。&lt;/p&gt;

&lt;p&gt;なんで私がこんなのに参加するかというと、サークルのOBさんから告知があり、8月に学生向けのISUCON夏期講習会に参加したからです。第３回となる今回は学生枠を作るとのことで事前に学生のレベルを上げておこうという方針だそうです。&lt;/p&gt;

&lt;p&gt;その講習会でコテンパンにやられてめげつつも、もう一回チャレンジしようということで夏期講習会で知りあったasamiさんとその友達のyokoteさんでチームを組んで参戦しました。&lt;/p&gt;

&lt;p&gt;ちなみにこのチーム、予選3日前にSkype会議で結成したもので、予選当日も各自自宅にいてSkypeで連絡を取ってたので私はyokoteさんとはまだ会ったことありません←&lt;/p&gt;

&lt;h2 id=&#34;準備:dfab199b203ab989443881ad8319d99d&#34;&gt;準備&lt;/h2&gt;

&lt;p&gt;事前の話しあいではasamiさんがAWSの準備からgit(bitbucket)、ssh鍵の設定までやってくれることになりました。私も本来ならISUCON#2で練習をしておくべきだったのですが、サークルとかを言い訳に、ISUCONの記事に目を通すだけに終りました。&lt;/p&gt;

&lt;h2 id=&#34;当日:dfab199b203ab989443881ad8319d99d&#34;&gt;当日&lt;/h2&gt;

&lt;p&gt;10時に開始しました。10時40分に起きました←&lt;/p&gt;

&lt;p&gt;私が起きた頃にはasamiさんが色々設定を済ませていたので問題のアプリケーションを&lt;code&gt;git clone&lt;/code&gt;して公開鍵をSkypeにペタっと貼って参戦。アプリを読むにMarkdownでメモを投稿できるもの。&lt;/p&gt;

&lt;p&gt;フムフムってなってたらsslのバージョン問題でログインできてなかったyokoteさんも参戦し、asamiさんが&lt;code&gt;my.cnf&lt;/code&gt;をいじってスコアが&lt;/p&gt;

&lt;p&gt;900→2500&lt;/p&gt;

&lt;p&gt;となりました。スゲー。あ、言語はasamiさんとyokoteさんが書けるperlを選択。私は1ミリも読めませんがサーバーをいじる気だったので気にしませんでした。&lt;/p&gt;

&lt;p&gt;で、私がフロントサーバーをapacheからnginxに移行し、staticファイルをnginxから出すようにして、さらにキャッシュするようにし、ログを消したら&lt;/p&gt;

&lt;p&gt;2500→2800&lt;/p&gt;

&lt;p&gt;となりました。後で考えるとこのログを消したのまずかったですね。asamiさんがなんかpythonのツールを使ってトラフィック監視してたのでいっかなーって思ってたんですが。&lt;/p&gt;

&lt;p&gt;その間asamiさんがslow queryのログを吐かせてボトルネックを見付けようとしますが、どれも平均的に重い。ソートに使われてる&lt;code&gt;created_at&lt;/code&gt;にyokoteさんがインデックスを貼ってくれたりしましたが大した改善はみられず。後にこのインデックスはベンチマークが初期化するときに消されてるのではということが発覚しました。&lt;/p&gt;

&lt;p&gt;あとは私がworker_connectionをいじったりasamiさんがmemcachedを使ってクエリの数を減らしたりyokoteさんがストレージエンジンをarchiveに変えたり色々しましたが努力虚しくスコアは改善しませんでした。&lt;/p&gt;

&lt;p&gt;外部で&lt;code&gt;markdown&lt;/code&gt;コマンドを呼んでるところを(それがperl製のスクリプトだったので)アプリに埋め込んでしまえばちょっとは速くなるかなと思いましたが私はperlをいじれませんし大差ないだろうからいっかと思って放置してたのですが、後で聞くと案外それでスコア伸びたそうです。nginxのログを見てれば気づいたことだったのに…&lt;/p&gt;

&lt;p&gt;ということで大したこともできず予選敗退です。因みに1位とは10倍くらいの差がありました。&lt;/p&gt;

&lt;h2 id=&#34;振り返って:dfab199b203ab989443881ad8319d99d&#34;&gt;振り返って&lt;/h2&gt;

&lt;p&gt;後で他の方のブログとかを見るとそんな手があったのかとかそこに罠があったのかとか全然気づかなかったことがたくさんありました。とりあえず勉強しなきゃって思ったのは + redis + プロファイラ + デプロイツールですね。asamiさんがデプロイツールを用意してくれてたのですが私には使いこなせず、折角git管理してたのにその利点を生かせませんでした。(私は手動デプロイしてました)&lt;/p&gt;

&lt;p&gt;あとはボトルネックから攻める、redisで書き換えるといったこをとほとんどの上位チームがやってたのでそこは勉強したいです。&lt;/p&gt;

&lt;p&gt;来年も開催されるなら是非参加したいですね。&lt;/p&gt;

&lt;h2 id=&#34;追記:dfab199b203ab989443881ad8319d99d&#34;&gt;追記&lt;/h2&gt;

&lt;p&gt;まさか…まさかこんなことになるとは…&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://isucon.net/archives/32951235.html&#34;&gt;学生枠上位3チーム中2チームが動作検証で失格となり&lt;/a&gt;、繰り上げで私達のチームakyが予選通過となりました。ビックリすね。終ったあとasamiさんがしっかり動作確認してからAMIを提出してくれたからでしょう。&lt;/p&gt;

&lt;p&gt;6割くらい嬉しいのですが、失格となったチーム魔王は夏期講習会で一緒だったメンバーのチームで、内心お祝いしてたのにこんなことになって残念です。スコアも正常に動作していたら16000点だったそうです。&lt;/p&gt;

&lt;p&gt;あと1ヶ月、精進して本戦で晒しものにならないよう頑張ります。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>