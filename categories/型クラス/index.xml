<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>型クラス on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/%E5%9E%8B%E3%82%AF%E3%83%A9%E3%82%B9/</link>
    <description>Recent content in 型クラス on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 16 Jul 2016 02:53:49 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/%E5%9E%8B%E3%82%AF%E3%83%A9%E3%82%B9/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>型クラスを越えて</title>
      <link>//KeenS.github.io/slide/katakurasuwokoete/</link>
      <pubDate>Sat, 16 Jul 2016 02:53:49 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/katakurasuwokoete/</guid>
      <description># 型クラスを越えて ---------------------- [歌舞伎座.tech#10「型クラス勉強会」](http://kbkz.connpass.com/event/32420/) === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + Lisp, ML, Rust, Shell Scriptあたりを書きます === # Rustとは ---------- * システムプログラミング言語 * GCなし！でもメモリ管理は自動 * **Zero-Cost Abstraction** * **Trait-Based Generics** * パターンマッチ、代数的データ型などなど * [プログラミング言語Rust](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/README.html) === # Rustのトレイト的なの ---------------- * 型に固有のメソッド + オブジェクト指向的な * トレイト + 型クラス === # 型クラスじゃない方 ------------------- ``` rust struct Person { name: String, } impl Person { // Static constructor fn new(name: String) - Self { Person{name: name} } // method fn hello(&amp;self) { println!</description>
    </item>
    
  </channel>
</rss>