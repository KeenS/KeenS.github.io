<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Mirah on κeenのHappy Hacκing Blog </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/categories/mirah/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Thu, 04 Dec 2014 00:00:00 UTC</updated>
    
    <item>
      <title>mirahについて</title>
      <link>http://localhost:1313/blog/2014/12/04/mirahnituite</link>
      <pubDate>Thu, 04 Dec 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2014/12/04/mirahnituite</guid>
      <description>

&lt;p&gt;このエントリーは&lt;a href=&#34;http://qiita.com/advent-calendar/2014/minor-language&#34;&gt;マイナー言語 Advent Calendar 2014 - Qiita&lt;/a&gt;4日目の記事です。&lt;br /&gt;
前: ksmakotoさんで&lt;a href=&#34;http://ksmakoto.hatenadiary.com/entry/2014/12/03/002435&#34;&gt;マクロ、拙作のテキストマクロ言語m55について主に - ksmakotoのhatenadiary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;κeenです。進捗ダメです。マイナー言語Advent Calendarが空いてるようだったのでMirahの話を捩じ込みますね。&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Mirahとは？&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://keens.github.io/blog/2014/08/07/mirah-0-dot-1-3/&#34;&gt;以前の記事&lt;/a&gt;を参照していただければだいたい分かるかと思いますが、「Ruby風の文法で書けるJava」です。JRubyのようにRubyをJavaで実装したのでもなくGroovyのようにJVM上で動く別の言語でもなく、あくまでJavaそのものです。&lt;/p&gt;

&lt;p&gt;JRubyとの違いは理解頂けるかと思いますが、Groovyとの違いを説明するとしたら一番はランタイムですかね。Groovyはコンパイル後のソースもGroovyを必要としますがMirahはコンパイルされたら普通のJavaで書いたのと同じ.classファイルになります。&lt;/p&gt;

&lt;p&gt;かといってくるくる括弧(&lt;code&gt;{}&lt;/code&gt;)を&lt;code&gt;end&lt;/code&gt;で書けるだけかというとそうでもなく、多くのシンタックスシュガーがマクロとして実装されています。&lt;/p&gt;

&lt;p&gt;例えば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;10.times do |i|
  puts i
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はJavaの&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;for(int i = 0; i &amp;lt; 10; i++)
    System.out.println(i);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と同じバイトコードを生成します。&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;v0.1.4リリースおめでとうございます。&lt;/h1&gt;

&lt;p&gt;2014-11-14にv0.1.4がリリースされました。ラムダ式について少し進展があったようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;(lambda Runnable do
 1000.times { puts &amp;quot;Hello&amp;quot;}
end).run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とか書けます。が、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;(lambda Runnable do
 1000.times { puts &amp;quot;Hello&amp;quot;}
end).start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とは書けませんでした。やりたいのはこっちなのにね。ちょっと突っついてみます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mirah/mirah&#34;&gt;ここ&lt;/a&gt;からそれっぽい情報入手出来ます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/shannah/mirah-nbm&#34;&gt;ここ&lt;/a&gt;からNetBeansのプラグインを入手出来ます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mirah 0.1.3がリリースされました</title>
      <link>http://localhost:1313/blog/2014/08/07/mirah-0-dot-1-3</link>
      <pubDate>Thu, 07 Aug 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/blog/2014/08/07/mirah-0-dot-1-3</guid>
      <description>

&lt;p&gt;本日2回目のκeenです。次はRuby-likeな文法でJavaが書けるMirah言語の0.1.3がリリースたのでこれを期にMirahの紹介をします。&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Mirahとは？&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://mirah.org&#34;&gt;公式ページ&lt;/a&gt;。JRubyの開発者がJRubyのためにJavaを書くのが嫌になったという理由で作り始めた言語です。2008年にスタートだったかな？JRubyの開発の片手間に開発してるのでコミットペースはゆっくりです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mirah/mirah&#34;&gt;github&lt;/a&gt;のREADMEから引用すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby-like シンタックス&lt;/li&gt;
&lt;li&gt;.classにコンパイルされる&lt;/li&gt;
&lt;li&gt;Javaと同じスピード&lt;/li&gt;
&lt;li&gt;ランタイムライブラリ必要なし&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;な言語です。私的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;型推論がある&lt;/li&gt;
&lt;li&gt;マクロがある&lt;/li&gt;
&lt;li&gt;面倒な部分はコンパイラが補ってくれる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;、Javaです。多くのJVM上の言語は独自言語+Java FFIって感じですが、Mirahは文法をRuby風にしただけで、吐かれるバイトコードはJavaコンパイラが吐くのものと等価です。&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;サンプルコード&lt;/h1&gt;

&lt;p&gt;一番Javaっぽいコードを見せましょう。ファイル名は&lt;code&gt;HelloWorld.mirah&lt;/code&gt;の他に&lt;code&gt;hello_world.mirah&lt;/code&gt;でも構いません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class HelloWorld
  def self.main(args:String[]):void
    System.out.println(&amp;quot;Hello World&amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まあ、Javaですね。JavaのstaticメソッドとRubyのクラスメソッドが対応しています。これをMirahの機能を使って書き換えていきます。&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;暗黙のクラス&lt;/h2&gt;

&lt;p&gt;ファイル名からクラス名が推測出来るので省略することが出来ます。すなわち、トップレベルのメソッド定義は推測されたクラス内でのメソッド定義として扱われます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def self.main(args:String[]):void
  System.out.println(&amp;quot;Hello World&amp;quot;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでも動きます。&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;暗黙のmain&lt;/h2&gt;

&lt;p&gt;トップレベルの式はmain内のものとして扱われます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;System.out.println(&amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうも書けることになります。ただし、argsにアクセス出来ないので複雑なことをやりたかったら大人しく&lt;code&gt;self.main&lt;/code&gt;を書きましょう。&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;putsマクロ&lt;/h2&gt;

&lt;p&gt;mirahには組込みで&lt;code&gt;puts&lt;/code&gt;というマクロが定義されています。これはコンパイル時に&lt;code&gt;System.out.println&lt;/code&gt;に展開されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;puts &amp;quot;Hello World&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こう書けます。ここまでくるとRubyと同じコードになりますね。あ、()が省略可能なのは良いですよね。Ruby系の言語ではよくあることです。&lt;/p&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;もうちょっとサンプル&lt;/h1&gt;

&lt;p&gt;mirah/exmpleから面白いのを拾ってきます。だいたいRubyです。&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;リテラル&lt;/h2&gt;

&lt;p&gt;ほぼRubyです。つまり、&lt;code&gt;[]&lt;/code&gt;が配列ではなくArrayListになってます。尚、自動でintがIntegerに変換されてます。
また、hashはHashMapです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;str = &#39;non-interpolated string&#39;
str2 = &amp;quot;interpolated is better than #{str}&amp;quot;
heredoc = &amp;lt;&amp;lt;EOS
this is a here doc
EOS
int = 42
char = ?a
float = 3.14159265358979323846264
regex = /\d(cow)+\w\\/  # in Java, this would be &amp;quot;\\\\d(cow)+\\\\w\\\\\\\\&amp;quot;
regex2 = /interpolated #{regex}/
list = [1, 2, 3]
list[2] = 4
array = byte[5]
array[0] = byte(0)
hash = { &amp;quot;one&amp;quot; =&amp;gt; 1, &amp;quot;two&amp;quot; =&amp;gt; 2 }
hash[&amp;quot;three&amp;quot;] = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;修飾import&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;import java.util.HashMap as H
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;って書けます&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;型推論&lt;/h2&gt;

&lt;p&gt;Swingの例です。変数の型を書いてないことに注目して下さい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;import javax.swing.JFrame
import javax.swing.JButton

# FIXME blocks need to be inside a MethodDefinition, but main doesn&#39;t
# have one.
def self.run
  frame = JFrame.new &amp;quot;Welcome to Mirah&amp;quot;
  frame.setSize 300, 300
  frame.setVisible true

  button = JButton.new &amp;quot;Press me&amp;quot;
  frame.add button
  frame.show

  button.addActionListener do |event|
    JButton(event.getSource).setText &amp;quot;Mirah Rocks!&amp;quot;
  end
end

run
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;暗黙のInterface及び暗黙のabstractメソッド&lt;/h2&gt;

&lt;p&gt;先のSwingの例を良く見て下さい。この部分です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  button.addActionListener do |event|
    JButton(event.getSource).setText &amp;quot;Mirah Rocks!&amp;quot;
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Javaだと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;button.addactionlistener(new ActionListener(){
    public void actionPerformed(ActionEvent event){
        JButton(event.getSource).setText(&amp;quot;Mirah Rocks!&amp;quot;);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっていたところが、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;引数の型がインターフェースだったときはブロックで&lt;code&gt;new Class(){}&lt;/code&gt;と同じ働きになる&lt;/li&gt;
&lt;li&gt;abstractメソッドが一つのときはそれも省略出来る&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;というルールにより簡潔に書けます。これで引数の中に文が現れるという最悪の事態を回避出来ます。Java8のlambda式に近いのかな？Java8に詳しくなくてゴメンなさい。&lt;/p&gt;

&lt;p&gt;似たようなので、Threadも&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Thread.new do
 # do something
end.start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書けます。&lt;/p&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;マクロによる既存クラスの拡張&lt;/h2&gt;

&lt;p&gt;マクロは展開後のASTがJavaとして有効であれば良いのでJavaでは出来ない芸当が可能です。&lt;/p&gt;

&lt;p&gt;シンプルだけど強力な例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;10.times{ puts &amp;quot;Hi&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;intを&lt;code&gt;times&lt;/code&gt;マクロで拡張してます。その他、&lt;code&gt;each&lt;/code&gt;などの便利マクロや&lt;code&gt;attr_accessor&lt;/code&gt;(getterとsetterを自動生成する)など色々あります。ユーザー定義のマクロで拡張も可能ですが、今シンプルに書けるシンタックスが議論中です。&lt;/p&gt;

&lt;h1 id=&#34;toc_11&#34;&gt;Javaとの互換性とか完成度とか&lt;/h1&gt;

&lt;p&gt;まだ未実装機能はいっぱいあります。&lt;code&gt;final&lt;/code&gt;とか&lt;code&gt;synchronized&lt;/code&gt;とか。あとスコープもRuby風に&lt;code&gt;private&lt;/code&gt;以下で定義されたものはprivateですがメソッド/フィールド単位では制限出来ません&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。ジェネリクスの構文もまだサポートされてません&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;のでジェネリクスの定義は不可能、使用も型推論で型を明示的に書かなくても良いときのみ可能です。インターフェースやアノテーションはあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1t7NVsyysIlj6OF6E26OrVJ1AVrL8i2yzbMv92cdHN8c/edit#gid=0&#34;&gt;ここ&lt;/a&gt;にTODOがありますが、inner classやlambda(多分Java8のlambda式とは別もの)が弱いようです。&lt;/p&gt;

&lt;p&gt;でもまあ、Mirah自体Mirahでセルフホスティングされてますし一つ言語を作れる程度には機能は揃ってます。遊んでみる分には十分使えると思います。&lt;/p&gt;

&lt;h1 id=&#34;toc_12&#34;&gt;マクロの話&lt;/h1&gt;

&lt;p&gt;Mirahはオブジェクト指向で静的型付けの言語でマクロを実装してます。Lisper的には割と面白かったのでちょいと触れますね。&lt;/p&gt;

&lt;p&gt;まずは簡単な例から。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;macro def puts(node)
  quote {System.out.println(` [node] `)}
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lisperなら&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;macro def&lt;/code&gt;で&lt;code&gt;defmacro&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quote block&lt;/code&gt;でquasiquote&lt;/li&gt;
&lt;li&gt;バックスラッシュで囲んでunquote&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などが読み取れると思います。&lt;/p&gt;

&lt;p&gt;今のはASTは陽には出てこない簡単な例でしたが、次はちょっと飛躍しますよ？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;macro def self.abstract(klass:ClassDefinition)
  anno = Annotation.new(@call.name.position, Constant.new(SimpleString.new(&#39;org.mirah.jvm.types.Modifiers&#39;)),
                        [HashEntry.new(SimpleString.new(&#39;flags&#39;), Array.new([SimpleString.new(&#39;ABSTRACT&#39;)]))])
  klass.annotations.add(anno)
  klass.setParent(nil)
  klass
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;macroにも型がある。その型はASTの型。&lt;/li&gt;
&lt;li&gt;というかClassDefinitionとかいう型がある&lt;/li&gt;
&lt;li&gt;ASTをいじるときにASTのNodeオブジェクトのメンバをゴニョゴニョするという手段がある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などが読み取れると思います。また、ClassDefinitionを受け取ってClassDefinitionを返しているのでmacro chainが可能ですね。&lt;/p&gt;

&lt;p&gt;次はASTを自分で組み立てる例です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  macro def self.attr_reader(hash:Hash)
    methods = NodeList.new
    i = 0
    size = hash.size
    while i &amp;lt; size
      e = hash.get(i)
      i += 1
      method = quote do
        def `e.key`:`e.value`  #`
          @`e.key`
        end
      end
      methods.add(method)
    end
    methods
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NodeListがprognみたいなものでその中にMethodDefinitionを突っ込んでいってますね。中々楽しい。&lt;/p&gt;

&lt;p&gt;余談:ところでgetterメソッド名がgetKeyじゃなくてkeyになってますよね。コンパイル後は変換してくれるのかなと思い、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;@foo = &amp;quot;a&amp;quot;
attr_accessor :foo =&amp;gt; :String
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をコンパイル、ディスアセンブルしてみました。すると、&lt;code&gt;foo&lt;/code&gt;と&lt;code&gt;set_foo&lt;/code&gt;というメソッドが定義されてましたorz。Ruby的にはまあ良いんですがコンパイル後はJavaなのでそこはgetKey/setKeyにしてほしかったですね。もしかしたら今はシンボルをキャメルケースに変換出来ないのかもしれません&lt;/p&gt;

&lt;p&gt;閑話休題。また、呼び出し元の情報もとれます。これはStringの+マクロです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;macro def +(arg)
  quote { &amp;quot;#{`@call.target`}#{`arg`}&amp;quot; }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@call&lt;/code&gt;に呼び出し元の情報が入ってるのでそれを使って情報をとれます。&lt;/p&gt;

&lt;p&gt;gensymなんかもあります。これはintのtimesマクロです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;macro def times(block:Block)
  i = if block.arguments &amp;amp;&amp;amp; block.arguments.required_size() &amp;gt; 0
    block.arguments.required(0).name.identifier
  else
    gensym
  end
  last = gensym
  quote {
    while `i` &amp;lt; `last`
      init { `i` = 0; `last` = `@call.target`}
      post { `i` = `i` + 1 }
      `block.body`
    end
  }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;whileの中にある&lt;code&gt;init&lt;/code&gt;と&lt;code&gt;post&lt;/code&gt;はRubyでいう&lt;code&gt;BEGIN&lt;/code&gt;と&lt;code&gt;END&lt;/code&gt;、JVM的には&lt;code&gt;for&lt;/code&gt;の実装のために使われているのでしょうか。&lt;/p&gt;

&lt;h1 id=&#34;toc_13&#34;&gt;まとめとか雑感とか&lt;/h1&gt;

&lt;p&gt;0.1.3で一番大きな変更はセルフホストされたことですね。今まではJRubyで書かれてたのでHello Worldのコンパイルに16秒とか掛かってました。今のmirahc.jarはかなり小さく、1MBちょっとしかありません。&lt;/p&gt;

&lt;p&gt;入手法はgithubから良いかんじにダウンロード出来るんじゃないですかね？（適当）&lt;/p&gt;

&lt;p&gt;古いバージョンにはMirahのコードと等価なJavaのソースを吐くオプションがありましたがコンパイラが変わってなくなりました。かつてheadiusはこの機能を使って吐いたコードをJRubyにコミットしたことがあるそうです。今新しいコンパイラが安定してきたのでそろそろ再実装されそうです。&lt;/p&gt;

&lt;p&gt;exampleですが一応私のコミットも入ってます。&lt;code&gt;grep keen NOTICE&lt;/code&gt;ってやってみて下さい。&lt;/p&gt;

&lt;p&gt;mirah-mode.elをちまちま書いてますが道程は通そうです。ブロックコメント(&lt;code&gt;/* .. */&lt;/code&gt;)がネスト可能なのですが、正規表現だと&lt;code&gt;/*/*&lt;/code&gt;を&lt;code&gt;/*&lt;/code&gt;2つと&lt;code&gt;*/&lt;/code&gt;1つと認識しちゃってつらいです。&lt;/p&gt;

&lt;p&gt;今回細かいところは省きましたがexampleとかあと公式ページとかgithubのwikiとか見て下さいね。&lt;/p&gt;

&lt;p&gt;ある程度の完成度になってきてるのでみなさんも遊んでみて下さい。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;pull-reqは入ってるのですが、まだマージされてません
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;まだリテラルの議論が終わってないだけで、内部はジェネリクスに対応してるので近い内に入りそうな気はします。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>