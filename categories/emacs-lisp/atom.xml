<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs lisp | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/categories/emacs-lisp/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-08-27T22:09:04+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[.emacsの整理をした話 + EmacsとViとShellとLispを悪魔合体させたら超絶便利だった]]></title>
    <link href="http://KeenS.github.io/blog/2013/12/13/dot-emacs-clean-up/"/>
    <updated>2013-12-13T02:55:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/12/13/dot-emacs-clean-up</id>
    <content type="html"><![CDATA[<p>やや長いタイトルですが・・・年末になって大掃除がやってきましたね。みなさんもそろそろ.emacsの大掃除をしましょう。</p>

<!-- more -->


<p>私の.emacsは元々1300行ちょいあってEmacsの起動に7~8秒(体感)かかってましたが大掃除&amp;高速化をした結果800行弱、起動に1秒(体感)ほどになったので整理の仕方を共有しますね。</p>

<p>前提ですが、私はinitローダーとかは使ってません。全部<code>init.el</code>に書いてます。で、機能毎にページを作って(<code>C-q C-l</code>)ます。ただ、それだけだと視認性が悪いので見出しとして<code>C-u C-u C-u ;</code>で<code>;</code>を64個挿入して次の行にコメントで<code>#</code>付きのタイトルを付けてます。</p>

<p>具体的には</p>

<p><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="common-lisp"><span class="line"><span class="nv">^L</span>
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="c1">;; #Lisp</span>
</span></code></pre></td>
</tr></table></div></figure></p>

<p>こんな感じのものが機能毎に書かれてます。これで<code>C-s</code>や<code>M-x occur</code>でハッシュタグのように検索することも<code>C-v</code>でスクロールしていって目grepすることも<code>C-x ]</code>で機能毎にジャンプすることもできます。</p>

<h1>1. Emacsの最新版を使う</h1>

<p>結構重要です。「標準のやつだと欲いこの機能がないから拡張パッケージ入れた」なんてのも最新版では改善されていたりします。例えば私は<code>emacs-w3m</code>を使っていましたが、Emacsのmasterブランチには<code>eww</code>なるEmacs Lisp製のブラウザが入っているのでそれを使うようにしました。</p>

<p><s>ただ、これが絶対的正義かというとそうでもなく、パッケージで入れてない分
Ubuntuのインプットメソッドとの連携部分がなかったので<code>uim.el</code>を入れる
必要が出てきたりと、面倒な部分もありました。Emacs標準のインプットメソッドはどうにも使いものにならず、
<code>ddskk</code>もuim-skkとコンフリクトする(というか<code>C-j</code>上書きとかありえない)ので使いません。インプットメソッドの切り替え部分は</s></p>

<p><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="common-lisp"><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&ldquo;&lt;hiragana-katakana&gt;&rdquo;</span><span class="p">)</span> <span class="nf">#&lsquo;</span><span class="nv">uim-mode</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&ldquo;&lt;zenkaku-hankaku&gt;&rdquo;</span><span class="p">)</span> <span class="nf">#&rsquo;</span><span class="nv">uim-mode</span><span class="p">)</span> <span class="p">(</span><span class="nv">autoload</span> <span class="nf">#&lsquo;</span><span class="nv">uim-mode</span> <span class="s">&ldquo;uim&rdquo;</span> <span class="no">nil</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure></p>

<p>になりました。</p>

<p>2013-12-16追記<br/>
これは私が<code>~/.Xresources</code>に<code>Emacs*useXIM: false</code>を書いていたのが原因でした。<code>Emacs*useXIM: true</code>に書き換え、<code>xrdb ~/.Xresources</code>すると直りました。</p>

<h1>2. 普段使わない設定は全部消す</h1>

<p>基本ですね。私は<code>summary-edit.el</code>だとか<code>multiverse.el</code>だとかるびきちさんの本を読んで便利そうだから入れたものの、結局使わなかったものの設定&amp;elispをごっそり削除。あとかなりの言語に対してデフォルトで<code>auto-mode-alist</code>が設定されていたので<code>auto-mode-alist</code>の設定も全部消して、必要になったら書き足すようにしました。</p>

<h1>3. 普段使っていても代替の効くものは削除</h1>

<p>これは高速化の意味と自分の環境に依存しない意味があります。最近、自分のラップトップ以外でもEmacsを触ることが多くあって、デフォルトのキーを上書きして使ってる部分で何度も誤操作したのでそれを減らす目的です。<code>bm.el</code>は<code>C-x r SPC</code>の<code>register</code>系や<code>C-x C-SPC</code>で対応(registerは覚えれば使い出がありそうなのでいつか解説書くかもです)、<code>open-junk-file.el</code>は<code>~/tmp</code>を作って対応、<code>recentf-ext.el</code>は<code>helm-file-buffers</code>だとか。</p>

<p>あと全て<code>helm.el</code>に置き換えて<code>helm.el</code>と<code>anything.el</code>が混在してる状態をどうにかしたかったのですが、<code>php-completion.el</code>かなにかが依存しててトドメを刺せませんでした。</p>

<p>あと、<code>viewer</code>の代替を探していたらタイトルにあるように悪魔合体が起きたので後で書きますね。</p>

<h1>4. できる限り標準のものを使う</h1>

<p>標準で提供されているパッケージは<code>autoload</code>が<code>emacs</code>バイナリに組込まれてる(と思う)ので起動時のオーバーヘッドはありません。<code>flymake.el</code>や<code>ruby-mode.el</code>が標準で提供されてるのに気付いたのでそれを使ったりなど。一度<code>(emacsroot)/lisp</code>以下を眺めてみることをお勧めします。結構発見があるものです。</p>

<h1>5.<code>autoload</code>を使う</h1>

<p><code>autoload</code>とはファイルの読み込みを必要になるまで遅らせる仕組みです。「必要になる」ってのはそのファイルで定義されている関数が呼ばれたときです。賢い<code>require</code>と思えば良いでしょう。</p>

<pre><code>(autoload #'関数名 "関数が呼ばれたときに読むファイル名" nil interactivep)
</code></pre>

<p>みたいに使います。<code>interactivep</code>の部分は<code>M-x</code>で呼ぶものなら<code>t</code>、そうでなければ<code>nil</code>です。<code>require</code>を<code>autoload</code>で書き換えていけば理論上起動時の読み込み0にできるのでかなり高速化できます。</p>

<p>が、実際は一々<code>autoload</code>書くのはしんどいので次です。</p>

<h1>6.できる限り<code>package.el</code>を使う</h1>

<p><code>package.el</code>は必要な関数の<code>autoload</code>を自動生成して読み込んでおいてくれるのでかなりの手間が省けます。そして<code>autoload</code>があるのに<code>require</code>してると折角の<code>package.el</code>の配慮が無駄になります。</p>

<p>自動生成された<code>autoload</code>は<code>elpa/パッケージのディレクトリ/パッケージ-autoloads.el</code>にあるので確認しながら<code>init.el</code>の邪魔なものを消していきます。これでかなり<code>init.el</code>の行数が減ります。今まで無駄な設定していたんだなと気付きます。</p>

<h1>7. <code>eval-after-load</code>を使う</h1>

<p>8割程の設定は<code>autoload</code>で対応できるのですが、踏み込んだ設定をしているとパッケージの内部の関数を使ってしまってどうしてもその式が評価される前にパッケージが読み込まれている必要があることがあります。</p>

<p>そんなときは<code>eval-after-load</code>を使います。名前のまんま、ロードした後で<code>eval</code>してくれます。</p>

<pre><code>(eval-after-load 'ファイル名
    '式)
</code></pre>

<p>の形で使います。複数の式を使いたい場合は<code>progn</code>を使って</p>

<pre><code>(eval-after-load 'ファイル名
    '(progn
         式1
         式2...))
</code></pre>

<p>のように使います。あるパッケージの拡張パッケージなんかもここで読むと良いかもしれません。</p>

<h1>8.その他</h1>

<p>メールクライアントを標準のものにしようとしましたが、<code>gnus.el</code>はちょっと受け付けなくてその他はimapを喋らないので断念。でも色々調べてたら<code>mew</code>より<code>wanderlust</code>の方が良いようなので使い初めました。表示が綺麗で良いですね。HTMLのレンダリングも<code>emacs-w3m</code>に頼らず標準の<code>shr.el</code>を使っているのも◎。</p>

<p>同じような経緯で<code>JDEE</code>をやめて<code>malabar.el</code>を使うようにしました。ただ、私は<code>maven</code>使いではないので微妙ではあります。まあ、そもそもプロジェクト単位でJavaを書くことがないってのもあるんですが。Androidのスケルトンがantなのでantでできたら嬉しいなーって。</p>

<h1>EmacsとViとShellとLispを悪魔合体させた話</h1>

<p>私はEmacsの狂信者ですが読み専のときはちょいちょいviを使うこともあります。片手で操作できるのは便利です。Emacsで読み専といえば<code>view-mode</code>です。そこでもhjklを使うべく<code>view-mode-map</code>に手を加えてましたが、大掃除ということで全部削除。</p>

<p>その後で<code>emacsroot/lisp/emulate/</code>以下を読んでいるとなんかviのエミュレーターが3つも見付かりました。<code>vi.el</code>、<code>vip.el</code>、<code>viper.el</code>です。後者になるほどviとの互換性が高くなります。とりあえずは<code>hjkl</code>が使えれば良いので<code>vi.el</code>を使ってみたところ、ん〜…といったところ。<code>vip.el</code>と試して結局<code>viper.el</code>に落ち着きました。</p>

<pre><code>(global-set-key (kbd "C-x C-q") #'(lambda ()
                    (interactive)
                    (toggle-viper-mode)
                    (force-mode-line-update)))
</code></pre>

<p>設定はこんな感じです。<code>toggle-viper-mode</code>してもモードラインの表示が変わらないことがあったので<code>force-mode-line-update</code>を加えました。</p>

<p><code>viper.el</code>は単なるviのエミュレートだけではなく、Levelに応じて良い感じにemacsと悪魔合体してくれます。私は最高レベルの5にしました。”C-x C-s”など基本的なコマンドはそのまま使えるようになってます。<code>:</code>で始まるvi(ex)のコマンドも使えます。<code>C-z</code>でemacs&lt;–>viを切り替えたり。非常に便利です。</p>

<p>尚、私はvi使いであってvim使いではないのでevilは使いません。</p>

<p>もう一つ、shellの話。今までは<code>multiterm</code> × <code>zsh</code>な感じでしたが、「できる限り標準のものを使う」方針で<code>eshell</code>に切り替えました。<code>eshell</code>はEmacs Lispで書かれたshellです。これが思った以上に便利です。るびきちさんの本では標準出力とエラー出力の切り分けができてないと書かれてましたがそれは修正されてるようです。</p>

<p>あとは<code>/dev/kill</code>だとか<code>&gt;&gt;&gt;</code>だとかバッファへのリダイレクトだとか<code>grep</code>の上書きだとか色々楽しい拡張もあるのですが、一番は<code>eshell</code>がLispであること。<code>eshell</code>上で任意のEmacs Lisp式を実行できます。最近Emacs LispやLispに精通してきたので非常に有り難いです。<br/>
それにファイルを開くときもその後で同じディレクトリのファイルを開くことが多いので一旦 <code>cd</code>してから<code>find-file</code>をするとアクセスし易くて捗ります。もう起動時に<code>eshell</code>が立ち上がるようにして、基本そこから操作するようにしてます。guakeもそんなに使わなくなりました。他の環境でも使えるので安心して依存できます。</p>

<p>で、ファイルを開くときはどうしてるかというと実はemacsの<code>find-file</code>ではなくviの<code>:e file-name</code>です。Emacs上でLispで出来たShellを使いつつviを動かしてます。かなり人を選びますが「EmacsのヘビーユーザーでLispに精通しててviを便利だと思ってる人」は試してみてはいかがでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacsのdired-modeを使い易くする]]></title>
    <link href="http://KeenS.github.io/blog/2013/10/04/emacs-dired/"/>
    <updated>2013-10-04T19:51:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/10/04/emacs-dired</id>
    <content type="html"><![CDATA[<p>Emacsの標準ライブラリ<code>dired.el</code>を読んでたら色々発見があったのでメモ兼dired-modeとはなんじゃらほいって方にも一から解説してみます。</p>

<!-- more -->


<p>とは言ってもいきなり解説しなくて申し訳ないのですが、最初に</p>

<pre><code>(ffap-bindings)
</code></pre>

<p>を設定しておきましょう。<code>C-x C-f</code>が非常に便利になります。だいたいの方が設定してるかと思いますが、まだという方は<code>init.el</code>に書いて保存し、最後の<code>)</code>の後にカーソルを持っていって<code>C-x C-e</code>しましょう。設定が反映されます。この設定で<code>C-x C-f</code>の入力がファイル以外も受け付けてくれますし、カーソルにポイントされてるファイルやURLをデフォルトで開こうとしてくれます。</p>

<p>…よし。じゃあ解説始めますよ。<code>C-x C-f ~/</code>してみて下さい。上の設定をしていたらディレクトリでも開ける筈です。するとホームディレクトリが<code>ls -al</code>された感じのバッファが出てくると思います。</p>

<p><img src="/images/Screenshot_from_2013-10-04.png" title="dired-mode-screenshot" alt="私のホームはちょっとマズいのがあったので.emacs.dのスクリーンショット" /></p>

<p>これが<code>dired-mode</code>です。これは普通に<code>n</code>(<code>C-n</code>でも可)や<code>p</code>(<code>C-p</code>でも可)で移動して、Enterでそのファイルやディレクトリを開けます。これだけでも十分便利なのですが、ここからさらにファイル操作までできます。</p>

<p>適当なファイルにカーソルを合わせて<code>C</code>するとコピー先を聞かれるので、入力してあげるとコピーしてくれます。複数ファイルをコピーしたいなら、コピーしたいファイル上で<code>m</code>してマークを付けて、<code>C</code>すれば一括でコピーできます。</p>

<p>勿論、他にもコマンドはあります。同じような使い方のできる代表的なものを挙げると、</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> コマンド </th>
<th align="left"> 操作(実行されるLinuxコマンド)</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>C</code>     </td>
<td align="left"> コピー(<code>cp</code>)</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>R</code>     </td>
<td align="left"> リネーム/移動 (<code>mv</code>)</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>D</code>     </td>
<td align="left"> 削除(<code>rm</code>)</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>M</code>     </td>
<td align="left"> 権限操作(<code>chmod</code>)</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>G</code>     </td>
<td align="left"> グループ変更(<code>chgrp</code>)</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>O</code>     </td>
<td align="left"> 所有権変更(<code>chown</code>)</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>Z</code>     </td>
<td align="left"> 圧縮/展開(<code>compress/uncompress/gunzip/bunzip/unzip</code>)</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>B</code>     </td>
<td align="left"> (*.elファイルの)バイトコンパイル</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>!</code>     </td>
<td align="left"> 任意のコマンドの実行。デフォルトで空気読んだコマンドになってる。</td>
</tr>
</tbody>
</table>


<p>他にも無数に操作はありますがファイル操作はこんなものでしょう。あとはバッファを閉じる<code>q</code>や親ディレクトリに移動する<code>^</code>、バッファの更新を行なう<code>g</code>、マークを外す<code>u</code>(<code>U</code>で全解除)を覚えていれば操作には困らない筈です。</p>

<p>が、頻繁に使っているとより良く使いたくなります。そこで今回見付けた設定を紹介します。</p>

<p>まず</p>

<pre><code>(add-hook 'dired-load-hook (lambda ()
                  (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)))
</code></pre>

<p>から。これはdired-modeで<code>r</code>するとバッファがエディタブルになり、ファイル名を普通に変更できます。そのまま<code>C-x C-s</code>すればリネームの終了です。<br/>
普通にEmacsの編集コマンドが使えるので <code>M-%</code>とかで一括拡張子変更とか<code>C-x r t</code>でファイル名にプリフィクスつけたり自由自在です。</p>

<p>次に</p>

<pre><code>(setq dired-listing-switches (purecopy "-Ahl"))
</code></pre>

<p>Emacsがdired-modeを表示するとき、実際に裏で <code>ls -al</code>を走らせているのですが、そのときのオプションを変更できます。但し内部で<code>-l</code>の結果を利用してるのでこれは必須です。しかしそれ以外は自由に設定できます。因みにWindowsでもEmacsがエミュレートしてくれるので設定可能ですが、一部未実装のものもあるそうです。</p>

<p>頻繁に使うなら</p>

<pre><code>(setq dired-dwim-target t)
</code></pre>

<p>もお勧めです。</p>

<p>これを設定しておくと、ウィンドウを分割して左右にdiredバッファを開いているとき、<code>R</code>や<code>C</code>のデフォルトの宛先がもう片方のディレクトリになります。伝わりますかね？</p>

<p><img src="/images/Screenshot_from_2013-10-05.png" title="dired-mode in both of split window" alt="分割した両方のWindowでdired-modeを実行した状態。" /></p>

<p>のようにdiredでディレクトリA, Bを開いてるときにディレクトリAでファイルのコピーやら移動やらをするときにデフォルトでBに移動やコピーを行なうようになります。いくつかのファイルをディレクトリ間で移動させるときに非常に便利ですね。</p>

<p>あ、<code>C-x C-f /ftp:user@ftp-server:/path/to/dir</code>でFTPサーバーのディレクトリ/ファイルにもアクセスできるのは御存じですよね？これと組合せるとEmacsが割と使い易いFTPクライアントに大変身!</p>

<p>あとは私がどうしても欲しかったtarballですね。</p>

<script src="https://gist.github.com/KeenS/6828197.js?file=dired-tar.el"></script>


<p><noscript><pre><code>(defun dired-tar (tarname files &amp;optional arg)
  &ldquo;A dired-mode extension to archive files marked. With prefix argument, the tarball is gziped.&rdquo;
  (interactive (let ((files (dired-get-marked-files)))</p>

<pre><code> (list (read-string &amp;quot;Tarball name: &amp;quot; (concat (file-relative-name (car files)) &amp;quot;.tar.gz&amp;quot;))
           files &amp;quot;P&amp;quot;)))
</code></pre>




<p> (let ((tar (if arg</p>




<pre><code> (if dired-guess-shell-gnutar
         (concat dired-guess-shell-gnutar &amp;quot; zcf %s %s&amp;quot;)
       &amp;quot;tar cf - %2s | gzip &amp;gt; %1s&amp;quot;)
       &amp;quot;tar cf %s %s&amp;quot;)))
(shell-command (format tar tarname (mapconcat 'file-relative-name files &amp;quot; &amp;quot;)))))
</code></pre>




<p>(add-hook ‘dired-load-hook (lambda () (define-key dired-mode-map "T" ‘dired-tar)))
</p>


<p></code></pre></noscript></p>

<p>これでtarballにまとめたいファイルをマークして<code>T</code>すればまとめてくれます。<code>C-u T</code>するとgzip圧縮までしてくれます。因みに解凍/展開はファイル上で<code>!</code>するとデフォルトコマンドが展開(<code>tar xzvf</code>など)になってるので専用コマンドは必要ありません。補足ですが個人用なのでテストとかしてません。一旦御自身で動作テストなどをされてから実行されることをお勧めします。</p>

<p>他にも色々なコマンドがたくさんあったので興味のある方は探求してみて下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octomacs.elを修正しました]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/16/octomacs-el/"/>
    <updated>2013-09-16T21:24:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/16/octomacs-el</id>
    <content type="html"><![CDATA[<p>EmacsからOctopressに投稿できるOctomacs.elが最新版のrvm.elに対応してないようだったので修正してみました。</p>

<!-- more -->


<p>原因はOctomacs.elがrvm.elの内部で使われている関数を使っていたのですが、その関数が最新版で削除されていたからだったみたいです。</p>

<p>結論として、</p>

<p><figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line"><strong><em> /home/kim/.emacs.d/lisp/octomacs/octomacs.el 2013-09-16 22:29:14.498296762 +0900
</span><span class="line">&mdash;&ndash; /home/kim/.emacs.d/elpa/octomacs-20121026.1649/octomacs.el 2013-08-31 23:54:13.044373498 +0900
</span><span class="line"> </em></strong><strong><strong><em><strong><strong><strong><em>
</span><span class="line"> </em></strong>4,10</strong></strong>
</span><span class="line"> ;;
</span><span class="line"> ;; Author: Jacob Helwig &lt;jacob@technosorcery.net&gt;
</span><span class="line"> ;; Homepage: <a href="http://technosorcery.net">http://technosorcery.net</a>
</span><span class="line">! ;; Version: 0.0.1
</span><span class="line"> ;; URL: <a href="https://github.com/jhelwig/octomacs">https://github.com/jhelwig/octomacs</a>
</span><span class="line"> ;;
</span><span class="line"> ;;; License:
</span><span class="line">&mdash;&ndash; 4,11 &mdash;&mdash;
</span><span class="line"> ;;
</span><span class="line"> ;; Author: Jacob Helwig &lt;jacob@technosorcery.net&gt;
</span><span class="line"> ;; Homepage: <a href="http://technosorcery.net">http://technosorcery.net</a>
</span><span class="line">! ;; Version: 20121026.1649
</span><span class="line">! ;; X-Original-Version: 0.0.1
</span><span class="line"> ;; URL: <a href="https://github.com/jhelwig/octomacs">https://github.com/jhelwig/octomacs</a>
</span><span class="line"> ;;
</span><span class="line"> ;;; License:
</span><span class="line"> </em></strong></strong><em><em><strong><strong><strong><em>*
</span><span class="line"> </em></strong>133,146</strong></strong>
</span><span class="line"> (defun octomacs-format-rake-task-with-args (task &amp;optional arguments)
</span><span class="line"> &ldquo;Build a shell suitable string of the rake TASK name with the specified ARGUMENTS.&rdquo;
</span><span class="line"> (let ((arguments-string (if arguments
</span><span class="line">! (format &ldquo;[%s]&rdquo; (if (listp arguments) (mapconcat &lsquo;octomacs-shell-escape-string arguments &ldquo;, &rdquo;) arguments))
</span><span class="line"> &ldquo;&rdquo;)))
</span><span class="line"> (format &ldquo;&rsquo;%s%s'&rdquo; task arguments-string)))
</span><span class="line"><br/>
</span><span class="line"> (defun octomacs-rake-with-rvm (directory task &amp;optional arguments)
</span><span class="line"> &ldquo;Run rake task TASK with specified ARGUMENTS in DIRECTORY using rvm&rdquo;
</span><span class="line"> (let</em> ((default-directory (file-name-as-directory (expand-file-name directory)))
</span><span class="line">! (rvmrc-info (or (rvm&mdash;load-info-rvmrc) (rvm&mdash;load-info-ruby-version) (rvm&mdash;load-info-gemfile)))
</span><span class="line"> (rvm-command (if rvmrc-info
</span><span class="line"> (concat &ldquo;rvm &rdquo; (mapconcat &lsquo;identity rvmrc-info &ldquo;@&rdquo;) &ldquo; do &rdquo;)
</span><span class="line"> &ldquo;&rdquo;)))
</span><span class="line">&mdash;&ndash; 134,148 &mdash;&mdash;
</span><span class="line"> (defun octomacs-format-rake-task-with-args (task &amp;optional arguments)
</span><span class="line"> &ldquo;Build a shell suitable string of the rake TASK name with the specified ARGUMENTS.&rdquo;
</span><span class="line"> (let ((arguments-string (if arguments
</span><span class="line">! (format &ldquo;[%s]&rdquo; (mapconcat 'octomacs-shell-escape-string arguments &ldquo;, &rdquo;))
</span><span class="line"> &ldquo;&rdquo;)))
</span><span class="line"> (format &ldquo;&rsquo;%s%s'&rdquo; task arguments-string)))
</span><span class="line"><br/>
</span><span class="line"> (defun octomacs-rake-with-rvm (directory task &amp;optional arguments)
</span><span class="line"> &ldquo;Run rake task TASK with specified ARGUMENTS in DIRECTORY using rvm&rdquo;
</span><span class="line"> (let</em> ((default-directory (file-name-as-directory (expand-file-name directory)))
</span><span class="line">! (rvmrc-path (rvm&mdash;rvmrc-locate directory))
</span><span class="line">! (rvmrc-info (if rvmrc-path (rvm&mdash;rvmrc-read-version rvmrc-path) nil))
</span><span class="line"> (rvm-command (if rvmrc-info
</span><span class="line"> (concat &ldquo;rvm &rdquo; (mapconcat &lsquo;identity rvmrc-info &ldquo;@&rdquo;) &ldquo; do &rdquo;)
</span><span class="line"> &ldquo;&rdquo;)))
</span></code></pre></td>
</tr></table></div></figure></p>

<p>こんな感じです。これでちゃんと<code>.rvmrc</code>やら<code>.ruby-version</code>やら<code>.ruby-gemset</code>やらを反映してくれます。 <a href="https://github.com/jhelwig/octomacs/pull/2">pull-req投げてみました</a>。初pull-reqです。英語心配です。</p>

<p>俺、pull-reqとりこまれたら<code>rake gen_deploy</code>にも挑戦するんだ…</p>

<p>あ、因みにこの投稿は<code>init.el</code>に</p>

<pre><code>(setq octomacs-workdir-alist '(("default" . "~/Ruby/octopress")))
</code></pre>

<p>して<code>octomacs-new-post</code>から投稿してます。</p>
]]></content>
  </entry>
  
</feed>
