<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ubuntu on κeenのHappy Hacκing Blog</title>
    <link>/categories/ubuntu/index.xml</link>
    <description>Recent content in Ubuntu on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="/categories/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>VMwareのUbuntuを16.10にしたら起動しなくなった</title>
      <link>/blog/2016/10/31/vmwarenoubuntuwo16_10nishitarakidoushinakunatta</link>
      <pubDate>Mon, 31 Oct 2016 22:06:17 +0900</pubDate>
      
      <guid>/blog/2016/10/31/vmwarenoubuntuwo16_10nishitarakidoushinakunatta</guid>
      <description>&lt;p&gt;κeenです。普段はネイティブのUbuntuを使ってますが会社では使えないのでVMwareにUbuntuを入れて使っています。
今日そのUbuntuを16.04から16.10にアップグレードしたら起動しなくなったので対策メモ。&lt;/p&gt;

&lt;p&gt;
現象は、Ubuntuを起動しようとするとゲストOSによってCPUがオフにされた旨の通知が来てフリーズします。
このリリースノート（&lt;a href=&#34;http://pubs.vmware.com/Release_Notes/en/fusion/8/fusion-851-release-notes.html&#34;&gt;VMware Fusion 8.5.1 Release Notes&lt;/a&gt;）を見れば分かりますが、Linux Kernel 4.7以上を使うと発生するバグのようです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Known Issues&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Virtual machines running Linux kernel version 4.7 or above may crash or hang on hosts with Intel CPUs

Virtual Machines running Linux kernel version 4.7 or above may crash during installation or during power-on with a crash in the intel_powerclamp driver. This issue has been reported with Ubuntu 16.10, but it is a generic Linux kernel issue.

Workaround: VMware is working with the OS vendors to have them fix their respective kernels. Until a fix is available, you can blacklist the intel_powerclamp driver so that the buggy code doesn&#39;t get loaded.

To blacklist the driver:

Add the kernel command-line option modprobe.blacklist=intel_powerclamp to the guest OS&#39;s default grub configuration or add it directly at the grub menu during boot.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;どうやらIntel CPUのホストだと特定のカーネルモジュールが誤動作してCPUをoffってしまうっぽい？OSベンダと協力して直していくと言っているのでVMwareのアップデートでは直らなそう。OSのアップデートはそもそも起動しないので出来ない、というかなりキツい状況です。
幸いにもワークアラウンドがあるのでそれを使って起動、修正します。&lt;/p&gt;

&lt;h1 id=&#34;ubuntuの起動&#34;&gt;Ubuntuの起動&lt;/h1&gt;

&lt;p&gt;誤動作するカーネルモジュールをロードしないようにしたら起動するっぽいです。&lt;/p&gt;

&lt;p&gt;今OSがハングしている状態ならとりあえず殺して、 &lt;code&gt;ESC&lt;/code&gt; キー(多分。もしかしたら &lt;code&gt;Shift&lt;/code&gt; かも)を押しながらUbuntuを起動します。そうするとgrub menuの画面に遷移する筈です。&lt;/p&gt;

&lt;p&gt;grub menuで（恐らく1番上にある）使用中のカーネルに選択肢を合わせた状態で&lt;code&gt;e&lt;/code&gt;を押すと起動シーケンスをいじれるようになります。&lt;/p&gt;

&lt;p&gt;Emacsっぽく操作出来る画面が出てくるので&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	linux	/vmlinuz-4.4.0-45-generic root=/dev/mapper/ubuntu--vg-root ro  quiet splash $vt_handoff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにLinuxカーネルを起動してるっぽい行に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	linux	/vmlinuz-4.4.0-45-generic root=/dev/mapper/ubuntu--vg-root ro  quiet splash $vt_handoff modprobe.blacklist=intel_powerclamp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と &lt;code&gt;modprobe.blacklist=intel_powerclamp&lt;/code&gt; を追加してあげれば起動します。&lt;/p&gt;

&lt;h1 id=&#34;起動オプションの変更&#34;&gt;起動オプションの変更&lt;/h1&gt;

&lt;p&gt;とりあえず今のでワンショットで起動出来るようになったので起動オプションの設定を変更して次回以降も起動出来るようにしておきます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/default/grub&lt;/code&gt; をいじれば良いようです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GRUB_CMDLINE_LINUX=&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の行をこれまた&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GRUB_CMDLINE_LINUX=&amp;quot;modprobe.blacklist=intel_powerclamp&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と &lt;code&gt;modprobe.blacklist=intel_powerclamp&lt;/code&gt; を追加するように書き換えてあげて、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo update-grub2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でgrubに変更を反映してあげればOKです。&lt;/p&gt;

&lt;h1 id=&#34;その他&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;Ubuntu 16.10を1日使ってみましたが特に不自由なく使えています。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LXDがリリースされたらしい</title>
      <link>/blog/2016/04/14/lxc_2_0_0gariri_susaretarashii</link>
      <pubDate>Thu, 14 Apr 2016 22:51:20 +0900</pubDate>
      
      <guid>/blog/2016/04/14/lxc_2_0_0gariri_susaretarashii</guid>
      <description>&lt;p&gt;κeenです。頭痛い。LXDがリリースされたようなので1つ記事をば。
LXDはLinuxで動く軽量仮想化コンテナ、LXCのラッパでREST APIとCLIが提供されています。
&lt;/p&gt;

&lt;p&gt;LXC、LXD共にUbuntuの開発元、Canonicalが開発しています。
LXCについては初期のDockerがバックエンドに使っていたので知名度もそこそこあるかと思いますが、
そのラッパであるLXDはこの度ようやく正式リリースされました。&lt;/p&gt;

&lt;p&gt;既にDockerがあるのになぜわざわざ新たにLXDを使うんだって気もしますが、対象とするレイヤーが違います。
Dockerはアプリケーションコンテナ、つまりアプリケーションを動かすためのプロセスより強い分離環境を提供するために使われますが
LXDはシステムコンテナ、つまり仮想マシンより軽い仮想化環境を提供します。
なのでファイルシステムはCopy on Writeしませんし一度終了したコンテナは破棄されず、再起動出来ます。
詳しくはここら辺に書いてあります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.stgraber.org/2016/03/11/lxd-2-0-blog-post-series-012/&#34;&gt;LXD 2.0: Blog post series [0/12] | Stéphane Graber&amp;rsquo;s website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1つDockerとLXDの違いの分かりやすい例を出すと、それぞれのOpenStackでの立ち位置を見ると面白そうです。
Dockerは&lt;a href=&#34;https://wiki.openstack.org/wiki/Magnum&#34;&gt;OpenStack Magnum&lt;/a&gt;でOpenStack上で扱えますが、OpenStackのコンピュートノード &lt;strong&gt;上&lt;/strong&gt; で動作します。
一方LXDは&lt;a href=&#34;https://insights.ubuntu.com/2015/05/06/introduction-to-nova-compute-lxd/&#34;&gt;nova-compute-lxd&lt;/a&gt;でOpenStack上で扱えますが、 OpenStackのコンピュートノード &lt;strong&gt;として&lt;/strong&gt; 動作します。
なんだかんだ重いVMがコンテナのお陰で軽くなる訳です。そして勿論のこと、Docker in LXDなんかも出来るのでちゃんと共存出来ます。&lt;/p&gt;

&lt;p&gt;今のところUbuntu 14.04あるいは未来の16.04でリリースされているようです。Ubuntu 15.10をお使いの方は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add-apt-repository ppa:ubuntu-lxc/lxd-stable
apt-get update
apt-get dist-upgrade
apt-get install lxd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でインストール出来るようです(&lt;a href=&#34;https://linuxcontainers.org/ja/lxd/getting-started-cli/&#34;&gt;マニュアル&lt;/a&gt;より)。
LXDはLXCのラッパでありながらもliblxcにしか依存しないのでlxc自体はインストールする必要はありません。&lt;/p&gt;

&lt;p&gt;さてこれでLXDがインストールされた訳ですが、LXDはコンテナなどのリソースを管理するデーモンとそのCLIから成ります。
CLIのコマンド名はなんと&lt;code&gt;lxc&lt;/code&gt;です。LXCのコマンド群が&lt;code&gt;lxc-*&lt;/code&gt;なので非常に勘違いしやすいですね。&lt;/p&gt;

&lt;p&gt;詳しいコマンド群は&lt;a href=&#34;https://linuxcontainers.org/ja/lxd/getting-started-cli/&#34;&gt;マニュアル&lt;/a&gt;を読めばいいのですがそれだけだとお粗末なので多少紹介します。&lt;/p&gt;

&lt;p&gt;インストール直後は新規に作ったグループを今のログインセッションに反映させる必要があるので&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;newgrp lxd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とする必要があります。その次は初期化が必要になります。&lt;code&gt;lxd init&lt;/code&gt;です。いくつか質問されますがデフォルトの回答を選んでいけば問題なさそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo lxd init
Name of the storage backend to use (dir or zfs): zfs
error: The requested backend &#39;zfs&#39; isn&#39;t available on your system (missing tools).
Name of the storage backend to use (dir or zfs): dir
Would you like LXD to be available over the network (yes/no)? yes
Address to bind LXD to (not including port): 0.0.0.0
Port to bind LXD to (8443 recommended): 
Invalid input, try again.

Port to bind LXD to (8443 recommended): 8443
Trust password for new clients: 
Again: 
Do you want to configure the LXD bridge (yes/no)? yes
Warning: Stopping lxd.service, but it can still be activated by:
  lxd.socket
LXD has been successfully configured.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ubuntuでzfsが使えるのは16.04からなので15.10では使えませんでした。また、ブリッジのコンフィギュアにはウィザードが出てきます。&lt;/p&gt;

&lt;p&gt;これで初期化が終わり、コンテナを立ち上げる準備が出来ました。&lt;/p&gt;

&lt;p&gt;コンテナはイメージを元に立ち上げるのですが、今回はイメージはネット上のものから立ち上げます。
インストール時点でいくつかサーバが登録されているので名前で指定してあげるだけでよいようです。
他にイメージを使う方法はリモートのLXDをサーバとして使う、手動でファイルからインポートするなどがあるようです。&lt;/p&gt;

&lt;p&gt;ということでコンテナの立ち上げはこうです。折角なので未来のUbuntu 16.04を使ってみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo lxc launch ubuntu:16.04 future-ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドでビルトインの&amp;rdquo;Ubuntu&amp;rdquo;サーバにある16.04バージョンのイメージをfuture-ubuntuという名前のコンテナで立ち上げます。&lt;/p&gt;

&lt;p&gt;これでコンテナが立ち上がりました。確認してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo lxc list
+---------------+---------+--------------------------------+----------------------------------------------+------------+-----------+
|     NAME      |  STATE  |              IPV4              |                     IPV6                     |    TYPE    | SNAPSHOTS |
+---------------+---------+--------------------------------+----------------------------------------------+------------+-----------+
| future-ubuntu | RUNNING | 10.197.202.251 (eth0)          | fdc:d0ef:6a90:89f5:216:3eff:fe42:fb45 (eth0) | PERSISTENT | 0         |
|               |         | 10.0.3.1 (lxcbr0)              |                                              |            |           |
+---------------+---------+--------------------------------+----------------------------------------------+------------+-----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ついでにローカルにあるイメージも確認しましょう。インポートまで終わっているようです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo lxc image list
+-------+--------------+--------+-------------------------------------------+--------+----------+------------------------------+
| ALIAS | FINGERPRINT  | PUBLIC |                DESCRIPTION                |  ARCH  |   SIZE   |         UPLOAD DATE          |
+-------+--------------+--------+-------------------------------------------+--------+----------+------------------------------+
|       | 6cb0ba80a5fe | no     | ubuntu 16.04 LTS amd64 (beta2) (20160322) | x86_64 | 140.43MB | Apr 14, 2016 at 3:55pm (UTC) |
+-------+--------------+--------+-------------------------------------------+--------+----------+------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;立ち上げたコンテナにログインしてみましょう。これはDockerをお使いの方は馴染があるんじゃないでしょうか。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo lxc exec future-ubuntu -- /bin/bash
root@future-ubuntu:~# lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu Xenial Xerus (development branch)
Release:	16.04
Codename:	xenial
root@future-ubuntu:~# exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんと16.04になっているようです。&lt;/p&gt;

&lt;p&gt;コンテナの停止は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo lxc stop future-ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。ちゃんと止まったか確認してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo lxc list
+---------------+---------+------+------+------------+-----------+
|     NAME      |  STATE  | IPV4 | IPV6 |    TYPE    | SNAPSHOTS |
+---------------+---------+------+------+------------+-----------+
| future-ubuntu | STOPPED |      |      | PERSISTENT | 0         |
+---------------+---------+------+------+------------+-----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんとSTATEがSTOPPEDになってますね&lt;/p&gt;

&lt;p&gt;もう一度起動してみます&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo lxc start future-ubuntu
sudo lxc list
+---------------+---------+--------------------------------+----------------------------------------------+------------+-----------+
|     NAME      |  STATE  |              IPV4              |                     IPV6                     |    TYPE    | SNAPSHOTS |
+---------------+---------+--------------------------------+----------------------------------------------+------------+-----------+
| future-ubuntu | RUNNING | 10.197.202.251 (eth0)          | fdc:d0ef:6a90:89f5:216:3eff:fe42:fb45 (eth0) | PERSISTENT | 0         |
|               |         | 10.0.3.1 (lxcbr0)              |                                              |            |           |
+---------------+---------+--------------------------------+----------------------------------------------+------------+-----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次はコンテナを削除します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo lxc stop future-ubuntu
sudo lxc delete future-ubuntu
sudo lxc list
+------+-------+------+------+------+-----------+
| NAME | STATE | IPV4 | IPV6 | TYPE | SNAPSHOTS |
+------+-------+------+------+------+-----------+
sudo lxc image list
+-------+--------------+--------+-------------------------------------------+--------+----------+------------------------------+
| ALIAS | FINGERPRINT  | PUBLIC |                DESCRIPTION                |  ARCH  |   SIZE   |         UPLOAD DATE          |
+-------+--------------+--------+-------------------------------------------+--------+----------+------------------------------+
|       | 6cb0ba80a5fe | no     | ubuntu 16.04 LTS amd64 (beta2) (20160322) | x86_64 | 140.43MB | Apr 14, 2016 at 3:55pm (UTC) |
+-------+--------------+--------+-------------------------------------------+--------+----------+------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナが消えただけでイメージは残るんですね。&lt;/p&gt;

&lt;p&gt;さて、いかがでしょうか。軽量なVMと考えれば非常に手軽で中々面白いんじゃないでしょうか。
因みにコンテナとホスト間でのファイルのやりとりも簡単(&lt;code&gt;lxc file pull/push&lt;/code&gt;)なようなのでコンテナ内でコンパイラを動かしてホストにもってくるとかをすれば開発環境の隔離環境としても使えそうです。&lt;/p&gt;

&lt;p&gt;時間があればもう少し詳細に検証してみます。SNAPSHOTとかも試してみたかった。それでは今日はこの辺で。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FreeBSDに移行した</title>
      <link>/blog/2014/12/27/freebsd</link>
      <pubDate>Sat, 27 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/12/27/freebsd</guid>
      <description>&lt;p&gt;κeenです。Ubuntuのaptが古いのが我慢ならなくなってきたのでFreeBSDに移行しました。pkgのsbclが1.2.6ですよ！

最初は踏ん切りがつかなかったのでメインの500GBのHDDではなく、ジャンクで買った128Gのものにインストール。様々な問題に当ったものの、どうにか使えてます。今はHDD換装してメインになってます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;問題の半分はKDEを導入したら直った（最初はCinnamon入れようとした。UbuntuではUnity使ってた）&lt;/li&gt;
&lt;li&gt;２日くらいはつぶす覚悟&lt;/li&gt;
&lt;li&gt;Xorgの設定を手で畫くことになるとは&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;良いところ&#34;&gt;良いところ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;速い気がする。ufsのお陰？（HDDの問題？）&lt;/li&gt;
&lt;li&gt;Firefoxが全然CPU食わなくなった（プラグインの問題？）&lt;/li&gt;
&lt;li&gt;pkg使い易い！&lt;/li&gt;
&lt;li&gt;Ubuntuで使ってたソフトウェア大体動く&lt;/li&gt;
&lt;li&gt;portsもある！！&lt;/li&gt;
&lt;li&gt;Dtraceとかjailとか便利そうじゃね？&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;問題&#34;&gt;問題&lt;/h1&gt;

&lt;p&gt;たいてい解決or妥協してるのですが、どうにもならない点がいくつか&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;skkservがセグフォる。multiskkserv使えない。今は辞書直読みで対応してる。&lt;/li&gt;
&lt;li&gt;Wifiのデバドラがない。今はUSBのアダプタ使ってる（そっちのドライバはある）&lt;/li&gt;
&lt;li&gt;sleepすると復帰したときにディスプレイが点かない&lt;/li&gt;
&lt;li&gt;メインのHDDにデュアルブートでバックポート出来無かった&lt;/li&gt;
&lt;li&gt;日本語キーボードのモディファイアキーを認識しない: のたうち回ってpolykitの設定とかsysctlとか書いてる内に直った。でもen配列だと無理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に3番が痛い。&lt;/p&gt;

&lt;h1 id=&#34;解決-妥協した問題&#34;&gt;解決/妥協した問題&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;インプットメソッド、ログインマネージャ、タイムゾーン: KDEを導入したら直った&lt;/li&gt;
&lt;li&gt;データの移行: fusefs_ext4でUbuntuのHDDマウントしてコピー、権限変更、&lt;code&gt;chmod u+w&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;フォント: &lt;code&gt;sudo pkg install $(pkg search ja-font)&lt;/code&gt;の力技。あとはXorgの設定書いてKDEとFirefoxで好みのフォントを選んだ&lt;/li&gt;
&lt;li&gt;キーボードdvorakにしてるのにqwertyになる: qwertyで妥協。やりたければ&lt;code&gt;sekxkbd&lt;/code&gt;とかあるし&lt;/li&gt;
&lt;li&gt;ロケールが日本語になんなくてFirefoxとかが全部英語: ま、いっか&lt;/li&gt;
&lt;li&gt;タッチパッドでスクロールが出来無い: Xorgの設定書いた。ドライバもなんか設定書いた気がする&lt;/li&gt;
&lt;li&gt;kvmが使えない: むしろBHyVeを試してみるチャンス！開発中のVMMを提供してくれたFreeBSDに圧倒的感謝！！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デバドラとかハードウェア周りがつらい。ソフトウェアは統合デスクトップ環境が吸収してくれますね。&lt;/p&gt;

&lt;p&gt;EmacsとFirefoxとThunderbirdが動くので今のところ問題ないですね。今後また問題が出て来るかも。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UbuntuでEmacsからGPGを透過的に扱う</title>
      <link>/blog/2013/12/04/emacs-gpg</link>
      <pubDate>Wed, 04 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/12/04/emacs-gpg</guid>
      <description>&lt;p&gt;暗号化といえばGPGですがEmacsからGPGで暗号化されたファイルを編集しようとすると毎回パスワードを訊かれて鬱陶しいです。これはキーリングを登録することで解決できました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;step1-keyringに登録する&#34;&gt;Step1 Keyringに登録する&lt;/h2&gt;

&lt;p&gt;Dashboardから[key]で検索すると[パスワードと鍵]が見付かります。左上の[+]で新たにキーリングを追加します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/2013-12-04-1.png&#34; alt=&#34;こんな感じ&#34; title=&#34;keyring&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GPGを選択します&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/2013-12-04-2.png&#34; alt=&#34;こんな感じ&#34; title=&#34;Selecting GPG&#34; /&gt;&lt;/p&gt;

&lt;p&gt;必要な情報を入力します。このメールアドレスは実在しなくても作れますが、ブルートフォースかけられたときの警告とかに使われそうなので実在した方が良い気がします。とりあえず後で使うので覚えておいて下さい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/2013-12-04-3.png&#34; alt=&#34;&#39;Input info &amp;quot;こんな感じ&amp;quot;&#34; title=&#34;&#39;Input info &amp;quot;こんな感じ&amp;quot;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;あとはパスワードのプロンプトが出るので入力して、エントロピーを発生させたら終わりです。&lt;/p&gt;

&lt;h2 id=&#34;step2-ファイルを準備する&#34;&gt;Step2 ファイルを準備する&lt;/h2&gt;

&lt;p&gt;ここが肝です。ファイルの先頭に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-*- epa-file-encrypt-to: (my@mailaddress) -*-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を挿入します。既存の暗号化されたファイルでも同じです。&lt;/p&gt;

&lt;h2 id=&#34;step3-暗号化する&#34;&gt;Step3 暗号化する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;M-x epa-encrypt-file&lt;/code&gt;で暗号化できます。暗号化するファイル名を指定したらキーリングを選べます&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/2013-12-04-4.png&#34; alt=&#34;こんな感じ&#34; title=&#34;Selecting GPG&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;step4-編集する&#34;&gt;Step4 編集する&lt;/h2&gt;

&lt;p&gt;あとはもう透過的に使えます。でもなんか実験してたらファイル保存できなかった。先にGPGで暗号化してたやつはできたのに。要調査です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redmineのインストール</title>
      <link>/blog/2013/09/05/install-redmine</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/09/05/install-redmine</guid>
      <description>&lt;p&gt;私はバイトではプロジェクト管理に &lt;a href=&#34;http://backlog.jp&#34;&gt;Backlog&lt;/a&gt;のサービスを利用してますが、同様のOSSに &lt;a href=&#34;http://redmine.jp&#34;&gt;Redmine&lt;/a&gt;なるものがあると聞いて動かしてみたときのメモ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;以下、公式の引用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Redmineはオープンソースのプロジェクト管理ソフトウェアです。&lt;/p&gt;

&lt;p&gt;プロジェクトのタスク管理、進捗管理、情報共有が行えます。SubversionやGitなどのバージョン管理システムとの連携機能も備えており、ソフトウェア開発やwebサイト制作などのITプロジェクトで特に威力を発揮します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Redmineの管理団体(？)が &lt;a href=&#34;http://hosting.redmine.jp/&#34;&gt;MyRedmine&lt;/a&gt;というホスティングサービスを提供してたりしますが、今回はこれをローカルで動かします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://redmine.jp/guide/RedmineInstall/&#34;&gt;公式ドキュメント&lt;/a&gt;を参考に作業していきます。&lt;/p&gt;

&lt;p&gt;まずはダウンロード。現在の最新版は2.3.2だそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cd ~/Ruby
$svn checkout http://svn.redmine.org/redmine/branches/2.3-stable redmine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んで、グローバルの空間を汚したくないので新たにGemsetを作ります。本来ならbundler仕事なのですが、railsのバージョンとか仕組みの問題が面倒臭そうだったのでGemsetで管理。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$rvm use --create 1.9.3@redmine
$cd redmine
$echo ruby-1.9.3-p448 &amp;gt; .ruby-version
$echo redmine &amp;gt; .ruby-gemset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで~/Ruby/redmineにcdすると自動的にrvmが1.9.3@redmineに切り替えてくれます。&lt;br /&gt;
※注意&lt;br /&gt;
&lt;code&gt;.rvmrc&lt;/code&gt;に&lt;code&gt;rvm use 1.9.3@redmine&lt;/code&gt;と書いてたら怒られます。&lt;code&gt;.ruby-version&lt;/code&gt;と&lt;code&gt;.ruby-gemset&lt;/code&gt;がバージョン管理システムに依存しない新しい書き方だそうです。&lt;/p&gt;

&lt;p&gt;データベースはデフォルトだとMySQLを使う設定になってますがこんなお試しにのためにMySQLを動かしたくないのでSQLiteに変更。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cp config/{database.yml.example, database.yml}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のあと、database.ymlのproductionの部分を以下のように変更。&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;line-number&#34;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;production&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;adapter&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;sqlite3&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l-Scalar-Plain&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p-Indicator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l-Scalar-Plain&#34;&gt;db/redmine.sqlite3&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;あとは&lt;code&gt;bundle install&lt;/code&gt;。(bundlerはインストールされてる前提です)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$bundle install --without development test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると…あれ？RMagickでコケる…。公式ドキュメントには &lt;code&gt;bundle&lt;/code&gt;の&lt;code&gt;--without&lt;/code&gt;に&lt;code&gt;rmagick&lt;/code&gt;を加えろと書いてますが画像扱えないのは悔しいので色々調べた結果、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sudo apt-get install libmagic-dev libmagickwand-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で依存関係を満せるようです。これでようやく&lt;code&gt;bundle install&lt;/code&gt;が通ります。&lt;/p&gt;

&lt;p&gt;ここまできたらあとはドキュメント通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$rake generate_secret_token
$RAILS_ENV=production rake db:migrate
$RAILS_ENV=production rake redmine:load_default_data
$rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…あれ？&lt;code&gt;rails s&lt;/code&gt;でコケる。&lt;br /&gt;
これは自分がrailsに慣れてなかったのが問題のようで、正しくは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$rails s -e production
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$RAILS_ENV=production rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としても同じ。これで &lt;a href=&#34;http://localhost:3000&#34;&gt;localhost:3000&lt;/a&gt;にアクセスするとRedmineが開きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/redmine-home.png&#34; alt=&#34;Redmineのホーム画面&#34; title=&#34;redmine-home&#34; /&gt;&lt;/p&gt;

&lt;p&gt;因みにAdminのID、パスワードはadminだそうです。&lt;/p&gt;

&lt;p&gt;データベースの設定のexample部分にjenkinsとかいう文字列があったけど連携できるのかなぁ。要調査。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;補足&#34;&gt;補足&lt;/h3&gt;

&lt;p&gt;デフォルトのWEBrickだと遅いのでGemfileに&lt;/p&gt;

&lt;figure class=&#34;code&#34;&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;
&lt;td class=&#34;gutter&#34;&gt;&lt;pre class=&#34;line-numbers&#34;&gt;&lt;span class=&#34;line-number&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;thin&#34;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;を加えて、&lt;code&gt;bundle install&lt;/code&gt;し直すと自動的にThinを使ってくれるそうです。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>