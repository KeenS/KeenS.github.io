<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>デザインスタイル on κeenのHappy Hacκing Blog</title>
    <link>http://KeenS.github.io/categories/%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB/</link>
    <description>Recent content in デザインスタイル on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Nov 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://KeenS.github.io/categories/%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Semantic S式</title>
      <link>http://keens.github.io/slide/semantic-sshi/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://keens.github.io/slide/semantic-sshi/</guid>
      <description>&lt;section data-markdown
    data-separator=&#34;\n\n&#34;
    data-vertical=&#34;\n\n&#34;
    data-notes=&#34;^Note:&#34;&gt;
&lt;script type=&#34;text/template&#34;&gt;

# Semantic S式
---
2014-11-27  
κeen(@blackenedgold)

&lt;!-- .slide: class=&#34;center&#34; --&gt;


# About Me
----------
![κeenのアイコン](/images/icon.png)

 + κeen
 + 東大数学科の4年生
 + ソーシャルアカウントは上のアイコン達から。
 + Lisp, Ruby, OCaml, Shell Scriptあたりを書きます

# Semantic Web とは

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# [Semantic Web](http://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%9E%E3%83%B3%E3%83%86%E3%82%A3%E3%83%83%E3%82%AF%E3%83%BB%E3%82%A6%E3%82%A7%E3%83%96)
----------------

* W3C のティム・バーナーズ＝リーが提唱
* 文章の見た目を記述するんじゃなくて構造を記述しよう
* そうすると機械がクローリングするの楽になるよね


# Semantic S式とは

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# Semantic S式
--------------

* Shibuya.lispのκeenが提唱 (昨日思い付いた)
* S式の見た目じゃなくて構造で括弧をつけよう
* そうするとコーディングが楽になるよね


# 良いところ
------------

1. 意味が分かり易い
2. パースし易い
3. 編集が楽になる
4. 壊れにくい


# 1. 意味が分かり易い

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# 1. 意味が分かり易い
--------------------
## 例1

* Clojure
  ```clojure
  (let [a 1
        b 2]
    ...)
  ```

* Common Lisp
  ```lisp
  (let ((a 1)
        (b 2))
    ....)
  ```
どっちが分かり易い？

# 1. 意味が分かり易い
--------------------
## 例1
（日本語にしてみる（イメージ））

* Clojure  
  aを1bを2とする
* Common Lisp
  &lt;table border=&#34;1&#34;&gt;&lt;tr&gt;&lt;td&gt;`a`&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;`b`&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  とする


# 1. 意味が分かり易い
--------------------
## 例2
何をしてる？

```lisp
(destructuring-bind (a b)
    (some-function)
  ...)
```

# 1. 意味が分かり易い
--------------------
## 例2
何をしてる？

```lisp
(destructuring-bind ((a b)
    (some-function))
  ...)
```

# 1. 意味が分かり易い
--------------------
## 例3
これの返り値は？
```lisp
(getf &#39;(:hoge :foo :huga :baz :piyo :pon :chun) :pon)
```

# 1. 意味が分かり易い
--------------------
## 例3
これの返り値は？
```lisp
(assoc :pon &#39;((:hoge :foo) (:huga :baz) (:piyo :pon) (:chun)))
```

# 2. パースし易い

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# 2. パースし易い
----------------
## 例

* Clojure
  ```clojure
  (let [a 1
        b 2]
    ...)
  ```

* Common Lisp
  ```lisp
  (let ((a 1)
        (b 2))
    ....)
  ```
どっちが実装し易い？

# 2. パースし易い
----------------

* Common Lispの方は意味で分割してある
* 括弧は無くてもパースは出来る
* 機械にパースし易い≒人間にパースし易い


# 3. 編集が楽になる

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# 3. 編集が楽になる
------------------
## 前提
* エディタに文/式/トークン(Lispの場合は全てS式)単位の編集機能がある
   + S式単位でカーソル移動
   + S式単位の削除/カット
   + S式単位のスワップ
   + etc....

# 3. 編集が楽になる
------------------
## 例（偶によくある）
この`c`の束縛を上のletに持っていきたいときどうする？

```lisp
(let ((a 1)
      (b 2))
  ....
  (let ((c 3)
        (d 4))
    ...))
```

# 3. 編集が楽になる
------------------
## 例（偶によくある）

* 意味で括弧をつけていれば1カット移動1ペースト
* Clojure方式だと2カット移動1ペースト
* `c`だけじゃなくて`d`も、と考えると…

# 4. 壊れにくい

&lt;!-- .slide: class=&#34;center&#34; --&gt;

# 4. 壊れにくい
---------------
## 例
ageの計算が壊れているとする

```lisp
(:name &#34;κeen&#34;
 :age  (year-of-time-interval (date- (today) (date 1992 5 17)))
 :place &#34;Shibuya&#34;)
```


# 4. 壊れにくい
---------------
## 例
コメントアウトしてみる（壊れた）

```lisp
(:name &#34;κeen&#34;
 :age  ;(year-of-time-interval (date- (today) (date 1992 5 17)))
 :place &#34;Shibuya&#34;)
```

# 4. 壊れにくい
---------------
## 例
ageの計算が壊れているとする

```lisp
((:name &#34;κeen&#34;)
 (:age  (year-of-time-interval (date- (today) (date 1992 5 17))))
 (:place &#34;Shibuya&#34;))
```

# 4. 壊れにくい
---------------
## 例
(エディタサポートあり)

コメントアウトしてみる（壊れない）

```lisp
((:name &#34;κeen&#34;)
 (:age  ;(year-of-time-interval (date- (today) (date 1992 5 17)))
 )
 (:place &#34;Shibuya&#34;))
```

# ここまでのまとめ
-----------------
* 構造が文脈に依存していると
  + 人間に分りづらい
  + プログラムに分りづらい
  + エディタに分りづらい
  + 壊れやすい

# Q. When Semantic?
------------------------------
## A. 言語を設計するとき &lt;!-- .element: class=&#34;fragment&#34; data-fragment-index=&#34;1&#34; --&gt;

* つまりマクロを書くとき &lt;!-- .element: class=&#34;fragment&#34; data-fragment-index=&#34;2&#34; --&gt;

# Q. When Semantic?
------------------------------
## A. 言語を設計するとき

* マクロを書くときそれなりのDSLを設計する
* プログラム上は必須ではない括弧もあった方が良いときもある


# まとめ
--------

* 括弧が少ない方が書き易いとは限らない
  + 「書く」だけなら速くてもwrite onlyになってしまうかも&lt;!-- .element: class=&#34;fragment&#34; data-fragment-index=&#34;1&#34; --&gt;
* プログラムの意味を考えながら括弧つけよう
  + Lisperはどうせ括弧は見えない&lt;!-- .element: class=&#34;fragment&#34; data-fragment-index=&#34;2&#34; --&gt;

&lt;span style=&#34;font-size:600%&#34;&gt;以上&lt;/span&gt;  
何か質問あればどうぞ


&lt;!-- .slide: class=&#34;center&#34; --&gt;
&lt;/script&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>