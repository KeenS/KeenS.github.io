<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>κeenのHappy Hacκing Blog</title>
    <link>/categories/rust/index.xml</link>
    <description>Recent content on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="/categories/rust/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rustで非同期Thriftしたい</title>
      <link>/slide/RustdehidoukiThriftshitai/</link>
      <pubDate>Sat, 26 Nov 2016 13:07:29 +0900</pubDate>
      
      <guid>/slide/RustdehidoukiThriftshitai/</guid>
      <description>&lt;section data-markdown
    data-separator=&#34;\n===\n&#34;
    data-vertical=&#34;\n---\n&#34;
    data-notes=&#34;^Note:&#34;&gt;
&lt;script type=&#34;text/template&#34;&gt;

# Rustで非同期Thrift
----------------------

&lt;!-- .slide: class=&#34;center&#34; --&gt;

===

# About Me
---------
![κeenのアイコン](/images/icon.png) &lt;!-- .element: style=&#34;position:absolute;right:0;z-index:-1&#34; --&gt;

 * κeen
 * [@blackenedgold](https://twitter.com/blackenedgold)
 * Github: [KeenS](https://github.com/KeenS)
 * サイバーエージェントのエンジニア
 * Lisp, ML, Rust, Shell Scriptあたりを書きます

===

* &lt;span style=&#34;font-size:150%&#34;&gt;X&lt;/span&gt; RPCライブラリを使う話
* &lt;span style=&#34;font-size:150%&#34;&gt;O&lt;/span&gt; RPCライブラリを作る話

&lt;!-- .slide: class=&#34;center&#34; --&gt;

===

# RPC
-----

* Remote Procedure Call
* リモートで呼べる
* 言語跨げる
* シリアライズフォーマットが決まれば大体出来る
* Thrift, protobuf/gRPC, avro...
* 大抵バイナリ
  + JSONに比べて2倍くらい効率がいい

===

# Thrift
--------

* Facebook発(現apache)RPCフレームワーク
* IDLから複数の言語向けのコードを吐ける
* 対応言語多い
* 新しい言語はthriftレポジトリフォークして追加

===

# Thrift vs gRPC
----------------

\                       | Thrift | gRPC
------------------------|:------:|:----:
ベース                  | 自前   | HTTP/2
コード生成              | o      | o
プロトコルのアップデート | o      | o
通信の多重化            | トランスポート次第  | o (HTTP/2)
認証                    | x  | o
例外                    | ユーザ定義可能 | 事前定義のみ?
対応言語                | 多い   | ほどほど
その他                  | union  | timestamp, anyなど
&lt;!-- .element: style=&#34; margin-right:auto; margin-left:auto&#34;--&gt;

===

# 何故Thrift?
-------------

* 仕事で使ってたから
* 仕事は「gRPCかthrift、まあthriftでいっしょ」で決まった

===

# RustとThrift
--------------
いくつか実装がある

===

## [sgnr/rust-thrift](https://github.com/sgnr/rust-thrift)

&lt;!-- .slide: class=&#34;center&#34; --&gt;

===

![sgnr/rust-thrift is deprecated](/images/thrift/sgnr-rust-thrift.png)

===

## [maximg/thrift](https://github.com/maximg/thrift)

&lt;!-- .slide: class=&#34;center&#34; --&gt;

===

![maximg/thrift is deprecated](/images/thrift/maximg-thrift.png)

===

## [terminalcloud/thrift](https://github.com/terminalcloud/thrift)

&lt;!-- .slide: class=&#34;center&#34; --&gt;

===

![terminalcloud/thrift is deprecated](/images/thrift/terminalcloud.png)

===

# [thehydroimpulse/thrust](https://github.com/thehydroimpulse/thrust)
---------------------------

* Thrift RPC in Rust (Async I/O)
* 非同期!!
* apache/thriftベースじゃない（フルスクラッチ）
* コンパイラプラグインサポートとかも
* 作りかけ
  + `Latest commit 0a37b77 on 11 Apr`

→ フォークすることに

===

# [Finagle](https://github.com/twitter/finagle)
---------

* **Scalaの** RPCフレームワーク
* [You Server as a Function](https://monkey.org/~marius/funsrv.pdf)
* Nettyベース
* サーバとクライアント両方サポート
* Twitter製
* 良くも悪くもTwitterべったり

===

# Finagle Client
--------

* クライアントが賢い
* RPCではTCPベースのLBが使えない
  + クライアントはコネクション張りっぱなし
* クライアントサイドロードバランシングが必要
* Finagleはそこまでカバー
* 他にもエラーが起きたサーバ外したり色々

===

# Tokio
--------

* **Rustの** RPCフレームワーク
* mioベース
* Finagleを参考に開発
  + **開発中**
* tokio-core
  + コア部分
* tokio-proto
  + プロトコル実装のサポート
  + 絶賛API変更中
* tokio-service
  + サービス実装のサポート


===

# TokioとFinagle
-----------------

  \           | Tokio       | Finagle
--------------|:-----------:|:-------:
コア          | [tokio-core](https://github.com/tokio-rs/tokio-core) | [finagle-core](https://github.com/twitter/finagle/tree/develop/finagle-core)
Future        | [future](https://github.com/alexcrichton/futures-rs) | [twitter util](https://github.com/twitter/util)
非同期エンジン | [mio](https://github.com/carllerche/mio) | [netty](http://netty.io/)
&lt;!-- .element: style=&#34; margin-right:auto; margin-left:auto&#34;--&gt;


===

# [mio](https://github.com/carllerche/mio)
------

* 非同期イベントループライブラリ
* イベントドリブン
* ループ内ゼロアロケーション
* `epoll` などの薄いラッパ
* libuv, libevent, libev2などのRust版
* ソケットだけでなく *ファイルIO* 、インメモリチャネルとかも監視出来る

===

# [future](https://github.com/alexcrichton/futures-rs)
--------------

* [Zero-cost futures in Rust · Aaron Turon](https://aturon.github.io/blog/2016/08/11/futures/)
* ゼロコスト
* 普通にFutureを使うとランタイムにステートマシンになる
* お型付けは大変
    + `map` したら `Map&lt;A, fn (A)-&gt;B&gt;` の型が返ったり
* ストリーミング指向のAPIもある

===

# [tokio-core](https://github.com/tokio-rs/tokio-core)
--------------

* 非同期IOのフレームワーク
* Futureベース
* フレームドIOとストリーミングIO
* フレームワークというよりユーティリティ？
  + mioとfutureを合わせて使う

===

# [tokio-proto](https://github.com/tokio-rs/tokio-proto)
-------------

* 主にバイナリ列&lt;-&gt;構造体の部分の面倒を見てくれる
* API変更中…
* バッファリングしてパースしやすくしてくれる
* プロトコルの多重化やってくれる(後述)

===

# [tokio-service](https://github.com/tokio-rs/tokio-service)
-----------------

* タスクサーバの面倒見てくれる
* 主にロードバランシング


===

# [Service](https://tokio-rs.github.io/tokio-service/tokio_service/trait.Service.html)
-------------

``` rust
pub trait Service {
    type Request;
    type Response;
    type Error;
    type Future: Future&lt;Item=Self::Response, Error=Self::Error&gt;;
    fn call(&amp;self, req: Self::Request) -&gt; Self::Future;
}
```

===

# Service
----------

* いわゆるハンドラ
* インターフェースさえ満たせばいい
  + ミドルウェアもハンドラも同じ扱い

===

# [NewService](https://tokio-rs.github.io/tokio-service/tokio_service/trait.NewService.html)
--------------

```rust
pub trait NewService {
    type Request;
    type Response;
    type Error;
    type Instance: Service&lt;Request=Self::Request, Response=Self::Response, Error=Self::Error&gt;;
    fn new_service(&amp;self) -&gt; Result&lt;Self::Instance&gt;;
}

impl&lt;F, R&gt; NewService for F where F: Fn() -&gt; Result&lt;R&gt;, R: Service
```

===

# NewService
------------

* いわゆるAbstractServiceFactory的な存在
* コア数に応じてサービスを作ってくれる
* ただし`Service`を返す普通の関数も`NewService`になる
* [example](https://github.com/tokio-rs/tokio-line/blob/master/examples/echo_client_server.rs#L21)


===

# tokio-thrift
&lt;!-- .slide: class=&#34;center&#34; --&gt;

===

# [tokio-thrift](https://github.com/KeenS/tokio-thrift)
--------------

* [KeenS/tokio-thrift](https://github.com/KeenS/tokio-thrift)
* この発表のために作った（作ってる）
* tokioベースのrustのthriftサポート
* thrustのフォーク
* 基本ツール全て
  + コードジェネレータ
  + コンパイラプラグイン
  + ランタイムライブラリ

===

# プロトコルスタック
-------------------

ユーザは実装に集中出来る仕組み

```
+------------------------------------------------+
| service   | tokio-service + 生成コード + ユーザ |
|------------------------------------------------|
| protocol  | tokio-proto   + tokio-thrift       |
|------------------------------------------------|
| transport | tokio-core                         |
+------------------------------------------------+
```

===

# サンプルコード
----------------

* [これ](https://github.com/KeenS/tokio-thrift/blob/master/example/simple_server_client/src/main.rs)

===

# ユーザビリティ
---------------

* サーバ: ユーザはインターフェースに沿ったコードを書くだけ
* クライアント: インターフェース通りに呼べる
* 返り値はFuture
* サーバ: 非同期実装と相性がいい
* クライアント: 非同期通信をそのままエンコード

===

# 実装の話

&lt;!-- .slide: class=&#34;center&#34; --&gt;

===

# Thriftのプロトコル
-------------------

* 現状binary protocolのみ
  + fork元が実装してあった
* compactとか需要ある？
* 因みにJSONはやめとけ

===

# 所有権とゼロコピー
-------------------

* プロトコルのパースの部分の話
* Rustっぽい部分
* バッファの所有権をパース結果に渡すことでデータのコピーを避ける

===

# 所有権とゼロコピー
-------------------
バッファをresultにパースして

```
buffer
  |
+-+---------------+
|                 |
-------------------
| | | | | ... | | | &lt;- バイト列
-------------------
```

===

# 所有権とゼロコピー
-------------------
resultにデータの所有権を渡してしまう

```
 result   buffer
   |        |
+--+----++--+-----+
|       ||        |
-------------------
| | | | | ... | | | &lt;- バイト列
-------------------
```

===

# 複数メソッド
-------------

* 複数メソッドだと複数の引数/返値の型を扱う
* コネクションのハンドラは1つ
* 複数型をどうやって扱う？
  + [enumを定義](https://github.com/KeenS/tokio-thrift/blob/master/example/simple_server_client/src/thrift.rs#L67)
  + ゼロオーバーヘッド…

===

# 複数メソッド
-------------

```
 (methodA) (methodB)
     |         |
     +----+----+
          | &lt;----- enum化
      [client]
          |
      [server]
          | &lt;----- enumでディスパッチ
     +----+-----+
     |          |
(handlerA) (handlerB)
```

===

# つらい話
-----------------

* Thrift IDLのセマンティクスが書いてない
  + throws節のフィールドは直積？直和？
  + Javaで生成してみて推測するしかない
* フォークライブラリの実装が不完全
  + パーサはフルスクラッチで書き直した
  + [パーサコンビネータ便利](https://github.com/KeenS/tokio-thrift/blob/master/tokio-thrift-codegen/src/parser.rs#L517)
  + フォークした意味…
* Rustにエンコード出来ないthriftの機能もある
  + mapの定数は普通には無理
  + エラーどうしよう(`Error`トレイトの実装とEnum)
* 所有権の問題

===

# 言語との統合
-------------

* Rustには公式のシリアライズフレームワークがある
* [rustc-serialize](https://github.com/rust-lang-nursery/rustc-serialize)
* あるいはユーザ側のも
* [serde](https://github.com/serde-rs/serde)
* のっかりたいけどThriftに必要なデータがない
  + フィールドのシーケンス番号とか
* 今のところ自動生成に頼る
  + フレームワークにフィードバックした方がいい？

===

# コード生成の話
---------------

* [コンパイラプラグイン](https://github.com/KeenS/tokio-thrift/blob/master/tokio-thrift-macros/tests/service.rs#L10)微妙
  + 定義元ジャンプ、フィールド名補完などに難
* CLI生成は悪手
  + IDL変更する度CLI実行？
  + 生成コードはコミット？
    - CLIのバージョンがあるので基本はコミット。でも…
* ビルドツール統合が最良
  + FinagleにはScoogeがある
  + tokio-thriftでもやりたい
    - build.rsのサポート

===

# 多重化の話
------------

* 生のthrift on TCPだと通信を多重化出来ない
* tokio-proto側でpipelineやmultiplexなどをサポート
* pipeline: レスポンスを待たずに次のリクエスト
* multiplex: リクエストとレスポンスが入り乱れてもよい。プロトコルオーバーヘッドがある
* tokio-thriftは未対応

===

# Tokioの利点
-------------

* service: サーバとクライアント両方面倒見てくれる
  + サーバもCPUの数だけハンドラをクローンしてくれたりする
* protocol: 面倒毎が少ない(バッファ使ってくれる)
* Futureベースの非同期
* pipeline, multiplexによる多重化

===

# Tokioの欠点
-------------

* APIが不安定
  + tokio-thriftは今動かないorz
* thriftはストリーミング指向なのにバッファ使う
* Rustの痒い所に当たる
  + 返り値多相がない(`Future`を直接返せない)
  + アロケーションが必要になる
  + ダイナミックディスパッチが必要になる
  + 他言語と同水準のコスト

===

# まとめ
--------

* Thriftは広さで勝負
* コードジェネレータはビルドツールへの統合を
* IDLは既存のコードに乗っかった方が楽（上と競合）
* フレームワークを使うとみんな幸せ
* RPCはインターフェースベースであるべき
* 多重化はRPCより下のレイヤーで出来る

&lt;/script&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Rustの関連型の使いどころ</title>
      <link>/blog/2016/11/22/rustnokanrenkatanotsukaidokoro</link>
      <pubDate>Tue, 22 Nov 2016 18:26:47 +0900</pubDate>
      
      <guid>/blog/2016/11/22/rustnokanrenkatanotsukaidokoro</guid>
      <description>&lt;p&gt;κeenです。昨日は&lt;a href=&#34;https://rust.connpass.com/event/41467/&#34;&gt;RustのLT会！ Rust入門者の集い - connpass&lt;/a&gt;に参加してきました。
そこで&lt;a href=&#34;http://qiita.com/tacke_jp/items/9c7617971dc341146c0f&#34;&gt;関連型に関する発表&lt;/a&gt;があったので感化されて私も一筆。&lt;/p&gt;

&lt;p&gt;
馴れないと関連型はジェネリクスでいいじゃんと思えますが、両者は別の機能を提供するものです。
設計による使い分けではなくて実現したいことに応じた機能による使い分けをするので馴れてしまえば迷うことなくどちらを使うか判断出来ます。&lt;/p&gt;

&lt;p&gt;ということで関連型のパターンをいくつか。
もちろん、根底にある関連型という機能は共通なのでほとんど同じようなことを言ってますが気持としてパターンを知っておくと便利です。&lt;/p&gt;

&lt;h1 id=&#34;型レベルの関数として&#34;&gt;型レベルの関数として&lt;/h1&gt;

&lt;p&gt;「関連」型なのである型に関連する型を表現します。ちょっと見方を変えると型から型への写像、つまり関数になります。
例えばこういうのです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;trait ToUnsigned {
    type Counterpart;
    fn to_unsigned(self) -&amp;gt; Self::Counterpart;
}

impl ToUnsigned for i32 {
    type Counterpart = u32;
    fn to_unsigned(self) -&amp;gt; Self::Counterpart {
        self as u32
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;i32&lt;/code&gt; から &lt;code&gt;u32&lt;/code&gt; への関数になってそうなのが見えますかね？もちろん、 &lt;code&gt;i64&lt;/code&gt; から &lt;code&gt;u64&lt;/code&gt; などへの対応も作れます。
こういうのは例えば符号無し数にのみ演算が定義されている場合とかに便利ですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn write_bigendian_signed&amp;lt;I, U&amp;gt;(i: I) -&amp;gt; ()
    where I: ToUnsigned&amp;lt;Counterpart = U&amp;gt;,
          U: ...,  {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;トレイト内で使う型を固定するため&#34;&gt;トレイト内で使う型を固定するため&lt;/h1&gt;

&lt;p&gt;これが一番目にするやつじゃないでしょうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;trait Handler {
    type Request;
    type Response;
    fn handle(req: Self::Request, res: Self::Response) -&amp;gt; io::Result&amp;lt;()&amp;gt;;
}

struct HTTPHandler;

impl Handler for HTTPHandler {
    type Request = HTTPRequest;
    type Response = HTTPResponse;
    fn handle(req: Self::Request, res: Self::Response) -&amp;gt; io::Result&amp;lt;()&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;固定というか特殊化というか、トレイト自体は汎用的に作られていて、それを実装する型が特定の処理に特化するパターンです。
ジェネリクスで受け取る訳にはいかなくて、実装すべき型をトレイトの中で定義してあげる必要があるのは分かると思います。&lt;/p&gt;

&lt;h1 id=&#34;関数の返り値を一般化するため&#34;&gt;関数の返り値を一般化するため&lt;/h1&gt;

&lt;p&gt;これは現在のRust(rust-1.13.0)が &lt;a href=&#34;https://github.com/rust-lang/rfcs/pull/1522&#34;&gt;&lt;code&gt;impl Trait&lt;/code&gt;&lt;/a&gt;をサポートしていないために必要になるテクニックです。
関連型とトレイト境界を組み合わせて使います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;trait ReverseIter {
    type Item;
    type Iter: Iterator&amp;lt;Item = Self::Item&amp;gt;;
    fn rev_iter(&amp;amp;self) -&amp;gt; Iter;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これの &lt;code&gt;type Iter: Iterator&amp;lt;Item = Self::Item&amp;gt;;&lt;/code&gt; の方です。
返り値のIteratorを抽象化したいのですが、現在のRustでは&lt;code&gt;fn rev_iter(&amp;amp;self) -&amp;gt; Iterator&amp;lt;Item = Self::Item&amp;gt;;&lt;/code&gt;のような書き方が出来ないので仕方なく関連型を使ってあげる必要があります。&lt;/p&gt;

&lt;p&gt;ちょっと踏み込んだ話をすると、関数の引数の多相性は∀の量化、返り値の多相は∃の量化です。そしてトレイトのジェネリクスも∀の量化で関連型が∃の量化なのでそういう対応がある訳です。&lt;/p&gt;

&lt;h1 id=&#34;最後に&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;結構理論的にも色々あるようなので調べてみると様々なブログポストが見付かると思います。&lt;/p&gt;

&lt;p&gt;ぱぱっと思いついたパターンを3つ挙げました。もしかしたら他にもパターンがあるかもしれません。&lt;/p&gt;

&lt;p&gt;これを知っておけば&lt;a href=&#34;https://github.com/tokio-rs/tokio-service&#34;&gt;tokio-service&lt;/a&gt;の&lt;a href=&#34;https://tokio-rs.github.io/tokio-service/tokio_service/trait.Service.html&#34;&gt;Service&lt;/a&gt;みたいな関連型を多用するパターンでもひるまなくなります。&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;h2 id=&#34;関連型とimpl-traitに関して&#34;&gt;関連型とimpl Traitに関して&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/associated-types.html&#34;&gt;関連型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rust-lang-ja.org/rust-by-example/generics/assoc_items/the_problem.html&#34;&gt;関連型が必要になる状況 | Rust by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ncameron.org/blog/abstract-return-types-aka-%60impl-trait%60/&#34;&gt;Abstract return types, aka &lt;code&gt;impl Trait&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;応用&#34;&gt;応用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://keens.github.io/blog/2016/02/28/rustnohigherkinded_type_trait/&#34;&gt;RustのHigher-Kinded type Trait | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;発展的な話題&#34;&gt;発展的な話題&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://smallcultfollowing.com/babysteps/blog/2016/11/02/associated-type-constructors-part-1-basic-concepts-and-introduction/&#34;&gt;Associated type constructors, part 1: basic concepts and introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://smallcultfollowing.com/babysteps/blog/2016/11/03/associated-type-constructors-part-2-family-traits/&#34;&gt;Associated type constructors, part 2: family traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://smallcultfollowing.com/babysteps/blog/2016/11/04/associated-type-constructors-part-3-what-higher-kinded-types-might-look-like/&#34;&gt;Associated type constructors, part 3: What higher-kinded types might look like&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://smallcultfollowing.com/babysteps/blog/2016/11/09/associated-type-constructors-part-4-unifying-atc-and-hkt/&#34;&gt;Associated type constructors, part 4: Unifying ATC and HKT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rfcs/pull/1598&#34;&gt;Associated type constructors (a form of higher-kinded polymorphism). by withoutboats · Pull Request #1598 · rust-lang/rfcs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Rustの話とリソースの話</title>
      <link>/slide/Rustnohanashitoriso_sunohanashi/</link>
      <pubDate>Sun, 20 Nov 2016 14:08:07 +0900</pubDate>
      
      <guid>/slide/Rustnohanashitoriso_sunohanashi/</guid>
      <description>&lt;section data-markdown
    data-separator=&#34;\n===\n&#34;
    data-vertical=&#34;\n---\n&#34;
    data-notes=&#34;^Note:&#34;&gt;
&lt;script type=&#34;text/template&#34;&gt;
# Rustの話とリソースの話
----------------------
[RustのLT会！ Rust入門者の集い](https://rust.connpass.com/event/41467/)  
2016-11-21

&lt;!-- .slide: class=&#34;center&#34; --&gt;

===
# About Me
---------
![κeenのアイコン](/images/icon.png) &lt;!-- .element: style=&#34;position:absolute;right:0;z-index:-1&#34; --&gt;

 * κeen
 * [@blackenedgold](https://twitter.com/blackenedgold)
 * Github: [KeenS](https://github.com/KeenS)
 * 若者
 * サイバーエージェントのエンジニア
 * Lisp, ML, Rust, Shell Scriptあたりを書きます
 * [プログラミング言語Rust](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/)の翻訳
 * [Join rust-jp on Slack!](http://rust-jp.herokuapp.com/) にもいます。
 * [Rust その2 Advent Calendar 2016 - Qiita](http://qiita.com/advent-calendar/2016/rust-lang-2)

===

# 注意
------

* たまにマニアックな話が出ますが気にせず無視して下さい
* 「なんかRustすげー」って思ってもらえれば幸いです


===

# Rustとの出会い
----------------

* 元々Lisperだった
* 他にはML, Ruby, JVM言語など

===

![lis books](/images/rust-and-resource/lisp.jpg)&lt;!-- .element: height=&#34;640px&#34; --&gt;

===

&lt;span style=&#34;font-size: 150%&#34;&gt;「Lisperは自分で処理系作って一人前」&lt;/span&gt;

&lt;!-- .slide: class=&#34;center&#34; --&gt;

===

![compiler books](/images/rust-and-resource/compiler.jpg) &lt;!-- .element: height=&#34;640px&#34;&#34; --&gt;

===

# 苦悩
-------

* Cは低級すぎる
* Javaは向いてない
* C++は怖そう
  + 闇の軍団
  + 縄文土器飛んできそう
  + あと **nullあるしメモリ破壊あるし**
* MLは向いてるけどシステムプログラミングしづらい
* ATS2, Golang, D...

===

# Rustと出会う
----------------

* 正直最初は色物言語と思ってた
* 調べてみたら気に入った

===

# ゼロコスト抽象化
----------------------------

``` rust
fn sum_pos(v: &amp;Vec&lt;i32&gt;) -&gt; i32 {
    v.iter().filter(|i| **i &gt; 0).sum()
```

===

高階関数が消えた…！？

``` asm
_ZN21higher_order_function7sum_pos17h2f9de4f69306ec0aE:
	.cfi_startproc
	movq	(%rdi), %rcx
	movq	16(%rdi), %rax
	leaq	(%rcx,%rax,4), %rdx
	xorl	%eax, %eax
	jmp	.LBB0_1
.LBB0_3:
	addl	%esi, %eax
	.p2align	4, 0x90
.LBB0_1:
	cmpq	%rcx, %rdx
	je	.LBB0_4
	movl	(%rcx), %esi
	addq	$4, %rcx
	testl	%esi, %esi
	jle	.LBB0_1
	jmp	.LBB0_3
.LBB0_4:
	retq
```

===


# スタックとヒープ
------------------


* Rustは手で割り当てを変えられる
* 「ヒープを使ったら負け」ゲームが出来る
* ループの中でヒープアロケートしたくないよね

===

# マクロとコンパイラプラグイン
-----------------------------

例えば正規表現リテラルを作れるか、とか。

1. Common Lisp
2. 衛生的マクロ + 手続的マクロ &lt;- Rust
2. 衛生的マクロ + コンパイラプラグイン &lt;- Rust
3. 手続的マクロ
4. コンパイラプラグイン
4. 衛生的マクロ

===

# トレイト
----------

* 型クラス
  + 継承を駆逐する
  + MLにも欲しい超便利機能
* 関連型
  + 表現力が高いことが知られている
  + CF [Rustの型レベルLispっぽいの作った | κeenのHappy Hacκing Blog](http://keens.github.io/blog/2016/11/06/rustnokatareberulispppoinotsukutta/)

===

# パターンマッチ、代数的データ型
-------------------------------

* 便利ってかないと困る

``` rust
    match expr {
        &amp;Expr::Nil |
        &amp;Expr::EOF |
        &amp;Expr::Str(_) |
        &amp;Expr::Int(_) |
        &amp;Expr::Float(_) |
        &amp;Expr::Proc(_) =&gt; Ok(expr.clone()),
        &amp;Expr::Sym(ref name) =&gt; {
            match env.find(&amp;name.to_owned()) {
                Ok(v) =&gt; Ok(v.clone()),
                Err(m) =&gt; {
                    if name.deref() == &#34;t&#34; {
                        Ok(ksym(&#34;t&#34;))
                    } else {
                        Err(m)
                    }
                }
            }
        }
        &amp;Expr::Cons(ref car, ref cdr) =&gt; {
        ....
```


===

# C インターフェース
---------------------

* C FFI, C API共に1行
* 構造体なんかも互換

``` rust
extern {
    fn snappy_max_compressed_length(source_length: size_t) -&gt; size_t;
}
```

``` rust
#[no_mangle]
pub extern fn hello_rust() -&gt; *const u8 {
    &#34;Hello, world!\0&#34;.as_ptr()
}
```


===

# ランタイムなし
---------------

* [RustでベアメタルRaspberry PiのLチカ | κeenのHappy Hacκing Blog](http://keens.github.io/blog/2016/05/04/rustdebeametaruraspberry_pinolchika/)
* [Writing an OS in Rust](http://os.phil-opp.com/)
* [Redox - Your Next(Gen) OS](http://www.redox-os.org/)

===

# 生ポインタ
------------

* Cとのやりとりで大事
* あるいはパフォーマンスチューニングに

``` rust
pub struct Vec&lt;T&gt; {
    ptr: *mut T,
    cap: usize,
    len: usize,
}
```

``` rust
unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -&gt; Vec&lt;T&gt;
```


===

# エラー処理
------------

* 例外じゃない
* [`Result`](https://doc.rust-lang.org/std/result/enum.Result.html)
* `?` (元 `try!`)も便利
* Erro as a data
* 巻き戻し例外って扱い難しいよね
  + 値継続と例外継続の使い分けつらい

===

# リソースの話（本題）
&lt;!-- .slide: class=&#34;center&#34; --&gt;

===

# リソースの重要性
-------------------

* プログラムはIOの塊、すなわりリソースの塊
* 従来は手動で管理するかGCで管理するかしていた
* RustはGCを使わず自動で管理する
* 所有権の概念が「ただの自動」以上に便利

===

# メモリ管理
------------

* Cでいう`free`を自動で挟んでくれる
* 基本

===

# Vecとslice
-------------

* sliceを`Vec`のviewとして使える
  + zero copy
  + 例えばJavaとかだと出来ない
* zero copy parserとかも書ける

===

# `File` 、 `Lock`
------------------

* `Drop`があるので自動
* ところでGCがあるのに手動で管理する言語があるらしいですね
  + 例えばRubyの`File.open(..) do ... end` も半手動
  + GCで処理すべきなのに手で`do ... end`を書いてる

===

# Rust
-------

``` rust
let file = File::open(&#34;text.txs&#34;).unwrap();
let mut br = BufReader::new(file);
...
```


===

# Java
-------
※try-with-resourceを使うともっと簡単に書けます。極端な比較のためにこう書いてます

``` java
BufferedReader br = null;
try {
    br = new BufferedReader(new FileReader(&#34;test.txt&#34;));
    ...
} catch (FileNotFoundException e) {
    e.printStackTrace();
} finally {
    if (br != null)
        try {
            br.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
}
```

===

# Use after close
------------------

* プログラミングエラーの一種
* あらゆるリソースで起きうる
* GCのある言語ではメモリでのエラー **のみ** 防げる
* 他のリソースだとダメ
* Rustは **全ての** リソースで防げる

===

# Ruby
------

``` ruby
file = nil
File.open(&#34;file.rb&#34;) do |f|
  file = f
end
puts file.read

```

```
#&lt;File:file.rb (closed)&gt;
file.rb:6:in `read&#39;: closed stream (IOError)
        from file.rb:6:in `&lt;main&gt;&#39;
```


===

# Rust
-------

* 所有権のある限り勝手に`close`されない

``` rust
let mut file = None;
{
  let f = File::open(&#34;file.rs&#34;).unwrap();
  file = Some(f);
}
let mut s = String::new();
file.unwrap().read_to_string(&amp;mut s).unwrap();
println!(&#34;{}&#34;, s);
```

===

# ラッパーオブジェクト
--------------------

* 所有権便利って話

===

# Scala
------

``` scala
val kc = new KafkaProducer(...)
val sk = new SimpleKafkaClient(kc)
kc.close // &lt;- !?!?!?
...
```

===

# Rust
-------

``` rust
let kc = KafkaClient(...);
val mut sk = SimpleKafkaClient(kc);
kc.close(); // &lt;- Compile error because kc has been moved
```

===

# 責任者問題
-----------

* ラッパーオブジェクトの続き
* ラップされたオブジェクトは誰が閉じるの？


===

# Scala
------

``` scala
val kc = new KafkaProducer(...)
val sk = new SimpleKafkaClient(kc)
...
sk.close
kc.close // 本当に必要？
```

===

# Rust
-------

``` rust
let kc = KafkaClient(...);
val mut sk = SimpleKafkaClient(kc); // ここでmove
...
sk.close(); // moveされたskがcolseすることが型で分かる
```

===

# まとめ
--------

* Rust = 便利機能詰め合わせ + 所有権
* さらにランタイムもないしCとの相互連携も出来る
* リソース管理って大事
* 所有権は制限だけじゃないよ



&lt;/script&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Rustの型レベルLispっぽいの作った</title>
      <link>/blog/2016/11/06/rustnokatareberulispppoinotsukutta</link>
      <pubDate>Sun, 06 Nov 2016 11:49:43 +0900</pubDate>
      
      <guid>/blog/2016/11/06/rustnokatareberulispppoinotsukutta</guid>
      <description>&lt;p&gt;κeenです。ふとした気紛れでRustの型レベルLispっぽいの作りました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;実装自体は&lt;a href=&#34;https://adtech.cyberagent.io/scalablog/2015/12/05/scala-lisp/&#34;&gt;去年Scalaで作た時&lt;/a&gt;とほぼ同じ。
ただしRustでコンパイル時に文字列を処理しようとするとコンパイラプラグインが必要になるので今回はあきらめて素のRustの式のまま。&lt;/p&gt;

&lt;p&gt;こんな感じです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;println!(&amp;quot;{}&amp;quot;, eval!(List3&amp;lt;Add, _2, _3&amp;gt;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lisp…？感ありますがLispと言い張ります。&lt;/p&gt;

&lt;p&gt;少しだけ工夫した点はシンボルをアルファベットのListにすることで任意の文字列を表現出来るようにした点、関数を&lt;code&gt;Fun&lt;/code&gt; 、 &lt;code&gt;Fun2&lt;/code&gt; といったトレイトで抽象化することでユーザも関数を定義出来るようにした点です。&lt;/p&gt;

&lt;p&gt;例えばフィボナッチ数列は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;pub type Fib = Symbol&amp;lt;Sym3&amp;lt;F, I, B&amp;gt;&amp;gt;;

impl Fun1&amp;lt;_0&amp;gt; for Fib {
    type Out = _1;
}

impl Fun1&amp;lt;_1&amp;gt; for Fib {
    type Out = _1;
}

impl &amp;lt;T1N: Num, N1_O: Num, N2_O: Num, NO: Num&amp;gt;Fun1&amp;lt;Number&amp;lt;Succ&amp;lt;Succ&amp;lt;T1N&amp;gt;&amp;gt;&amp;gt;&amp;gt; for Fib
    where Fib: Fun1&amp;lt;Number&amp;lt;Succ&amp;lt;T1N&amp;gt;&amp;gt;, Out = Number&amp;lt;N1_O&amp;gt;&amp;gt;,
          Fib: Fun1&amp;lt;Number&amp;lt;     T1N &amp;gt;, Out = Number&amp;lt;N2_O&amp;gt;&amp;gt;,
          Add: Fun2&amp;lt;Number&amp;lt;N1_O&amp;gt;, Number&amp;lt;N2_O&amp;gt;, Out = Number&amp;lt;NO&amp;gt;&amp;gt;
{
    type Out = Number&amp;lt;NO&amp;gt;;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と定義出来ます。&lt;/p&gt;

&lt;p&gt;ただし、Rustの型検査が許す再帰深度がかなり小さいため、&lt;code&gt;List2&amp;lt;Fib, _6&amp;gt;&lt;/code&gt;で音を上げます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   Compiling rustlisp v0.1.0 (file:///home/kim/Rust/rustlisp)
error[E0275]: overflow evaluating the requirement `_: std::marker::Sized`
 --&amp;gt; &amp;lt;rustlisp macros&amp;gt;:1:20
  |
1 | ( $ t : ty ) =&amp;gt; { &amp;lt;&amp;lt; $ t as Eval &amp;gt; :: Out as Expr &amp;gt; :: to_string (  ) }
  |                    ^^^^^^^^^^^^^^^^^^^^^^
src/main.rs:18:20: 18:41 note: in this expansion of eval! (defined in &amp;lt;rustlisp macros&amp;gt;)
&amp;lt;std macros&amp;gt;:2:27: 2:58 note: in this expansion of format_args!
&amp;lt;std macros&amp;gt;:3:1: 3:54 note: in this expansion of print! (defined in &amp;lt;std macros&amp;gt;)
src/main.rs:18:5: 18:43 note: in this expansion of println! (defined in &amp;lt;std macros&amp;gt;)
  |
  = note: consider adding a `#![recursion_limit=&amp;quot;128&amp;quot;]` attribute to your crate
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun2&amp;lt;rustlisp::num::Number&amp;lt;_&amp;gt;, rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::A, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::D, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::fun::Fun1&amp;lt;rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;` for `rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::F, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::I, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::B, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;`
  = note: required because of the requirements on the impl of `rustlisp::eval::Eval` for `rustlisp::cons::ConsCell&amp;lt;rustlisp::symbol::Symbol&amp;lt;rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::F, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::I, rustlisp::symbol::SymCons&amp;lt;rustlisp::symbol::B, rustlisp::symbol::Eos&amp;gt;&amp;gt;&amp;gt;&amp;gt;, rustlisp::cons::ConsCell&amp;lt;rustlisp::num::Number&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Succ&amp;lt;rustlisp::num::Zero&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;, rustlisp::cons::Nil&amp;gt;&amp;gt;`

error: aborting due to previous error

error: Could not compile `rustlisp`.

To learn more, run the command again with --verbose.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;スタックを作ってどうこう、とかも考えたのですが上手くいきませんでした。悲しい。&lt;/p&gt;

&lt;p&gt;ということで小ネタでした。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのクロージャ3種を作って理解する</title>
      <link>/blog/2016/10/10/rustnokuro_ja3tanewotsukutterikaisuru</link>
      <pubDate>Mon, 10 Oct 2016 16:48:43 +0900</pubDate>
      
      <guid>/blog/2016/10/10/rustnokuro_ja3tanewotsukutterikaisuru</guid>
      <description>&lt;p&gt;κeenです。Rustのクロージャ、3種類もあって複雑ですよね。
こういう複雑なものはRustの気持になって考えれば理解出来たりします。ということで手でクロージャを作って理解してみましょう。&lt;/p&gt;

&lt;p&gt;尚、これはRustの1.12.0-stableと1.14.0-nightly (6e8f92f11 2016-10-07)で実験しています。
&lt;/p&gt;

&lt;h1 id=&#34;用語&#34;&gt;用語&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;関数 - 関数&lt;/li&gt;
&lt;li&gt;無名関数 - 名前のついていない関数&lt;/li&gt;
&lt;li&gt;自由変数 - そのスコープの中で束縛されていない変数&lt;/li&gt;
&lt;li&gt;クロージャ - 関数に、自由変数の値(環境)もくっつけてそれだけで閉じるようにしたもの&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;クロージャについては関数が閉じ込める環境だけを指してクロージャとする人もいますが、ここでは関数本体と環境を合わせてクロージャとします。&lt;/p&gt;

&lt;p&gt;よく、無名関数とクロージャ(関数閉包)を一緒くたにすることがありますが明確に区別しましょう。まあ、大抵の無名関数はクロージャになりますが、動的スコープの言語みたいにそうならないケースもあります。&lt;/p&gt;

&lt;p&gt;余談ですが「ラムダ式」は言語がよく無名関数に付ける名前です。「関数」も言語によって「手続き」だったり「メソッド」だったりしますね。&lt;/p&gt;

&lt;h1 id=&#34;fnonce-fnmut-fn&#34;&gt;&lt;code&gt;FnOnce&lt;/code&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;code&gt;Fn&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;さて、「作って理解する」なので例を出します。なんかよく分からないけど0から9の値に1を足して印字するプログラムです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let x = 1;
    for i in 0..10 {
        // 無名関数を作る
        let cls = |arg|{ i + arg };
        println!(&amp;quot;{}&amp;quot;, cls(x));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無名関数を作って &lt;code&gt;cls&lt;/code&gt; という変数に束縛しています。 &lt;code&gt;cls&lt;/code&gt; は自由変数 &lt;code&gt;i&lt;/code&gt; を含みますので、 &lt;code&gt;cls&lt;/code&gt; のクロージャを取ると 「&lt;code&gt;cls&lt;/code&gt; の定義 + &lt;code&gt;i&lt;/code&gt; の定義」になります。&lt;/p&gt;

&lt;p&gt;では &lt;code&gt;i&lt;/code&gt; という変数を保持したオブジェクトを作りましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct Closure {
    i: isize,
}


fn main() {
    let x = 1;
    for i in 0..10 {
        // クロージャを作る
        let cls = Closure {i: i};
        // もちろん、Closureは関数でないので呼び出せない
        // println!(&amp;quot;{}&amp;quot;, cls(x));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さて、このままだと &lt;code&gt;cls&lt;/code&gt; は呼び出せません。しかし &lt;code&gt;+&lt;/code&gt; なんかのオーバーロードを許しているRustはなんと関数呼び出し構文 &lt;code&gt;name(arg, ...)&lt;/code&gt; もオーバーロード出来ます。実装すべきトレイトは &lt;code&gt;std::ops::{FnOnce, FnMut, Fn}&lt;/code&gt; です。これがクロージャ3種です。&lt;/p&gt;

&lt;p&gt;これらは継承関係にあって、上から順に &lt;code&gt;FnOnce&lt;/code&gt;  &lt;code&gt;FnMut&lt;/code&gt; &lt;code&gt;Fn&lt;/code&gt; です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;pub trait FnOnce&amp;lt;Args&amp;gt; {
    type Output;
    extern &amp;quot;rust-call&amp;quot; fn call_once(self, args: Args) -&amp;gt; Self::Output;
}

pub trait FnMut&amp;lt;Args&amp;gt;: FnOnce&amp;lt;Args&amp;gt; {
    extern &amp;quot;rust-call&amp;quot; fn call_mut(&amp;amp;mut self, args: Args) -&amp;gt; Self::Output;
}

pub trait Fn&amp;lt;Args&amp;gt;: FnMut&amp;lt;Args&amp;gt; {
    extern &amp;quot;rust-call&amp;quot; fn call(&amp;amp;self, args: Args) -&amp;gt; Self::Output;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これらの違いは &lt;code&gt;self&lt;/code&gt; をムーブして受け取るか &lt;code&gt;&amp;amp;mut&lt;/code&gt; で受けるか &lt;code&gt;&amp;amp;&lt;/code&gt; で受けるかです。&lt;/p&gt;

&lt;h2 id=&#34;fnonce&#34;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;とりあえず先程の &lt;code&gt;Closure&lt;/code&gt; にこれを実装してみましょう。ちょいとunstableな機能なようなので &lt;code&gt;feature&lt;/code&gt; を使って、nightlyでコンパイルするようにしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#![feature(unboxed_closures)]
#![feature(fn_traits)]

use std::ops::{FnOnce, FnMut, Fn};

// 再掲
struct Closure {
    i: isize,
}

impl FnOnce&amp;lt;(isize,)&amp;gt; for Closure {
    type Output = isize;

    extern &amp;quot;rust-call&amp;quot; fn call_once(self, (arg, ): (isize,)) -&amp;gt; Self::Output {
        self.i + arg
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで呼び出しが出来る筈です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let x = 1;
    for i in 0..10 {
        // 無名関数を作る
        let cls = Closure {i: i};
        // 呼出せるようになる
        println!(&amp;quot;{}&amp;quot;, cls(x));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;勿論、これは以下のように明示的にメソッドを呼んでも同じです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let x = 1;
    for i in 0..10 {
        // クロージャを作る
        let cls = Closure {i: i};
        // メソッドで呼ぶ
        println!(&amp;quot;{}&amp;quot;, cls.call_once((x, )));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fnmut-fnmut&#34;&gt;&lt;code&gt;FnMut&lt;/code&gt; &lt;code&gt;FnMut&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;FnOnce&lt;/code&gt; で出来るんならなんで &lt;code&gt;FnMut&lt;/code&gt; と &lt;code&gt;FnMut&lt;/code&gt; が存在するかというと、クロージャが閉じ込めた環境の所有権の問題ですね。&lt;/p&gt;

&lt;p&gt;例えば以下のコードを手で実装してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let x = 1;
    // ループの外でクロージャを作る
    let cls = |arg| { x + arg};
    for i in 0..10 {
        // 複数回クロージャを呼ぶ
        println!(&amp;quot;{}&amp;quot;, cls(i));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先程と同じ &lt;code&gt;Closure&lt;/code&gt; ではコンパイル出来ません（統一感のために &lt;code&gt;Closure&lt;/code&gt; のメンバ名を変えました）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#![feature(unboxed_closures)]
#![feature(fn_traits)]

use std::ops::{FnOnce, FnMut, Fn};

struct Closure {
    x: isize,
}

impl FnOnce&amp;lt;(isize,)&amp;gt; for Closure {
  // ...略
}


fn main() {
    let x = 1;
    // ループの外でクロージャを作る
    let cls = Closure {x: x};
    for i in 0..10 {
        // 複数回クロージャを呼ぶ
        println!(&amp;quot;{}&amp;quot;, cls(i));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;error[E0382]: use of moved value: `cls`
  --&amp;gt; closure.rs:45:28
   |
45 |             println!(&amp;quot;{}&amp;quot;, cls(i));
   |                            ^^^ value moved here in previous iteration of loop
   |
   = note: move occurs because `cls` has type `Closure`, which does not implement the `Copy` trait

error: aborting due to previous error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1回目のループでは問題ないのですが &lt;code&gt;call_once(self, (arg, ): (isize,))&lt;/code&gt; の呼び出しでムーブしてしまうので2回目以降は呼べません。ということで1つ下のトレイト、 &lt;code&gt;FnMut&lt;/code&gt; も実装してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// ...略

impl FnMut&amp;lt;(isize,)&amp;gt; for Closure {

    extern &amp;quot;rust-call&amp;quot; fn call_mut(&amp;amp;mut self, (arg, ): (isize,)) -&amp;gt; Self::Output {
        self.x + arg
    }
}

fn main() {
    let x = 1;
    let cls = Closure {x: x};
    for i in 0..10 {
        println!(&amp;quot;{}&amp;quot;, cls(i));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実はこれでも怒られます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error: cannot borrow immutable local variable `cls` as mutable
  --&amp;gt; closure.rs:45:28
   |
43 |         let cls = Closure {x: x};
   |             --- use `mut cls` here to make mutable
44 |         for i in 0..10 {
45 |             println!(&amp;quot;{}&amp;quot;, cls(i));
   |                            ^^^ cannot borrow mutably

error: aborting due to previous error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何故なら &lt;code&gt;mut&lt;/code&gt; を要求しているから。正確にはこうです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// ...略


fn main() {
    let x = 1;
    // `mut` を付ける
    let mut cls = Closure {x: x};
    for i in 0..10 {
        println!(&amp;quot;{}&amp;quot;, cls(i));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで通ります。しかしまあ、何か書き換えてる訳でもないのに &lt;code&gt;mut&lt;/code&gt; が付いているのは嫌ですね。&lt;code&gt;mut&lt;/code&gt; を要求しないように定義してあげようと思ったら &lt;code&gt;Fn&lt;/code&gt; が必要になります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// ...略

impl Fn&amp;lt;(isize,)&amp;gt; for Closure {
    extern &amp;quot;rust-call&amp;quot; fn call(&amp;amp;self, (arg,): (isize, )) -&amp;gt; Self::Output {
        self.x + arg
    }
}

fn main() {
    let x = 1;
    let cls = Closure {x: x};
    for i in 0..10 {
        println!(&amp;quot;{}&amp;quot;, cls(i));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで通ります。&lt;/p&gt;

&lt;h2 id=&#34;整理&#34;&gt;整理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;クロージャとは関数とその環境のセットだよ&lt;/li&gt;
&lt;li&gt;環境にも所有権はあるよ&lt;/li&gt;
&lt;li&gt;Rustは所有権でクロージャの呼び出しを使い分けるよ&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;構文&#34;&gt;構文&lt;/h1&gt;

&lt;p&gt;じゃあ、 &lt;code&gt;FnOnce&lt;/code&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;code&gt;Fn&lt;/code&gt; に対応するRustの構文を探っていきます。&lt;/p&gt;

&lt;h2 id=&#34;fn&#34;&gt;&lt;code&gt;Fn&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;先程 &lt;code&gt;Fn&lt;/code&gt; まで実装しないとコンパイルが通らなかった&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let x = 1;
    let cls = |arg| { x + arg};
    for i in 0..10 {
        println!(&amp;quot;{}&amp;quot;, cls(i));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は &lt;code&gt;||{}&lt;/code&gt; でコンパイルが通っているので &lt;code&gt;||{}&lt;/code&gt; は &lt;code&gt;Fn&lt;/code&gt; を作るようです。&lt;/p&gt;

&lt;h2 id=&#34;fnmut&#34;&gt;&lt;code&gt;FnMut&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;じゃあ、 &lt;code&gt;call_mut&lt;/code&gt; を要求しそうにちょっと変えてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let mut x = 1;
    let cls = |arg|{ x += arg };
    for i in 0..10 {
        cls(i);
    }
    println!(&amp;quot;{}&amp;quot;, x);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はい、予想通りエラーが出ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error: cannot borrow immutable local variable `cls` as mutable
  --&amp;gt; closure.rs:37:13
   |
35 |         let cls = |arg|{ x += arg };
   |             --- use `mut cls` here to make mutable
36 |         for i in 0..10 {
37 |             cls(i);
   |             ^^^ cannot borrow mutably

error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable
  --&amp;gt; closure.rs:39:24
   |
35 |         let cls = |arg|{ x += arg };
   |                   -----  - previous borrow occurs due to use of `x` in closure
   |                   |
   |                   mutable borrow occurs here
...
39 |         println!(&amp;quot;{}&amp;quot;, x);
   |                        ^ immutable borrow occurs here
40 |     }
   |     - mutable borrow ends here

error: aborting due to 2 previous errors

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先程の &lt;code&gt;FnMut&lt;/code&gt; の例のように &lt;code&gt;cls&lt;/code&gt; に &lt;code&gt;mut&lt;/code&gt; を付けてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let mut x = 1;
    let mut cls = |arg|{ x += arg };
    for i in 0..10 {
        cls(i);
    }
    println!(&amp;quot;{}&amp;quot;, x);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実は、これでもエラーです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable
  --&amp;gt; closure.rs:39:24
   |
35 |         let mut cls = |arg|{ x += arg };
   |                       -----  - previous borrow occurs due to use of `x` in closure
   |                       |
   |                       mutable borrow occurs here
...
39 |         println!(&amp;quot;{}&amp;quot;, x);
   |                        ^ immutable borrow occurs here
40 |     }
   |     - mutable borrow ends here

error: aborting due to previous error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何故なら &lt;code&gt;cls&lt;/code&gt; が &lt;code&gt;x&lt;/code&gt; を捕捉し続けているから。これは &lt;code&gt;cls&lt;/code&gt; のライフタイムを &lt;code&gt;println!&lt;/code&gt; の前で終わらせてあげると解決します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let mut x = 1;
    {
        // `{}` でスコープを作ることでライフタイムをコントロールする
        let mut cls = |arg|{ x += arg };
        for i in 0..10 {
            cls(i);
        }
    }
    println!(&amp;quot;{}&amp;quot;, x);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;FnMut&lt;/code&gt; は変数を &lt;code&gt;mut&lt;/code&gt; にする無名関数と同じなようです。&lt;/p&gt;

&lt;h2 id=&#34;fnonce-1&#34;&gt;&lt;code&gt;FnOnce&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;じゃあ、 &lt;code&gt;FnOnce&lt;/code&gt; は？ &lt;code&gt;std::mem::drop&lt;/code&gt; を使って所有権を無理矢理奪うクロージャを作ってみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::mem::drop;

fn main() {
    let x = String::new();
    let cls = || {drop(x)};
    cls();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はい、実はこれでOKです。冷静に考えたら &lt;code&gt;FnOnce&lt;/code&gt; を継承している &lt;code&gt;Fn&lt;/code&gt; を &lt;code&gt;||{}&lt;/code&gt; で作れた時点で問題ありませんでしたね。&lt;/p&gt;

&lt;h1 id=&#34;落穂拾い&#34;&gt;落穂拾い&lt;/h1&gt;

&lt;h2 id=&#34;move-クロージャ&#34;&gt;&lt;code&gt;move&lt;/code&gt; クロージャ&lt;/h2&gt;

&lt;p&gt;じゃあ、Rustが良い感じに使い分けてくれるなら &lt;code&gt;move&lt;/code&gt; クロージャって何のためにあるの？と思いますが、これは環境を捕捉する際に &lt;code&gt;Copy&lt;/code&gt; なんかが起こらないようにするためのものです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;move&lt;/code&gt; しない例&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;
let mut num = 5;

{
    let mut add_num = |x: i32| num += x;

    add_num(5);
}

assert_eq!(10, num);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;move&lt;/code&gt; する例&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let mut num = 5;

{
    let mut add_num = move |x: i32| num += x;

    add_num(5);
}

assert_eq!(5, num);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;move&lt;/code&gt; は環境 &lt;strong&gt;へ&lt;/strong&gt; 所有権を移すかどうか、 &lt;code&gt;FnOnce&lt;/code&gt; などは環境 &lt;strong&gt;から&lt;/strong&gt; 所有権を移すかどうかです。&lt;/p&gt;

&lt;h2 id=&#34;関数ポインタ&#34;&gt;関数ポインタ&lt;/h2&gt;

&lt;p&gt;クロージャを持たない関数は、 &lt;code&gt;fn(i32) -&amp;gt; i32&lt;/code&gt; のような型を持ちます。これは空の環境を持つクロージャと同じですね。空の環境に所有権も何もないのでプリミティブの &lt;code&gt;fn&lt;/code&gt; は &lt;code&gt;FnOnce&lt;/code&gt; &lt;code&gt;FnMut&lt;/code&gt; &lt;code&gt;Fn&lt;/code&gt; のいずれとしても振舞います。&lt;/p&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;p&gt;ここまで書いて普通にドキュメントに詳しく載っているのに気付きました（汗&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/functions.html&#34;&gt;関数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/closures.html&#34;&gt;クロージャ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Rustでシェル作った</title>
      <link>/blog/2016/09/04/rustdeshierutsukutta</link>
      <pubDate>Sun, 04 Sep 2016 16:26:20 +0900</pubDate>
      
      <guid>/blog/2016/09/04/rustdeshierutsukutta</guid>
      <description>&lt;p&gt;κeenです。
先日、先輩社員と話してるとシェルを作る話になりました。
だいたいのコンピュータサイエンスの学生なら学部生の頃に課題でシェルを作りますが数学科にいた私は作ったことありませんでした。
でも、その時「今ならシェルなんて作ろうと思えばすぐに作れますよ」なんて言っちゃったのでなんか作りました。
まあ、習作程度の雑なものです。&lt;/p&gt;

&lt;p&gt;
作ったのはこれ、&lt;a href=&#34;https://github.com/KeenS/igaguri&#34;&gt;KeenS/igaguri: my toy shell written in Rust&lt;/a&gt;。
名前は、Shellは木の実を覆う殻のようにカーネルを覆う殻とのことなのでRustのロゴに似てる毬栗を選びました。&lt;/p&gt;

&lt;h1 id=&#34;パーサ&#34;&gt;パーサ&lt;/h1&gt;

&lt;p&gt;パーサコンビネータライブラリの&lt;a href=&#34;https://github.com/Geal/nom&#34;&gt;nom&lt;/a&gt;を使いました。&lt;/p&gt;

&lt;p&gt;雰囲気こんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;named!(token&amp;lt;String&amp;gt;, map!(map_res!(is_a!(&amp;quot;abcdefghijklmnopqlrstuvwxyzABCDEFGHIJKLMNOPQLRSTUVWXYZ-!$%^&amp;amp;@/1234567890&amp;quot;), str::from_utf8), |i: &amp;amp;str| i.to_string()));
named!(pipe, tag!(&amp;quot;|&amp;quot;));
named!(redirect_out&amp;lt;String&amp;gt;, chain!(tag!(&amp;quot;&amp;gt;&amp;quot;) ~ opt!(multispace) ~ filename: token, || filename));

named!(command&amp;lt;Ast&amp;gt;, chain!(
    opt!(multispace)
        ~ cmd: separated_list!(multispace, token)
        ~ outfile: opt!(chain!(multispace ~ out: redirect_out, || out))
        ~ opt!(multispace), || Ast::Command{cmd: cmd, out: outfile}));
named!(parse&amp;lt;Ast&amp;gt;, map!(separated_list!(pipe, command), Ast::Pipe));

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;入力ハンドリング&#34;&gt;入力ハンドリング&lt;/h1&gt;

&lt;p&gt;readlineのRust実装、&lt;a href=&#34;https://github.com/kkawakam/rustyline&#34;&gt;rustyline&lt;/a&gt;を使いました。&lt;/p&gt;

&lt;p&gt;それっぽいからとりあえず、で選んだものの、複数行入力（履歴）とか考えるともうちょっとリッチなものを選んだ方が良かったかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;実行&#34;&gt;実行&lt;/h1&gt;

&lt;p&gt;最初、&lt;a href=&#34;https://github.com/rust-lang/libc&#34;&gt;libcバインディング&lt;/a&gt;の &lt;code&gt;pipe&lt;/code&gt; や &lt;code&gt;fork&lt;/code&gt; 、 &lt;code&gt;execve&lt;/code&gt; なんかを考えてましたが、標準ライブラリの &lt;a href=&#34;https://doc.rust-lang.org/std/process/struct.Command.html&#34;&gt;&lt;code&gt;std::process::Command&lt;/code&gt;&lt;/a&gt;で実現出来そうだったのでそれを使いました。&lt;/p&gt;

&lt;p&gt;こんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;Command::new(cmd)
    .args(&amp;amp;terms)
    .stdin(stdin)
    .stdout(stdout)
    .stderr(stderr)
    .spawn()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;パイプ-リダイレクト&#34;&gt;パイプ/リダイレクト&lt;/h2&gt;

&lt;p&gt;一応、パイプも標準ライブラリでサポートされてるのでそれを使いました。&lt;/p&gt;

&lt;p&gt;ただ、普通のCとは違って子プロセスと親プロセスの間に一旦パイプを作って、子プロセスの出力の生のfdを取り出して、次の子プロセスの入力に与えて、と案外面倒でした。 &lt;code&gt;unsafe&lt;/code&gt; も出てくれば &lt;code&gt;unreachable&lt;/code&gt; も出てくるのでもう少し書き直したい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let mut si = stdin;
let mut itr = commands.into_iter().peekable();
unsafe {
    while let Some(command) = itr.next() {
        if itr.peek().is_some() {
            let process =
                try!(self.run(command, si, Stdio::piped(), Stdio::inherit()));
            si = Stdio::from_raw_fd(process.stdout.unwrap().into_raw_fd());
        } else {
            return self.run(command, si, stdout, stderr);
        }
    }
}
unreachable!()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リダイレクトも似たようなもので、ファイルを作って生のfdを取り出して、とやります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let stdout = out.map(|f| {
    unsafe {
        let file = File::create(f)
        // FIXME: do not panic
            .unwrap();
        Stdio::from_raw_fd(file.into_raw_fd())
    }

}).unwrap_or(stdout);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;昨日の夜からちょろっと作り始めてさっきそれっぽく動くようになった程度なのでまだ適当にしか動きません。
パイプと標準出力のリダイレクトだけで、 &lt;code&gt;cd&lt;/code&gt; なんかのシェルコマンドもなければシェル変数もありません。
が、そろそろ飽きたのでこの辺で。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;そろそろ飽きてきた&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/772334565264232454&#34;&gt;2016年9月4日&lt;/a&gt;&amp;lt;/
blockquote&amp;gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;シェルコマンドとシェル変数くらいはいつか実装しようかな。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustの所有権/ミュータビリティの分割</title>
      <link>/blog/2016/06/19/rustnoshoyuuken_myu_tabiriteinobunkatsu</link>
      <pubDate>Sun, 19 Jun 2016 20:42:14 +0900</pubDate>
      
      <guid>/blog/2016/06/19/rustnoshoyuuken_myu_tabiriteinobunkatsu</guid>
      <description>&lt;p&gt;κeenです。昔所有権/ミュータビリティを分割したくなったけどぱっと方法が思いつかなくて困ったことがあるので今更ながら備忘録として残しておきます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;ミュータビリティ&#34;&gt;ミュータビリティ&lt;/h1&gt;

&lt;p&gt;例えば、HTTPパーサを作ろうとしてるとしましょう。
受け取ったバイト列のバッファをパースしてヘッダやらボディやらのサブスライスを返します。この時、返り値のサブスライスはユーザへの自由を与えるために &lt;code&gt;mut&lt;/code&gt; にしたいですよね。&lt;/p&gt;

&lt;p&gt;そう思ってこういうコードを書くと&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::io;

fn parse(buf: &amp;amp;mut [u8]) -&amp;gt; io::Result&amp;lt;(&amp;amp;mut [u8], &amp;amp;mut [u8])&amp;gt; {
    ...
    Ok((&amp;amp;mut buf[hstart..hend], &amp;amp;mut buf[bstart..bend]))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;mutability_split.rs:4:31: 4:34 error: cannot borrow `*buf` as mutable more than once at a time [E0499]
mutability_split.rs:4     Ok((&amp;amp;mut buf[hstart..hend], &amp;amp;mut buf[bstart..bend]))
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;普通にやろうとすると
1つ1つミュータブルなサブスライスを作ることになり、2つ目以降でborrow checkに引っ掛かってしまいます。2つのバッファがオーバーラップしてなくても。難儀ですね。コピーするくらいしかないのでしょうか。いいえ。rustはちゃんと助けになるAPIを用意してくれています。&lt;/p&gt;

&lt;h2 id=&#34;split-at-mut-https-doc-rust-lang-org-std-primitive-slice-html-method-split-at-mut&#34;&gt;&lt;a href=&#34;https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut&#34;&gt;&lt;code&gt;split_at_mut&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn split_at_mut(&amp;amp;mut self, mid: usize) -&amp;gt; (&amp;amp;mut [T], &amp;amp;mut [T])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;スライスを2つに分割してくれます。重要なのが、ミュータビリティも分割してくれるところです。返り値の2つ共に &lt;code&gt;mut&lt;/code&gt; がついています。ということで、次のように実装出来ます。（実行してないので結果が正しいかは確認してませんが）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn parse(buf: &amp;amp;mut [u8]) -&amp;gt; io::Result&amp;lt;(&amp;amp;mut [u8], &amp;amp;mut [u8])&amp;gt; {
    ...

    let (h, b) = buf.split_at_mut(bstart);
    let h = {
        let (_, h) = h.split_at_mut(hstart);
        let (_, h) = h.split_at_mut(hend - hstart);
        h
    };

    let (_, b) = b.split_at_mut(bend - bstart);

    Ok((h, b))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;所有権&#34;&gt;所有権&lt;/h1&gt;

&lt;p&gt;似たような話で、構造体の所有権というか、貸与権(?)を分割したい時もあります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct PersonDB {
    name: String,
    age: usize,
    address: String,
}


fn use_immutable(s: &amp;amp;str) {
    // empty
}

fn use_mutable(s: &amp;amp;mut str) {
    // empty
}



fn from_db(person: PersonDB) {
    let name = &amp;amp;person.name;
    let mut address = &amp;amp;mut person.address;
    use_immutable(name);
    use_mutable(address);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;イミュータブルとミュータブル両方の借用があるのでエラーになってしまいます。実際は別のフィールドなので問題は起きないのですが、コンパイラに怒られます。理不尽ですね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mutability_split.rs:36:28: 36:42 error: cannot borrow immutable field `person.address` as mutable
mutability_split.rs:36     let mut address = &amp;amp;mut person.address;
                                                  ^~~~~~~~~~~~~~

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そういう時は、パターンマッチによる分配束縛でクリア出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn from_db(person: PersonDB) {
    let PersonDB {name, mut address, ..} = person;
    use_immutable(&amp;amp;name);
    use_mutable(&amp;amp;mut address);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;Rustの所有権やミュータブルな参照など、1つしか存在出来ないとされるものが分割出来ることを示しました。
地味に悩む所なので誰かの助けになれば幸いです。&lt;/p&gt;

&lt;p&gt;蛇足を足すと、本当は所有権の分割についても書く予定でしたがエラーになる筈のコードがあっさりコンパイルを通ってしまったのでナシになりました。コンパイラも進化してますね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>multirustが非推奨になったようなのでrustupに移行する</title>
      <link>/blog/2016/06/12/multirustgahisuishouninattayounanoderustupniikousuru</link>
      <pubDate>Sun, 12 Jun 2016 15:23:06 +0900</pubDate>
      
      <guid>/blog/2016/06/12/multirustgahisuishouninattayounanoderustupniikousuru</guid>
      <description>&lt;p&gt;κeenです。どうやらもうそろそろRustのツールチェーン管理はmultirustじゃなくてrustupを使った方が良さそうなので移行しようと思います。

きっかけはmultirustにそういうコミットがされたから。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;もうmultirustじゃなくてrustup使え、と。&lt;br&gt;&lt;br&gt;Update README.md · brson/multirust@84c3459&lt;a href=&#34;https://t.co/ySeRB50x5C&#34;&gt;https://t.co/ySeRB50x5C&lt;/a&gt;&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/741077158651514882&#34;&gt;2016年6月10日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;因みにrustupは&lt;a href=&#34;https://github.com/rust-lang/rustup.sh&#34;&gt;rust-lang/rustup.sh: The rustup.sh script for installing Rust from release channels&lt;/a&gt;ではなく&lt;a href=&#34;https://github.com/rust-lang-nursery/rustup.rs&#34;&gt;rust-lang-nursery/rustup.rs: The Rust toolchain installer&lt;/a&gt;の方です。インストールガイドなどはこちらから。&lt;a href=&#34;https://www.rustup.rs/&#34;&gt;rustup.rs - The Rust toolchain installer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なんかベータ版のようですが推奨していいんですかね…。&lt;/p&gt;

&lt;p&gt;とりあえずmultirustを入れたままコマンドを叩いてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl https://sh.rustup.rs -sSf | sh
info: downloading installer
warning: it looks like you have an existing installation of multirust
warning: rustup cannot be installed alongside multirust
warning: run `/usr/local/lib/rustlib/uninstall.sh` as root and delete `/home/kim/.multirust/version` before installing rustup
error: cannot install while multirust is installed
rustup: command failed: /tmp/tmp.9kjQj9WT5O/rustup-init

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ふーむ。アンインストールしろ、と。一応指示された通りmultirust自体はアンインストールせずにversionだけを削除します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /usr/local/lib/rustlib/uninstall.sh
install: uninstalling component &#39;multirust&#39;

    multirust is uninstalled.
$ rm -rf ~/.multirust/version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もう一度。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl https://sh.rustup.rs -sSf | sh
info: downloading installer

Welcome to Rust!

This will download and install the official compiler for the Rust programming 
language, and its package manager, Cargo.

It will add the cargo, rustc, rustup and other commands to Cargo&#39;s bin 
directory, located at:

  /home/kim/.cargo/bin

This path will then be added to your PATH environment variable by modifying the 
profile file located at:

  /home/kim/.profile

You can uninstall at any time with rustup self uninstall and these changes will 
be reverted.

WARNING: This is beta software.

Current installation options:

     default toolchain: stable
  modify PATH variable: yes

1) Proceed with installation (default)
2) Customize installation
3) Cancel installation

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;選択肢が出ました。とりあえず1を選択します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error: toolchain &#39;stable&#39; is not installed
info: caused by: not a directory: &#39;/home/kim/.multirust/toolchains/stable-x86_64-unknown-linux-gnu&#39;
rustup: command failed: /tmp/tmp.nugK4VN4p8/rustup-init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;えー。ちょっと…。仕方ないのでシンボリックリンクを貼って騙してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls ~/.multirust/toolchains/
beta  nightly  stable
$ ln -s ~/.multirust/toolchains/{stable,stable-x86_64-unknown-linux-gnu}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3度目の正直なるか&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl https://sh.rustup.rs -sSf | sh
info: downloading installer

Welcome to Rust!

This will download and install the official compiler for the Rust programming 
language, and its package manager, Cargo.

It will add the cargo, rustc, rustup and other commands to Cargo&#39;s bin 
directory, located at:

  /home/kim/.cargo/bin

This path will then be added to your PATH environment variable by modifying the 
profile file located at:

  /home/kim/.profile

You can uninstall at any time with rustup self uninstall and these changes will 
be reverted.

WARNING: This is beta software.

Current installation options:

     default toolchain: stable
  modify PATH variable: yes

1) Proceed with installation (default)
2) Customize installation
3) Cancel installation
1

info: updating existing rustup installation


Rust is installed now. Great!

To get started you need Cargo&#39;s bin directory in your PATH environment variable.
Next time you log in this will be done automatically.

To configure your current shell run source $HOME/.cargo/env.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストール出来たよう。しかしセットアップは &lt;code&gt;~/.profile&lt;/code&gt; に書かれたようなので &lt;code&gt;.zshrc&lt;/code&gt; は自分で更新します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/zshrc b/zshrc
index 0178873..589c6a5 100644
--- a/zshrc
+++ b/zshrc
@@ -213,7 +213,7 @@ export PATSHOME=~/compile/ATS2-Postiats-$ATS_VERSION/
 export PATH=$PATSHOME/bin:$PATH
 export PATSHOMERELOC=~/compile/ATS2-Postiats-contrib-$ATS_VERSION
 
-export PATH=$PATH:~/.multirust/toolchains/stable/cargo/bin
+export PATH=&amp;quot;$HOME/.cargo/bin:$PATH&amp;quot;
 
 # OPAM configuration
 . /home/kim/.opam/opam-init/init.sh &amp;gt; /dev/null 2&amp;gt; /dev/null || true

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使ってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rustup 0.1.12 (c6e430a 2016-05-12)
The Rust toolchain installer

USAGE:
    rustup [FLAGS] [SUBCOMMAND]

FLAGS:
    -v, --verbose    Enable verbose output
    -h, --help       Prints help information
    -V, --version    Prints version information

SUBCOMMANDS:
    show         Show the active and installed toolchains
    update       Update Rust toolchains
    default      Set the default toolchain
    toolchain    Modify or query the installed toolchains
    target       Modify a toolchain&#39;s supported targets
    override     Modify directory toolchain overrides
    run          Run a command with an environment configured for a given toolchain
    which        Display which binary will be run for a given command
    doc          Open the documentation for the current toolchain.
    self         Modify the rustup installation
    telemetry    rustup telemetry commands
    help         Prints this message or the help of the given subcommand(s)

rustup installs The Rust Programming Language from the official
release channels, enabling you to easily switch between stable, beta,
and nightly compilers and keep them updated. It makes cross-compiling
simpler with binary builds of the standard library for common platforms.

If you are new to Rust consider running `rustup doc --book`
to learn Rust.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;multirustを使っていたら馴染めそうですね。&lt;/p&gt;

&lt;p&gt;一応どこにインストールされたのか確認。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which rustc
/home/kim/.cargo/bin/rustc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ふむふむ。ちょいとアップデートしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rustup update
info: syncing channel updates for &#39;stable-x86_64-unknown-linux-gnu&#39;
info: downloading component &#39;rustc&#39;
 43.2 MiB /  43.2 MiB (100 %)   2.1 MiB/s ETA:   0 s                
info: downloading component &#39;rust-std&#39;
 55.3 MiB /  55.3 MiB (100 %)   3.0 MiB/s ETA:   0 s                
info: downloading component &#39;rust-docs&#39;
  6.4 MiB /   6.4 MiB (100 %)   2.9 MiB/s ETA:   0 s                
info: downloading component &#39;cargo&#39;
  4.1 MiB /   4.1 MiB (100 %)   2.3 MiB/s ETA:   0 s                
info: rolling back changes
error: could not read component file: &#39;/home/kim/.multirust/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/manifest-&#39;
info: syncing channel updates for &#39;stable-x86_64-unknown-linux-gnu&#39;
info: downloading component &#39;rustc&#39;
 43.2 MiB /  43.2 MiB (100 %) 953.6 KiB/s ETA:   0 s                
info: downloading component &#39;rust-std&#39;
 55.3 MiB /  55.3 MiB (100 %)   1.8 MiB/s ETA:   0 s                
info: downloading component &#39;rust-docs&#39;
  6.4 MiB /   6.4 MiB (100 %)   2.2 MiB/s ETA:   0 s                
info: downloading component &#39;cargo&#39;
  4.1 MiB /   4.1 MiB (100 %)   1.5 MiB/s ETA:   0 s                
info: rolling back changes
error: could not read component file: &#39;/home/kim/.multirust/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/manifest-&#39;
info: syncing channel updates for &#39;beta-x86_64-unknown-linux-gnu&#39;
info: downloading component &#39;rustc&#39;
 44.8 MiB /  44.8 MiB (100 %)   1.4 MiB/s ETA:   0 s                
info: downloading component &#39;rust-std&#39;
 57.9 MiB /  57.9 MiB (100 %)   2.9 MiB/s ETA:   0 s                
info: downloading component &#39;rust-docs&#39;
  7.0 MiB /   7.0 MiB (100 %)   1.8 MiB/s ETA:   0 s                
info: downloading component &#39;cargo&#39;
  4.1 MiB /   4.1 MiB (100 %)   1.3 MiB/s ETA:   0 s                
info: installing component &#39;rustc&#39;
info: installing component &#39;rust-std&#39;
info: installing component &#39;rust-docs&#39;
info: installing component &#39;cargo&#39;
info: syncing channel updates for &#39;nightly-x86_64-unknown-linux-gnu&#39;
info: downloading component &#39;rustc&#39;
 46.5 MiB /  46.5 MiB (100 %) 924.8 KiB/s ETA:   0 s                
info: downloading component &#39;rust-std&#39;
 59.0 MiB /  59.0 MiB (100 %)   2.4 MiB/s ETA:   0 s                
info: downloading component &#39;rust-docs&#39;
  7.3 MiB /   7.3 MiB (100 %)   1.8 MiB/s ETA:   0 s                
info: downloading component &#39;cargo&#39;
  4.1 MiB /   4.1 MiB (100 %)   3.2 MiB/s ETA:   0 s                
info: installing component &#39;rustc&#39;
info: installing component &#39;rust-std&#39;
info: installing component &#39;rust-docs&#39;
info: installing component &#39;cargo&#39;
info: checking for self-updates
info: rustup is up to date

                           stable update failed - rustc 1.9.0 (e4e8b6668 2016-05-18)
  stable-x86_64-unknown-linux-gnu update failed - rustc 1.9.0 (e4e8b6668 2016-05-18)
                                 beta installed - rustc 1.10.0-beta.2 (39f3c16cc 2016-05-26)
                              nightly installed - rustc 1.11.0-nightly (0554abac6 2016-06-10)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あれ、なんかコケてる…。シンボリックリンクが悪さしたかな…。しかし試しに手元のプロダクトをコンパイルしてみたら通ったので使えているよう。&lt;/p&gt;

&lt;p&gt;さて、クロスコンパイルの方はどうでしょうか。以前Raspberry Pi向けにクロスコンパイルしました &lt;a href=&#34;http://keens.github.io/blog/2016/05/04/rustdebeametaruraspberry_pinolchika/&#34;&gt;RustでベアメタルRaspberry PiのLチカ | κeenのHappy Hacκing Blog&lt;/a&gt;。これは動くでしょうか。&lt;/p&gt;

&lt;p&gt;とりあえずインストール可能なターゲットを確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rustup target list
error: toolchain &#39;stable-x86_64-unknown-linux-gnu&#39; does not support components
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…………。無理矢理addしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rustup target add nightly-arm-unknown-linux-gnueabihf
error: toolchain &#39;stable-x86_64-unknown-linux-gnu&#39; does not support components
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…………………………………。&lt;/p&gt;

&lt;p&gt;なんか変ですね。&lt;/p&gt;

&lt;p&gt;一旦&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm ~/.multirust/toolchains/stable-x86_64-unknown-linux-gnu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;してもう一度 &lt;code&gt;rustup update&lt;/code&gt; します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rustup update
info: syncing channel updates for &#39;stable-x86_64-unknown-linux-gnu&#39;
info: downloading component &#39;rustc&#39;
 43.2 MiB /  43.2 MiB (100 %)   2.6 MiB/s ETA:   0 s                
info: downloading component &#39;rust-std&#39;
 55.3 MiB /  55.3 MiB (100 %)   3.7 MiB/s ETA:   0 s                
info: downloading component &#39;rust-docs&#39;
  6.4 MiB /   6.4 MiB (100 %)   5.0 MiB/s ETA:   0 s                
info: downloading component &#39;cargo&#39;
info: installing component &#39;rustc&#39;
info: installing component &#39;rust-std&#39;
info: installing component &#39;rust-docs&#39;
info: installing component &#39;cargo&#39;
info: syncing channel updates for &#39;beta-x86_64-unknown-linux-gnu&#39;
info: syncing channel updates for &#39;beta-x86_64-unknown-linux-gnu&#39;
info: syncing channel updates for &#39;nightly-x86_64-unknown-linux-gnu&#39;
info: syncing channel updates for &#39;nightly-x86_64-unknown-linux-gnu&#39;
info: checking for self-updates
info: rustup is up to date

                            stable installed - rustc 1.9.0 (e4e8b6668 2016-05-18)
                              beta unchanged - rustc 1.10.0-beta.2 (39f3c16cc 2016-05-26)
     beta-x86_64-unknown-linux-gnu unchanged - rustc 1.10.0-beta.2 (39f3c16cc 2016-05-26)
                           nightly unchanged - rustc 1.11.0-nightly (0554abac6 2016-06-10)
  nightly-x86_64-unknown-linux-gnu unchanged - rustc 1.11.0-nightly (0554abac6 2016-06-10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あれ、今回は上手くいった。やっぱりシンボリックリンクが悪かったよう。リトライ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rustup target list
aarch64-apple-ios
aarch64-unknown-linux-gnu
arm-linux-androideabi
arm-unknown-linux-gnueabi
arm-unknown-linux-gnueabihf
armv7-apple-ios
armv7-unknown-linux-gnueabihf
armv7s-apple-ios
i386-apple-ios
i586-pc-windows-msvc
i586-unknown-linux-gnu
i686-apple-darwin
i686-pc-windows-gnu
i686-pc-windows-msvc
i686-unknown-freebsd
i686-unknown-linux-gnu
i686-unknown-linux-musl
mips-unknown-linux-gnu
mips-unknown-linux-musl
mipsel-unknown-linux-gnu
mipsel-unknown-linux-musl
powerpc-unknown-linux-gnu
powerpc64-unknown-linux-gnu
powerpc64le-unknown-linux-gnu
x86_64-apple-darwin
x86_64-apple-ios
x86_64-pc-windows-gnu
x86_64-pc-windows-msvc
x86_64-rumprun-netbsd
x86_64-unknown-freebsd
x86_64-unknown-linux-gnu (default)
x86_64-unknown-linux-musl
x86_64-unknown-netbsd
$ rustup target add --toolchain nightly arm-unknown-linux-gnueabihf
info: downloading component &#39;rust-std&#39; for &#39;arm-unknown-linux-gnueabihf&#39;
 62.6 MiB /  62.6 MiB (100 %)   1.4 MiB/s ETA:   0 s                
info: installing component &#39;rust-std&#39; for &#39;arm-unknown-linux-gnueabihf&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んー、ちゃんとnightlyが入ったのか分からない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rustup show
installed toolchains
--------------------

stable
stable-x86_64-unknown-linux-gnu (default)
beta
beta-x86_64-unknown-linux-gnu
nightly
nightly-x86_64-unknown-linux-gnu

active toolchain
----------------

stable-x86_64-unknown-linux-gnu (default)
rustc 1.9.0 (e4e8b6668 2016-05-18)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかし件のARM向けプロジェクトのクロスコンパイルは出来たよう。&lt;/p&gt;

&lt;p&gt;もう一度listを見る。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rustup target list
aarch64-apple-ios
aarch64-linux-android
aarch64-unknown-linux-gnu
arm-linux-androideabi
arm-unknown-linux-gnueabi
arm-unknown-linux-gnueabihf (installed)
armv7-apple-ios
armv7-unknown-linux-gnueabihf
armv7s-apple-ios
i386-apple-ios
i586-pc-windows-msvc
i586-unknown-linux-gnu
i686-apple-darwin
i686-linux-android
i686-pc-windows-gnu
i686-pc-windows-msvc
i686-unknown-freebsd
i686-unknown-linux-gnu
i686-unknown-linux-musl
mips-unknown-linux-gnu
mips-unknown-linux-musl
mipsel-unknown-linux-gnu
mipsel-unknown-linux-musl
powerpc-unknown-linux-gnu
powerpc64-unknown-linux-gnu
powerpc64le-unknown-linux-gnu
x86_64-apple-darwin
x86_64-apple-ios
x86_64-pc-windows-gnu
x86_64-pc-windows-msvc
x86_64-rumprun-netbsd
x86_64-unknown-freebsd
x86_64-unknown-linux-gnu (default)
x86_64-unknown-linux-musl
x86_64-unknown-netbsd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;arm-unknown-linux-gnueabihf (installed)&lt;/code&gt; とあるのでインストール出来ているよう。しかし本当にnightlyなのか。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rustup target list --toolchain stable
aarch64-apple-ios
aarch64-unknown-linux-gnu
arm-linux-androideabi
arm-unknown-linux-gnueabi
arm-unknown-linux-gnueabihf
armv7-apple-ios
armv7-unknown-linux-gnueabihf
armv7s-apple-ios
i386-apple-ios
i586-pc-windows-msvc
i586-unknown-linux-gnu
i686-apple-darwin
i686-pc-windows-gnu
i686-pc-windows-msvc
i686-unknown-freebsd
i686-unknown-linux-gnu
i686-unknown-linux-musl
mips-unknown-linux-gnu
mips-unknown-linux-musl
mipsel-unknown-linux-gnu
mipsel-unknown-linux-musl
powerpc-unknown-linux-gnu
powerpc64-unknown-linux-gnu
powerpc64le-unknown-linux-gnu
x86_64-apple-darwin
x86_64-apple-ios
x86_64-pc-windows-gnu
x86_64-pc-windows-msvc
x86_64-rumprun-netbsd
x86_64-unknown-freebsd
x86_64-unknown-linux-gnu (default)
x86_64-unknown-linux-musl
x86_64-unknown-netbsd
$ rustup target list --toolchain nightly
aarch64-apple-ios
aarch64-linux-android
aarch64-unknown-linux-gnu
arm-linux-androideabi
arm-unknown-linux-gnueabi
arm-unknown-linux-gnueabihf (installed)
armv7-apple-ios
armv7-unknown-linux-gnueabihf
armv7s-apple-ios
i386-apple-ios
i586-pc-windows-msvc
i586-unknown-linux-gnu
i686-apple-darwin
i686-linux-android
i686-pc-windows-gnu
i686-pc-windows-msvc
i686-unknown-freebsd
i686-unknown-linux-gnu
i686-unknown-linux-musl
mips-unknown-linux-gnu
mips-unknown-linux-musl
mipsel-unknown-linux-gnu
mipsel-unknown-linux-musl
powerpc-unknown-linux-gnu
powerpc64-unknown-linux-gnu
powerpc64le-unknown-linux-gnu
x86_64-apple-darwin
x86_64-apple-ios
x86_64-pc-windows-gnu
x86_64-pc-windows-msvc
x86_64-rumprun-netbsd
x86_64-unknown-freebsd
x86_64-unknown-linux-gnu (default)
x86_64-unknown-linux-musl
x86_64-unknown-netbsd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうやら本当にnightlyのよう。&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;色々あたふたとしましたがrustupをインストールして使ってみました。multirustを使っているとインストールあたりでやや難はありそうですがそれ以降は普通に使えそうです。&lt;/p&gt;

&lt;p&gt;皆様もお試しあれ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cargo-profilerを試す</title>
      <link>/blog/2016/05/14/cargo_profilerwotamesu</link>
      <pubDate>Sat, 14 May 2016 20:59:13 +0900</pubDate>
      
      <guid>/blog/2016/05/14/cargo_profilerwotamesu</guid>
      <description>&lt;p&gt;κeenです。先日Rustのニュースに流れてきたcargo profilerを試してみます。
元の紹介記事はこちら&lt;a href=&#34;http://www.suchin.co/2016/05/11/Introducing-Cargo-Profiler/&#34;&gt;Introducing Cargo Profiler · suchin&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;GitHubレポジトリはこちら&lt;a href=&#34;https://github.com/pegasos1/cargo-profiler&#34;&gt;pegasos1/cargo-profiler: cargo subcommand to profile binaries&lt;/a&gt;。

Profilerとはいっても自身でプロファイラを持っている訳ではなくて外部のプロファイラ（現状valgrind）を呼び出して整形してくれるツールのようです。
Rust向けに関数をモジュールパス付きで表示してくれたりするのでRustから使うにはvalgrind生より便利そうです。&lt;/p&gt;

&lt;h1 id=&#34;インストール&#34;&gt;インストール&lt;/h1&gt;

&lt;p&gt;READMEに従って&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt install valgrind
$ cargo install cargo-profiler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とします。&lt;/p&gt;

&lt;h1 id=&#34;プロジェクトの準備&#34;&gt;プロジェクトの準備&lt;/h1&gt;

&lt;p&gt;適当なものがないので手元の[κLisp]()でフィボナッチ数列を動かしてみます。(と思ったらκLispに比較演算子がなかったのでそれを作るところから始まりましたがそれはまた別の話)。&lt;/p&gt;

&lt;p&gt;main.rsはこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;extern crate kappa_lisp;
use kappa_lisp::kappa_lisp::{run, init};
use kappa_lisp::env::Env;

fn main() {
    let mut env = Env::new();
    init(&amp;amp;mut env).unwrap();
    run(&amp;amp;mut env, r&amp;quot;
(defun fib (n)
  (if (&amp;lt; n 2)
      1
      (+ (fib (- n 1)) (fib (- n 2)))))
&amp;quot;).unwrap();
    let expr = run(&amp;amp;mut env, r&amp;quot; (fib 20) &amp;quot;).unwrap();
    println!(&amp;quot;{}&amp;quot;, expr);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;割と遅いので20くらいで限界でした。&lt;/p&gt;

&lt;p&gt;さて、これを&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cargo build --release
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としてビルドします。&lt;/p&gt;

&lt;h1 id=&#34;プロファイル&#34;&gt;プロファイル&lt;/h1&gt;

&lt;p&gt;今のところcallgrindとcachegrindが実装されているようです。1つづづ試してみます。&lt;/p&gt;

&lt;h2 id=&#34;callgrind&#34;&gt;callgrind&lt;/h2&gt;

&lt;p&gt;よく分かってないのですが多分実行時間に占める関数毎の割合を出してくれるんですかね。-nで上位何件を表示するか指定出来ます。&lt;/p&gt;

&lt;p&gt;とりあえず上位10件出してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cargo profiler callgrind --bin ./target/release/kappa_lisp -n 10
Profiling kappa_lisp with callgrind...

Total Instructions...571,437,255

142,527,726 (24.9%) ???:collections::hash::table::make_hash
-----------------------------------------------------------------------
107,551,309 (18.8%) ???:hash::sip::SipHasher.Hasher::write
-----------------------------------------------------------------------
39,749,571 (7.0%) ???:collections::hash::map::HashMap..K$C$..V$C$..S..::get
-----------------------------------------------------------------------
38,693,006 (6.8%) ???:sdallocx
-----------------------------------------------------------------------
37,670,732 (6.6%) ???:mallocx
-----------------------------------------------------------------------
34,608,049 (6.1%) ???:expr..Expr::drop.9629
-----------------------------------------------------------------------
26,539,906 (4.6%) ???:eval::eval
-----------------------------------------------------------------------
19,887,024 (3.5%) ???:util::f_foldr
-----------------------------------------------------------------------
16,634,175 (2.9%) ???:eval::feval
-----------------------------------------------------------------------
14,353,992 (2.5%) ???:util::kcons
-----------------------------------------------------------------------

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はい、こんな感じです。ハッシュテーブル関連が時間喰ってますね。これは関数呼び出しの度に行われてます。
ちょっと実装が雑すぎるので直さなきゃ…。&lt;/p&gt;

&lt;h1 id=&#34;cachegrind&#34;&gt;cachegrind&lt;/h1&gt;

&lt;p&gt;キャッシュミスを表示してくれます。本気出してチューニングする時に必要ですね。&lt;/p&gt;

&lt;p&gt;同じく -nで件数を絞り込めます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cargo profiler cachegrind --bin ./target/release/kappa_lisp -n 10  


Profiling kappa_lisp with cachegrind...

Total Memory Accesses...800,070,388	

Total L1 I-Cache Misses...100,068 (0%)	
Total LL I-Cache Misses...422 (0%)	
Total L1 D-Cache Misses...4,346,335 (0%)	
Total LL D-Cache Misses...7,724 (0%)	

 Ir  I1mr ILmr  Dr  D1mr DLmr  Dw  D1mw DLmw
0.25 0.00 0.02 0.09 0.00 0.01 0.11 0.05 0.06 ???:collections::hash::table::make_hash
-----------------------------------------------------------------------
0.19 0.00 0.03 0.13 0.00 0.00 0.11 0.01 0.01 ???:hash::sip::SipHasher.Hasher::write
-----------------------------------------------------------------------
0.07 0.00 0.01 0.13 0.06 0.01 0.07 0.00 0.00 ???:expr..Expr::drop.9629
-----------------------------------------------------------------------
0.07 0.00 0.01 0.10 0.08 0.00 0.12 0.03 0.04 ???:collections::hash::map::HashMapK$C$V$C$S::get
-----------------------------------------------------------------------
0.07 0.00 0.03 0.09 0.01 0.00 0.03 0.00 0.00 ???:sdallocx
-----------------------------------------------------------------------
0.07 0.02 0.03 0.11 0.02 0.01 0.04 0.01 0.01 ???:mallocx
-----------------------------------------------------------------------
0.05 0.06 0.20 0.06 0.29 0.21 0.09 0.25 0.16 ???:eval::eval
-----------------------------------------------------------------------
0.03 0.00 0.03 0.04 0.14 0.15 0.09 0.13 0.09 ???:util::f_foldr
-----------------------------------------------------------------------
0.03 0.02 0.05 0.04 0.05 0.00 0.02 0.06 0.05 ???:eval::feval
-----------------------------------------------------------------------
0.03 0.00 0.02 0.03 0.00 0.01 0.08 0.05 0.09 ???:util::kcons
-----------------------------------------------------------------------

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やはりハッシュテーブルが酷いですが同じコードを繰り返し実行するタイプのマイクロベンチマークなのでキャッシュミスは少ないです。&lt;/p&gt;

&lt;p&gt;因みにそれぞれの列はこういう意味だそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ir -&amp;gt; Total Instructions&lt;/li&gt;
&lt;li&gt;I1mr -&amp;gt; Level 1 I-Cache misses&lt;/li&gt;
&lt;li&gt;ILmr -&amp;gt; Last Level I-Cache misses&lt;/li&gt;
&lt;li&gt;Dr -&amp;gt; Total Memory Reads&lt;/li&gt;
&lt;li&gt;D1mr -&amp;gt; Level 1 D-Cache read misses&lt;/li&gt;
&lt;li&gt;DLmr -&amp;gt; Last Level D-cache read misses&lt;/li&gt;
&lt;li&gt;Dw -&amp;gt; Total Memory Writes&lt;/li&gt;
&lt;li&gt;D1mw -&amp;gt; Level 1 D-Cache write misses&lt;/li&gt;
&lt;li&gt;DLmw -&amp;gt; Last Level D-cache write misses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;--sort&lt;/code&gt; オプションでどの列をみるのか指定出来るようです。全メモリアクセスのミスレートを見てみましょうか。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cargo profiler cachegrind --bin ./target/release/kappa_lisp -n 10 --sort dr


Profiling kappa_lisp with cachegrind...

Total Memory Accesses...800,082,686	

Total L1 I-Cache Misses...100,083 (0%)	
Total LL I-Cache Misses...420 (0%)	
Total L1 D-Cache Misses...4,321,895 (0%)	
Total LL D-Cache Misses...7,721 (0%)	

 Ir  I1mr ILmr  Dr  D1mr DLmr  Dw  D1mw DLmw
0.19 0.00 0.03 0.13 0.00 0.00 0.11 0.01 0.01 ???:hash::sip::SipHasher.Hasher::write
-----------------------------------------------------------------------
0.07 0.00 0.01 0.13 0.06 0.01 0.07 0.00 0.00 ???:expr..Expr::drop.9629
-----------------------------------------------------------------------
0.07 0.02 0.03 0.11 0.02 0.01 0.04 0.01 0.01 ???:mallocx
-----------------------------------------------------------------------
0.07 0.00 0.01 0.10 0.08 0.00 0.12 0.03 0.04 ???:collections::hash::map::HashMapK$C$V$C$S::get
-----------------------------------------------------------------------
0.25 0.00 0.02 0.09 0.00 0.01 0.11 0.05 0.06 ???:collections::hash::table::make_hash
-----------------------------------------------------------------------
0.07 0.00 0.03 0.09 0.01 0.00 0.03 0.00 0.00 ???:sdallocx
-----------------------------------------------------------------------
0.05 0.06 0.20 0.06 0.29 0.21 0.09 0.25 0.16 ???:eval::eval
-----------------------------------------------------------------------
0.03 0.00 0.03 0.04 0.14 0.15 0.09 0.13 0.09 ???:util::f_foldr
-----------------------------------------------------------------------
0.03 0.02 0.05 0.04 0.04 0.00 0.02 0.06 0.05 ???:eval::feval
-----------------------------------------------------------------------
0.03 0.00 0.02 0.03 0.00 0.01 0.08 0.05 0.09 ???:util::kcons
-----------------------------------------------------------------------

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やっぱりハッシュテーブル関連が重い…。&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;私にとっては薮蛇にκLispの実装の筋が悪いことが分かったりしてショックでしたがまあ、簡単にプロファイルをとれるツールを紹介しました。&lt;/p&gt;

&lt;p&gt;Rustで高速なアプリケーションを作りたい方、利用してみては如何でしょうか。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RustでベアメタルRaspberry PiのLチカ</title>
      <link>/blog/2016/05/04/rustdebeametaruraspberry_pinolchika</link>
      <pubDate>Wed, 04 May 2016 11:43:26 +0900</pubDate>
      
      <guid>/blog/2016/05/04/rustdebeametaruraspberry_pinolchika</guid>
      <description>&lt;p&gt;κeenです。GWもくもく会で机の片隅で埃被ってたRSPiのベアメタルを触ってみたのでその成果報告を。
ベアメタルについて知らない人でも読めるように書きます。そしてアセンブラもCも出てきませんし、半田付けも必要ありません。
Rustしか使いません。&lt;/p&gt;

&lt;p&gt;Rustは分かるけどLチカは全く知らない、けど興味のある方は是非読んでみて下さい。
&lt;/p&gt;

&lt;h1 id=&#34;ベアメタルって&#34;&gt;ベアメタルって？&lt;/h1&gt;

&lt;p&gt;普段我々が使っているパソコンはOSの上で動いています。
OSはざっくりいうとハードウェアへのアクセスを抽象化し、プロセスという単位でプログラムの実行を分離します。
ベアメタルはそのOSがない状態、ハードウェアの初期化やプロトコルなどは自分でやるしメモリ管理だとかも自分でやる環境です。
丁度ハードウェアが抽象化されてなくて機械が生で見えているようなのでこう呼ぶようです。&lt;/p&gt;

&lt;p&gt;OSがないのは中々イメージつきづらいですが、標準出力なんてものはないのでHello Worldも動きませんしメモリも仮想化されていないのでmallocも発効出来ません。
さらにはスタックとヒープみたいな区別もOSが与えてくれるものなので、自分で作らない限りスタック領域も使えません。
自分で書いたプログラムが唯一走るプログラムなのでプロセスの感覚でプログラムを終了させてはいけません。&lt;/p&gt;

&lt;p&gt;なんでそんな環境でプログラムしたいかというといくつかモチベーションがありそうです。1つはOSそのものを作ってみたい人が練習がてら。
もう1つにはOSが動かないような小さな環境だとそれしか選択肢がない。&lt;/p&gt;

&lt;p&gt;RSPiの場合はOSが動くので選択肢がないという訳ではないのですが私はそういう小さなデバイスを持っていないので実験台としてRSPiを使いました。&lt;/p&gt;

&lt;p&gt;さて、Hello Worldすら動かないシステムでの入門的なプログラムは信号のON/OFFを切り替えてあげるだけで出来るLEDをチカチカさせるプログラムという訳です。&lt;/p&gt;

&lt;h1 id=&#34;raspberry-pi&#34;&gt;Raspberry Pi&lt;/h1&gt;

&lt;p&gt;言わずと知れた名刺サイズの小型コンピュータ、Raspberry Piです。
Raspberry Piと一口にいっても&lt;a href=&#34;https://ja.wikipedia.org/wiki/Raspberry_Pi&#34;&gt;色々種類がある&lt;/a&gt;のですが、私が持っているのはRaspberry Pi 1 Model Bの後期モデルです(Raspberry Pi 1 Model Bは販売途中で仕様がアップグレードしてメモリが増えた)。&lt;/p&gt;

&lt;p&gt;ARMv6アーキテクチャのチップ(ARM1176JZF-S)で動いていて、SDカードから起動します。特別なライターなどは必要なく、PCからSDカードに書き込んでRSPiに挿して電源を繋ぐだけで簡単に起動出来る訳です。
さらに配線とかが必要なGPIOに加えてボードにLEDもついているので物理の知識必要なくて今回のようにLチカだけをやりたいなら手軽に遊べます。&lt;/p&gt;

&lt;h1 id=&#34;準備&#34;&gt;準備&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi 1 Model B&lt;/li&gt;
&lt;li&gt;USB - micro USBケーブル(Raspberry Piへの給電用)&lt;/li&gt;
&lt;li&gt;SDカード(FAT32でフォーマットしておく)&lt;/li&gt;
&lt;li&gt;GCCのARM向けクロスコンパイラ(後述)&lt;/li&gt;
&lt;li&gt;RustのARM向けクロスコンパイラ(後述)&lt;/li&gt;
&lt;li&gt;ブートローダ(後述)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gccのクロスコンパイラ&#34;&gt;GCCのクロスコンパイラ&lt;/h2&gt;

&lt;p&gt;GCCのクロスコンパイラは&lt;a href=&#34;https://launchpad.net/gcc-arm-embedded&#34;&gt;GCC ARM Embedded in Launchpad&lt;/a&gt;というプロジェクトがあるので簡単に用意出来ます。Ubuntu環境なら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt install gcc-arm-linux-gnueabihf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でインストールできます。どうやらRSPiには不動小数点数計算ユニット(FPU)がついているようなのでhf(Hardware Float)で大丈夫みたいです。
HomebrewやPacmanにもパッケージはあるようです。&lt;/p&gt;

&lt;h2 id=&#34;rustのクロスコンパイラ&#34;&gt;Rustのクロスコンパイラ&lt;/h2&gt;

&lt;p&gt;次にRustのクロスコンパイラですが、&lt;a href=&#34;https://github.com/brson/multirust&#34;&gt;multirust&lt;/a&gt;を使うと簡単にインストール出来ます。今回はunstable機能も使うのでnightlyコンパイラを使います。
因みに私が昔インストールしたmultirustだと古くて以下のコマンドが実行出来なかったので出来ない方はmultirustをアップデートして試してみて下さい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# インストール可能なターゲットを確認
$ multirust list-available-targets nightly
aarch64-apple-ios
aarch64-unknown-linux-gnu
arm-linux-androideabi
arm-unknown-linux-gnueabi
arm-unknown-linux-gnueabihf
armv7-apple-ios
armv7-unknown-linux-gnueabihf
armv7s-apple-ios
i386-apple-ios
i586-pc-windows-msvc
i586-unknown-linux-gnu
i686-apple-darwin
i686-pc-windows-gnu
i686-pc-windows-msvc
i686-unknown-linux-gnu
mips-unknown-linux-gnu
mips-unknown-linux-musl
mipsel-unknown-linux-gnu
mipsel-unknown-linux-musl
powerpc-unknown-linux-gnu
powerpc64-unknown-linux-gnu
powerpc64le-unknown-linux-gnu
x86_64-apple-darwin
x86_64-apple-ios
x86_64-pc-windows-gnu
x86_64-pc-windows-msvc
x86_64-rumprun-netbsd
x86_64-unknown-freebsd
x86_64-unknown-linux-gnu
x86_64-unknown-linux-musl
x86_64-unknown-netbsd
# インストール
$ multirust add-target nightly arm-unknown-linux-gnueabihf
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ブートローダ&#34;&gt;ブートローダ&lt;/h2&gt;

&lt;p&gt;まず、ブートローダが何をするものなのかから説明しましょう。興味がない人は飛ばして下さい。&lt;/p&gt;

&lt;h3 id=&#34;説明&#34;&gt;説明&lt;/h3&gt;

&lt;p&gt;Raspberry PiにはCPUとGPUが両方ついているのでやや面倒です。&lt;/p&gt;

&lt;p&gt;CPU/GPUは電源がONになってすぐは何の機能もない、ただの命令を実行する機械です。メモリにすらアクセス出来ません。RSPiにSDカードを挿したところでSDカードのプロトコルを喋らないとそこに書いてあるプログラムが読めません。
SDカードのプロトコルを喋るプログラム(BIOS)は、RSPiに組込みで入っています。これは普段我々が使うメモリ(RAM)とは別の場所(ROM)に入っています。&lt;/p&gt;

&lt;p&gt;最初はGPUがそいつを起動し、(この時点ではCPUは起動してない)SDカードを読みにいきます。名前決め打ちでbootcode.binという名前のプログラムを、RAMではなくGPU(のL2キャッシュ)に直接ロードして実行します(メモリはまだ使えません)。
GPUのキャッシュは非常に小さいのでbootcode.binは小さなプログラムでないといけません。&lt;/p&gt;

&lt;p&gt;bootcode.binはRAMを有効にしてstart.elfをRAMに読み込み、GPUがそれを実行します。start.elfはRAMを使えるのである程度大きくても構いません。&lt;/p&gt;

&lt;p&gt;start.elfはconfig.txt、cmdline.txtとkernel.imgを読みにいき、kernel.imgを0x8000番地のメモリに配置します。そしてconfgやcmdlineに基いてCPUを設定してkernel.imgに引数を渡しつつ実行します。&lt;/p&gt;

&lt;p&gt;このkernel.imgは普段はLinuxカーネルなどのカーネル、今回は我々が作るLチカのプログラムです。&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&#34;http://kernhack.hatenablog.com/entry/2014/01/11/102237&#34;&gt;Raspberry Piのブートプロセスメモ - φ(・・*)ゞ ｳｰﾝ　カーネルとか弄ったりのメモ&lt;/a&gt;
昔はloader.binもあったようですが今はなくて大丈夫なようです。&lt;/p&gt;

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;bootcode.bin, start.elfは&lt;a href=&#34;https://github.com/raspberrypi/firmware/tree/master/boot&#34;&gt;こちら&lt;/a&gt;から入手出来ます。config.txtとcmdline.txtはなくていいようです。&lt;/p&gt;

&lt;p&gt;こいつらはSDカードに放り込んでおきます。&lt;/p&gt;

&lt;h1 id=&#34;環境確認&#34;&gt;環境確認&lt;/h1&gt;

&lt;p&gt;まずはコンパイラツールチェーンが正常に動くか確認しましょう。
以下にrustコードを。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#![feature(lang_items, asm)]
#![crate_type = &amp;quot;staticlib&amp;quot;]
#![no_std]

#[no_mangle]
pub extern fn main() {
    loop{}
}


#[no_mangle]
pub extern fn _sbrk() {}
#[no_mangle]
pub extern fn _exit() {}
#[no_mangle]
pub extern fn _kill() {}
#[no_mangle]
pub extern fn _getpid() {}


#[lang = &amp;quot;eh_personality&amp;quot;]
extern fn eh_personality() {}

#[lang = &amp;quot;panic_fmt&amp;quot;]
extern fn panic_fmt() {}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さて、今回作るのは &lt;code&gt;#![crate_type = &amp;quot;staticlib&amp;quot;]&lt;/code&gt; を使って静的リンクライブラリを作れと指定しています。そして &lt;code&gt;#[no_mangle] pub extern fn main() {&lt;/code&gt; でC言語と同じような規則でmain関数を定義する(アセンブラからmain関数を実行出来るようにする)と指定しています。
ベアメタル環境なのでファイルだとか諸々のものはなく、stdを使えないので &lt;code&gt;#![no_std]&lt;/code&gt; を指定してstdを使わずにcoreライブラリを使うようにしました。その代わり&lt;code&gt;#[lang = &amp;quot;eh_personality&amp;quot;] extern fn eh_personality() {}&lt;/code&gt; と &lt;code&gt;#[lang = &amp;quot;panic_fmt&amp;quot;] extern fn panic_fmt() {}&lt;/code&gt; を実装してあげないといけません(この実装はあまりよろしくないのですが今回はとりあえずコンパイルが通るようにということでこうしてます)。&lt;/p&gt;

&lt;p&gt;そしてよく分かってないのですがRustが &lt;code&gt;_sbrk&lt;/code&gt; 、 &lt;code&gt;_exit&lt;/code&gt; 、 &lt;code&gt;_kill&lt;/code&gt; 、 &lt;code&gt;_getpid&lt;/code&gt; のシンボルを捜しにいくのでとりあえずスタブを挿してます。&lt;/p&gt;

&lt;p&gt;no_mangle, no_std, lang_itemsについて詳しくは&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/&#34;&gt;ドキュメント&lt;/a&gt;をご覧下さい。
&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/ffi.html&#34;&gt;他言語関数インターフェイス&lt;/a&gt;、&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/no-stdlib.html&#34;&gt;No stdlib&lt;/a&gt;、&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/lang-items.html&#34;&gt;言語アイテム&lt;/a&gt;あたりが参考になるかと思います。&lt;/p&gt;

&lt;p&gt;以下のようにコンパイル出来ればRustはOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rustc --target arm-unknown-linux-gnueabihf --emit=obj test.rs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に、elfファイルを作ります。これは以下のコマンドで出来ます。Cのクロスコンパイラを使っていますね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ arm-none-eabi-gcc -O2 -mfpu=vfp -mfloat-abi=hard -march=armv6zk -mtune=arm1176jzf-s -nostartfiles test.o -o kernel.elf
/usr/lib/gcc/arm-none-eabi/4.9.3/../../../arm-none-eabi/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000008000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-mで始まるオプションはRaspberry Piのチップ固有の指定、 -nostartfiles はベアメアルで動かすのに必要な指定ですね。&lt;/p&gt;

&lt;p&gt;最後にelfファイルからimgファイルを作ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;arm-none-eabi-objcopy kernel.elf -O binary kernel.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;私もよく分かってないのですがobjファイルが不完全なバイナリファイル、elfが完全なバイナリファイル、imgがelfを実際のメモリに展開した時のものそのままなんですかね。
逆にいうとOSのない環境で動かすには生のimgが欲しいけどそれを作るのは難しいから一旦elfを作ってそこからimgを生成している？&lt;/p&gt;

&lt;p&gt;さて、とりあえずここまで来れば環境は整いました。あとはプログラムを書くだけです。&lt;/p&gt;

&lt;h1 id=&#34;lチカ&#34;&gt;Lチカ&lt;/h1&gt;

&lt;p&gt;RSPiにくっついているLEDはデバイスとしてはGPIOのように見えるみたいです。
そしてGPIOはMemory Mapped IO、特定の位置のメモリを読み書きすることでデバイスをいじれるようになってるみたいです。
このセットアップは誰がやったんだって気になりますがBIOSなんですかね。&lt;/p&gt;

&lt;p&gt;さて、この「特定の位置のメモリ」ですが、Raspberry Pi 1だと &lt;code&gt;0x20200000&lt;/code&gt; から始まるアドレス、のようです。2だと &lt;code&gt;3F200000&lt;/code&gt; のよう。&lt;/p&gt;

&lt;p&gt;そして0x20200000からいくつかの32bitレジスタが配列のように並んでいる訳ですがこれまたRSPi+やRSP 2とRSPi 1はLEDに対応するレジスタがやや違うようです。&lt;/p&gt;

&lt;p&gt;面倒なのでコピペで済ませると(私はCのコードからRustに移植しました。)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;// Raspberry Pi2
//pub const GPIO_BASE: u32 = 0x3F200000;
// other
pub const GPIO_BASE: u32 = 0x20200000;



// Raspberrp Pi+ or Raspberry Pi2
//pub const LED_GPFSEL: isize   = GPIO_GPFSEL4;
//pub const LED_GPFBIT: i32     = 21;
//pub const LED_GPSET: isize    = GPIO_GPSET1;
//pub const LED_GPCLR: isize    = GPIO_GPCLR1;
//pub const LED_GPIO_BIT: isize = 15;
//  other
pub const LED_GPFSEL: isize = GPIO_GPFSEL1;
pub const LED_GPFBIT: i32 = 18;
pub const LED_GPCLR: isize = GPIO_GPCLR0;
pub const LED_GPSET: isize = GPIO_GPSET0;
pub const LED_GPIO_BIT: i32 = 16;

pub const GPIO_GPFSEL0: isize   = 0;
pub const GPIO_GPFSEL1: isize   = 1;
pub const GPIO_GPFSEL2: isize   = 2;
pub const GPIO_GPFSEL3: isize   = 3;
pub const GPIO_GPFSEL4: isize   = 4;
pub const GPIO_GPFSEL5: isize   = 5;
pub const GPIO_GPSET0: isize    = 7;
pub const GPIO_GPSET1: isize    = 8;
pub const GPIO_GPCLR0: isize    = 10;
pub const GPIO_GPCLR1: isize    = 11;
pub const GPIO_GPLEV0: isize    = 13;
pub const GPIO_GPLEV1: isize    = 14;
pub const GPIO_GPEDS0: isize    = 16;
pub const GPIO_GPEDS1: isize    = 17;
pub const GPIO_GPREN0: isize    = 19;
pub const GPIO_GPREN1: isize    = 20;
pub const GPIO_GPFEN0: isize    = 22;
pub const GPIO_GPFEN1: isize    = 23;
pub const GPIO_GPHEN0: isize    = 25;
pub const GPIO_GPHEN1: isize    = 26;
pub const GPIO_GPLEN0: isize    = 28;
pub const GPIO_GPLEN1: isize    = 29;
pub const GPIO_GPAREN0: isize   = 31;
pub const GPIO_GPAREN1: isize   = 32;
pub const GPIO_GPAFEN0: isize   = 34;
pub const GPIO_GPAFEN1: isize   = 35;
pub const GPIO_GPPUD: isize     = 37;
pub const GPIO_GPPUDCLK0: isize = 38;
pub const GPIO_GPPUDCLK1: isize = 39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうなります(cfgを使ってないです。ごめんなさい。)。&lt;/p&gt;

&lt;p&gt;次にLチカですが、
LEDに対応するGPIOをwriteに初期化する→ループ{LEDに対応するGPIOをセットする → スリープ → LEDに対応するGPIOをクリアする → スリープ}&lt;/p&gt;

&lt;p&gt;のプログラムを書きます。&lt;/p&gt;

&lt;p&gt;色々試したのですが簡単なプログラムだと最適化で消えてしまうので消えないように工夫する必要があります。&lt;/p&gt;

&lt;p&gt;スリープはとりあえずタイマーを使わずに空ループを回すのですが、ループの中身は空インラインアセンブラを使うと消えないようです。&lt;/p&gt;

&lt;p&gt;また、メモリへの書き込みは&lt;a href=&#34;https://doc.rust-lang.org/core/intrinsics/&#34;&gt;intrinsic&lt;/a&gt;の&lt;a href=&#34;https://doc.rust-lang.org/core/intrinsics/fn.volatile_store.html&#34;&gt;volatile_store&lt;/a&gt;を使います。&lt;/p&gt;

&lt;p&gt;ということでコードは以下です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#![feature(lang_items, asm, core_intrinsics)]
#![crate_type = &amp;quot;staticlib&amp;quot;]
#![no_std]

use core::intrinsics::volatile_store;

// Raspberry Pi2
//pub const GPIO_BASE: u32 = 0x3F200000;
// other
pub const GPIO_BASE: u32 = 0x20200000;



// Raspberrp Pi+ or Raspberry Pi2
//pub const LED_GPFSEL: isize   = GPIO_GPFSEL4;
//pub const LED_GPFBIT: i32     = 21;
//pub const LED_GPSET: isize    = GPIO_GPSET1;
//pub const LED_GPCLR: isize    = GPIO_GPCLR1;
//pub const LED_GPIO_BIT: isize = 15;
//  other
pub const LED_GPFSEL: isize = GPIO_GPFSEL1;
pub const LED_GPFBIT: i32 = 18;
pub const LED_GPCLR: isize = GPIO_GPCLR0;
pub const LED_GPSET: isize = GPIO_GPSET0;
pub const LED_GPIO_BIT: i32 = 16;

pub const GPIO_GPFSEL0: isize   = 0;
pub const GPIO_GPFSEL1: isize   = 1;
pub const GPIO_GPFSEL2: isize   = 2;
pub const GPIO_GPFSEL3: isize   = 3;
pub const GPIO_GPFSEL4: isize   = 4;
pub const GPIO_GPFSEL5: isize   = 5;
pub const GPIO_GPSET0: isize    = 7;
pub const GPIO_GPSET1: isize    = 8;
pub const GPIO_GPCLR0: isize    = 10;
pub const GPIO_GPCLR1: isize    = 11;
pub const GPIO_GPLEV0: isize    = 13;
pub const GPIO_GPLEV1: isize    = 14;
pub const GPIO_GPEDS0: isize    = 16;
pub const GPIO_GPEDS1: isize    = 17;
pub const GPIO_GPREN0: isize    = 19;
pub const GPIO_GPREN1: isize    = 20;
pub const GPIO_GPFEN0: isize    = 22;
pub const GPIO_GPFEN1: isize    = 23;
pub const GPIO_GPHEN0: isize    = 25;
pub const GPIO_GPHEN1: isize    = 26;
pub const GPIO_GPLEN0: isize    = 28;
pub const GPIO_GPLEN1: isize    = 29;
pub const GPIO_GPAREN0: isize   = 31;
pub const GPIO_GPAREN1: isize   = 32;
pub const GPIO_GPAFEN0: isize   = 34;
pub const GPIO_GPAFEN1: isize   = 35;
pub const GPIO_GPPUD: isize     = 37;
pub const GPIO_GPPUDCLK0: isize = 38;
pub const GPIO_GPPUDCLK1: isize = 39;

#[no_mangle]
pub extern fn main() {
    // GPIO_BASEを符号無し32bit整数を指すポインタにキャストする
    let gpio = GPIO_BASE as *const u32;
    // offsetを使うことでCの配列のようにポインタの何番地か先のメモリを指せる
    let init   = unsafe {gpio.offset(LED_GPFSEL) as *mut u32};
    let led_on = unsafe { gpio.offset(LED_GPSET) as *mut u32 };
    let led_off = unsafe { gpio.offset(LED_GPCLR) as *mut u32 };

    // LEDのGPIOを書き込みに設定
    unsafe{
        volatile_store(init, *(init) | 1 &amp;lt;&amp;lt; LED_GPFBIT);
    }

    loop {
        // LEDをOFFにする
        unsafe {
            volatile_store(led_off, 1 &amp;lt;&amp;lt; LED_GPIO_BIT);
        }
        // 適当な長さbusy loopで時間を空ける
        for _ in 1..500000 {
            unsafe { asm!(&amp;quot;&amp;quot;); }
        }

        // LEDをONにする
        unsafe {
            volatile_store(led_on, 1 &amp;lt;&amp;lt; LED_GPIO_BIT);
        }
        // また適当な長さ空ける
        for _ in 1..500000 {
            unsafe { asm!(&amp;quot;&amp;quot;); }
        }
    }
}


#[no_mangle]
pub extern fn _sbrk() {}
#[no_mangle]
pub extern fn _exit() {}
#[no_mangle]
pub extern fn _kill() {}
#[no_mangle]
pub extern fn _getpid() {}


#[lang = &amp;quot;eh_personality&amp;quot;]
extern fn eh_personality() {}

#[lang = &amp;quot;panic_fmt&amp;quot;]
extern fn panic_fmt() {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをkernel.rsとして保存し、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rustc  -O --target arm-unknown-linux-gnueabihf --emit=obj kernel.rs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でコンパイルします。どうやら使っていないのにrustが余計なシンボルを付けるようで、-Oをつけてそいつらをoptimize outさせないとコンパイルが通りませんでした。
この辺、コンパイラのバージョンに依存しそうで怖いですね。&lt;/p&gt;

&lt;p&gt;さて、あとは先程と同じく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ arm-none-eabi-gcc -O2 -mfpu=vfp -mfloat-abi=hard -march=armv6zk -mtune=arm1176jzf-s -nostartfiles kernel.o -o kernel.elf
$ arm-none-eabi-objcopy kernel.elf -O binary kernel.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でイメージを作ってあげます。&lt;/p&gt;

&lt;p&gt;そしたらこのkernel.imgをSDカードに放り込みます。&lt;/p&gt;

&lt;p&gt;SDカードの中身はこうなっている筈です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls  /media/kim/6F6F-DCD9
bootcode.bin  kernel.img  start.elf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このSDカードをRSPiに挿して、電源を繋いであげるとLEDがすごい勢いでチカチカする筈です。そうなったら成功です。おめでとうございます。&lt;/p&gt;

&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;

&lt;p&gt;今回のコードは&lt;a href=&#34;https://github.com/KeenS/RaspPi&#34;&gt;ここ&lt;/a&gt;に置いておきます。とはいってもそのままではなくてCargo化したりMakefileを書いたり色々しています。&lt;/p&gt;

&lt;p&gt;今回の作業をするにあたって参考にした資料のURLを挙げておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.valvers.com/open-software/raspberry-pi/step01-bare-metal-programming-in-cpt1/&#34;&gt;Step01 – Bare Metal Programming in C Pt1 – Valvers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.valvers.com/open-software/raspberry-pi/step02-bare-metal-programming-in-c-pt2/&#34;&gt;Step02 – Bare Metal Programming in C Pt2 – Valvers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.thiago.me/raspberry-pi-bare-metal-programming-with-rust/&#34;&gt;Raspberry Pi Bare Metal Programming with Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.bobuhiro11.net/2014/01-13-baremetal.html&#34;&gt;piでベアメタルプログラミング - bobuhiro11&amp;rsquo;s diary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Rustとは何か。どんな言語か。</title>
      <link>/slide/Rusttohananika_donnagengoka_/</link>
      <pubDate>Sun, 06 Mar 2016 05:27:39 +0900</pubDate>
      
      <guid>/slide/Rusttohananika_donnagengoka_/</guid>
      <description>&lt;section data-markdown
    data-separator=&#34;\n===\n&#34;
    data-vertical=&#34;\n---\n&#34;
    data-notes=&#34;^Note:&#34;&gt;
&lt;script type=&#34;text/template&#34;&gt;
# Rustとは何か。どんな言語か。
----------------------
[異種プログラミング言語格闘勉強会](http://kbkz.connpass.com/event/26677/)  
2016-03-20


&lt;!-- .slide: class=&#34;center&#34; --&gt;
===
# About Me
---------
![κeenのアイコン](/images/icon.png) &lt;!-- .element: style=&#34;position:absolute;right:0;z-index:-1&#34; --&gt;

 + κeen
 + [@blackenedgold](https://twitter.com/blackenedgold)
 + Github: [KeenS](https://github.com/KeenS)
 + サイバーエージェントのエンジニア
 + Lisp, ML, Rust, Shell Scriptあたりを書きます

===
# Rustって?
----------

* システムプログラミング言語
* だけど函数型言語から影響を受けた
* 安全かつ高速
* ゼロコスト抽象化

===
## システムプログラミング言語
---------------------------

* スレッドはネイティブ、Cとの相互呼び出し、小さなバイナリサイズ
* ゲームエンジンとか作れる([piston](https://github.com/PistonDevelopers/piston))
* レンダリングエンジンとか作れる([Servo](https://github.com/servo/servo))
* Lチカとか出来る
* OSとか作れる([Redox](https://github.com/redox-os/redox))

===
## 函数型言語的からの影響
-----------------------

最近ではめずらしくなくなった


* デフォルトイミュータブル
* 代数的データ型
* コンビネータ
* トレイト (型クラス)

===
## 安全かつ高速
--------------

* データ競合が起きない
  + 所有権システム
  + だいたいコンパイル時Read Writeロック
  + Read only参照複数 or Write可能参照1つ
* LLVMベースの強力な最適化
* スレッド周辺のAPIが揃ってる

===
## ゼロコスト抽象化
------------------
省略

* [Rustのゼロコスト抽象化 | κeenのHappy Hacκing Blog](http://keens.github.io/blog/2016/03/01/rustnozerokosutochuushouka/)

===
# Rustの誤解
-----------

* 安定してないって聞いたよ
* 函数型言語ってホント?
* GCがなくて大丈夫?
* 継承がなくて大丈夫?

===
## 安定してないって聞いたよ

* 1.0以前の話
* 1.0(2015-05以降)はAPIの変更がルール化された
* 新規APIのstablizeはあれどdeprecateはまれ

===
## 函数型言語ってホント?

* 函数型言語の機能をつまみぐいしてるだけ
* 標準ライブラリとかはバリバリ手続的
* Lispよりも函数型言語っぽくない。
* とはいえ抽象力は高いのでそこまで煩雑にはならない

===
## GCがなくて大丈夫?

* GCはなくてもメモリ管理は自動でする
* コンパイル時にメモリ管理
  + コンパイラが必要なところにmalloc/freeを挟むイメージ
* むしろメモリ以外(fd、ロックなど)も自動管理
  + GCがある言語よりリソース管理の自動化が徹底してる
* [リージョンについて | κeenのHappy Hacκing Blog](http://keens.github.io/blog/2015/12/09/ri_jonnitsuite/)

===
## 継承がなくて大丈夫?

* むしろ継承必要？インターフェースだけでよくない？
* Rustはデータ型とメソッドを分離するので継承のメリットそんなにない
  + トレイトが強力ともいう
* 逆にサブタイプ関係による複雑さの上昇のデメリットが多い
  + 3回以上継承してるの全部把握出来るの？
* ジェネリクスとかはあるよ

===
# Rustをとりまく環境
-------------------

* racer/rustfmt
* Cargo
* crates.io
* [Rust Playground](https://play.rust-lang.org/)
* The Rust Programming Language


===
# racer/rustfmt
---------------

* racerがコーディング支援ツール
  + 補完
  + 定義元ジャンプ
  + 型情報
  + 各種エディタプラグインあり
* rustfmtがコードフォーマッタ
  + エディタプラグインあり
  + ビルドツール連携あり

===
# Cargo
-------

* Rustのビルドツール兼パッケージマネージャ
* これだけ覚えとけば困らない

===
# crates.io
-----------

* Rustパッケージのセントラルレポジトリ
* 必ずビルドが通るような工夫
  + cargo yank
  + 同じライブラリの違うバージョンがいても大丈夫
* Cargoとの連携
* Cargoからpublishも可能

===
# [Rust Playground](https://play.rust-lang.org/)
---------------------------------------

* webからRustを試せる
* とりあえず試すと色々分かる
  + 所有権難しいとか

===
# [The Rust Programming Language](https://doc.rust-lang.org/book/)
------------------------------

* Rustの入門用ドキュメント
* とりあえずこれ読めば始められる
* [和訳版](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/)もある
  + [GitHub](https://github.com/rust-lang-ja/the-rust-programming-language-ja)で作業中
  + これの宣伝しに来ただけ
* 1.6ほぼ終わり、1.7はまだ

===
# ライブラリ紹介
----------------
## MIO

* [mio](https://github.com/carllerche/mio)
* 低レベルな非同期IOライブラリ
  + libuvやlibev2相当
  + イベントスレッドではなくイベントループ
* これを純Rustで実装
* つまり(比較的)高水準なAPIで使える
* 色んなライブラリの下地になっている

===
# ライブラリ紹介
----------------
## diesel

* [diesel](https://github.com/sgrif/diesel)
* ORM &amp; クエリビルダ
  + mioとはうってかわって高水準なライブラリ
* `infer_schema!(dotenv!(&#34;DATABASE_URL&#34;));` でコンパイル時に
  + DBにアクセスしてスキーマ情報抜いて
  + コード生成
* モデルもCRUDでちゃんと使い分けている

===
# 所有権難しい
--------------
下記のコードは動かない。

``` rust
fn main(){
    let hello = &#34;Hello, &#34;.to_owned();
    let world = &#34;World!&#34;;
    let hello_world =  hello + world;
    println!(&#34;{}&#34;, hello);
    println!(&#34;{}&#34;, world);
    println!(&#34;{}&#34;, hello_world);
}

```


===
# まとめ
--------

* Rustはシステムプログラミング言語だよ
* 面白い機能いっぱいあるよ
* もう「安定待ち」じゃないよ
* Try it now!



&lt;/script&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>リージョンとRustの返り値</title>
      <link>/blog/2016/03/02/ri_jontorustnokaerichi</link>
      <pubDate>Wed, 02 Mar 2016 00:05:03 +0900</pubDate>
      
      <guid>/blog/2016/03/02/ri_jontorustnokaerichi</guid>
      <description>&lt;p&gt;Rustにおいては返り値ポインタで返すよりもそのまま返して、受け取る側でポインタで受け取るかそのまま受け取るかを指定するのが良い選択肢だ、といっています。
しかし初めて見る時にはどうしてそんなことが出来るのかわからず、びっくりしますよね。
それをRustがリージョンを使ってメモリ管理をしていると分かればどうなっているのか分かったのですこしばかり。
&lt;/p&gt;

&lt;p&gt;Rustにおいては以下のように関数が値を返す時にポインタを返すコードは好ましくなく、（というかコンパイル出来ない）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn new_value() -&amp;gt; &amp;amp;BigStruct {
    &amp;amp;BigStruct{ .... }
}

let bs = new_value();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;関数が返す値はスタックに載らないような大きな値でもそのまま返して、受け取り側でヒープに保存してあげるのが良いスタイルとされています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn new_value() -&amp;gt; BigStruct {
    BigStruct{ .... }
}

let bs = Box::new(new_value());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今までの言語の感覚だとRustにおいて良いとされるスタイルは大きな値を一旦スタックに載せた後で&lt;code&gt;Box&lt;/code&gt;によって作られたヒープ領域に確保されているように見えます。&lt;/p&gt;

&lt;p&gt;これはリージョンについて理解すると動作が理解できます。&lt;/p&gt;

&lt;p&gt;リージョンについては以前のブログを参照して下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://keens.github.io/blog/2015/12/09/ri_jonnitsuite/&#34;&gt;リージョンについて | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;さて、リージョンによるメモリ管理は「メモリを確保すべき場所」が先にあって、値はそこに置かれます。
特に、関数呼び出しにおいて、関数の「返り値を確保すべき場所」は関数の外から与えます。&lt;/p&gt;

&lt;p&gt;ここまで説明したらお分りかと思いますが、&lt;code&gt;Box::new(new_value());&lt;/code&gt;というコードは&lt;code&gt;new_value()&lt;/code&gt;の返り値を保存する場所としてヒープ領域を渡していて、
関数内部でそのヒープ領域にBigStructの値を書き込んでいるのです。&lt;/p&gt;

&lt;p&gt;もやもやしていたものがスッキリしたし返り値のサイズが決まってないと関数から返せないのも分かるようになった。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのゼロコスト抽象化</title>
      <link>/blog/2016/03/01/rustnozerokosutochuushouka</link>
      <pubDate>Tue, 01 Mar 2016 23:32:12 +0900</pubDate>
      
      <guid>/blog/2016/03/01/rustnozerokosutochuushouka</guid>
      <description>&lt;p&gt;κeenです。今日Twitter上でのやりとりから少し面白いことが分かったのでそれについて。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;最近1.0が出たKotlinについて、水島さんがツイートしてました。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;nullableに対してはmapとかの高階関数を一切使えないのが痛い。 ?. でカバーできるケースは一部だけだ。zero-overhead null-safetyと唄っとるが、代わりにnullチェックお化けになるわけで、どこがzero-overheadだ &lt;a href=&#34;https://twitter.com/hashtag/kotlin_dis?src=hash&#34;&gt;#kotlin_dis&lt;/a&gt;&lt;/p&gt;&amp;mdash; 水島 宏太(Klassic作成中) (@kmizu) &lt;a href=&#34;https://twitter.com/kmizu/status/704453235277324288&#34;&gt;2016年2月29日&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;それについて私が無関係なツイートを。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;全く無関係だけどRustはOptionみたいな0-1の型をnull or valueに最適化するそうな。これこそがゼロコスト抽象かな &lt;a href=&#34;https://t.co/5Y7cBEyrMe&#34;&gt;https://t.co/5Y7cBEyrMe&lt;/a&gt;&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/704453898996547584&#34;&gt;2016年2月29日&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;これはRustのnomiconに書かれています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://doc.rust-lang.org/nomicon/repr-rust.html&#34;&gt;repr(Rust)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そうすると水島さんからお返事が。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/blackenedgold&#34;&gt;@blackenedgold&lt;/a&gt; Rust詳しくないですけど、Optionにmapとかした場合インライン展開されるんですかね？だとしたらとても理想的。&lt;/p&gt;&amp;mdash; 水島 宏太(Klassic作成中) (@kmizu) &lt;a href=&#34;https://twitter.com/kmizu/status/704455185125408768&#34;&gt;2016年2月29日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;確かにそうなると面白そう。ということで少し調べてみました。&lt;/p&gt;

&lt;p&gt;まず、上記の話をまとめると、Rustの&lt;code&gt;Option&lt;/code&gt;に対する&lt;code&gt;map&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;pub fn map&amp;lt;U, F: FnOnce(T) -&amp;gt; U&amp;gt;(self, f: F) -&amp;gt; Option&amp;lt;U&amp;gt; {
    match self {
        Some(x) =&amp;gt; Some(f(x)),
        None =&amp;gt; None,
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は&lt;code&gt;x&lt;/code&gt;がポインタ型だった時に以下と同値です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;pub fn map&amp;lt;U, F: FnOnce(T) -&amp;gt; U&amp;gt;(self, f: F) -&amp;gt; Option&amp;lt;U&amp;gt; {
    if (self != nullPointer ) {
        f(x)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに、&lt;a href=&#34;https://github.com/rust-lang/rust/blob/master/src/libcore/option.rs#L386&#34;&gt;&lt;code&gt;map&lt;/code&gt;はインライン宣言されている&lt;/a&gt;ので以下のコード&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let opt = Some(&amp;amp;v);
opt.map(|x| x + 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は以下と同値です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let opt = &amp;amp;v;
if (opt != nullPointer) {
  (|x| x + 1)(opt)
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さて、ここで無名関数がどうコンパイルされるかという問題が出てきますが、&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/closures.html&#34;&gt;クロージャのドキュメント&lt;/a&gt;によるとこういう雰囲気のコードになるらしいです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let opt = &amp;amp;v;
struct AnonymousType;

impl FnOnce&amp;lt;(&amp;amp;i32)&amp;gt; for AnonymousType {
    type Output = i32;
    fn call_once(self, args: (&amp;amp;i32)) -&amp;gt; Self::Output {
        args + 1
    }
}

if (opt != nullPointer) {
    let fn_once: FnOnce = AnonymousType;
    fn_once.call_once(opt)
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;思ったよりも複雑…。さて、問題は&lt;code&gt;let fn_once: FnOnce = AnonymousType;&lt;/code&gt;としているので一旦元の無名関数の情報が抜けてしまいそうな気がします。
となるとコンパイル時に具体的なメソッドを決定出来ないので&lt;code&gt;fn_once.call_once(opt);&lt;/code&gt;は以下のような雰囲気のコードになってしまいます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let call_once_fn = fn_once.get_call_once_fn();
call_once_fn(opt);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;毎回呼び出すべき関数の取得が入るのは面倒ですね。&lt;/p&gt;

&lt;p&gt;しかしなががらクロージャのドキュメントをよく読むと無名関数は静的ディスパッチされると書いてあります。つまり、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let call_once_fn = fn_once.get_call_once_fn();
call_once_fn(opt);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と2段ではなく&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;the_call_once_fn_of_AnonymousType(opt);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とコンパイルされ、&lt;/p&gt;

&lt;p&gt;よって&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let opt = Some(&amp;amp;v);
opt.map(|x| x + 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn the_call_once_fn_of_AnonymousType(x: &amp;amp;i32) -&amp;gt; i32 {
    x + 1
}


let opt = &amp;amp;v;
if (opt != nullPointer) {
  the_call_once_fn_of_AnonymousType(opt)
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と同値ということです。&lt;/p&gt;

&lt;p&gt;ここからは私の推測ですが、&lt;code&gt;the_call_once_fn_of_AnonymousType&lt;/code&gt;は本体が小さい上に1回しか呼ばれないのでインライン化されるのではないかと思います。
よってこの推測が正しければ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let opt = Some(&amp;amp;v);
opt.map(|x| x + 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let opt = &amp;amp;v;
if (opt != nullPointer) {
  opt + 1
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となる筈です。&lt;/p&gt;

&lt;p&gt;ゼロコスト抽象化すごい!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RustのHigher-Kinded type Trait</title>
      <link>/blog/2016/02/28/rustnohigherkinded_type_trait</link>
      <pubDate>Sun, 28 Feb 2016 14:40:59 +0900</pubDate>
      
      <guid>/blog/2016/02/28/rustnohigherkinded_type_trait</guid>
      <description>&lt;p&gt;κeenです。少し前の話になりますがRustの関連型を駆使してHigher Kinded type Trait（高階型トレイト）を実現してしまったものが出回ってたのでそれについて。
本来RustはHKTをサポートしていませんが不思議なことに実装出来てしまっているのです。&lt;/p&gt;

&lt;p&gt;HKTについて微塵も知らない方にも分かるように解説していきます。
&lt;/p&gt;

&lt;h1 id=&#34;map-可能なトレイト&#34;&gt;&lt;code&gt;map&lt;/code&gt; 可能なトレイト&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://doc.rust-lang.org/core/option/enum.Option.html#method.map&#34;&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/a&gt;、&lt;a href=&#34;https://doc.rust-lang.org/core/result/enum.Result.html#method.map&#34;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;、etc 色々なトレイトが &lt;code&gt;map&lt;/code&gt; メソッドを実装しています。&lt;/p&gt;

&lt;p&gt;それぞれ型シグネチャを抜き出してみましょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Option: &lt;code&gt;map&amp;lt;U, F: FnOnce(T) -&amp;gt; U&amp;gt;(self, f: F) -&amp;gt; Option&amp;lt;U&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Result: &lt;code&gt;map&amp;lt;U, F: FnOnce(T) -&amp;gt; U&amp;gt;(self, op: F) -&amp;gt; Result&amp;lt;U, E&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;驚く程似てますね。これを抽象化して「&lt;code&gt;map&lt;/code&gt;メソッドを持つ」トレイトを定義したくなるかもしれません。
しかしそれは簡単には書けません。何故なら&lt;code&gt;map&lt;/code&gt;はコンテナ型、つまり「型引数を取る型」に定義される型だからです。
現在のRustは「型引数を取る型」に対するジェネリクスはサポートしていません。もし書こうとするとこのようになるでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;trait Mappable&amp;lt;M&amp;lt;_&amp;gt;, T&amp;gt; where Self: M&amp;lt;T&amp;gt; {
  fn map&amp;lt;U, F: FunOnce(T) -&amp;gt; U&amp;gt;(self, f: F) -&amp;gt; M&amp;lt;U&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;M&amp;lt;_&amp;gt;&lt;/code&gt; なんて型パラメータを書くことは出来ませんし&lt;code&gt;M&amp;lt;T&amp;gt;&lt;/code&gt;や&lt;code&gt;M&amp;lt;U&amp;gt;&lt;/code&gt;も無理があります。残念ですね。&lt;/p&gt;

&lt;h1 id=&#34;iterator-との違い&#34;&gt;&lt;code&gt;Iterator&lt;/code&gt; との違い&lt;/h1&gt;

&lt;p&gt;さて、&lt;code&gt;Iterator&lt;/code&gt;にも&lt;a href=&#34;https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map&#34;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;はあります。
これこそが求めている「&lt;code&gt;.map&lt;/code&gt; 可能なトレイト」ではないのでしょうか。
これはおおよそは合っているのですがやや期待とは違う動作をします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Option&lt;/code&gt;の&lt;code&gt;map&lt;/code&gt;は不自由なく使えます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let o = Some(1);
let o = o.map(|i| i + 1);
println!(&amp;quot;{:?}&amp;quot;, o);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一方、&lt;code&gt;Vec&lt;/code&gt;は全く同じような書き方は出来ません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let v = vec![1];
let v = v.map(|i| i + 1);
println!(&amp;quot;{:?}&amp;quot;, v);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;anon&amp;gt;:3:11: 3:25 error: no method named `map` found for type `collections::vec::Vec&amp;lt;_&amp;gt;` in the current scope
&amp;lt;anon&amp;gt;:3 let v = v.map(|i| i + 1);
                   ^~~~~~~~~~~~~~
&amp;lt;anon&amp;gt;:3:11: 3:25 note: the method `map` exists but the following trait bounds were not satisfied: `collections::vec::Vec&amp;lt;_&amp;gt; : core::iter::Iterator`, `[_] : core::iter::Iterator`
error: aborting due to previous error
playpen: application terminated with error code 101
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正しくは、こうです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let v = vec![1];
let v: Vec&amp;lt;i32&amp;gt; = v.iter().map(|i| i + 1).collect();
println!(&amp;quot;{:?}&amp;quot;, v);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;色々実装上のノイズが乗っているのでやや例として不適切だったかもしれませんが、注目して欲しい部分はここです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let v: Vec&amp;lt;i32&amp;gt; = ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Vec&lt;/code&gt;から取り出したイテレータなのに&lt;code&gt;Vec&lt;/code&gt;に戻すためにわざわざ型アノテーションを書く必要があります。&lt;/p&gt;

&lt;p&gt;どうしてこうなるかというとイテレータを取り出した時点で元のコンテナ型が&lt;code&gt;Vec&amp;lt;&amp;gt;&lt;/code&gt;であるという情報が失われているからです。
これはRustの型システム上どうしても仕方のないことで、なので恐らくRustは「&lt;code&gt;map&lt;/code&gt;可能なトレイト」などを定義せず、コレクションの操作を&lt;code&gt;Iterator&lt;/code&gt;に集約しているんだと思います。
この方式はある程度は上手くいきますが&lt;code&gt;Option&lt;/code&gt;や&lt;code&gt;Result&lt;/code&gt;はIteratorになれはしてもIteratorからは作れない(2要素のイテレータからOptionは作れない)ので独自でmapメソッドを持つことになってしまいます。&lt;/p&gt;

&lt;h1 id=&#34;map-可能なトレイト-again&#34;&gt;&lt;code&gt;map&lt;/code&gt; 可能なトレイト again&lt;/h1&gt;

&lt;p&gt;先程そういうのは作れないと言ったばかりですが実はどうにかする方法がなくもないです。先程の(仮想の)定義を思い出して下さい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;trait Mappable&amp;lt;M&amp;lt;_&amp;gt;, T&amp;gt; where Self: M&amp;lt;T&amp;gt; {
  fn map&amp;lt;U, F: FunOnce(T) -&amp;gt; U&amp;gt;(self, f: F) -&amp;gt; M&amp;lt;U&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ジェネリクスになっている登場人物は&lt;code&gt;M&amp;lt;_&amp;gt;&lt;/code&gt;、&lt;code&gt;U&lt;/code&gt;、&lt;code&gt;T&lt;/code&gt; ですね。しかし&lt;code&gt;M&amp;lt;_&amp;gt;&lt;/code&gt;は実際にはそのまま使われいる訳ではなく&lt;code&gt;M&amp;lt;T&amp;gt;&lt;/code&gt;または&lt;code&gt;M&amp;lt;U&amp;gt;&lt;/code&gt;の形でのみ使われています。
では、&lt;code&gt;M&amp;lt;T&amp;gt;&lt;/code&gt;、&lt;code&gt;M&amp;lt;U&amp;gt;&lt;/code&gt;をパラメータに取るようにしてはどうでしょうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;trait Mappable&amp;lt;T, MT&amp;gt; where Self: MT {
  fn map&amp;lt;U, MU, F: FunOnce(T) -&amp;gt; U&amp;gt;(self, f: F) -&amp;gt; MU;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで出来…てません。これは欲しい、正しいもの &lt;em&gt;も&lt;/em&gt; 作れてはいるのですが正しくないものも含んでいます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;impl &amp;lt;T, MT: Option&amp;lt;T&amp;gt; Mappable&amp;lt;MT, T&amp;gt;  for Option&amp;lt;T&amp;gt; {
  fn map&amp;lt;U, MU, F: FunOnce(T) -&amp;gt; U&amp;gt;(self, f: F) -&amp;gt; MU {...}
}

let r: Result&amp;lt;String, ()&amp;gt; = Some(1).map(|i| i.to_string());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; に対する&lt;code&gt;map&lt;/code&gt;を&lt;code&gt;Result&lt;/code&gt;で受けようとしています。
これはもちろんおかしなことですが上記の型定義に従うとこういうことが出来てしまいます。
もうちょっというと上のトレイトの定義はこういう「おかしなこと」が起こるような実装をしろ、と言っている訳で、実際には実装出来ません。&lt;/p&gt;

&lt;p&gt;本来なら自由パラメータが3つなのに4つの自由パラメータを取ってしまったので不整合が起きる訳です。
では、自由パラメータを3つにして1つを従属パラメータにしてはどうでしょうか。それは&lt;a href=&#34;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/associated-types.html&#34;&gt;関連型&lt;/a&gt;を使えばRustでも出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;trait Mappable&amp;lt;T, U, MT&amp;gt; where Self: MT {
  type MU;
  fn map&amp;lt;F: FunOnce(T) -&amp;gt; U&amp;gt;(self, f: F) -&amp;gt; MU;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実は、これである程度上手くいきます。
もちろん、実際に&lt;code&gt;M&amp;lt;_&amp;gt;&lt;/code&gt;を取れるのに比べると不自由で下手をするとバグる(MUを無関係な型に定義できてしまう)可能性があるのですが、先程の4パラメータの時と比べて
トレイトが定義された時点で返す型は決まっているのでちゃんと実装出来ますし、使う時に不整合が起きることもありません。&lt;/p&gt;

&lt;h1 id=&#34;hkt&#34;&gt;HKT&lt;/h1&gt;

&lt;p&gt;さて、先の&lt;code&gt;Mappable&lt;/code&gt;の仮想定義、&lt;code&gt;map&lt;/code&gt;関数を除いて汎用的にするとこうなりますね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;trait HKT&amp;lt;T, U, MT&amp;gt; where Self: MT {
  type MU;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Self: MT&lt;/code&gt; というアノテーションをつけてますが実際には使えません。&lt;code&gt;impl&lt;/code&gt;を書くときに気をつけて実装するしかないです。なのでこうなります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;trait HKT&amp;lt;T, U&amp;gt; {
  type MU;
}

impl &amp;lt;T, U&amp;gt; HKT&amp;lt;T, U&amp;gt; for Option&amp;lt;T&amp;gt; {
  type MU = Option&amp;lt;U&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さて、こう書くとするとこういうことも出来てしまいます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;trait HKT&amp;lt;T, U&amp;gt; {
  type MU;
}

impl &amp;lt;S, T, U&amp;gt; HKT&amp;lt;T, U&amp;gt; for Option&amp;lt;S&amp;gt; {
  type MU = Option&amp;lt;U&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;T&lt;/code&gt;とは独立な&lt;code&gt;S&lt;/code&gt;に対するコンテナに対して実装できてしまうのです。「実装するときに気をつける」とはいいましたが制約を書けるなら書いた方がいいです。こうしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;trait HKT&amp;lt;U&amp;gt; {
  type T;
  type MU;
}

impl &amp;lt;T, U&amp;gt; HKT&amp;lt;U&amp;gt; for Option&amp;lt;T&amp;gt; {
  type T = T;
  type MU = Option&amp;lt;U&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで冒頭に紹介したHKTの実装になりました。&lt;/p&gt;

&lt;p&gt;逆にこのHKTの実装からMappableを定義するには、こうです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;trait Mappable&amp;lt;U&amp;gt;: HKT&amp;lt;U&amp;gt; {
  fn map&amp;lt;F: FunOnce(Self::T) -&amp;gt; U&amp;gt;(self, f: F) -&amp;gt; Self::MU;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;hktについてもっと&#34;&gt;HKTについてもっと&lt;/h1&gt;

&lt;p&gt;ようやく話題のHKTの元実装です。こちら。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/14427/af90a21b917d2892eace&#34;&gt;Higher-kinded type trait&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ずいぶんとモナモナしいですがやはり高階型を使った一番実績のある構造はこのあたりでしょう。&lt;/p&gt;

&lt;p&gt;こういうのを扱えるとプログラミングの幅が広がりますね。&lt;/p&gt;

&lt;h1 id=&#34;ノート&#34;&gt;ノート&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;モナドの話題が出ましたがRustでモナドを実現するには高階型だけでなく複数ある関数トレイトのどれを選ぶかだとかその他諸々の問題を扱う必要があるようです。
&lt;a href=&#34;https://m4rw3r.github.io/rust-and-monad-trait/&#34;&gt;Rust and the Monad trait - Not just higher kinded types · m4rw3r&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Rustのパッケージをcrates.ioに登録する</title>
      <link>/blog/2016/01/31/rustnopakke_jiwocrates_ionitourokusuru</link>
      <pubDate>Sun, 31 Jan 2016 14:43:14 +0900</pubDate>
      
      <guid>/blog/2016/01/31/rustnopakke_jiwocrates_ionitourokusuru</guid>
      <description>&lt;p&gt;κeenです。技術の話題を書くのは久し振りですね。今日初めてRustのパッケージのセントラルレポジトリ、&lt;a href=&#34;crates.io&#34;&gt;crates.io&lt;/a&gt;にパッケージを登録したのでその流れを共有します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;登録したいパッケージを用意する&#34;&gt;登録したいパッケージを用意する&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/KeenS/file_logger&#34;&gt;file_logge&lt;/a&gt;を作りました。
しばらく前に(Advent Calendar向けに)それっぽく動くところまで作って放置してたやつですね。これを整形していきます。&lt;/p&gt;

&lt;h1 id=&#34;任意-ドキュメントを生成する&#34;&gt;(任意)ドキュメントを生成する&lt;/h1&gt;

&lt;p&gt;Rustには素晴しき &lt;code&gt;cargo doc&lt;/code&gt; があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cargo doc --no-deps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でドキュメントを生成しましょう。ドキュメントを書いてないなら&lt;a href=&#34;http://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/documentation.html&#34;&gt;こちら&lt;/a&gt;を見ながら書きましょう（すいません、私の奴は全然書いてないです…）。
&lt;code&gt;target/doc&lt;/code&gt; 以下に生成されたドキュメントがあるので適当に &lt;code&gt;gh-pages&lt;/code&gt; ブランチに放り込みましょう。
尚、&lt;code&gt;--no-deps&lt;/code&gt; オプションがないと依存パッケージのドキュメントも全部生成してしまいます。&lt;/p&gt;

&lt;p&gt;求: gh-pages管理のベストプラクティス。&lt;/p&gt;

&lt;h1 id=&#34;パッケージ情報を充実させる&#34;&gt;パッケージ情報を充実させる&lt;/h1&gt;

&lt;p&gt;普段使っているままの &lt;code&gt;Cargo.toml&lt;/code&gt; だとcrates.ioで見た時に情報が全然ありません。
&lt;code&gt;[package]&lt;/code&gt; セクションに色々書きましょう。私の場合は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[package]
name = &amp;quot;file_logger&amp;quot;
version = &amp;quot;0.1.0&amp;quot;
authors = [&amp;quot;Sunrin SHIMURA (keen) &amp;lt;3han5chou7@gmail.com&amp;gt;&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;から&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[package]
name = &amp;quot;file_logger&amp;quot;
version = &amp;quot;0.1.0&amp;quot;
authors = [&amp;quot;Sunrin SHIMURA (keen) &amp;lt;3han5chou7@gmail.com&amp;gt;&amp;quot;]
repository = &amp;quot;https://github.com/KeenS/file_logger&amp;quot;
keywords = [&amp;quot;log&amp;quot;, &amp;quot;file&amp;quot;]
license-file = &amp;quot;LICENSE&amp;quot;
readme = &amp;quot;README.md&amp;quot;
description = &amp;quot;A simple logger backend that outputs to a file. \nThis is alpha state.&amp;quot;
documentation = http://KeenS.github.io/file_logger/file_logger/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;になりました。
あ、ちゃんとライセンスも明示しましょうね。&lt;/p&gt;

&lt;p&gt;どういう情報が書けるのかは&lt;a href=&#34;http://doc.crates.io/manifest.html&#34;&gt;ここ&lt;/a&gt;に載ってます。&lt;/p&gt;

&lt;h1 id=&#34;crates-ioにログインする&#34;&gt;crates.ioにログインする&lt;/h1&gt;

&lt;p&gt;[crates.io]()に行き、右上にあるGitHubログインボタンをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/crates.io/login.png&#34; alt=&#34;github login&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そうするとログイン状態になります&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/crates.io/loggedin.png&#34; alt=&#34;github logged in&#34; /&gt;&lt;/p&gt;

&lt;p&gt;メニューから&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/crates.io/menu.png&#34; alt=&#34;menu&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Account Settingsに飛ぶと下記のようにログイン用cargoコマンドが提示されるのでそのままペタっとコマンドラインに貼って終了です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/crates.io/account_settings.png&#34; alt=&#34;account settings&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;パッケージング&#34;&gt;パッケージング&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ cargo package
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;crates-ioに登録する&#34;&gt;crates.ioに登録する&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ cargo publish
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;その他&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;パッケージに含めるファイルを細かく調整したい、既にpublishしたパッケージをdeprecated的な扱いにしたいなどは&lt;a href=&#34;http://doc.crates.io/crates-io.html&#34;&gt;こちら&lt;/a&gt;にドキュメントが載っています。&lt;/p&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;crates.ioにログインしたよ&lt;/li&gt;
&lt;li&gt;Cargoを使えば簡単にパッケージを登録出来るよ&lt;/li&gt;
&lt;li&gt;Cargoってすごいね&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>