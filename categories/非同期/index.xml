<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>非同期 on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/%E9%9D%9E%E5%90%8C%E6%9C%9F/</link>
    <description>Recent content in 非同期 on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 02 Jul 2017 12:31:07 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/%E9%9D%9E%E5%90%8C%E6%9C%9F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ステートマシン抽象化としてのFuture</title>
      <link>//KeenS.github.io/blog/2017/07/02/sute_tomashinchuushoukatoshitenofuture/</link>
      <pubDate>Sun, 02 Jul 2017 12:31:07 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/07/02/sute_tomashinchuushoukatoshitenofuture/</guid>
      <description>&lt;p&gt;κeenです。最近Futureと一口にいってもいくつか種類があるなと気付いたのでRustの&lt;a href=&#34;https://github.com/alexcrichton/futures-rs&#34;&gt;&lt;code&gt;futures-rs&lt;/code&gt;&lt;/a&gt;に実装されているFutureの挙動を紐解こうと思います。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>非同期とノンブロッキングとあと何か</title>
      <link>//KeenS.github.io/blog/2017/05/19/hidoukitononburokkingutoatonanika/</link>
      <pubDate>Fri, 19 May 2017 20:51:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2017/05/19/hidoukitononburokkingutoatonanika/</guid>
      <description>&lt;p&gt;κeenです。最近同期/非同期、ブロッキング/ノンブロッキング、直接形式/継続渡し形式あたりが混乱してきたので個人的に整理します。
あくまで私個人の理解を纏めただけなので誤謬などに注意して下さい。&lt;/p&gt;

&lt;p&gt;追記: &lt;a href=&#34;https://twitter.com/tanaka_akr&#34;&gt;@tanaka_akr&lt;/a&gt;さんから&lt;a href=&#34;https://twitter.com/tanaka_akr/status/865722507281580032&#34;&gt;指摘&lt;/a&gt;されたのですが、用語の説明が間違っていそうだったので書き直しました。
diffは&lt;a href=&#34;https://github.com/KeenS/KeenS.github.io/commit/d46dad5282436eeaa615f31c160f892e6c724403&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustで非同期Thriftしたい</title>
      <link>//KeenS.github.io/slide/rustdehidoukithriftshitai/</link>
      <pubDate>Sat, 26 Nov 2016 13:07:29 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/rustdehidoukithriftshitai/</guid>
      <description># Rustで非同期Thrift ---------------------- [歌舞伎座.tech#12「メッセージフォーマット/RPC勉強会」 - connpass](https://kbkz.connpass.com/event/40629/) === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * サイバーエージェントのエンジニア * Lisp, ML, Rust, Shell Scriptあたりを書きます === * X RPCライブラリを使う話 * O RPCライブラリを作る話 === # RPC ----- * Remote Procedure Call * リモートで呼べる * 言語跨げる * シリアライズフォーマットが決まれば大体出来る * Thrift, protobuf/gRPC, avro... * 大抵バイナリ + JSONに比べて2倍くらい効率がいい === # Thrift -------- * Facebook発(現apache)RPCフレームワーク * IDLから複数の言語向けのコードを吐ける * 対応言語多い * 新しい言語はthriftレポジトリフォークして追加 === # Thrift vs gRPC ---------------- \ | Thrift | gRPC ------------------------|:------:|:----: ベース | 自前 | HTTP/2 コード生成 | o | o プロトコルのアップデート | o | o 通信の多重化 | トランスポート次第 | o (HTTP/2) 認証 | x | o 例外 | ユーザ定義可能 | 事前定義のみ?</description>
    </item>
    
    <item>
      <title>非同期処理の「その後」の話。goto、継続、限定継続、CPS、そしてコールバック地獄。</title>
      <link>//KeenS.github.io/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</link>
      <pubDate>Sat, 25 Apr 2015 23:44:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</guid>
      <description># 非同期処理の「その後」の話 ---------------------- ## goto、継続、限定継続、CPS、そしてコールバック地獄 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 渋谷のエンジニア + Lisp, ML, Shell Scriptあたりを書きます === # 同期処理とは ------------- 通常、外部とやりとり(I/O)する時に待ち時間(ブロック)が発生する。 ![sync task image](/images/sync.png) === # 非同期処理とは --------------- 待ち時間に(ブロックせずに)別の処理をしようという発想。 ![async task image](/images/async.png) === # 非同期処理の裏側 ----------------- 処理Aと処理Bの他にいつどっちを動かすかを決めるスケジューラが存在することが多い ![async scheduler image](/images/async_scheduler.png) === # どうやって戻る問題 ------------------- * 一時停止した後「その後」の処理にどうやって戻るか ![cont image](/images/cont.png) === # 「その後」とは ----------- ```C ... fputc(c); // ここの処理でI/Oが入る // 再開する時にここに戻ってきたい printf(&#34;Work done&#34;); .</description>
    </item>
    
  </channel>
</rss>