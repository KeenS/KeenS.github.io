<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>非同期 on κeenのHappy Hacκing Blog</title>
    <link>https://KeenS.github.io/categories/%E9%9D%9E%E5%90%8C%E6%9C%9F/</link>
    <description>Recent content in 非同期 on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 24 Feb 2021 04:11:20 +0900</lastBuildDate>
    
	<atom:link href="https://KeenS.github.io/categories/%E9%9D%9E%E5%90%8C%E6%9C%9F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>io_uringで高速IO処理（！）</title>
      <link>https://KeenS.github.io/blog/2021/02/24/io_uringdekousokuioshori____/</link>
      <pubDate>Wed, 24 Feb 2021 04:11:20 +0900</pubDate>
      
      <guid>https://KeenS.github.io/blog/2021/02/24/io_uringdekousokuioshori____/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;blog/2021/02/08/io_uringdekousokuioshori___/&#34;&gt;前回の記事&lt;/a&gt;にもうちょっと実験を加えたのでその結果を書き留めます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>io_uringで高速IO処理（？）</title>
      <link>https://KeenS.github.io/blog/2021/02/08/io_uringdekousokuioshori___/</link>
      <pubDate>Mon, 08 Feb 2021 20:33:15 +0900</pubDate>
      
      <guid>https://KeenS.github.io/blog/2021/02/08/io_uringdekousokuioshori___/</guid>
      <description>&lt;p&gt;κeenです。普段お世話になってるけど使ったことのないAPIを叩いてみよう、ということで &lt;code&gt;io_uring&lt;/code&gt; を使ってみます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>async/awaitと合成可能性</title>
      <link>https://KeenS.github.io/blog/2019/02/09/async_awaittogouseikanousei/</link>
      <pubDate>Sat, 09 Feb 2019 21:16:36 +0900</pubDate>
      
      <guid>https://KeenS.github.io/blog/2019/02/09/async_awaittogouseikanousei/</guid>
      <description>&lt;p&gt;κeenです。async/awaitって実装の都合と利便性の良い所取ってるよなーと常々思ってるのを言語化してインターネットに放流します。
何度か似たようなことを言ってるのですがスライドであることが多くてあまり情報量を詰め込めなかったのでブログにまとめます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Futureとその周辺</title>
      <link>https://KeenS.github.io/slide/futuretosonoshuuhensa_bei/</link>
      <pubDate>Fri, 05 Oct 2018 19:55:29 +0900</pubDate>
      
      <guid>https://KeenS.github.io/slide/futuretosonoshuuhensa_bei/</guid>
      <description># Futureとその周辺 ---------------------- [情報科学若手の会 #51](https://wakate.org/2018/07/28/51th-general/) === # About Me --------- ![κeenのアイコン](/images/kappa.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) *</description>
    </item>
    
    <item>
      <title>ステートマシン抽象化としてのFuture</title>
      <link>https://KeenS.github.io/blog/2017/07/02/sute_tomashinchuushoukatoshitenofuture/</link>
      <pubDate>Sun, 02 Jul 2017 12:31:07 +0900</pubDate>
      
      <guid>https://KeenS.github.io/blog/2017/07/02/sute_tomashinchuushoukatoshitenofuture/</guid>
      <description>&lt;p&gt;κeenです。最近Futureと一口にいってもいくつか種類があるなと気付いたのでRustの&lt;a href=&#34;https://github.com/alexcrichton/futures-rs&#34;&gt;&lt;code&gt;futures-rs&lt;/code&gt;&lt;/a&gt;に実装されているFutureの挙動を紐解こうと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>非同期とノンブロッキングとあと何か</title>
      <link>https://KeenS.github.io/blog/2017/05/19/hidoukitononburokkingutoatonanika/</link>
      <pubDate>Fri, 19 May 2017 20:51:46 +0900</pubDate>
      
      <guid>https://KeenS.github.io/blog/2017/05/19/hidoukitononburokkingutoatonanika/</guid>
      <description>&lt;p&gt;κeenです。最近同期/非同期、ブロッキング/ノンブロッキング、直接形式/継続渡し形式あたりが混乱してきたので個人的に整理します。
あくまで私個人の理解を纏めただけなので誤謬などに注意して下さい。&lt;/p&gt;

&lt;p&gt;追記: &lt;a href=&#34;https://twitter.com/tanaka_akr&#34;&gt;@tanaka_akr&lt;/a&gt;さんから&lt;a href=&#34;https://twitter.com/tanaka_akr/status/865722507281580032&#34;&gt;指摘&lt;/a&gt;されたのですが、用語の説明が間違っていそうだったので書き直しました。
diffは&lt;a href=&#34;https://github.com/KeenS/KeenS.github.io/commit/d46dad5282436eeaa615f31c160f892e6c724403&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustで非同期Thriftしたい</title>
      <link>https://KeenS.github.io/slide/rustdehidoukithriftshitai/</link>
      <pubDate>Sat, 26 Nov 2016 13:07:29 +0900</pubDate>
      
      <guid>https://KeenS.github.io/slide/rustdehidoukithriftshitai/</guid>
      <description>&lt;a src=&#39;https://kbkz.connpass.com/event/40629/&#39;&gt;歌舞伎座.tech#12「メッセージフォーマット/RPC勉強会」 - connpass&lt;/a&gt;での発表用 </description>
    </item>
    
    <item>
      <title>非同期処理の「その後」の話。goto、継続、限定継続、CPS、そしてコールバック地獄。</title>
      <link>https://KeenS.github.io/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</link>
      <pubDate>Sat, 25 Apr 2015 23:44:46 +0900</pubDate>
      
      <guid>https://KeenS.github.io/slide/hidoukishorino_sononochi_nohanashi_goto_keizoku_genteikeizoku_cps_soshiteko_rubakkujigoku_/</guid>
      <description>特に発表予定はないけどなんとなく作ってみたスライド。&lt;br&gt; 非同期処理には(限定)継続が必要という話からCPS変換を導入し、なぜコールバック地獄が起きるのか を説明します。これを見てコールバック地獄への理不尽さが少しでも柔らげばと思います。 </description>
    </item>
    
  </channel>
</rss>
