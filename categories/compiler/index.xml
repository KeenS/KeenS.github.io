<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>compiler on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/compiler/</link>
    <description>Recent content in compiler on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 16 Sep 2018 01:26:15 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/compiler/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Inside Pattern Matchings</title>
      <link>//KeenS.github.io/slide/inside_pattern_machings/</link>
      <pubDate>Sun, 16 Sep 2018 01:26:15 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/inside_pattern_machings/</guid>
      <description>===
About Me   κeen ちゅーんさんだよー @blackenedgold Github: KeenS Idein Inc.のエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
===
発表について   元ネタ Optimizing Pattern Matching (Fabrice Le Fessant, Luc Maranget) 自作SMLコンパイラにパターンマッチを入れようとしたら難しかった  「コードを生成」が割と厄介 次の中間言語の設計に影響を与える  というか専用の中間言語作るくらいの心意気が必要      ===
発表について   既存手法を調べたら非自明だった  → 既存手法の紹介だけでも価値がありそう → 発表するか (本当は実装までしたかったけど進捗だめです)   変数束縛の話はしない  ワイルドカードで我慢して    ===
パターンについて   パターンは値の集合にマッチする ワイルドカードパターンがある 直積にマッチするときは 横 に伸びる 直和にマッチするときは 縦 に伸びる パターンをネストするときは 奥 に伸びる パターンが 網羅的 であるかに関心がある 複数マッチする場合は最初のものにマッチする  ===</description>
    </item>
    
    <item>
      <title>WebAssemblyとコンパイラとランタイム</title>
      <link>//KeenS.github.io/slide/webassemblytokonpairatorantaimu/</link>
      <pubDate>Thu, 16 Feb 2017 15:46:21 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/webassemblytokonpairatorantaimu/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS Idein Inc.のエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
何の話   WebAssemblyをバックエンドに使う言語を作りたい KeenS/webml: An ML like toy language compiler 既に発表したものの補足記事的な  コンパイラの人からみたWebAssembly | κeenのHappy Hacκing Blog ある程度再度説明します    ===
アジェンダ   なぜWebAssembly コンパイラ コード生成 ランタイム  ===
なぜWebAssembly ===
なぜWebAssembly   なんかバイナリでテンション上がる ポータブルでコンパクトで速い 機能的にJSを越えるかもしれない…？ コンパイラがブラウザで動くと言語導入のハードル下がる  気軽に試せる コンパイラだけでなく吐いたコードもブラウザで動かしたい    ===
WASM over LLVM   既存のJS環境と協調する  JSとの相互呼び出しとか   non-determinismが少ない 細かいアラインメント考える必要がない API安定しそう  ===</description>
    </item>
    
    <item>
      <title>コンパイラの人からみたWebAssembly</title>
      <link>//KeenS.github.io/slide/konpairanoninkaramitawebassembly/</link>
      <pubDate>Sun, 22 Jan 2017 13:35:46 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/konpairanoninkaramitawebassembly/</guid>
      <description>コンパイラの人からみたWebAssembly  コンパイラ勉強会 - connpass
===
About Me   κeen @blackenedgold Github: KeenS Idein Inc.のエンジニア Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
アジェンダ   WebAssemblyの概要 具体的な話 WebAssembly吐こうとした話  ===
WebAssemblyの概要 ===
JavaScript   ブラウザ上で動くスクリプト言語 動的型付 高級 GCとかある 今までブラウザで動く唯一の言語だった 遅い  各ブラウザJITなどで補強    ===
asm.js   プラウザ上で動く言語 低級 GCなし JSのサブセット  asm.jsをサポートしないプラウザでも動かせる   コンパイラから生成されることを想定  emscriptenなど    ===
function geometricMean(start, end) { start = start|0; // start has type int  end = end|0; // end has type int  return +exp(+logSum(start, end) / +((end - start)|0)); } .</description>
    </item>
    
  </channel>
</rss>