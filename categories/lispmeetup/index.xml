<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lispmeetup on κeenのHappy Hacκing Blog</title>
    <link>/categories/lispmeetup/index.xml</link>
    <description>Recent content in Lispmeetup on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="/categories/lispmeetup/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SchemeでClassとProtocol</title>
      <link>/slide/Schemedeclasstoprotocol/</link>
      <pubDate>Mon, 28 Nov 2016 15:41:36 +0900</pubDate>
      
      <guid>/slide/Schemedeclasstoprotocol/</guid>
      <description>&lt;section data-markdown
    data-separator=&#34;\n===\n&#34;
    data-vertical=&#34;\n---\n&#34;
    data-notes=&#34;^Note:&#34;&gt;
&lt;script type=&#34;text/template&#34;&gt;
# ClassとProtocol
----------------------
[Lisp Meet Up presented by Shibuya.lisp #46](https://lisp.connpass.com/event/45517/) Scheme回
&lt;!-- .slide: class=&#34;center&#34; --&gt;
===
# About Me
---------
![κeenのアイコン](/images/icon.png) &lt;!-- .element: style=&#34;position:absolute;right:0;z-index:-1&#34; --&gt;

 * κeen
 * [@blackenedgold](https://twitter.com/blackenedgold)
 * Github: [KeenS](https://github.com/KeenS)
 * サイバーエージェントのエンジニア
 * Lisp, ML, Rust, Shell Scriptあたりを書きます

===

# Class
-------

* ここでは単に値の集合を表わす
* `new` のように新しいインスタンスを作る機能はつけない
* ほとんど型と同じ機能
* 唯一の機能 `instance?` を持つ

===

``` scheme
(instance? 3 &lt;number&gt;)     ; =&gt; #t
(instance? &#34;foo&#34; &lt;number&gt;) ; =&gt; #f
```

===

# Classの実装
-------------

* 事実上述語があればいい
* [詳細](https://github.com/picrin-scheme/picrin/blob/master/contrib/50.class/piclib/picrin/class.scm)

``` scheme
(define-class &lt;any&gt; (lambda (x) #t))
(define-class &lt;list&gt; list?)
(define-class &lt;procedure&gt; procedure?)
(define-class &lt;number&gt; number?)
```

===

# Classの用途
-------------

* 述語だけで意味ある？
  + プリミティブにのみあった述語をユーザが拡張出来る
* その上に何かを構築出来る
* protocolとか

===

# Protocol
-----------

* Clojureのprotocol
* 多重ディスパッチの機構
* ディスパッチするのにClassを使う

===

```scheme
(define-protocol (PLUS x y)
  (plus x y))

(define-instance (PLUS &lt;number&gt; &lt;number&gt;)
  (lambda (x y) (+ x y)))


(define-instance (PLUS &lt;number&gt; &lt;string&gt;)
  (lambda (x y) (string-append (number-&gt;string x) y)))

(define-instance (PLUS &lt;string&gt; &lt;string&gt;)
  (lambda (x y) (string-append x y)))

```

===

``` scheme
(display (plus 1 2)) (newline)
; -&gt; 3
(display (plus 1 &#34;foo&#34;)) (newline)
; -&gt; 1foo
(display (plus &#34;bar&#34; &#34;foo&#34;)) (newline)
; -&gt; barfoo
(display (plus &#34;bar&#34; 1)) (newline)
; -&gt; &#34;error: method not found&#34;
```

===
# ユーザ定義型とProtocol
------------------------

``` scheme
(define-record-type complex
  (make-complex real img)
  complex?
  (real complex-real)
  (img  complex-img))

(define (complex-+ c1 c2)
  (make-complex (+ (complex-real c1) (complex-real c2))
                (+ (complex-img  c1) (complex-img  c2))))

(define (complex-&gt;string c)
  (string-append
   (number-&gt;string (complex-real c)) &#34;+&#34;
   (number-&gt;string (complex-img  c)) &#34;i&#34;))
```

===

```scheme
(define-class &lt;complex&gt; complex?)

(define-instance (PLUS &lt;complex&gt; &lt;complex&gt;)
  complex-+)


(display (complex-&gt;string
          (plus (make-complex 1 2)
                (make-complex 2 3)))) (newline)
; -&gt; 3+5i
```

===

# Protocolの実装
----------------

* メソッドの登録とか述語でディスパッチとか割と面倒
* [詳細](https://github.com/picrin-scheme/picrin/blob/master/contrib/80.protocol/piclib/picrin/protocol.scm)

===
# まとめ
---------

* 「追加可能な型」は便利だよ
* 型相当のものがあればダイナミックディスパッチ出来るよ
* picrinに実装されてるよ `(picrin class)` `(picrin protocol)`

&lt;/script&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>