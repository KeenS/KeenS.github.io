<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>社内 on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/%E7%A4%BE%E5%86%85/</link>
    <description>Recent content in 社内 on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 04 Nov 2016 13:19:01 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/%E7%A4%BE%E5%86%85/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala 2.12.0変更点</title>
      <link>//KeenS.github.io/slide/scala_2_12_0henkouten/</link>
      <pubDate>Fri, 04 Nov 2016 13:19:01 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/scala_2_12_0henkouten/</guid>
      <description># Scala 2.12.0変更点 ---------------------- サイバーエージェント ScalaMeetUp === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * AI Studio Dev Group * Lisp, ML, Rust, Shell Scriptあたりを書きます === # サマリー ---------- 全部[公式ページ](http://www.scala-lang.org/news/2.12.0)に詳細あるよ * Java8向けの互換性向上したよ + トレイトがinterfaceに + 無名関数がlambdaに + SAMとScalaの関数が統合 * コンパイラが少し賢くなったよ + いくつかでinvokedynamicを使うように + 中間状態をやめた + 最適化をするように * ライブラリ改善した + EitherがRight Biasedに + Futureが強化 * 非互換いくつか === # トレイトがinterfaceに ----------------------- ``` scala trait Foo { def foo(): String = &#34;</description>
    </item>
    
    <item>
      <title>正しいScalaのコードが欲しい</title>
      <link>//KeenS.github.io/slide/tadashiiscalanoko_dogahoshii/</link>
      <pubDate>Wed, 05 Oct 2016 00:10:25 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/tadashiiscalanoko_dogahoshii/</guid>
      <description># 正しいScalaのコードが欲しい ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループ + Lisp, ML, Rust, Shell Scriptあたりを書きます + Scalaはあんまり === # Scalaを始めたばかりの頃の話 === ``` scala def revappend[A]( xs: List[A], ys: List[A]): List[A] = match xs { case Nil = Nil case x::xs_ = revappend(xs_, x::ys) } ``` === ``` scala def length(xs: List[_]): Int = xs match { case Nil = Nil case x::xs_ = 1 + length(xs_) } ``` === ``` scala def append[A]( xs: List[A], ys: List[A]): List[A] = xs match { case Nil = Nil case x::xs_ = x :: append(xs_, ys) } append(List(1, 2, 3), List(4, 5, 6)) // = List(1, 2, 3) ``` === # Scalaを始めたばかりの頃の話 ----------------------------- * 正しくないコードばかり書いてしまう + 他の言語の構文と混ぜてしまう + 型エラー + 実装ミス * 正しいScalaのコードが欲しい === # 正しさって？ ------------- * 構文が正しいコード?</description>
    </item>
    
    <item>
      <title>DOT/dottyについて調べてみた</title>
      <link>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</link>
      <pubDate>Tue, 24 May 2016 23:40:36 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/dot_dottynitsuiteshirabetemita/</guid>
      <description># DOT/dottyについて調べてみた ---------------------- サイバーエージェント Scala Meet Up 2016-05-27 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループ + Lisp, ML, Rust, Shell Scriptあたりを書きます + Scala初心者 + Scala歴1年未満&amp;gt;&amp;lt; === # Scalaコンパイラ ---------------- * 型推論（特にimplicit）が遅い * コンパイルフェーズが多い + 中間オブジェクトが多くて遅くなる * 多くのクラスファイルを生成する + コンパイラのくせにディスクIOが多い * 気を抜いてると `Any` に推論される e.g.) `if(x) 1 else &#34;a&#34;` * そもそものScalaの設計に起因する点が多い + 抜本的変更が必要 === # Scala基礎 ----------- * Scalaが成立するのに最低限必要な機能って？ + e.g.) `case class` はなくても `class` だけでどうにかなる * 「最低限の機能」を減らせばコンパイラがシンプルになる + 他の機能はただのシンタックスシュガーになる + コンパイラのバグを減らせる + 機能追加時の矛盾確認が楽 * コア言語 === # Featherlight Scala --------------------- * Scalaのシンタックスシュガーを減らした感じ * 小さな言語 * 元のScalaはこれをベースに議論されてきた === # 形式言語理論 ------------- * 最低限必要な機能を形式的にモデル化 + 全ての動作は予め決められた「規則」に基く + 実際に書いて動かすものではない * 形式的にすることで「証明」とかが出来る + 「型検査に通れば実行時に型エラーが起きない」 + 「型検査が必ず終了する」 * 逆に、「このモデルだとこの機能は実現出来ない」とかも分かる === # Dependent Object Type ------ * Scalaのコアをモデル化したもの（要出典） * 形式言語 * ジェネリクスもなければクラスも継承もない、パッケージもない。 * 小さい言語ながら表現力豊か * 全ての値はオブジェクト。 + オブジェクトのフィールドとメソッドと型メンバーだけ + 型はそのまま * Path Dependent Type * サブタイピング === # About DOT --------- * 型付の健全性が証明された * System FSystem DDOT * existential typeを自然に表現出来る * 交差型と合併型 + `A extends B` - `A &amp; B` + 合併型は主に型推論の結果に出てくる === ```scala package scala.</description>
    </item>
    
    <item>
      <title>テストについて、Scalaと。</title>
      <link>//KeenS.github.io/slide/tesutonitsuite_scalato_/</link>
      <pubDate>Tue, 12 Apr 2016 22:31:51 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/tesutonitsuite_scalato_/</guid>
      <description># テストについて、Scalaと。 ---------------------- サイバーエージェント アドテクスタジオ ScalaMeetUp テスト回 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + サイバーエージェントのエンジニア + 基盤開発グループでScalaで基盤開発してます + Lisp, ML, Rust, Shell Scriptあたりを書きます === # Scalaのテスト --------------- * ScalaTest + 機能豊富 + 複数のテストスタイルを選べる + 他のフレームワークとの統合がある * Specs2 + 普通に使いやすい * 他にもScalaCheck、JUnit、Gatlingなどなど === # ScalaTestのスタイルたち ----------- * FunSuite + xUnitっぽいらしい * FlatSpec + xUnitからBDDに移行した人向けらしい * FunSpec + RSpecっぽいBDD用の === # ScalaTestのスタイルたち ----------- * WordSpec + Specs2に似てる。 * FreeSpec + 何段にでもネスト出来る。自由。 * Spec + テスト=メソッド。速いらしい。 === # ScalaTestのスタイルたち ----------- * PropSpec + プロパティベースのテスト。ScalaCheckとの統合。 * FeatureSpec + シナリオテスト。 === # その他の機能 ------------- * mockitoのシュガー * Matcher DSL * 複数のランナー（複数のツールとの統合） === # Axionのテスト コード紹介を多めに === # 単体テスト --------------- * 普通の単体テストはWordSpec * ホーアの3つ組に基いて事前条件、コマンド、事後条件(不変条件)に分ける + 「{事前条件}が成り立つ時{コマンド}を実行し、停止するなら{事後条件(不変条件)}が成り立つ」の列挙 * [テストについて考えてみた | κeenのHappy Hacκing Blog](http://keens.</description>
    </item>
    
    <item>
      <title>HAMT ~ イミュータブルで高速なハッシュマップ ~</title>
      <link>//KeenS.github.io/slide/hamt/</link>
      <pubDate>Sun, 31 Jan 2016 16:17:35 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/hamt/</guid>
      <description># Hash-Array Mapped Trie ---------------------- ~ イミュータブルで高速なハッシュマップ ~ サイバーエージェント AdTech Scala Meetup LT大会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループの新卒 + Lisp, ML, Rust, Shell Scriptあたりを書きます === # scala.collections.immutable.HashMap ------------------------------------- * 今日の話題。これの実装をみていく。 * イミュータブル * キー-バリューペア * 値を追加する度に新たなハッシュマップを作る === # HashMap ---------------- * `O(1)`のアクセス効率 * 空間効率は悪い * ハッシュ関数が定義出来れば何でもキーに使える * 普通はミュータブルに使う + 大量のメモリをアロケートするのでコピーはつらい === # メモリ効率悪そう？ ------------------------- ```scala val hash = HashMap.empty + (3 - 1) // +---+---+---+---+---+---- // | / | 3 | / | / | / | .</description>
    </item>
    
    <item>
      <title>Internal of b11d</title>
      <link>//KeenS.github.io/slide/internal_of_b11d/</link>
      <pubDate>Mon, 19 Oct 2015 21:33:00 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/internal_of_b11d/</guid>
      <description># Internal of b11d ---------------------- サイバーエージェント新卒研修 ひとりDSP最終発表会 === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + AMoAdのサーバーサイド（？）エンジニア + 趣味でLisp, ML, Shell Scriptあたりを書きます + 仕事でScalaとShell Scriptあたりを書きます === # 今回作ったもの ---------------- * b11d (ぶらっくんどごーるど) * Clojure (compojure + middleware)製 + + NginX + MySQL + Supervisord * 出来る限りシンプルになるように作った + 310行 * デプロイその他はシェルスクリプト * 監視はmackerel === # シンプルということ ------------------- * アプリケーションは状態を持たない * IO以外副作用を持たない * つまり、キャッシュを持たない + キャッシュはパフォーマンス上の意味しかない + 早過ぎる最適化は諸悪の根源 * スケールアウトが容易 * compojureのミドルウェアを上手く使った === # シンプルということ2 -------------------- * データベースはだいたい第4正規形（ﾀﾌﾞﾝ） + 全てのカラムは`NOT NULL` + 広告主の所だけ拡張性を持たせるために第1正規形に落とした + 1広告主に対して複数の広告が持てるようになる * 外部キー制約も全部付ける * データが綺麗なのでアプリケーション側でのやることが少ない * 分析する時にも活きる筈 === # デプロイ --------- * 全てシェルスクリプトでオペレーション出来る * 手作業を無くしてミスを無くす + 「あれ？設定書き換えたのに反映されてない」 → 「再起動忘れてた」とかを防ぐ * ☆秘伝☆のシェルテクニック満載！ * アプリケーションが1jarに収まるのでデプロイが楽。 === # 監視 ------ * mackerelで色々モニタリング * Linux, NginX, MySQL, JVM, レスポンスステータス * ほとんどMackerelに乗っかることで本質的でないことに労力を割かない + 本質 = 業務ロジックを理解すること * アプリケーションの死活監視にはsupervisord + 本当はsystemdでやりたかったけどUbuntuのバージョンが古かった === # 落穂拾い ---------- * DBへの書き込みは非同期。Clojureなら簡単に書ける + `(go .</description>
    </item>
    
  </channel>
</rss>