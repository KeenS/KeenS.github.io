<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ScalaMeetUp on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/categories/scalameetup/</link>
    <description>Recent content in ScalaMeetUp on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 04 Nov 2016 13:19:01 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/categories/scalameetup/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala 2.12.0変更点</title>
      <link>//KeenS.github.io/slide/scala_2_12_0henkouten/</link>
      <pubDate>Fri, 04 Nov 2016 13:19:01 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/scala_2_12_0henkouten/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS AI Studio Dev Group Lisp, ML, Rust, Shell Scriptあたりを書きます  ===
サマリー  全部公式ページに詳細あるよ
 Java8向けの互換性向上したよ  トレイトがinterfaceに 無名関数がlambdaに SAMとScalaの関数が統合   コンパイラが少し賢くなったよ  いくつかでinvokedynamicを使うように 中間状態をやめた 最適化をするように   ライブラリ改善した  EitherがRight Biasedに Futureが強化   非互換いくつか  ===
トレイトがinterfaceに  trait Foo { def foo(): String = &amp;#34;foo&amp;#34; def bar(): String } ===
トレイトがinterfaceに  $ scalac-2.11 Trait.scala $ ls Foo$class.</description>
    </item>
    
    <item>
      <title>正しいScalaのコードが欲しい</title>
      <link>//KeenS.github.io/slide/tadashiiscalanoko_dogahoshii/</link>
      <pubDate>Wed, 05 Oct 2016 00:10:25 +0900</pubDate>
      
      <guid>//KeenS.github.io/slide/tadashiiscalanoko_dogahoshii/</guid>
      <description>===
About Me   κeen @blackenedgold Github: KeenS 基盤開発グループ Lisp, ML, Rust, Shell Scriptあたりを書きます  Scalaはあんまり ===    Scalaを始めたばかりの頃の話 ===
def revappend[A]( xs: List[A], ys: List[A]): List[A] = match xs { case Nil =&amp;gt; Nil case x::xs_ =&amp;gt; revappend(xs_, x::ys) } ===
def length(xs: List[_]): Int = xs match { case Nil =&amp;gt; Nil case x::xs_ =&amp;gt; 1 + length(xs_) } ===
def append[A]( xs: List[A], ys: List[A]): List[A] = xs match { case Nil =&amp;gt; Nil case x::xs_ =&amp;gt; x :: append(xs_, ys) } append(List(1, 2, 3), List(4, 5, 6)) // =&amp;gt; List(1, 2, 3)  ===</description>
    </item>
    
  </channel>
</rss>