<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scalameetup on κeenのHappy Hacκing Blog</title>
    <link>/categories/scalameetup/</link>
    <description>Recent content in Scalameetup on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 04 Nov 2016 13:19:01 +0900</lastBuildDate>
    
	<atom:link href="/categories/scalameetup/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala 2.12.0変更点</title>
      <link>/slide/scala_2_12_0henkouten/</link>
      <pubDate>Fri, 04 Nov 2016 13:19:01 +0900</pubDate>
      
      <guid>/slide/scala_2_12_0henkouten/</guid>
      <description># Scala 2.12.0変更点 ---------------------- サイバーエージェント ScalaMeetUp === # About Me --------- ![κeenのアイコン](/images/icon.png) * κeen * [@blackenedgold](https://twitter.com/blackenedgold) * Github: [KeenS](https://github.com/KeenS) * AI Studio Dev Group * Lisp, ML, Rust, Shell Scriptあたりを書きます === # サマリー ---------- 全部[公式ページ](http://www.scala-lang.org/news/2.12.0)に詳細あるよ * Java8向けの互換性向上したよ + トレイトがinterfaceに + 無名関数がlambdaに + SAMとScalaの関数が統合 * コンパイラが少し賢くなったよ + いくつかでinvokedynamicを使うように + 中間状態をやめた + 最適化をするように * ライブラリ改善した + EitherがRight Biasedに + Futureが強化 * 非互換いくつか === # トレイトがinterfaceに ----------------------- ``` scala trait Foo { def foo(): String = &#34;</description>
    </item>
    
    <item>
      <title>正しいScalaのコードが欲しい</title>
      <link>/slide/tadashiiscalanoko_dogahoshii/</link>
      <pubDate>Wed, 05 Oct 2016 00:10:25 +0900</pubDate>
      
      <guid>/slide/tadashiiscalanoko_dogahoshii/</guid>
      <description># 正しいScalaのコードが欲しい ---------------------- === # About Me --------- ![κeenのアイコン](/images/icon.png) + κeen + [@blackenedgold](https://twitter.com/blackenedgold) + Github: [KeenS](https://github.com/KeenS) + 基盤開発グループ + Lisp, ML, Rust, Shell Scriptあたりを書きます + Scalaはあんまり === # Scalaを始めたばかりの頃の話 === ``` scala def revappend[A]( xs: List[A], ys: List[A]): List[A] = match xs { case Nil = Nil case x::xs_ = revappend(xs_, x::ys) } ``` === ``` scala def length(xs: List[_]): Int = xs match { case Nil = Nil case x::xs_ = 1 + length(xs_) } ``` === ``` scala def append[A]( xs: List[A], ys: List[A]): List[A] = xs match { case Nil = Nil case x::xs_ = x :: append(xs_, ys) } append(List(1, 2, 3), List(4, 5, 6)) // = List(1, 2, 3) ``` === # Scalaを始めたばかりの頃の話 ----------------------------- * 正しくないコードばかり書いてしまう + 他の言語の構文と混ぜてしまう + 型エラー + 実装ミス * 正しいScalaのコードが欲しい === # 正しさって？ ------------- * 構文が正しいコード?</description>
    </item>
    
  </channel>
</rss>