<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mocl | κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/categories/mocl/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-08-30T15:54:02+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[授業で半年間moclを使ってみた]]></title>
    <link href="http://KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8.html"/>
    <updated>2014-08-28T17:05:00+09:00</updated>
    <id>http://KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8.markdown</id>
    <content type="html"><![CDATA[<h1>授業で半年間moclを使ってみた</h1>

<hr />


<p>Shibuya.lisp TT #8</p>

<br>


<p>κeen(@blackenedgold)</p>

<h2>自己紹介</h2>

<hr />


<ul>
<li>κeen</li>
<li>東大数学科の4年生</li>
<li>ソーシャルアカウントは上のアイコン達から。</li>
<li>Lisp, Ruby, OCaml, Shell Scriptあたりを書きます</li>
</ul>


<p> 一年前</p>

<h2><a href="http://ks.ms.u-tokyo.ac.jp/">計算数学II</a></h2>

<p><img src="/images/shibuya_lisp_TT8/calculation_math.png" alt="計算数学IIのホームページ" /></p>

<p>自分でテーマを決めて半年間取り組む</p>

<p>チーム<a href="https://sites.google.com/site/2013ks2/home">人造エイリアン</a>
<img src="/images/shibuya_lisp_TT8/android_alien.png" alt="チーム人造エイリアン" /></p>

<h2>Common Lisp でAndroid?</h2>

<h2><a href="https://wukix.com/mocl">mocl</a></h2>

<p><img src="/images/shibuya_lisp_TT8/mocl.png" alt="mocl home" /></p>

<h2>What is mocl</h2>

<hr />


<ul>
<li>iOS, Androidで動くCommon Lisp処理系</li>
<li>LLVMをバックエンドに使う</li>
<li>Networking, Unicode, CLOS, and More. Run Countless CL Libraries.</li>
</ul>


<h2>買ってもらった(・ω・)v</h2>

<p><img src="/images/shibuya_lisp_TT8/mocl_ut.png" alt="mocl home" /></p>

<h2>注意</h2>

<hr />


<p>私が触ったのは1つ前のバージョンです。</p>

<p>一部5月のアップデートで改善されています。</p>

<h2>How it Works</h2>

<hr \>


<p><embed src="http://KeenS.github.io/images/shibuya_lisp_TT8/mocl_flowchart.svg" type="image/svg+xml" height="500px" /></p>

<h2>コードサンプル</h2>

<hr \>


<p>授業で私が作ったオセロのAIのコード
```java
public BoardCanvas(Context context,int width, int height,int color ){</p>

<pre><code>...
CL.cl_init();
CL.init_game(3 - color);
...
</code></pre>

<p>}</p>

<p>void nextHand(){</p>

<pre><code>String[] coord = CL.next().split(" ");
CL.jput(Integer.parseInt(coord[0]), Integer.parseInt(coord[1]) , color);
...
</code></pre>

<p>}
```</p>

<p>```lisp
(declaim (call-in next))
(defun next ()
  (let ((dummy (make-board))</p>

<pre><code>    (max most-negative-fixnum)
    (x) (y) (score))
...
))
</code></pre>

<p>(declaim (call-in init-game))
(defun init-game (color)
  (setf <em>board</em> (make-board))
  (setf <em>ai</em> color))
(declaim (call-in jput))
(defun jput (x y color)
  (put <em>board</em> x y color))
```</p>

<h2>ライブラリについて</h2>

<hr />


<ul>
<li>ASDFが使える</li>
<li><code>MOCL_HOME/systems/</code>以下に配置</li>
<li>quicklispでインストールしたやつは<code>MOCL_HOME/systems/</code>にひたすら<code>ln -s</code></li>
<li>大抵のライブラリは動かない</li>
</ul>


<p>例えば<code>cl-annot</code>を使って
<code>lisp
(declaim (call-in jput))
(defun jput (x y color)
  (put *board* x y color))
</code>
を
<code>lisp
@call-in
(defun jput (x y color)
  (put *board* x y color))
</code>
としたい</p>

<p>私のときはCFFIを始め、ironclad、cl-annotなど、<br/>
使おうとしたライブラリは全て動かなかった</p>

<p>現在の状態は不明</p>

<h2>作業フロー(Android)</h2>

<hr />




<ol>
<li>CLのコードを書いてSBCLで動かす</li>
<li>ある程度動いたらmoclでAndroid用のコードを生成</li>
<li>原因不明のエラーが出るので1に戻る</li>
<li>コンパイルが通れば生成されたCをコンパイル</li>
</ol>




<ol start="5">
<li>JavaからCLを呼び出すコードを書く</li>
<li>アプリをコンパイル</li>
<li>実機/エミュレータに転送</li>
</ol>




<ol start="8">
<li>動かす</li>
<li>動かない</li>
<li>ひたすらlogcat眺める</li>
<li>1に戻る</li>
</ol>


<h3>ここがつらい</h3>

<hr />


<ul>
<li>作業が煩雑</li>
<li>例外のスタックトレースがJNIのせいで追いづらい</li>
<li>logを出すには<code>rt:format</code>という関数のみ使える(ログレベルを設定出来ない)</li>
</ul>


<p>※ 今はREPLが端末で動くので環境は良くなっています。</p>

<h2>制限など</h2>

<hr />


<ul>
<li>Java/Obj-CからCLを呼ぶことしか出来ない

<ul>
<li>プラットフォームのライブラリも呼べない</li>
</ul>
</li>
<li>やりとり出来るのは文字列、数値、真偽値のみ

<ul>
<li>裏でタスクを回すworker的な役割or純粋関数的な役割のみ</li>
</ul>
</li>
</ul>


<p>※ 今はCLからObj-Cを呼ぶことが出来ます。</p>

<h2>成果物</h2>

<hr />


<ul>
<li><a href="https://gist.github.com/KeenS/15e7bb35519818c88c13">コード(抜粋)</a></li>
<li><a href="http://www.slideshare.net/blackenedgold/ss-30373688">最終発表スライド</a></li>
<li><a href="http://www.slideshare.net/blackenedgold/ss-30373688">デモ動画</a></li>
</ul>


<h2>おまけ</h2>

<h2>5月のアップデート内容</h2>

<hr />


<ul>
<li>OS Xアプリケーション対応</li>
<li>端末内でREPLが動く</li>
<li>FFI強化</li>
<li>Lisp内Obj-C構文</li>
<li>iOSとOS XでのネイティブSSL対応</li>
<li>ARM64サポート</li>
<li>ドキュメントの改善</li>
<li>多くのバグフィクス</li>
</ul>


<p><span style="font-size:600%">以上</span><br/>
何か質問あればどうぞ</p>
]]></content>
  </entry>
  
</feed>
