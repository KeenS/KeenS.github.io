<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on κeenのHappy Hacκing Blog</title>
    <link>http://KeenS.github.io/post/</link>
    <description>Recent content in Posts on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Jul 2015 14:18:37 +0900</lastBuildDate>
    <atom:link href="http://KeenS.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ファイル削除コマンド色々</title>
      <link>http://keens.github.io/blog/2015/07/05/fairusakujokomandoiroiro</link>
      <pubDate>Sun, 05 Jul 2015 14:18:37 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/07/05/fairusakujokomandoiroiro</guid>
      <description>

&lt;p&gt;ファイル生成/削除コマンドについて覚え書き。&lt;/p&gt;

&lt;h1 id=&#34;空ファイル生成:40d37f886c175b93db8e875ce685ddc6&#34;&gt;空ファイル生成&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ touch file
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;サイズ指定でファイル生成:40d37f886c175b93db8e875ce685ddc6&#34;&gt;サイズ指定でファイル生成&lt;/h1&gt;

&lt;p&gt;0埋め/高速なら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dd if=/dev/zero of=file bs=size count=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ランダム/低速なら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dd if=/dev/random of=file bs=size count=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こっちは圧縮されてもサイズが極端に変わらない。&lt;/p&gt;

&lt;h1 id=&#34;ファイルの切り詰め:40d37f886c175b93db8e875ce685ddc6&#34;&gt;ファイルの切り詰め&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ truncate -s size file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記で作ったファイルのサイズを変えたりログファイルを一旦クリアしたりに便利。&lt;/p&gt;

&lt;h1 id=&#34;普通の削除:40d37f886c175b93db8e875ce685ddc6&#34;&gt;普通の削除&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ rm file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただしハードディスク上にはデータは残るのでセキュリティ的には完全ではない。&lt;/p&gt;

&lt;h1 id=&#34;ディスク上からも完全削除:40d37f886c175b93db8e875ce685ddc6&#34;&gt;ディスク上からも完全削除&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ shred -u file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-u&lt;/code&gt;がなかったらファイルを壊すが削除はしない。&lt;/p&gt;

&lt;p&gt;shredが出てこなかったので調べたついでにまとめた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>マクロについて整理してみる</title>
      <link>http://keens.github.io/blog/2015/07/04/makuronitsuiteseirishitemiru</link>
      <pubDate>Sat, 04 Jul 2015 15:34:46 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/07/04/makuronitsuiteseirishitemiru</guid>
      <description>

&lt;p&gt;何故Lisperがマクロについて語るのか。Lisperと議論してみても満足のいく答を得た人はそんなにいないと思う。
それはLisper自身便利とは思っていても何が便利なのかを意識してなくて他人に上手く説明出来ないからじゃないかと思った。
ちょっと思いついた範囲でまとめてみる。&lt;/p&gt;

&lt;p&gt;最近ではマクロシステムを持つ言語は珍しくない。Rust, Scala, Template Haskell, Mirahなどなど。最初にCommon Lispのマクロと他の言語のマクロとの違いを少し考えてみたい。&lt;/p&gt;

&lt;h1 id=&#34;unless:791da514bc52e2606dbc134b8c6e6cf7&#34;&gt;Unless&lt;/h1&gt;

&lt;p&gt;まず、unlessをマクロで書くことを考えてみたい。単純にifにnotをつければいい。&lt;/p&gt;

&lt;p&gt;Common Lispではこうなる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(if (not foo-p)
    bar)

(defmacro unless (cond then)
  `(if (not ,cond)
       ,then))

(unless foo-p
  bar)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rustだとこうなるだろうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;
if ! isFoo {
    bar;
}

macro_rules! unless {
    ($cond:expr, $then:stmt) =&amp;gt; {{
        if ! $cond {
            $then
        }
    }};
}

unless!(isFoo, {
    bar;
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あるいはmirahだとこうなる。unlessが予約語なので_unlessにした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;if ! isFoo
  bar
end

macro def _unless(cond, block:Block)
  quote{
    if ! `cond`
      `block.body`
    end
  }
end

_unless isFoo do
  bar
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみにCだとこう出来る。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;if(! is_foo)
  bar;

#define unless(cond) if(!(cond))

unless(is_foo)
  bar;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さて、上のマクロたちを見比べて欲しい。Common LispのマクロとCのマクロは違和感なく新たな制御構造を作れたのに対してRustとMirahはマクロ呼び出しが剥き出しになっている。&lt;/p&gt;

&lt;p&gt;ここで注意して欲しいのはCはともかくCommon Lisp、Rust、Mirahのマクロは全て引数に必要な構文木をとってそのまま用意したテンプレートにあてはめているだけだ。やっていることに違いはない。
何が違うかというとマクロ呼び出しの構文が制御構造の構文と同じか違うかという点だけだ。私の知る範囲ではそのような構文をした言語はLispしかない。だから「Lispの」マクロなのだ。&lt;/p&gt;

&lt;p&gt;もう一つ。どのマクロ定義も十分直感的に読めたと思う。この範囲なら &lt;strong&gt;S式だからマクロが簡単になるということはない&lt;/strong&gt; と思う。別にS式でなくてもquasiquoteがあれば十分読み易いマクロが書ける。&lt;/p&gt;

&lt;h1 id=&#34;case:791da514bc52e2606dbc134b8c6e6cf7&#34;&gt;Case&lt;/h1&gt;

&lt;p&gt;caseを生成することを考えよう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defun fun1 (x)
  (let ((y (case x
             ((:foo) (hoge &amp;quot;foo&amp;quot;))
             ((:bar) (hoge &amp;quot;bar!&amp;quot;)))))
    ...))


(defun fun2 (x)
 (let ((y (case x
            ((:foo) (hoge &amp;quot;foo&amp;quot;))
            ((:baz) (hoge &amp;quot;baz!&amp;quot;)))))
   ...))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように似たような、しかし微妙に違うcaseが必要になったような時に必要だろう。この時、&lt;code&gt;&#39;(:foo (hoge &amp;quot;foo&amp;quot;) :bar (hoge &amp;quot;bar!&amp;quot;))&lt;/code&gt;のようにリテラルでそのまま書いてしまっては抽象化する意味がなくなる。例えばハッシュテーブルにKey-Valueペアを入れて必要な時に入れたり削除したりすればよい。そのようなマクロはこう書ける。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(defmacro case-table (key hash)
  `(case ,key
     ,@(loop
          :for k :being :the :hash-key :of hash :using (hash-value v)
          :collect `((,k) ,v))))

(defparameter *table*)
(setf (gethash :foo *table*) &#39;(hoge &amp;quot;foo&amp;quot;))
(setf (gethash :bar *table*) &#39;(hoge &amp;quot;bar!&amp;quot;))

(defun fun1 (x)
  (let ((y (case-table x #.*table*)))
    ...))

(remhash :bar *table*)
(setf (gethash :baz &#39;(hoge &amp;quot;baz!&amp;quot;)))


(defun fun2 (x)
  (let ((y (case-table x #.*table*)))
    ...))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ハッシュテーブルを受け取ってリストを返す普通のloopマクロの力をマクロ展開時にも使える。また、ハッシュテーブルには&lt;code&gt;&#39;(hoge &amp;quot;foo&amp;quot;)&lt;/code&gt;などのただのリストを突っ込んだがそれをそのままASTとしても使っている。
Common Lispのマクロのもう1つの良いところはマクロの展開時にもCommon Lispの機能がフルで使えるところであり、マクロの引数に受け取るのが構文木でありデータ構造でもあるS式なところだ。ここでは &lt;strong&gt;S式の同図像性が重要なファクターになっている&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(case-table x #.*table*)&lt;/code&gt; で使っている &lt;code&gt;#.&lt;/code&gt; は &lt;em&gt;リードマクロ&lt;/em&gt; といってマクロ展開(コンパイル時)より前(リード時、構文解析時)に動作するマクロだ。このリードマクロはeval-when-readといってリード時に
値を評価する。その結果、&lt;code&gt;case-table&lt;/code&gt;に渡るのが &lt;code&gt;&#39;*table*&lt;/code&gt;というシンボルでなく&lt;code&gt;*table*&lt;/code&gt;に束縛されているハッシュテーブルになる。因みに &lt;em&gt;コンパイラマクロ&lt;/em&gt; というマクロ展開が終わった後に動作するマクロもある。&lt;/p&gt;

&lt;p&gt;マクロ1つではなくマクロの前後に動作するマクロもあってこそ初めて柔軟性を手にしている。あまりその点は議論されてないのではないだろうか。&lt;/p&gt;

&lt;h1 id=&#34;common-lispの設計:791da514bc52e2606dbc134b8c6e6cf7&#34;&gt;Common Lispの設計&lt;/h1&gt;

&lt;p&gt;さて、各々言語には予約語や~構文というものがあると思う。メソッド定義構文など。Common Lispにもスペシャルフォームという名前で&lt;a href=&#34;http://www.lispworks.com/documentation/HyperSpec/Body/03_ababa.htm&#34;&gt;25&lt;/a&gt;個存在する。
驚くべきことに、ここまでに出てきたCommon Lispのコードにはスペシャルフォームは3つしか出てこない。ifとletとquoteだ。setfやloop、defun、defmacro、case、defparameterなんかはマクロで出来ている。&lt;/p&gt;

&lt;p&gt;defunまでマクロで出来ているということはユーザがその気になれば関数定義の構文に手を入れたりも出来るということだ。
普通、そんなことをしたら阿鼻叫喚だがCommon Lispなら安全に出来る。マクロもシンボルに束縛されているので新たにマクロで上書きしたシンボルを名前空間にインポートしなければ今まで通りのdefunやloopが使える。&lt;/p&gt;

&lt;p&gt;もう1つ、普段使うものがマクロで出来ているということはマクロを被せてない機能は相当低レベルだということだ。マクロさえ書けば全く新しい言語機能を追加出来るということであり、あるいは&lt;a href=&#34;http://cl21.org/&#34;&gt;全く新しい言語も作れてしまう&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;このような設計はマクロで制御構造までも作れるから出来るのだ。関数定義構文をマクロで定義している言語はLisp以外に私は知らない。&lt;/p&gt;

&lt;h1 id=&#34;メタプログラミングとcommon-lisp:791da514bc52e2606dbc134b8c6e6cf7&#34;&gt;メタプログラミングとCommon Lisp&lt;/h1&gt;

&lt;p&gt;ところで、マクロに限らないメタプログラミングについて考えてみたい。メタプログラミングとは、プログラムを書くプログラムを書くことだ。プログラムはテキスト形式のソースコードから実行形式に至るまでの間に様々な中間形式から中間形式に変換される。メタプログラミングはそのどこかの形式を生成することと同義になる。通常、処理系内部で使う形式は変なことをされると困るのであまり外部に公開したくない。メタプログラミングを許すとしても構文解析などのフロントエンドに近い部分になるだろう。&lt;/p&gt;

&lt;p&gt;例えばyaccやlexのようなソースコードジェネレータ、rubyやDのような文字列ベースのメタプログラミングは公開APIであるところのパーサだけを使っているので安全性は高い。しかし文字列だけだと構造がないので書く側はつらい。一応、Common Lispにもread関数とeval関数があるのでCommon Lispのソースコード文字列を吐いてreadしてevalすれば文字列メタプログラミングは出来る。特に嬉しくないのでやらないが。&lt;/p&gt;

&lt;p&gt;次はトークンベースのメタプログラミングがある。Cのプリプロセッサなど。Common Lispでもリードマクロで可能だ。例えば正規表現リテラルを作ったりとかの例がある。&lt;/p&gt;

&lt;p&gt;次はASTベースのメタプログラミングがある。マクロだ。これは今まで見てきた。&lt;/p&gt;

&lt;p&gt;これより先はメタプログラミングとはあまり言わない気がする。JITと呼ぶのではないか。Common Lispにもeval関数やcompile関数があるからそういうことも出来る。正規表現ライブラリなんかが使っている。&lt;/p&gt;

&lt;p&gt;私が言いたいのはCommon Lispにはメタプログラミングの機構が一杯あるということではない。read, eval, compile…。気付いたかもしれないが、LispはLisp自身で出来ている。
Lispを書くとき、Lispを書いてるかもしれないしLispを構成するLispを書いているかもしれない。いくらでもメタプログラミングが出来るということだ。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:791da514bc52e2606dbc134b8c6e6cf7&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;何やらCommon Lisp賛美歌になってしまったが一応まとめておく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;簡単なマクロ定義ならS式である必要はない&lt;/li&gt;
&lt;li&gt;複雑なマクロ定義ならS式であると書き易い。恐らく他の構文でも書けないことはない。&lt;/li&gt;
&lt;li&gt;マクロ呼び出し構文はS式でないと重大な違いがある。&lt;/li&gt;
&lt;li&gt;マクロ以外にもリードマクロやパッケージなど他の言語機能があってこそマクロが活きる。&lt;/li&gt;
&lt;li&gt;言語機能だけでなくマクロを前提とした設計も重要である。&lt;/li&gt;
&lt;li&gt;LispはS式で出来ている以前にLispで出来ている。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>あなたの知らないShebang</title>
      <link>http://keens.github.io/blog/2015/06/26/anatanoshiranaishebang</link>
      <pubDate>Fri, 26 Jun 2015 23:24:44 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/06/26/anatanoshiranaishebang</guid>
      <description>

&lt;p&gt;κeenです。最近は何故かBlack君って呼ばれます。Shebangの書き方にはいくつかあって、それを利用したふと面白い方法を思い付いたので共有を。&lt;/p&gt;

&lt;p&gt;さて、ご存知Shebangといえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにファイルの1行目が&lt;code&gt;#!&lt;/code&gt;から始まっているとシェルがそれ以降の文字列を実行可能ファイルのパス名として捜して実行してくれるものですが、実は&lt;code&gt;#!&lt;/code&gt;は唯一のフォーマットではありません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#!&lt;/code&gt;がデファクトになる前なのかそもそもシェルにコメントがなかった時代のものなのかは知りませんが昔は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;: /bin/sh
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と&lt;code&gt;:&lt;/code&gt;で始めていたらしいです。因みに&lt;code&gt;:&lt;/code&gt;は「何もしないコマンド」です。実質的にコメントとして扱ったり副作用のある変数展開だけを行なったりプログラマティックコメントアウトだったりの用途で使われてます。&lt;/p&gt;

&lt;p&gt;さて、シェルは全て文字列なのでクォートしてもしなくても構いません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;quot;:&amp;quot; &amp;quot;/bin/sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としてもちゃんと動いてくれます。なぜわざわざクォートするかというと&lt;a href=&#34;http://keens.github.io/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru/&#34;&gt;割と処理系ポータブルなCommon Lisp実行可能ファイルを作る | κeenのHappy Hacκing Blog&lt;/a&gt;のように別の言語のスクリプトとして実行される時に文字列リテラルになってくれると単純に無視されるので互換性が高まるのです。&lt;/p&gt;

&lt;p&gt;ということで完全版ポータブルなCommon Lisp実行可能ファイルはこうなります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;&amp;quot;:&amp;quot; &amp;quot;/bin/sh&amp;quot;

#|
run_if_exists(){
 command -v $1 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; exec &amp;quot;$@&amp;quot;
}
 run_if_exists cl &amp;quot;$0&amp;quot; &amp;quot;$@&amp;quot;
 run_if_exists sbcl --noinform --no-sysinit --no-userinit --script &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists clisp -norc --quiet --silent -on-error exit  &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists ecl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists mkcl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists alisp -qq -#! &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists ccl --no-init --quiet --batch --load &amp;quot;$0&amp;quot;  --eval &#39;(quit)&#39; -- &amp;quot;$@&amp;quot;
 run_if_exists abcl --noinform --noinit --nosystem --batch --load &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists lisp -quiet -noinit -batch -load &amp;quot;$0&amp;quot; -eval &#39;(quit)&#39; -- &amp;quot;$@&amp;quot;
 echo &amp;quot;No lisp implementation found&amp;quot;
 exit 1
|#

(write-line (lisp-implementation-type))
(force-output)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;abclとcclが利用可能になりました。あとCIMも捜すようにしました。roswellは作者に訊いて下さい。&lt;/p&gt;

&lt;p&gt;ちなみに、shebangの解釈はシェルに依存するのですが、B Shell, csh, tcsh, dash, Bash, zshで動作確認しました。古い機能なので新しいシェルほど切り捨てている可能性があったのですがBashやzshが大丈夫だったので良かったです。
一応非推奨な気がしますがこれしか方法がないので仕方ないですね。&lt;/p&gt;

&lt;p&gt;ということでみなさんスクリプト書きましょう。&lt;/p&gt;

&lt;h1 id=&#34;追記:97aff0076544159c37193ad080a89d0a&#34;&gt;追記&lt;/h1&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/blackenedgold&#34;&gt;@blackenedgold&lt;/a&gt; shebangの解釈はシェルじゃなくてOSのexec()がやります。で、#!や認識できるバイナリ以外は、exec()がエラーを返した後でシェルがファイルを見て、テキストファイルならシェルスクリプトとして実行ってやってます。なので先頭が:の場合は(続&lt;/p&gt;&amp;mdash; Kilo Kawai (@anohana) &lt;a href=&#34;https://twitter.com/anohana/status/614551978526445570&#34;&gt;2015, 6月 26&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/blackenedgold&#34;&gt;@blackenedgold&lt;/a&gt; shebangとしてではなく、シェルがシェルスクリプトとして読んでるだけなので、その後に/bin/shとか書いてあっても関係ないはず (シェルによってはそこも見るかもしれませんが)&lt;/p&gt;&amp;mdash; Kilo Kawai (@anohana) &lt;a href=&#34;https://twitter.com/anohana/status/614552151759589376&#34;&gt;2015, 6月 26&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;ということで実験してみたところ、先頭の&lt;code&gt;&amp;quot;:&amp;quot; &amp;quot;/bin/sh&amp;quot;&lt;/code&gt;はどのシェルも読み飛ばす模様(つまり、&lt;code&gt;&amp;quot;:&amp;quot; &amp;quot;/usr/bin/ruby&amp;quot;&lt;/code&gt;と書いてもrubyが実行される訳ではない)。&lt;/p&gt;

&lt;p&gt;で、先程の 完全版から&lt;code&gt;&amp;quot;:&amp;quot; &amp;quot;/bin/sh&amp;quot;&lt;/code&gt;を取り除いて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;#|
run_if_exists(){
 command -v $1 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; exec &amp;quot;$@&amp;quot;
}
 run_if_exists cl &amp;quot;$0&amp;quot; &amp;quot;$@&amp;quot;
 run_if_exists sbcl --noinform --no-sysinit --no-userinit --script &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists clisp -norc --quiet --silent -on-error exit  &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists ecl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists mkcl -norc -q -shell &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists alisp -qq -#! &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists ccl --no-init --quiet --batch --load &amp;quot;$0&amp;quot;  --eval &#39;(quit)&#39; -- &amp;quot;$@&amp;quot;
 run_if_exists abcl --noinform --noinit --nosystem --batch --load &amp;quot;$0&amp;quot; -- &amp;quot;$@&amp;quot;
 run_if_exists lisp -quiet -noinit -batch -load &amp;quot;$0&amp;quot; -eval &#39;(quit)&#39; -- &amp;quot;$@&amp;quot;
 echo &amp;quot;No lisp implementation found&amp;quot;
 exit 1
|#

(write-line (lisp-implementation-type))
(force-output)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としても動いたのでこれが最終版ということになります。&lt;/p&gt;

&lt;p&gt;大学の講究でMINIX本やったどころかexecのところ自分の担当だったのに恥かしい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shell Scriptを書くときのテクニック10選</title>
      <link>http://keens.github.io/blog/2015/06/17/shell_scriptwokakutokinikiwotsuketaikoto</link>
      <pubDate>Wed, 17 Jun 2015 22:12:25 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/06/17/shell_scriptwokakutokinikiwotsuketaikoto</guid>
      <description>

&lt;p&gt;κeenです。LLで書かれた動作のもっさりしてるコマンドラインツールよりシェルスクリプトが好きです。&lt;/p&gt;

&lt;p&gt;しかしシェルスクリプトを書く時にはハマり所も多いです。ということでハマりそうなところと対処法を共有しますね。&lt;/p&gt;

&lt;h1 id=&#34;1-変数は基本クォート:5e57d8f93a32720e126e1053ccd91901&#34;&gt;1. 変数は基本クォート&lt;/h1&gt;

&lt;p&gt;変数には空白が入り得ます（特にパス名とか）。あるいは空である可能性もあります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mv file1 file2 $target_dir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で&lt;code&gt;$target_dir&lt;/code&gt;が空だった時は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mv file1 file2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となってしまいます。file2が上書きされますね。恐ろしい。&lt;/p&gt;

&lt;p&gt;クォートで括っておけば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mv file1 file2 &amp;quot;$target_dir&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mv file1 file2 &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となり辺なディレクトリに書き込もうとしてエラーになります。まだマシですね。&lt;/p&gt;

&lt;p&gt;基本、と書いたのはクォートしたくない場合もあるからです。例えばこんな時ですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;items=&amp;quot;foo bar baz&amp;quot;
for item in $items
do
    echo &amp;quot;$item&amp;quot;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;変数展開の後にトークン分割が行なわれるので空白で区切れば複数のトークンを1つの変数に入れられます。&lt;/p&gt;

&lt;h1 id=&#34;2-eオプションをつけよう:5e57d8f93a32720e126e1053ccd91901&#34;&gt;2. -eオプションをつけよう&lt;/h1&gt;

&lt;p&gt;シェルには例外がありません。何かが失敗しても走り続けます。これは時に迷惑な挙動です。しかし &lt;code&gt;-e&lt;/code&gt;オプションをつけると0以外の終了ステータスが出た瞬間スクリプトが止まるようになります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-e&lt;/code&gt;オプションを有効にするには&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
set -e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば良いです。0以外のステータスで終了し得るコマンドの例外ハンドル的なことをしたければ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;trying_command || true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすれば確実に0で終了します。&lt;/p&gt;

&lt;p&gt;また、スクリプトの途中で&lt;code&gt;-e&lt;/code&gt;を切り替えたければ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
set -e
# -eが有効
set +e
# -eが無効
set -e
# -eが有効
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように&lt;code&gt;set -e&lt;/code&gt;と&lt;code&gt;set +e&lt;/code&gt;で制御出来ます。&lt;/p&gt;

&lt;h1 id=&#34;3-カレントディレクトリはスクリプトを起動した場所:5e57d8f93a32720e126e1053ccd91901&#34;&gt;3. カレントディレクトリはスクリプトを起動した場所&lt;/h1&gt;

&lt;p&gt;例えば ~/Shell/hoge.shにこう書いたとします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
cat ./hoge.sh
pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それを実行するとこうなります&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/Shell
$ sh hoge.sh
#!/bin/sh
cat ./hoge.sh
pwd
/home/kim/Shell
$ cd ../
$ sh Shell/hoge.sh
hoge.sh: no such file or directory
/home/kim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なのでシェルスクリプト内での相対パスは基本的に信用出来ません。&lt;/p&gt;

&lt;p&gt;スクリプトの相対でパスを指定したいならこうしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/sh
ROOT=&amp;quot;$(cd $(dirname $0); pwd)&amp;quot;
cat &amp;quot;$ROOT/hoge.sh&amp;quot;
pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$(cd $(dirname $0); pwd)&lt;/code&gt; がキモです。 $0には起動スクリプトが入ってます。 &lt;code&gt;$ ./hoge.sh&lt;/code&gt;と起動したなら &lt;code&gt;./hoge.sh&lt;/code&gt;が、 &lt;code&gt;$ ../hoge.sh&lt;/code&gt; なら &lt;code&gt;../hoge.sh&lt;/code&gt;が。そのスクリプトがあるディレクトリに移動(&lt;code&gt;cd $(dirname $0)&lt;/code&gt;) して&lt;code&gt;pwd&lt;/code&gt;するとスクリプトのあるディレクトリの絶対パスがとれます。&lt;/p&gt;

&lt;p&gt;因みにこのイディオムはスクリプトにリンクを張られると困ります。 &lt;code&gt;readlink(1)&lt;/code&gt; を使う流儀もあるのですがreadlinkがMacとLinuxで全然違い、互換性を保てないのでおすすめしません。&lt;/p&gt;

&lt;h1 id=&#34;4-sudo-command-fileでパーミッションエラー:5e57d8f93a32720e126e1053ccd91901&#34;&gt;4. sudo command &amp;gt;&amp;gt; fileでパーミッションエラー&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; (&lt;code&gt;&amp;gt;&lt;/code&gt;) を使った時にファイルに書き込んでるのは &lt;code&gt;command&lt;/code&gt;ではなくてシェルなのでシェルのアクセス権限でパーミッションエラーが出ます。sudoして書き込みたいなら&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo command &amp;gt; file&lt;/code&gt; ではなく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ command | sudo tee file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を、&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo command &amp;gt;&amp;gt; file&lt;/code&gt; ではなく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ command | sudo tee -a file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を使いましょう。&lt;/p&gt;

&lt;p&gt;関連して、&lt;code&gt;echo&lt;/code&gt;は外部コマンドではなくシェルの組込みコマンドなのでsudoに渡すことが出来ません。これもファイルに書き込む目的ならechoとsudo teeをパイプで繋ぎましょう。&lt;/p&gt;

&lt;h1 id=&#34;5-sudoのパスワードを渡せない:5e57d8f93a32720e126e1053ccd91901&#34;&gt;5. sudoのパスワードを渡せない&lt;/h1&gt;

&lt;p&gt;スクリプト内でsudoを扱うのは少しテクニックが必要になります。sudoに-Sを付けると標準入力からパスワードを読むようになります。かといってソースにベタ書きする訳にはいきません。
ということで、こうなります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;printf &amp;quot;password: &amp;quot;
read password
echo &amp;quot;$password&amp;quot; | sudo -S command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ユーザにパスワードを要求し、メモリに保存。必要な時にsudoに渡すという流れです。&lt;/p&gt;

&lt;p&gt;シェルに依ってはreadに-sをつけることでエコーバックしなくなるのでディスプレイにパスワードが流れてくることはありません。未確認ですがdash(Debian系の/bin/sh)では出来なくてB shell(BSD系の/bin/sh)やBash、Zshなどの拡張POSIXシェルだと出来そうです。&lt;/p&gt;

&lt;p&gt;余談ですが改行なしの印字に&lt;code&gt;echo -n&lt;/code&gt;は使えません。&lt;code&gt;-n&lt;/code&gt; シェルによってはオプションを認識しないので。printf(1)はPOSIXにあるのでポータブルに使えます。&lt;/p&gt;

&lt;p&gt;因みにパスワードが初期化されてないならユーザに訊く、というのはこういう関数を実装すれば良さそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;password(){
    if ! ${password+:} false
    then
        printf &amp;quot;password: &amp;quot;
        read -s password
    fi
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;6-sudoのパスワードを渡しつつ標準出力も渡したい:5e57d8f93a32720e126e1053ccd91901&#34;&gt;6. sudoのパスワードを渡しつつ標準出力も渡したい&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;{ echo &amp;quot;$password&amp;quot; ; cat } | sudo -S command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しましょう。&lt;/p&gt;

&lt;h1 id=&#34;7-リモートでスクリプトを実行したい:5e57d8f93a32720e126e1053ccd91901&#34;&gt;7. リモートでスクリプトを実行したい&lt;/h1&gt;

&lt;p&gt;一旦scpでスクリプトを送ってから実行？そんな面倒なことしたくありません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh user@remote &amp;lt;&amp;lt;SHELL
#  some script
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で実行出来ます。これはログインシェルで実行します。ログインシェル如何に関わらずshで実行したいなら(ログインシェルがcshとかnologinとかは割とありえる)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh user@remote sh &amp;lt;&amp;lt;SHELL
#  some script
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としましょう。&lt;/p&gt;

&lt;h1 id=&#34;8-リモートでsudoのパスワードを渡したい:5e57d8f93a32720e126e1053ccd91901&#34;&gt;8. リモートでsudoのパスワードを渡したい&lt;/h1&gt;

&lt;p&gt;先のテクニックがそのまま使えます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;printf &amp;quot;password: &amp;quot;
read password
ssh user@remote sh &amp;lt;&amp;lt;SHELL
echo &amp;quot;$password&amp;quot; | sudo -S command
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クォート無しのヒアドキュメントのシェル変数の展開はローカルで行なわれるのでローカルにある変数がそのまま参照出来ます。&lt;/p&gt;

&lt;h1 id=&#34;9-リモートにローカルに置いてあるファイルを送りたい:5e57d8f93a32720e126e1053ccd91901&#34;&gt;9. リモートにローカルに置いてあるファイルを送りたい&lt;/h1&gt;

&lt;p&gt;scpでも良いですがroot loginを許可してないと設定ファイルを/etcに置けないなどと不都合が生じます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh user@remote sh &amp;lt;&amp;lt;SHELL
cat &amp;lt;&amp;lt;&#39;EOF&#39; &amp;gt;&amp;gt; some_remote_file
$(cat local_file)
EOF
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは少し解説が必要でしょうか。&lt;/p&gt;

&lt;p&gt;まず、先程も出てきた&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh user@remote sh &amp;lt;&amp;lt;SHELL
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ですが普通のヒアドキュメントなので中の変数やコマンド置換を展開します。ということでリモートで実行されるのは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat &amp;lt;&amp;lt;&#39;EOF&#39; &amp;gt;&amp;gt; some_remote_file
# the content of
# local_file
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。そしてcatのヒアドキュメントはクォート付きなのでlocal_fileの中身がさらに変数展開されることはありません。&lt;/p&gt;

&lt;p&gt;勿論、root権限で書き込みたかったら先程までのテクニックを組み合わせて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh user@remote sh &amp;lt;&amp;lt;SHELL
{ echo &amp;quot;$password&amp;quot; ; cat &amp;lt;&amp;lt;&#39;EOF&#39; } | sudo -S tee  some_remote_file
$(cat local_file)
EOF
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として下さい.&lt;/p&gt;

&lt;h1 id=&#34;10-リモートにあるファイルを編集したい:5e57d8f93a32720e126e1053ccd91901&#34;&gt;10. リモートにあるファイルを編集したい&lt;/h1&gt;

&lt;p&gt;sed(1)を使いましょう。あるいは、sedだと辛いならローカルでファイルを編集、diffをとってpatch(1)を使いましょう。diffの送り方はもう分かりますね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh user@remote sh &amp;lt;&amp;lt;SHELL
cat &amp;lt;&amp;lt;&#39;EOF&#39; |  patch
$(cat file.diff)
EOF
SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;いかがでしょうか。テクニックさえ抑えればシェルスクリプトは料理人だか板前だか知りませんが流行に流されるツールにも負けない力があると思います。動作も速い。
みなさんシェルスクリプト書きましょうね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rustでstructのmutableなfieldあれこれ</title>
      <link>http://keens.github.io/blog/2015/06/14/rustdestructnomutablenafieldarekore</link>
      <pubDate>Sun, 14 Jun 2015 17:53:11 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/06/14/rustdestructnomutablenafieldarekore</guid>
      <description>

&lt;p&gt;κeenです。人々にRustを薦めておきながら本人は昨日ようやく入門しました。その時に困ったことをメモ。タイトルがルー語になってますが気にしない。&lt;/p&gt;

&lt;p&gt;因みにこれはRust 1.0の情報です。&lt;/p&gt;

&lt;h1 id=&#34;導入:3ab5e7833b8f9de647371db38dc333a5&#34;&gt;導入&lt;/h1&gt;

&lt;p&gt;Rustを知らない人のために説明すると、Rustの値はデフォルトでイミュータブルです。デフォルトで、というのはもちろんミュータブルにすることも出来ます。
標準ライブラリにも値がイミュータブルであることを要求するものもあります。
そしてミュータビリティは&lt;code&gt;mut&lt;/code&gt;として型にも現れます。厳密に同じかは知りませんが&lt;code&gt;const&lt;/code&gt;の逆、と思えばいいでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct Point {
    x: isize,
    y: isize
}

fn double(p: &amp;amp;mut Point) {
    p.x = p.x * 2;
    p.y = p.y * 2;
}

fn main(){
    let mut p1 = Point{x: 1, y: 2};
    let p2 = Point{x: 1, y: 2};
    double(&amp;amp;mut p1);
    double(&amp;amp;mut p2); // error! p2 is immutable
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;イミュータビリティは継承します。親のstructがイミュータブルなら子もイミュータルになります。因みにフィールドに&lt;code&gt;mut&lt;/code&gt;を指定することは出来ないようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::collections::HashMap;

struct IntHashMap {
    hash: HashMap&amp;lt;isize, isize&amp;gt;
}
fn main(){
    let h = IntHashMap{hash: HashMap::new()};
    h.hash.insert(1, 2);        // error! h.hash is immutable
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後に、少し本筋とずれますがtraitについて。他の言語でいうインターフェースのようなものです。今回これで困ったので。&lt;/p&gt;

&lt;p&gt;例えばHTTPライブラリの&lt;a href=&#34;http://hyper.rs/hyper/hyper/server/trait.Handler.html&#34;&gt;hyper&lt;/a&gt;では次のようなトレイトを実装しているstructをrequest handlerとして登録できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;pub trait Handler: Sync + Send {
    fn handle&amp;lt;&#39;a, &#39;k&amp;gt;(&amp;amp;&#39;a self, Request&amp;lt;&#39;a, &#39;k&amp;gt;, Response&amp;lt;&#39;a, Fresh&amp;gt;);

    fn check_continue(&amp;amp;self, _: (&amp;amp;Method, &amp;amp;RequestUri, &amp;amp;Headers)) -&amp;gt; StatusCode { ... }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを見て下さい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn handle&amp;lt;&#39;a, &#39;k&amp;gt;(&amp;amp;&#39;a self, Request&amp;lt;&#39;a, &#39;k&amp;gt;, Response&amp;lt;&#39;a, Fresh&amp;gt;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;self&lt;/code&gt;に&lt;code&gt;mut&lt;/code&gt;がついてませんね。つまりhandlerはイミュータブルな値として渡されます。例えば先の例のようにフィールドにハッシュマップを持っていても更新出来ません。ちょっと困りますね。&lt;/p&gt;

&lt;h1 id=&#34;cell-refcell:3ab5e7833b8f9de647371db38dc333a5&#34;&gt;Cell/RefCell&lt;/h1&gt;

&lt;p&gt;ということでフィールドにミュータビリティを入れるのが &lt;code&gt;std::cell::{Cell, RefCell}&lt;/code&gt; です。この辺のブログを参考に。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://saneyukis.hatenablog.com/entry/2014/05/30/230351&#34;&gt;#rustlang における構造体のmutabilityと&lt;code&gt;Cell/RefCell&lt;/code&gt; - snyk_s log&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;で、喜び勇んで使ったのですが次なるエラーが。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct MyHandler {
    cache: RefCell&amp;lt;HashMap&amp;lt;String, Vec&amp;lt;u8&amp;gt;&amp;gt;&amp;gt;
}

impl Handler for MyHandler {
    fn handle&amp;lt;&#39;a, &#39;k&amp;gt;(&amp;amp;&#39;a self, Request&amp;lt;&#39;a, &#39;k&amp;gt;, Response&amp;lt;&#39;a, Fresh&amp;gt;){
        ....
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;the trait `core::marker::Sync` is not implemented for the type `core::cell::UnsafeCell&amp;lt;...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうも、hyperは複数スレッドでも動かせるのでハンドラにスレッドセーフであることが要求されるようです。そしてRustコンパイラはRefCellがスレッドセーフでない事を知っているのでコンパイルを弾きます。怖いですね。&lt;/p&gt;

&lt;h1 id=&#34;mutex:3ab5e7833b8f9de647371db38dc333a5&#34;&gt;Mutex&lt;/h1&gt;

&lt;p&gt;無理っぽいので最早別の手段を捜し始めます。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;キャッシュ用のアクター走らせるのが良い気がしてきた&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/609471732970209280&#34;&gt;2015, 6月 12&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;これはちょっと無理がありそうですね。&lt;/p&gt;

&lt;p&gt;しかし、別の方法があるようでした。&lt;a href=&#34;https://doc.rust-lang.org/std/sync/struct.Mutex.html&#34;&gt;std::sync::Mutex&lt;/a&gt;です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct MyHandler {
    cache: Mutex&amp;lt;HashMap&amp;lt;String, Vec&amp;lt;u8&amp;gt;&amp;gt;&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで&lt;code&gt;lock().unwrap()&lt;/code&gt;するだけで使えます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;let mut cache = self.cache.lock().unwrap();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因みにロックの解除は不要です。Rustコンパイラは値の生存期間を知っているので値がこれ以上使われなくなった箇所にコンパイラがunlockを挟みます。(正確に言うとdrop(デストラクタ)が挿入され、dropがリソースの開放を行なう)&lt;/p&gt;

&lt;h1 id=&#34;まとめ:3ab5e7833b8f9de647371db38dc333a5&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;rustのイミュータビリティは継承する&lt;/li&gt;
&lt;li&gt;structのfieldに直接&lt;code&gt;mut&lt;/code&gt;は指定出来ない&lt;/li&gt;
&lt;li&gt;シングルスレッドでミュータブルなフィールドが欲しいなら&lt;code&gt;Cell&lt;/code&gt;/&lt;code&gt;RefCell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;マルチスレッドなら&lt;code&gt;Mutex&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ClojureでOpenCV 3.0と戯れる</title>
      <link>http://keens.github.io/blog/2015/06/07/clojuredeopencv3_0totawamureru</link>
      <pubDate>Sun, 07 Jun 2015 16:56:51 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/06/07/clojuredeopencv3_0totawamureru</guid>
      <description>

&lt;p&gt;κeenです。先日OpenCV 3.0がリリースされましたね。
ちょっと触ってみようと思ったのですが公式バインディングがC++、C、Java、Pythonと中々つらい言語ばっかりなので扱いやすいClojureから触った時のメモです。&lt;/p&gt;

&lt;p&gt;2系とはAPIが変わってる部分もあるらしく、苦労しました。
UbuntuでやってるのでMacの人は適当に読み替えて下さい。&lt;/p&gt;

&lt;h1 id=&#34;準備:f3a429adc3106e7ec83e1e87bf1a8a30&#34;&gt;準備&lt;/h1&gt;

&lt;h2 id=&#34;opencv:f3a429adc3106e7ec83e1e87bf1a8a30&#34;&gt;OpenCV&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://opencv.org/&#34;&gt;公式&lt;/a&gt;からOpenCV 3.0をダウンロードしてきましょう。展開してからは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd opencv-3.0.0
$ cmake .
$ make -j4
$ sudo make -j4 install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でインストールまでしてくれます。&lt;/p&gt;

&lt;h2 id=&#34;imshow:f3a429adc3106e7ec83e1e87bf1a8a30&#34;&gt;ImShow&lt;/h2&gt;

&lt;p&gt;どうも3.0からHighguiというQtベースのGUIツール群のJavaバインディングが作られなくなったそうです。Swing使えと。&lt;/p&gt;

&lt;p&gt;ということでOpenCVとSwingのブリッジしてくれる軽いライブラリが&lt;a href=&#34;https://github.com/master-atul/ImShow-Java-OpenCV&#34;&gt;ImShow-Java-OpenCV&lt;/a&gt;
です。.javaファイル1枚なので本当に軽いです。&lt;/p&gt;

&lt;p&gt;.jarもレポジトリに入ってるのですがソースコードより古いらしく、自分でビルドする必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:master-atul/ImShow-Java-OpenCV.git
$ cd ImShow-Java-OpenCV/ImShow_JCV/src
$ javac com/atul/JavaOpenCV/Imshow.java
$ jar -cf Imshow.jar com/atul/JavaOpenCV/Imshow.class
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lein-プロジェクト:f3a429adc3106e7ec83e1e87bf1a8a30&#34;&gt;lein プロジェクト&lt;/h2&gt;

&lt;p&gt;Clojureのプロジェクト管理ツールの&lt;a href=&#34;http://leiningen.org/&#34;&gt;Leiningen&lt;/a&gt;を使います。知らない人は適当にググって下さい。&lt;/p&gt;

&lt;p&gt;まずプロジェクトを作ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lein new opencv-play
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んで、mavenでいうところのpom.xmlにあたるproject.cljをいじります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd opencv-play
$ cat project.clj
(defproject opencv-play &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies [[org.clojure/clojure &amp;quot;1.6.0&amp;quot;]])
$ edit project.clj
$ cat project.clj
(defproject opencv-play &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :description &amp;quot;FIXME: write description&amp;quot;
  :url &amp;quot;http://example.com/FIXME&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies [[org.clojure/clojure &amp;quot;1.6.0&amp;quot;]
                 [cider/cider-nrepl &amp;quot;0.9.0-SNAPSHOT&amp;quot;]]
  :jvm-opts [&amp;quot;-Djava.library.path=./lib&amp;quot;]
  :resource-paths [&amp;quot;./lib/opencv-300.jar&amp;quot;
                   &amp;quot;./lib/Imshow.jar&amp;quot;]
  :injections [(clojure.lang.RT/loadLibrary org.opencv.core.Core/NATIVE_LIBRARY_NAME)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そしたら先程のライブラリ達を配置します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir lib
$ cp /usr/local/share/OpenCV/java/* lib
$ cp /path/to/ImShow-Java-OpenCV/ImShow_JCV/src/Imshow.jar lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ついでにlenaも呼びましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir img
$ cp /path/to/src/of/opencv-3.0.0/samples/data/lena.jpg img
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;遊ぶ:f3a429adc3106e7ec83e1e87bf1a8a30&#34;&gt;遊ぶ&lt;/h1&gt;

&lt;p&gt;準備完了ってことでREPLを起動しましょう。ちょっと遅いですが我慢。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lein repl
Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar 
Picked up JAVA_TOOL_OPTIONS: -javaagent:/usr/share/java/jayatanaag.jar 
nREPL server started on port 52301 on host 127.0.0.1 - nrepl://127.0.0.1:52301
REPL-y 0.3.5, nREPL 0.2.6
Clojure 1.6.0
Java HotSpot(TM) 64-Bit Server VM 1.8.0_25-b17
    Docs: (doc function-name-here)
          (find-doc &amp;quot;part-of-name-here&amp;quot;)
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e

user=&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このままREPLを使ってもいいですが私はEmacsから&lt;a href=&#34;https://github.com/clojure-emacs/cider&#34;&gt;CIDER&lt;/a&gt;でnREPLにつなぎます。
REPLでも補完は効くのでEmacsやらのエディタの設定が面倒ならこのままでも十分ですよ。&lt;/p&gt;

&lt;p&gt;まずは画像のロードから。2系とは違ってImagecodecを使うようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user&amp;gt; (import [org.opencv.imgcodecs Imgcodecs])
org.opencv.imgcodecs.Imgcodecs
user&amp;gt; (def lena (Imgcodecs/imread &amp;quot;img/lena.jpg&amp;quot;))
#&#39;user/lena
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いじる前に表示してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user&amp;gt; (import [com.atul.JavaOpenCV Imshow])
com.atul.JavaOpenCV.Imshow
user&amp;gt; (def is (Imshow. &amp;quot;Lena&amp;quot;))
#&#39;user/is
user&amp;gt; (.showImage is lena)
nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://KeenS.github.io/images/clojure-opencv/show-lena.png&#34; alt=&#34;lena&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;よしよし。表示されましたね。ではこの辺を参考に顔認識してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/woxtu/items/bf39e3d53cbf60396d2c&#34;&gt;Clojure - 二次元絵の顔を検出する - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まずは必要なパッケージの読み込み&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user&amp;gt; (import [org.opencv.core Mat CvType])
org.opencv.core.CvType
user&amp;gt; (import [org.opencv.imgproc Imgproc])
org.opencv.imgproc.Imgproc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前処理のグレースケール変換からヒストグラムの均一化まで一気にやってしまいましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user&amp;gt; (def buffer (Mat. 512 512 CvType/CV_8UC3))
#&#39;user/buffer
user&amp;gt; (Imgproc/cvtColor lena buffer Imgproc/COLOR_RGB2GRAY)
nil
user&amp;gt; (Imgproc/equalizeHist buffer buffer)
nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで一旦画像の確認。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user&amp;gt; (.showImage is buffer)
nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://KeenS.github.io/images/clojure-opencv/gray-hist-lena.png&#34; alt=&#34;gray-hist-lena&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;ふむふむ。ではでは顔を認識しますか。&lt;/p&gt;

&lt;p&gt;まずは色々準備します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user&amp;gt; (import [org.opencv.core MatOfRect])
org.opencv.core.MatOfRect
user&amp;gt; (import [org.opencv.objdetect CascadeClassifier])
org.opencv.objdetect.CascadeClassifier
user&amp;gt; (def faces (MatOfRect.))
#&#39;user/faces
user&amp;gt; (def classifier (CascadeClassifier.))
#&#39;user/classifier
user&amp;gt; (.load classifier &amp;quot;/usr/local/share/OpenCV/haarcascades/haarcascade_frontalface_default.xml&amp;quot;)
true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因みに分類器のデータのロードは成功がtrueで失敗がfalseだそうです。例外投げないんですね。ハマった。パス名に&lt;code&gt;~&lt;/code&gt;を使うと(ホームを省略表記すると)ロードに失敗するようなのでお気をつけて。&lt;/p&gt;

&lt;p&gt;それでは実行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user&amp;gt; (.detectMultiScale classifier buffer faces)
nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さて、顔の位置がとれたので画像に重ねるのですがここではSwing(AWT)の描画を使ってみましょう。
OpenCVの描画は画像に描画するのでファイルに書き出しても残っているのに対してSwingのだと表示しているフレームに描画するので書き出した画像には残りません。また、リフレッシュすれば消えるのでインタラクティブに実験するのに向いてます。&lt;/p&gt;

&lt;p&gt;一旦準備。フレームをレナの元画像に戻しておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user&amp;gt; (import [java.awt Rectangle Color])
java.awt.Color
user&amp;gt; (.showImage is lena)
nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ImshowのWndowというパブリックなメンバにJFrameが入ってるのでそれを操作します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user&amp;gt; (def g2 (.getGraphics (.Window is)))
#&#39;user/g2
user&amp;gt; (.setColor g2 Color/GREEN)
nil
user&amp;gt; (doseq [face (.toList faces)]
  (let [rect (Rectangle.)]
    (do
      (.setRect rect (.width face) (.height face) (.x face) (.y face))
      (.draw g2 rect))))
nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://KeenS.github.io/images/clojure-opencv/face-recognized-lena.png&#34; alt=&#34;face recognized lena&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;パチパチパチ&lt;/p&gt;

&lt;p&gt;因みに四角形を消すには&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user&amp;gt; (.showImage is lena)
nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で十分です。ミスっても何回でもやり直せますね。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:f3a429adc3106e7ec83e1e87bf1a8a30&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;因みに3.0のドキュメントが探しづらいのですが、masterにあるようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.opencv.org/master/&#34;&gt;OpenCV: OpenCV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OpenCVをインタラクティブに扱えると楽しいのでみなさんClojure使いましょう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TCOと例外ハンドル</title>
      <link>http://keens.github.io/blog/2015/05/31/tcotoreigaihandoru</link>
      <pubDate>Sun, 31 May 2015 21:02:08 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/05/31/tcotoreigaihandoru</guid>
      <description>

&lt;p&gt;κeenです。&lt;a href=&#34;http://KeenS.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou&#34;&gt;先日のエントリー&lt;/a&gt;の最後でループ内で例外ハンドルをすると極端に遅くなるということを書きましたが、それについて。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ループ内でExceptionをhandleしてる所為だった。ループの外に出したら超速になってインタプリタの方が20倍遅くなった。&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/604235677337714689&#34;&gt;2015, 5月 29&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/blackenedgold&#34;&gt;@blackenedgold&lt;/a&gt; うーん、ちょっと例外のことは詳しくないんですが、予想だと例外ハンドラをループ内にいれると毎回スタックに積むんで外す操作がはさまることになるのでレジスタで完結してるようなループ処理だと露骨に遅くなるかもしれません&lt;/p&gt;&amp;mdash; Ocamlアイドル (@no_maddo) &lt;a href=&#34;https://twitter.com/no_maddo/status/604537509771501569&#34;&gt;2015, 5月 30&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/blackenedgold&#34;&gt;@blackenedgold&lt;/a&gt; あーありえますね。ジャンプで済むところを戻ってきてスタックに積んだのを除去しないといけませんからね。ちょっと手元にマシンが無いのですがネイティブコードで実験してみますー&lt;/p&gt;&amp;mdash; Ocamlアイドル (@no_maddo) &lt;a href=&#34;https://twitter.com/no_maddo/status/604540519188815872&#34;&gt;2015, 5月 30&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/blackenedgold&#34;&gt;@blackenedgold&lt;/a&gt; ocamlでも例外ハンドラのはさみ方で末尾再帰になったり、ならなかったりするというのは聞いたことがあるので多分あたりな気がします&lt;/p&gt;&amp;mdash; Ocamlアイドル (@no_maddo) &lt;a href=&#34;https://twitter.com/no_maddo/status/604545844000325632&#34;&gt;2015, 5月 30&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;ということで実験してみましょう。&lt;/p&gt;

&lt;p&gt;次のような何がしたいのか分からないループのベンチマークを取ってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;val () = let
    val arr = Array.array(1000000, 0)
    val i = ref 0
    fun loop () = (
        Array.update(arr, !i, 1);
        i := (!i) + 1;
        loop ()
    )
in
    Benchmark.benchmark &amp;quot;loop&amp;quot; 1 (fn () =&amp;gt; 
                                     loop()
                                 )
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結果は無限ループではなく&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;uncaught exception: Subscript
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と、境界外アクセスの例外が出ます。因みにSubscripは添字って意味だそうです。&lt;/p&gt;

&lt;p&gt;これではベンチマークがとれないので、例外が起きたらループを抜けるようにしてみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;val () = let
    val arr = Array.array(1000000, 0)
    val i = ref 0
    fun loop () = (
        Array.update(arr, !i, 1);
        i := (!i) + 1;
        loop ()
    )
in
    Benchmark.benchmark &amp;quot;loop&amp;quot; 1 (fn () =&amp;gt; 
                                     loop()
                                     handle Subscript =&amp;gt; ()
                                 )
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;loop
 Time:
    [Total] 5 ms/1calls
  [Average] 5.0 ms/call
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一瞬ですね。では、末尾呼び出し位置でhandleしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;val () = let
    val arr = Array.array(100, 0)
    val i = ref 0
    fun loop () = (
        Array.update(arr, !i, 1);
        i := (!i) + 1;
        loop ()
        handle Subscript =&amp;gt; ()
    )
in
    Benchmark.benchmark &amp;quot;loop&amp;quot; 1 (fn () =&amp;gt; 
                                     loop()
                                 )
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;loop
 Time:
    [Total] 1729 ms/1calls
  [Average] 1729.0 ms/call
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ふーむ。やはり大分遅くなってますね。しかしループ内で例外をハンドルした所為かもしれないのでループ内で非末尾位置で例外をハンドルしてみます。大域脱出に例外使いますがまあ、パフォーマンスに問題ないでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;exception Exit
val () = let
    val arr = Array.array(1000000, 0)
    val i = ref 0
    fun loop () = (
        Array.update(arr, !i, 1)
        handle Subscript =&amp;gt; raise Exit;
        i := (!i) + 1;
        loop ()
    )
in
    Benchmark.benchmark &amp;quot;loop&amp;quot; 1 (fn () =&amp;gt; 
                                     loop()
                                     handle Exit =&amp;gt; ()
                                 ) 
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;loop
 Time:
    [Total] 11 ms/1calls
  [Average] 11.0 ms/call
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やはり多少は遅くなってますが末尾位置の時のように極端には遅くなってないようです。&lt;/p&gt;

&lt;p&gt;最後に非末尾再帰ループの速度を測っておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;val () = let
    val arr = Array.array(1000000, 0)
    val i = ref 0
    fun loop () = (
        Array.update(arr, !i, 1);
        i := (!i) + 1;
        1 + (loop ())
    )
in
    Benchmark.benchmark &amp;quot;loop&amp;quot; 1 (fn () =&amp;gt; 
                                     loop()
                                     handle Subscript =&amp;gt; 0
                                 ) 
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;loop
 Time:
    [Total] 403 ms/1calls
  [Average] 403.0 ms/call
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;思ったより遅いですね。ループか末尾例外ハンドルかというと末尾例外ハンドルに近いスコア。&lt;/p&gt;

&lt;h1 id=&#34;考察:f585d8bf5500b51a365c4e77d660ffa5&#34;&gt;考察&lt;/h1&gt;

&lt;p&gt;末尾位置で例外をハンドルすると遅くなる原因はTCOが効かないから、で合ってそうです。&lt;/p&gt;

&lt;p&gt;しかしそれにしても遅いですね。例外ハンドラをスタックに積むのが1関数呼び出しくらいならせいぜい倍くらいの遅さで済む筈です。
もしかしたらループ展開とかの外の最適化も掛からなくなるのかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;結論:f585d8bf5500b51a365c4e77d660ffa5&#34;&gt;結論&lt;/h1&gt;

&lt;p&gt;例外をハンドルする時は位置に気をつけましょうね。&lt;/p&gt;

&lt;h1 id=&#34;付録a:f585d8bf5500b51a365c4e77d660ffa5&#34;&gt;付録A&lt;/h1&gt;

&lt;p&gt;ベンチマーカはこんなコードです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;structure Benchmark =
struct
fun repeat 0 f = ()
  | repeat n f =  (f ();repeat (n - 1) f)
 
fun bench n f = let
    val startTime = Time.now ()
    val _ = repeat n f
    val endTime = Time.now ()
in
    Time.toMilliseconds (Time.-(endTime, startTime))
end
 
fun benchmark name n f = let
    val time = bench n f
in
    print (name ^ &amp;quot;\n&amp;quot;);
    print (&amp;quot; Time:\n&amp;quot;);
    print (&amp;quot;    [Total] &amp;quot; ^ (LargeInt.toString time) ^ &amp;quot; ms/&amp;quot; ^ (Int.toString n) ^ &amp;quot;calls\n&amp;quot;);
    print (&amp;quot;  [Average] &amp;quot; ^ (Real.toString((Real.fromLargeInt time) / (Real.fromInt n))) ^ &amp;quot; ms/call\n&amp;quot;)
end

fun nChars n char = CharArray.vector(CharArray.array(n, char))

fun toWidth width str = let
    val len = String.size str
in
    if len &amp;lt; width
    then str ^ (nChars (width - len) #&amp;quot; &amp;quot;)
    else str
end

fun histLine width base value =
  (nChars (Int.fromLarge(width * value div base)) #&amp;quot;*&amp;quot;) ^ &amp;quot;\n&amp;quot;

fun benchset name n fs = let
    val res = List.map (fn (label, f) =&amp;gt; (label, bench n f)) fs
    val max = List.foldl (fn ((_, time), m) =&amp;gt; LargeInt.max(time, m)) 0 res
    val maxLen = List.foldl (fn ((label, _), m) =&amp;gt; Int.max(String.size label,  m)) 0 fs
in
    print &amp;quot;name:\n&amp;quot;;
    print ((nChars ((String.size &amp;quot; &amp;quot;) + maxLen) #&amp;quot;-&amp;quot;) ^ &amp;quot;+&amp;quot; ^ (nChars ((String.size &amp;quot;|&amp;quot;) +  50) #&amp;quot;-&amp;quot;) ^ &amp;quot;\n&amp;quot;);
    app (fn (label, time) =&amp;gt; print(&amp;quot; &amp;quot; ^ (toWidth maxLen label) ^ &amp;quot;|&amp;quot; ^(histLine (50:LargeInt.int) max time))) res;
    print ((nChars ((String.size &amp;quot; &amp;quot;) + maxLen) #&amp;quot;-&amp;quot;) ^ &amp;quot;+&amp;quot; ^ (nChars ((String.size &amp;quot;|&amp;quot;) +  50) #&amp;quot;-&amp;quot;) ^ &amp;quot;\n&amp;quot;)
end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;付録b:f585d8bf5500b51a365c4e77d660ffa5&#34;&gt;付録B&lt;/h1&gt;

&lt;p&gt;元々、なんでこの問題が生じたかというと一々境界チェックして配列にアクセスするより例外出させといた方が速いんじゃね？ってことでそういうコードを書いたからです。
例外が出るってことは内部でも境界チェックしてる筈ですから。&lt;/p&gt;

&lt;p&gt;ということでどちらが速いか確認してみましょう。&lt;/p&gt;

&lt;p&gt;まず例外ハンドル方式。先程のままだと数ミリ秒で終わってたので配列の大きさを10倍しました。あと。実際に書きそうな書き方に変えました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;val () = let
    val len = 10000000
    val arr = Array.array(len, 0)
    fun loop i = (
        Array.update(arr, i, 1);
        loop (i + 1)
    )
in
    Benchmark.benchmark &amp;quot;loop&amp;quot; 1 (fn () =&amp;gt; 
                                     loop 0
                                     handle Subscript =&amp;gt; ()
                                 ) 
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;loop
 Time:
    [Total] 48 ms/1calls
  [Average] 48.0 ms/call
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まあ、こんなもんですね。&lt;/p&gt;

&lt;p&gt;次にifで分岐するやりかた。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;val () = let
    val len = 10000000
    val arr = Array.array(len, 0)
    fun
    loop i = if i &amp;lt; len
             then (
                 Array.update(arr, i, 1);
                 loop (i + 1))
             else ()
in
    Benchmark.benchmark &amp;quot;loop&amp;quot; 1 (fn () =&amp;gt; 
                                     loop 0
                                     handle Subscript =&amp;gt; ()
                                 ) 
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;loop
 Time:
    [Total] 96 ms/1calls
  [Average] 96.0 ms/call
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;倍くらい遅くなってますね。&lt;/p&gt;

&lt;p&gt;ということでみだりに境界チェックするより例外を出させといた方が速いようです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第一級ラベルを持たない言語におけるDirect Threaded VMの実装</title>
      <link>http://keens.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou</link>
      <pubDate>Fri, 29 May 2015 20:26:41 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou</guid>
      <description>

&lt;p&gt;こんにちは。κeenです。このブログでちょくちょく出てくるDirect Threaded VMについて。
SMLのようにgotoがない言語だとDT VMの実装出来ないよなー、と思ってた所、ふとアイディアが浮かんだのでそれについて。&lt;/p&gt;

&lt;h1 id=&#34;序論:96964fcf74a77b030eea88ce12e9c90c&#34;&gt;序論&lt;/h1&gt;

&lt;p&gt;DSL、例えば正規表現などの処理系を実装することを考えてみて下さい。&lt;/p&gt;

&lt;p&gt;言語処理系において最も素朴な実装はインタプリタですが、速度面で不利なので一旦仮想命令にコンパイルして仮想命令実行器(VM)で実行することが一般的です。
コンパイラのように複雑な記号処理をするプログラムはCommon LispやMLのような記号処理に強い高級言語が得意とする分野です。
一方、ランタイムには低レベルなことが出来て処理速度の速いCommon LispやCを使いたくなるでしょう。&lt;/p&gt;

&lt;p&gt;Common Lisp以外の言語ではコンパイラとランタイムを分離するのが妥当な選択肢のようですが、高級言語とcの間のブッジングが必要になり、少なからぬコストを支払う必要があります。
また、ffiを持たない言語ではブリッジ出来ないのでランタイムもその言語で実装する必要があります。つまり、高級言語でVMを実装する必要があるケースが存在します。&lt;/p&gt;

&lt;p&gt;VMの実行を高速化する技術の一つとしてDirect Threadingというものがあります。
命令ディスパッチのループを短絡することで余計なオーバーヘッドが減り、また、命令毎にジャンプ命令を持つことで分岐予測も効きやすくなるのでVMが高速化します。
しかしDTの実装にはgotoのラベルを第一級オブジェクトとして保存する必要があり、gccやclangのように拡張されたcコンパイラなど、限られた言語でしか実現出来ません。まあ、Common Lispなら&lt;code&gt;eval&lt;/code&gt;と&lt;code&gt;compile&lt;/code&gt;を使えばJITが出来るので不要ですが。&lt;/p&gt;

&lt;p&gt;そこで、gotoのない言語でDirect Threadingを実現してみたいと思います。&lt;/p&gt;

&lt;h1 id=&#34;direct-threading:96964fcf74a77b030eea88ce12e9c90c&#34;&gt;Direct Threading&lt;/h1&gt;

&lt;p&gt;Direct Threaded &lt;em&gt;でない&lt;/em&gt; VMは大抵次のような構造をしています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;loop {
  op = fetchNextOp
  switch(op) {
    case op1:
     ....
     break
    case op2:
     ....
     break
    ....
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つまり、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;次の命令を取得する&lt;/li&gt;
&lt;li&gt;命令でディスパッチする&lt;/li&gt;
&lt;li&gt;命令に対応するコードを実行する&lt;/li&gt;
&lt;li&gt;ディスパッチを抜ける&lt;/li&gt;
&lt;li&gt;1.に戻る&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という動きをします。自然に思えるかもしれませんが、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;命令のディスパッチはlogオーダの時間が掛かる（可能性がある）。&lt;/li&gt;
&lt;li&gt;4. 5. のステップが不要&lt;/li&gt;
&lt;li&gt;2. で毎回違う命令にディスパッチするので分岐予測がほぼ意味を成さない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という無駄があります。それを改良したのがDirect Threaded VMで、オペコードではなくgotoのラベルを使うことで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;label = fetchNextLabel
goto label
label1:
  ...
  label = fetchNextLabel
  goto label
label2:
  ...
  label = fetchNextLabel
  goto label
...
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;次のラベルを取得する&lt;/li&gt;
&lt;li&gt;ラベルにgotoする&lt;/li&gt;
&lt;li&gt;命令に対応するコードを実行する&lt;/li&gt;
&lt;li&gt;次のラベルを取得する&lt;/li&gt;
&lt;li&gt;ラベルにgotoする(次の処理は3. 相当)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;と、ループ内の2ステップを飛ばした他、ディスパッチもなくなるので高速になります。
また、ラベル毎にgotoがついていて、それぞれのgotoに分岐予測があるので普通のVMに比べて分岐予測がある程度効きます。&lt;/p&gt;

&lt;h1 id=&#34;第一級ラベルを持たない言語におけるdirect-threaded-vm:96964fcf74a77b030eea88ce12e9c90c&#34;&gt;第一級ラベルを持たない言語におけるDirect Threaded VM&lt;/h1&gt;

&lt;p&gt;結論から言うと関数の配列を使います。ラベルの代わりに配列のインデックス、gotoの代わりに配列へのアクセスとcallを使います。
ランダムアクセスでアドレスの取得をするために配列を、任意コードへのジャンプのために関数を使えばエミュレート出来るよねって発想です。&lt;/p&gt;

&lt;h1 id=&#34;実装:96964fcf74a77b030eea88ce12e9c90c&#34;&gt;実装&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/KeenS/SML-VM&#34;&gt;ソースコード全体&lt;/a&gt;はGithuに上げてます。SML/NJで動きます。SML#向けのインターフェースファイルを書いていますが何故かコンパイルが通りません。&lt;/p&gt;

&lt;p&gt;次のようなASTを実行するインタプリタ、VM、Direct Threaded VMを実装しました。但し、VMとDTVMはクロージャをサポートしていません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;datatype monoop
  = Not

datatype binop
  = Equal
  | GreaterThan
  | Add

datatype t
  = Int of int
  | Bool of bool
  | MonoOp of monoop * t
  | BinOp of binop * t * t
  | Bind of t * t
  | If of t * t * t
  | Var of string
  | Lambda of t list * t
  | Call of t * t list
  | Progn of t list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インタプリタはこのASTを解釈実行、VMはいくつかの中間表現を経てオペコードにコンパイルし、それを実行します。尚、最適化は行いません。&lt;/p&gt;

&lt;p&gt;VMのディスパッチ部分は次のような実装になっています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;    fun aux () = (
        case  (Array.sub(ops, !pc)) of
            O.Not =&amp;gt; (case pop vm of
                         V.Bool x =&amp;gt; push vm (V.Bool (not x))
                       | _ =&amp;gt; raise Type)
          | O.Add =&amp;gt; (case (pop vm, pop vm) of
                         (V.Int x, V.Int y) =&amp;gt; push vm (V.Int (x + y))
                       | _ =&amp;gt; raise Type)
          | O.Eq =&amp;gt; (case (pop vm, pop vm) of
                        (V.Int x, V.Int y) =&amp;gt; push vm (V.Bool (x = y))
                      | (V.Bool x, V.Bool y) =&amp;gt; push vm (V.Bool (x = y))
                      | _ =&amp;gt; raise Type)
          | O.Gt =&amp;gt; (case (pop vm, pop vm) of
                        (V.Int x, V.Int y) =&amp;gt; push vm (V.Bool (x &amp;lt; y))
                      | _ =&amp;gt; raise Type)
          | O.Jump label =&amp;gt; pc := (label - 1)
          | O.Jtrue label =&amp;gt; (case pop vm of
                                 V.Bool true =&amp;gt; pc := (label - 1)
                               | V.Bool false =&amp;gt; ()
                               | _ =&amp;gt; raise Type)
          | O.Call i =&amp;gt; (case (pop vm) of
                            V.Lambda label =&amp;gt; (
                             pushCi vm;
                             fp := (!fp) - i;
                             pc := (label - 1))
                          | _ =&amp;gt; raise Type)
          | O.Ret =&amp;gt; (Array.update(stack, !fp, Array.sub(stack, (!sp) - 1));
                     popCi vm;
                     pc := (!pc))
          | O.Push v =&amp;gt; push vm v
          | O.Pop =&amp;gt; (pop vm;())
          | O.Lref i =&amp;gt; push vm (Array.sub(stack, (!fp) + i))
          | O.Lset i =&amp;gt;  ((Array.update(stack, (!fp) + i, pop vm));
                         push vm (V.Bool true))
          | O.Gref i =&amp;gt; push vm (Array.sub(pool, i))
          | O.Gset i =&amp;gt;  (Array.update(pool, i, pop vm); push vm (V.Bool true))
          | O.Nop =&amp;gt; ()
          | O.End =&amp;gt; raise Exit
      ;
        pc := (!pc) + 1;
      aux ())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DT VMではこれを次のように書き換えました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;fun next () = let
    val () = pc := (!pc) + 1;
    val (index, arg) = Array.sub(cops, !pc) in
    Array.sub(opArray, index) arg
end

Array.fromList [
            (* Not *)
            fn _ =&amp;gt;
                (case pop vm of
                    V.Bool x =&amp;gt; push vm (V.Bool (not x))
                  | _ =&amp;gt; raise Type;
                next ()),
            (* Add *)
            fn _ =&amp;gt;
                (case (pop vm, pop vm) of
                    (V.Int x, V.Int y) =&amp;gt; push vm (V.Int (x + y))
                  | _ =&amp;gt; raise Type;
                 next ()),
            (* Eq *)
            fn _ =&amp;gt;
                (case (pop vm, pop vm) of
                    (V.Int x, V.Int y) =&amp;gt; push vm (V.Bool (x = y))
                  | (V.Bool x, V.Bool y) =&amp;gt; push vm (V.Bool (x = y))
                  | _ =&amp;gt; raise Type;
                  next ()),
            (* Gt *)
            fn _ =&amp;gt;
                (case (pop vm, pop vm) of
                    (V.Int x, V.Int y) =&amp;gt; push vm (V.Bool (x &amp;lt; y))
                  | _ =&amp;gt; raise Type;
                 next ()),
            (* Jump *)
            fn ({int = label, ...}: oparg) =&amp;gt;
               (pc := (label - 1);
               next ()),
            (* Jtrue *)
            fn ({int = label, ...}: oparg) =&amp;gt;
                (case pop vm of
                    V.Bool true =&amp;gt; pc := (label - 1)
                  | V.Bool false =&amp;gt; ()
                  | _ =&amp;gt; raise Type;
                next ()),
            (* Call *)
            fn ({int = i, ...}: oparg) =&amp;gt;
                (case (pop vm) of
                    V.Lambda label =&amp;gt; (
                     pushCi vm;
                     fp := (!fp) - i;
                     pc := (label - 1))
                  | _ =&amp;gt; raise Type;
                next ()),
            (* Ret *)
            fn _ =&amp;gt;
                (Array.update(stack, !fp, Array.sub(stack, (!sp) - 1));
                 popCi vm;
                 pc := (!pc);
                next ()),
            (* Push *)
            fn ({vmvalue = v, ...}: oparg) =&amp;gt;
               (push vm v;
               next ()),
            (* Pop *)
            fn _ =&amp;gt;
               (pop vm;
                next ()),
            (* Lref *)
            fn ({int = i, ...}: oparg) =&amp;gt;
               (push vm (Array.sub(stack, (!fp) + i));
               next ()),
            (* Lset *)
            fn ({int = i, ...}: oparg) =&amp;gt;
                ((Array.update(stack, (!fp) + i, pop vm));
                 push vm (V.Bool true);
                next ()),
            (* Gref *)
            fn ({int = i, ...}: oparg) =&amp;gt;
               (push vm (Array.sub(pool, i));
               next ()),
            (* Gset *)
            fn ({int = i, ...}: oparg) =&amp;gt;
               (Array.update(pool, i, pop vm);
                push vm (V.Bool true);
               next ()),
            (* Nop *)
            (fn _ =&amp;gt;
                next ()),
            (fn _ =&amp;gt;
                raise Exit)
        ]

fun aux () = let val (index, arg) = Array.sub(cops, !pc) in
                 Array.sub(opArray, index) arg
             end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1引数を受け取ってunitを返す関数の配列としてVMを表しています。
1つ注意点として、前処理としてタグ付き共用体として表されている命令をタグ(配列のインデックス)と共用体に分解するのですが、SMLに共用体はないので構造体で代用しています。 &lt;code&gt;oparg&lt;/code&gt; 型がそれにあたります。&lt;/p&gt;

&lt;p&gt;ディスパッチを関数&lt;code&gt;next&lt;/code&gt;に括り出していて、一見すると分岐予測に関する利点が失われるように思われますが、
&lt;code&gt;next&lt;/code&gt;は小さいのでインライン化されるだろうと踏んでそのままにしています。実際、手動でインライン化しても速度に変化はありませんでした。&lt;/p&gt;

&lt;p&gt;今回のメインの話はVMなのでインタプリタについては省略します。&lt;/p&gt;

&lt;h1 id=&#34;実行速度:96964fcf74a77b030eea88ce12e9c90c&#34;&gt;実行速度&lt;/h1&gt;

&lt;h2 id=&#34;予測:96964fcf74a77b030eea88ce12e9c90c&#34;&gt;予測&lt;/h2&gt;

&lt;p&gt;普通のVMはディスパッチをlogオーダーの時間で行ないますがDT VMは定数オーダーの時間で行ないます。しかし配列の参照と関数呼び出しを挟むので定数倍の部分は大きくなります。
どちらが速いでしょうか。&lt;/p&gt;

&lt;h2 id=&#34;計測:96964fcf74a77b030eea88ce12e9c90c&#34;&gt;計測&lt;/h2&gt;

&lt;p&gt;今回、次のようなフィボナッチ数列を計算するコードの実行速度を計測しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;fun fib n = (Progn [
                Bind (Var &amp;quot;fib&amp;quot;,
                      Lambda([Var &amp;quot;n&amp;quot;],
                               (If (BinOp(GreaterThan,
                                          (Int 2),
                                          (Var &amp;quot;n&amp;quot;)),
                                    Int(1),
                                    BinOp(Add,
                                          Call(Var &amp;quot;fib&amp;quot;, [BinOp(Add,
                                                                 Var &amp;quot;n&amp;quot;,
                                                                 Int ~1)]),
                                          Call(Var &amp;quot;fib&amp;quot;, [BinOp(Add,
                                                                 Var &amp;quot;n&amp;quot;,
                                                                 Int ~2)])))))),
                Call(Var &amp;quot;fib&amp;quot;, [Int n])])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンパイラは以下のような命令列を吐きます。命令の内部表現が違うだけで命令列自体はVMとDTVMで共通です。
繰り返しますが、最適化はしてないのでL25で次の命令にジャンプしてるだとか目に見えて無駄なコードもあります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0	Push Lambda 7
1	Gset 0
2	Pop
3	Push 35
4	Gref 0
5	Call 1
6	End
7	Push 2
8	Lref 0
9	Gt
10	Jtrue 12
11	Jump 14
12	Push 1
13	Jump 26
14	Lref 0
15	Push ~1
16	Add
17	Gref 0
18	Call 1
19	Lref 0
20	Push ~2
21	Add
22	Gref 0
23	Call 1
24	Add
25	Jump 26
26	Ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;計測には次のようなコードを使いました。コンパイラは実行効率を無視して書いたのでベンチマークには含めていません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;val target = (AST.fib 35)
val compiled = VM.compile target
val dtcompiled = DTVM.compile target
val vm = VM.new ()
val dtvm = DTVM.new ()

val _ = Benchmark.benchset &amp;quot;fib 35&amp;quot; 1 [
        (&amp;quot;Interpreter&amp;quot;,
         fn () =&amp;gt; (Interp.run target; ())),
        (&amp;quot;Normal VM&amp;quot;,
         fn () =&amp;gt; (VM.run vm compiled; ())),
        (&amp;quot;Direct Threaded VM&amp;quot;,
         fn () =&amp;gt; (DTVM.run dtvm dtcompiled; ()))
    ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;結果:96964fcf74a77b030eea88ce12e9c90c&#34;&gt;結果&lt;/h2&gt;

&lt;p&gt;Intel Core i5 M450 2.4GHz 2コア4スレッド、Ubunt 15.04、SML/NJ v110.77で実行しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-------------------+---------------------------------------------------
 Interpreter       |********************************************* 47170ms
 Normal VM         |****************** 19170ms
 Direct Threaded VM|************************************************** 51460ms
-------------------+---------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ダントツで速いのがVMで、インタプリタに比べてかなりの性能向上が見られます。一方DT VMはインタプリタより遅いという結果になりました。&lt;/p&gt;

&lt;h1 id=&#34;考察:96964fcf74a77b030eea88ce12e9c90c&#34;&gt;考察&lt;/h1&gt;

&lt;p&gt;冷静に考えたらインタプリタは毎回関数呼び出して遅いよねってことからループで処理を済ませるのがVMなのにVMで毎回関数を呼び出してたら遅いに決まってるじゃん。
というかこれ、Direct Threaded VMじゃないじゃん。死にたい。&lt;/p&gt;

&lt;h1 id=&#34;余談:96964fcf74a77b030eea88ce12e9c90c&#34;&gt;余談&lt;/h1&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ループ内でExceptionをhandleしてる所為だった。ループの外に出したら超速になってインタプリタの方が20倍遅くなった。&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/604235677337714689&#34;&gt;2015, 5月 29&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;尚、このつぶやきはfibの引数を小さくして繰り返しを増やした時のものです。多分コンパイルを外に出してるので繰り返しが多いとその分のオーバーヘッドの差が効いてくるのでしょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;val target = (AST.fib 24)
val compiled = VM.compile target
val dtcompiled = DTVM.compile target
val vm = VM.new ()
val dtvm = DTVM.new ()

val _ = Benchmark.benchset &amp;quot;fib 24&amp;quot; 10 [
        (&amp;quot;Interpreter&amp;quot;,
         fn () =&amp;gt; (Interp.run target; ())),
        (&amp;quot;Normal VM&amp;quot;,
         fn () =&amp;gt; (VM.run vm compiled; ())),
        (&amp;quot;Direct Threaded VM&amp;quot;,
         fn () =&amp;gt; (DTVM.run dtvm dtcompiled; ()))
    ]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;-------------------+---------------------------------------------------
 Interpreter       |************************************************** 2052ms
 Normal VM         |** 104ms
 Direct Threaded VM|***** 238ms
-------------------+---------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Onigmoを最大49%高速化した話</title>
      <link>http://keens.github.io/blog/2015/05/26/onigmowosaidai49_kousokukashitahanashi</link>
      <pubDate>Tue, 26 May 2015 01:14:54 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/05/26/onigmowosaidai49_kousokukashitahanashi</guid>
      <description>&lt;p&gt;κeenです。Rubyでも使われてる高速な正規表現エンジン、Onigmo(鬼雲)を高速化したのでその話を。&lt;/p&gt;

&lt;p&gt;先日、&lt;a href=&#34;http://keens.github.io/blog/2015/05/10/seikihyougengijutsunyuumonwoyonda/&#34;&gt;正規表現技術入門を読んだ&lt;/a&gt;というエントリの中で&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ところで本に載ってた鬼雲のコードはDT(編注: Direct Threaded)にしてなかったけど簡単のためなのかな？あるいは厳格にC89に準拠するため？picrinみたくプリプロセッサで分岐すれば使えるのに。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と書いたところ、鬼雲の作者、K.Takataさんから&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/k_takata&#34;&gt;@k_takata&lt;/a&gt; 「picrinみたくプリプロセッサで分岐すれば使えるのに。」これも知らなかった。&lt;/p&gt;&amp;mdash; K.Takata (@k_takata) &lt;a href=&#34;https://twitter.com/k_takata/status/597690447499108352&#34;&gt;2015, 5月 11&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;という反応を頂きました。そして&lt;a href=&#34;https://github.com/k-takata/Onigmo/issues/51&#34;&gt;イシュー&lt;/a&gt;にも乗ったので言い出しっぺとして実装してみました。&lt;a href=&#34;https://github.com/k-takata/Onigmo/pull/52&#34;&gt;こちらのプルリク&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;Direct Threaded VM自体の解説はRubyist Magazineに載っている笹田さんのものが詳しいようです &lt;a href=&#34;http://magazine.rubyist.net/?0008-YarvManiacs&#34;&gt;Rubyist Magazine - YARV Maniacs 【第 3 回】 命令ディスパッチの高速化&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実装は少し技巧的ですが&lt;code&gt;while&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;などをマクロでラップしつつDT VMが有効ならそれらと互換性のあるDT用のコード（&lt;code&gt;goto&lt;/code&gt;やラベル）に展開します。元は&lt;a href=&#34;https://github.com/picrin-scheme/picrin/blob/master/extlib/benz/vm.c#L583&#34;&gt;picrin&lt;/a&gt;で使われていたテクニックです。
このコードは &lt;a href=&#34;https://twitter.com/wasabiz&#34;&gt;@wasabiz&lt;/a&gt;が書いたものなのでpicrinがどこを参考にして書かれたかは@wasabizに聞いて下さい。もしかしたらわさびずの発明かもしれませんね。&lt;/p&gt;

&lt;p&gt;で、パフォーマンスの方ですが、最初、素直に制御命令を1つづつマクロで書き換えたのですが、こうなりました。&lt;/p&gt;

&lt;p&gt;master&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;td&gt;パターン&lt;/td&gt;&lt;td&gt;時間&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Twain&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;47 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;^Twain&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;47 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Twain$&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;47 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Huck[a-zA-Z]+|Finn[a-zA-Z]+&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;127 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;a[^x]{20}b&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;1172 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Tom|Sawyer|Huckleberry|Finn&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;151 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;.{0,3}(Tom|Sawyer|Huckleberry|Finn)&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;497 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;[a-zA-Z]+ing&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;4032 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;^[a-zA-Z]{0,4}ing[^a-zA-Z]&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;96 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;[a-zA-Z]+ing$&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;4175 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;^[a-zA-Z ]{5,}$&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;1770 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;^.{16,20}$&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;1757 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;([a-f](.[d-m].){0,2}[h-n]){2}&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;1849 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;([A-Za-z]awyer|[A-Za-z]inn)[^a-zA-Z]&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;656 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;&#34;[^&#34;]{0,30}[?!\.]&#34;&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;115 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Tom.{10,25}river|river.{10,25}Tom&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;260 ms&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;DT版&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;td&gt;パターン&lt;/td&gt;&lt;td&gt;時間&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Twain&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;100 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;^Twain&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;99 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Twain$&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;100 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Huck[a-zA-Z]+|Finn[a-zA-Z]+&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;246 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;a[^x]{20}b&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;2182 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Tom|Sawyer|Huckleberry|Finn&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;288 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;.{0,3}(Tom|Sawyer|Huckleberry|Finn)&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;847 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;[a-zA-Z]+ing&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;6278 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;^[a-zA-Z]{0,4}ing[^a-zA-Z]&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;203 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;[a-zA-Z]+ing$&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;6430 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;^[a-zA-Z ]{5,}$&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;3603 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;^.{16,20}$&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;3596 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;([a-f](.[d-m].){0,2}[h-n]){2}&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;3239 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;([A-Za-z]awyer|[A-Za-z]inn)[^a-zA-Z]&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;1039 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;&#34;[^&#34;]{0,30}[?!\.]&#34;&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;327 ms&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Tom.{10,25}river|river.{10,25}Tom&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;487 ms&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;はい。DT版の方が2倍ちょっと遅いです。そりゃないわー。最適化オプションとかも確認したのですがダメでした。&lt;/p&gt;

&lt;p&gt;諦めて布団に入った後、ふと思い当たる節がありました。&lt;/p&gt;

&lt;p&gt;元のコードで&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;case OP_XXX:
   ...
   continue;
   break;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というパターンが割と現れます。&lt;code&gt;continue&lt;/code&gt;の後の&lt;code&gt;break&lt;/code&gt;は本来なら不要ですが&lt;code&gt;case&lt;/code&gt;を書く際の作法というか癖というか
とにかく&lt;code&gt;break&lt;/code&gt;を付けるスタイルもあります。これもそうなのでしょう。こいつらをマクロで書き換える時に愚直に&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;CASE(OP_XXX)
   ...
   JUMP;
   NEXT;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としてました。ここで、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#if USE_DIRECT_THREADED_VM
#define NEXT sprev = sbegin; JUMP
#define JUMP goto *oplabels[*p++]
#else
#define NEXT break
#define JUMP continue
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。これはUSE_DIRECT_THREADED_VMが定義されてる時は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;L_OP_XXX:
   ...
   goto *oplabels[*p++];
   sprev = sbegin;goto *oplabels[*p++];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と展開され、&lt;code&gt;goto&lt;/code&gt;が2つ現れることになります。どうせ無用コードだし最適化で消えるだろと思ってたらそうでもないらしく、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;CASE(OP_XXX)
   ...
   JUMP;
   NEXT;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;CASE(OP_XXX)
   ...
   JUMP;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;にし、マクロの方も&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#if USE_DIRECT_THREADED_VM
#define NEXT sprev = sbegin; JUMP
#define JUMP goto *oplabels[*p++]
#else
#define NEXT break
#define JUMP continue; break
#endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としたらようやく本領発揮してくれました。その結果がこれです。&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Master&lt;/td&gt;&lt;td&gt;This PR&lt;/td&gt;&lt;td&gt;Improve Rate&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Twain&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;47 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;47 ms&lt;/td&gt;&lt;td&gt;0%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;^Twain&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;47 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;47 ms&lt;/td&gt;&lt;td&gt;0%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Twain$&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;47 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;47 ms&lt;/td&gt;&lt;td&gt;0%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Huck[a-zA-Z]+|Finn[a-zA-Z]+&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;127 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;127 ms&lt;/td&gt;&lt;td&gt;0%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;a[^x]{20}b&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;1172 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;889 ms&lt;/td&gt;&lt;td&gt;31%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Tom|Sawyer|Huckleberry|Finn&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;151 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;153 ms&lt;/td&gt;&lt;td&gt;-1%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;.{0,3}(Tom|Sawyer|Huckleberry|Finn)&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;497 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;449 ms&lt;/td&gt;&lt;td&gt;10%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;[a-zA-Z]+ing&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;4032 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;2705 ms&lt;/td&gt;&lt;td&gt;49%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;^[a-zA-Z]{0,4}ing[^a-zA-Z]&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;96 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;98 ms&lt;/td&gt;&lt;td&gt;-2%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;[a-zA-Z]+ing$&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;4175 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;2797 ms&lt;/td&gt;&lt;td&gt;49%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;^[a-zA-Z ]{5,}$&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;1770 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;1623 ms&lt;/td&gt;&lt;td&gt;9%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;^.{16,20}$&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;1757 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;1637 ms&lt;/td&gt;&lt;td&gt;7%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;([a-f](.[d-m].){0,2}[h-n]){2}&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;1849 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;1670 ms&lt;/td&gt;&lt;td&gt;11%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;([A-Za-z]awyer|[A-Za-z]inn)[^a-zA-Z]&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;656 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;607 ms&lt;/td&gt;&lt;td&gt;8%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;&#34;[^&#34;]{0,30}[?!\.]&#34;&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;115 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;93 ms&lt;/td&gt;&lt;td&gt;24%&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;pattern&#34;&gt;Tom.{10,25}river|river.{10,25}Tom&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;260 ms&lt;/td&gt;&lt;td class=&#34;time&#34;&gt;262 ms&lt;/td&gt;&lt;td&gt;-1%&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;a[^x]{20}b&lt;/code&gt;や&lt;code&gt;[a-zA-Z]+ing&lt;/code&gt;のようにバックトラックが何度も起きてVMループをヘビーに回すパターンでは効果覿面のようで、最大49%の高速化です。素晴しいですね。&lt;/p&gt;

&lt;p&gt;因みに2つめの&lt;code&gt;goto&lt;/code&gt;は実際には実行されないのに何故遅くなったかというとgotoはコンパイラにとってはコントロールフログラフを乱す厄介な奴なので
無用コード除去に引っ掛からなかったどころか最適化ルーチンを引っ掻き回したんじゃないかと思います。&lt;/p&gt;

&lt;p&gt;このコード、私の手元の環境でしかテストしてないのでC89なら須くサポートするOnigmoにマージされるかは分かりませんがマージされると嬉しいですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>幽霊型を知った</title>
      <link>http://keens.github.io/blog/2015/05/24/yuureikatawoshitta</link>
      <pubDate>Sun, 24 May 2015 22:38:47 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/05/24/yuureikatawoshitta</guid>
      <description>

&lt;p&gt;κeenです。かねてより気になっていた幽霊型(Phantom Type)について知ったのでアウトプット。
&lt;a href=&#34;http://www.cs.rit.edu/~mtf/research/phantom-subtyping/jfp06/jfp06.pdf&#34;&gt;このPDF&lt;/a&gt;がベースになって
ます。&lt;/p&gt;

&lt;p&gt;余談ですが英語がファントム・タイプと中々中二な名前なので和訳も幻影型とかそういう方向に走って欲かったな。&lt;/p&gt;

&lt;p&gt;「幽霊型」で調べると真っ先に&lt;a href=&#34;https://kagamilove0707.github.io/programming/2014/02/20/about-phantom-type/&#34;&gt;このサイト&lt;/a&gt;が出てくるのですが、ミスリーディングと言われていました。
別に間違ったことを書いている訳ではないのですが、幽霊型の応用例なのでこれこそが幽霊型だと思ってしまうと少し視野が狭くなってしまうようです。&lt;/p&gt;

&lt;h1 id=&#34;モチベーション:b3b6b3048912aac849c4ef033d362a0c&#34;&gt;モチベーション&lt;/h1&gt;

&lt;p&gt;ブーリアンと整数と条件分岐と足し算と比較が出来るミニ言語を考えてみます。自動で型変換は行わない(つまりintとboolの比較などは出来ない)言語とします。こんな感じでしょうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;datatype exp
  = Int of int
  | Bool of bool
  | If of exp * exp * exp
  | Plus of exp * exp
  | Equal of exp * exp

fun mkInt x = Int x
fun mkBool x = Bool x
fun mkIf cnd thn els = If(cnd, thn, els)
fun mkPlus x y = Plus(x, y)
fun mkEqual x y = Equal(x, y)

exception Type

fun evalIf cnd thn els =
  case eval cnd of
      Bool x =&amp;gt; if x then eval thn else eval els
    | _ =&amp;gt; raise Type

fun evalPlus x y =
  case (eval x, eval y) of
      (Int x&#39;, Int y&#39;) =&amp;gt; Int(x&#39; + y&#39;)
    | _  =&amp;gt; raise Type

fun evalEqual x y =
  case (eval x, eval y) of
      (Int x&#39;, Int y&#39;) =&amp;gt; Bool(x&#39; = y&#39;)
    | (Bool x&#39;, Bool y&#39;) =&amp;gt; Bool(x&#39; = y&#39;)
    | _  =&amp;gt; raise Type

fun eval exp =
  case exp of
      If(cnd, thn, els) =&amp;gt; evalIf cnd thn els
    | Plus(x, y) =&amp;gt; evalPlus x y
    | Equal(x, y) =&amp;gt; evalEqual x y
    | e =&amp;gt; e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さて、この定義に従うと次のような自明に間違ったプログラムもコンパイルを通ってしまいます&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b3b6b3048912aac849c4ef033d362a0c:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b3b6b3048912aac849c4ef033d362a0c:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;mkEqual (mkInt 1) (mkBool false)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;勿論、評価するとエラーになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;eval (mkEqual (mkInt 1) (mkBool false));

uncaught exception Type
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こういうものを極力コンパイル時に発見出来ないかとうのがモチベーションです。因みにこのモチベーションは変な型変換を行わない言語なら動的型付き言語でも同じで、SBCLで&lt;code&gt;(+ 1 t)&lt;/code&gt;を評価するとちゃんとコンパイルエラーになります。&lt;/p&gt;

&lt;h1 id=&#34;問題の分析:b3b6b3048912aac849c4ef033d362a0c&#34;&gt;問題の分析&lt;/h1&gt;

&lt;p&gt;今回、&lt;code&gt;Int&lt;/code&gt;だとか&lt;code&gt;Bool&lt;/code&gt;だとかの型情報をタグ、つまり値として持たせました。しかしコンパイル時に値にはアクセス出来ません。コンパイル時にアクセスできるのは型です。ということでメタデータとして型を付与しましょう。&lt;/p&gt;

&lt;h1 id=&#34;幽霊型:b3b6b3048912aac849c4ef033d362a0c&#34;&gt;幽霊型&lt;/h1&gt;

&lt;p&gt;メタデータとして型を付けたのが幽霊型です。名前的に&lt;code&gt;&#39;a texp&lt;/code&gt;ではなく&lt;code&gt;&#39;a&lt;/code&gt;の部分が幽霊型なんですかね。&lt;/p&gt;

&lt;p&gt;使い方は割と分かりやすくて、&lt;code&gt;datatype&lt;/code&gt;に余計な型をつけます。この&lt;code&gt;&#39;a&lt;/code&gt;は使われていませんがメタデータなのでそういうもんです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;datatype &#39;a texp = E of exp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に、&lt;code&gt;mkXxx&lt;/code&gt; にも型を付けます。&lt;/p&gt;

&lt;p&gt;まず、&lt;code&gt;mkInt&lt;/code&gt;なら返り値はIntなので&lt;code&gt;&#39;a&lt;/code&gt;の部分にその情報を詰め込みます。今回は&lt;code&gt;int&lt;/code&gt;が宜しいようです。
毎回&lt;code&gt;E&lt;/code&gt;がつくのが面倒ですが我慢して下さい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;fun mkInt x: int texp = E (Int x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;mkBool&lt;/code&gt;も同じです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;fun mkBool x: bool texp = E (Bool x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次は&lt;code&gt;mkIf&lt;/code&gt;ですが、condにはBool型、thenとelseには同じ型が来て欲しいです。そして返り値というかこのIfを
evalした型はthenやelseと同じ型なのでこのような型になります。Ifに渡す為に一旦&lt;code&gt;E&lt;/code&gt;を剥がしてます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;fun mkIf (E cnd: &#39;b texp) (E thn: &#39;a texp) (E els: &#39;a texp): &#39;a texp = E (If(cnd, thn, els))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同じように考えたら&lt;code&gt;mkPlus&lt;/code&gt;や&lt;code&gt;mkEqual&lt;/code&gt;も型付け出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fun mkPlus (E x: int texp) (E y: int texp): int texp = E (Plus(x, y))
fun mkEqual (E x: &#39;a texp) (E y: &#39;a texp): bool texp = E (Equal(x, y))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これ以後は変更ありません。一応修正後のプログラムを載せると、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;datatype exp
  = Int of int
  | Bool of bool
  | If of exp * exp * exp
  | Plus of exp * exp
  | Equal of exp * exp

datatype &#39;a texp = E of exp

fun mkInt x: int texp = E (Int x)
fun mkBool x: bool texp = E (Bool x)
fun mkIf (E cnd: &#39;b texp) (E thn: &#39;a texp) (E els: &#39;a texp): &#39;a texp = E (If(cnd, thn, els))
fun mkPlus (E x: int texp) (E y: int texp): int texp = E (Plus(x, y))
fun mkEqual (E x: &#39;a texp) (E y: &#39;a texp): bool texp = E (Equal(x, y))

exception Type

fun evalIf cnd thn els =
  case eval&#39; cnd of
      Bool x =&amp;gt; if x then eval&#39; thn else eval&#39; els
    | _ =&amp;gt; raise Type

and evalPlus x y =
    case (eval&#39; x, eval&#39; y) of
        (Int x&#39;, Int y&#39;) =&amp;gt; Int(x&#39; + y&#39;)
      | _  =&amp;gt; raise Type

and evalEqual x y =
    case (eval&#39; x, eval&#39; y) of
        (Int x&#39;, Int y&#39;) =&amp;gt; Bool(x&#39; = y&#39;)
      | (Bool x&#39;, Bool y&#39;) =&amp;gt; Bool(x&#39; = y&#39;)
      | _  =&amp;gt; raise Type

and eval&#39; exp =
    case exp of
        If(cnd, thn, els) =&amp;gt; evalIf cnd thn els
      | Plus(x, y) =&amp;gt; evalPlus x y
      | Equal(x, y) =&amp;gt; evalEqual x y
      | e =&amp;gt; e

fun eval (E x) = eval&#39; x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となります。ユーザインターフェースレベルでの変更はありません。
さて、ということで先の式をもう一度評価してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkEqual (mkInt 1) (mkBool false);
stdIn:1.2-1.34 Error: operator and operand don&#39;t agree [tycon mismatch]
  operator domain: int texp
  operand:         bool texp
  in expression:
    (mkEqual (mkInt 1)) (mkBool false)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちゃんとエラーが出ました。楽しいですね。&lt;/p&gt;

&lt;h1 id=&#34;発展1-任意の型:b3b6b3048912aac849c4ef033d362a0c&#34;&gt;発展1 - 任意の型&lt;/h1&gt;

&lt;p&gt;任意の型を作る手段としてタグ1つ、引数無しのタグ付き共用体を使う方法があります。それを使った技が先のPDFに載ってます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;datatype tcp = TCP
datatype udp = UDP
datatype &#39;a safe_socket = W of Word32.word

fun mkTCP ....
fun mkUDP ....
fun sendTCP ...
fun sendUPD ...
fun close ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように型安全に、そして&lt;code&gt;close&lt;/code&gt;のように可能なものはジェネリックにプログラムを書くことが出来ます。&lt;/p&gt;

&lt;h1 id=&#34;発展2-サブタイプ:b3b6b3048912aac849c4ef033d362a0c&#34;&gt;発展2 - サブタイプ&lt;/h1&gt;

&lt;p&gt;次のようにヒエラルキーがある場合の話です。面倒なので言語を縮小しますね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;datatype num
  = Int of int
  | Real of real

datatype exp
  = Num of num
  | Bool of bool
  | Plus of exp * exp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合、こうなります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;datatype num
  = Int of int
  | Real of real

datatype exp
  = Num of num
  | Bool of bool
  | Plus of exp * exp

datatype &#39;a tnum = N
datatype &#39;a texp = E of exp

exception Type

fun mkInt x: (int tnum texp) = E (Num  (Int x))
fun mkReal x: (real tnum texp) = E (Num (Real x))
fun mkBool x: (bool texp) = E (Bool x)


fun mkPlus (E x: &#39;a tnum texp) (E y: &#39;a tnum texp): &#39;a tnum texp =
  case (x, y) of
      (Num (Int x&#39;), Num (Int y&#39;)) =&amp;gt; E (Num (Int (x&#39; + y&#39;)))
    | (Num (Real x&#39;), Num (Real y&#39;)) =&amp;gt; E (Num (Real (x&#39; + y&#39;)))
    | _ =&amp;gt; raise Type  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;疲れてきたので説明省略しますが型パラメータを入れ子にしたら上手い具合にサブタイプの親子関係を表せるよねって話です。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:b3b6b3048912aac849c4ef033d362a0c&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;幽霊型を使うと値レベルの話を一部型レベルに持ち上げれる（ってことで良いのかな？）&lt;/p&gt;

&lt;h1 id=&#34;最後に:b3b6b3048912aac849c4ef033d362a0c&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;どうしても&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;datatype &#39;a texp = E of exp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としている所の&lt;code&gt;E&lt;/code&gt;が気になりますね。型システム上必要っぽい(&lt;code&gt;type &#39;a texp = exp&lt;/code&gt;としてもダメだった)ので必要なコストだとは思うのですが
少くとも内部的にはゼロオーバーヘッドであって欲しいです。最適化で消せそうですが実際に消してる処理系はどれほどあるのでしょう。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;type &#39;a texp = exp&lt;/code&gt;でダメだった(型がミスマッチしてるのにコンパイルが通ってしまった)のも気になります。smlの&lt;code&gt;type&lt;/code&gt;ってただのエイリアスなんでしたっけ？&lt;/p&gt;

&lt;p&gt;若干のモヤモヤは残るものの一応幽霊型について知りました。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:b3b6b3048912aac849c4ef033d362a0c:1&#34;&gt;因みにこのコードをSML#のREPLで評価すると返ってこなくなります。&lt;a href=&#34;https://github.com/smlsharp/smlsharp/issues/24&#34;&gt;イシュー&lt;/a&gt;に上がってます。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b3b6b3048912aac849c4ef033d362a0c:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>正規表現技術入門を読んだ</title>
      <link>http://keens.github.io/blog/2015/05/10/seikihyougengijutsunyuumonwoyonda</link>
      <pubDate>Sun, 10 May 2015 20:32:45 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/05/10/seikihyougengijutsunyuumonwoyonda</guid>
      <description>

&lt;p&gt;κeenです。&lt;a href=&#34;http://gihyo.jp/book/2015/978-4-7741-7270-5&#34;&gt;正規表現技術入門&lt;/a&gt;という本の書評が望まれているようなので今日買ってきて読みました。&lt;/p&gt;

&lt;h1 id=&#34;私のバックグラウンドと目的:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;私のバックグラウンドと目的&lt;/h1&gt;

&lt;p&gt;バックグラウンドは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RubyとUnixの正規表現はそこそこ使ってる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.jp/dp/478191229X/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=187205609&amp;amp;pf_rd_s=lpo-top-stripe&amp;amp;pf_rd_t=201&amp;amp;pf_rd_i=4781905862&amp;amp;pf_rd_m=AN1VRQENFRJN5&amp;amp;pf_rd_r=0R2GCT6BYGWFR0061YND&#34;&gt;ドラゴンブック&lt;/a&gt;は読んだことある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://swtch.com/~rsc/regexp/regexp1.html&#34;&gt;RE2&lt;/a&gt;の概略も知ってる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/picrin-scheme/picrin&#34;&gt;VMベースの言語処理系&lt;/a&gt;のコミッタなのでVMへの理解もある&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bleis-tift/SmlSharpContrib/pull/20/files&#34;&gt;Standard MLの正規表現エンジン&lt;/a&gt;を開発中。機能はほぼ揃ってる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;な感じです。で、実装中の正規表現エンジンがこの本で紹介されてるVM型でもDFA型でもなくVM型の素朴な形、ASTのインタプリタで
実装されてるので&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;インタプリタのまま追加出来る機能はないか&lt;/li&gt;
&lt;li&gt;高速化を目指すならVM化とDFA化どちらがいいか&lt;/li&gt;
&lt;li&gt;(既存のSMLの正規表現エンジンではVMバックエンドやDFAバックエンドでグルーピングが使えないので)高速な手法でのグルーピングの実装方法が知りたい&lt;/li&gt;
&lt;li&gt;後方参照の実装方法が知りたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などの目的で読みました。割とガチめですね。そういうことを念頭に置いてこの書評を読んで下さい。&lt;/p&gt;

&lt;h1 id=&#34;書評:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;書評&lt;/h1&gt;

&lt;h2 id=&#34;1章-正規表現:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;1章 正規表現&lt;/h2&gt;

&lt;p&gt;正規表現とはなんぞや？から入り使われる記号などを解説してます。「日本酒うめえwww」など出てきてしかも「草を生やす」の意味の解説がありました。フランクですね。
はいはい、と読み進めていったら先読み、後読みなどのあまり理解してない機能の解説やさらに上手い使い方も紹介されておお！となりました。例えばhoge、fuga、piyoの3つが含まれる文字列は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(?=.*hoge.*)(?=.*fuga.*)(?=.*piyo.*).*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書けるそうです。飽くまで先読みは文字列ではなく位置にマッチするため、正規表現の重ね合わせが出来るんですね。本来ならhoge、fuga、piyoが3!通りの並び方をするので6つの分岐をしないといけない。&lt;/p&gt;

&lt;p&gt;あと、貪欲、非貪欲の他に強欲マッチなるものを知りました。確かに実装側としては貪欲マッチでバックトラックしてるところが無駄に複雑になるので強欲マッチがあるとありがたいですね。&lt;/p&gt;

&lt;p&gt;正規表現の再帰の話もありました。&lt;code&gt;(?0)&lt;/code&gt;で全体、&lt;code&gt;(?n)&lt;/code&gt;(n &amp;gt;= 1)でグループを再帰します。予想の通りこれは正規言語ではなくなるのですが、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(\d+|\((?0)\))([-+*/](?1))*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で括弧と四則演算の式をパース出来てしまうそうです。もはやパーサジェネレータ並だなと。と思ったら後で出てくる通り対応する括弧にマッチ出来てしまうので文脈自由文法を受理するそうです。すごい。&lt;/p&gt;

&lt;p&gt;導入なので読み飛ばそうと思ったのですがちゃんと飽きさせない内容で良かったですね。&lt;/p&gt;

&lt;p&gt;あとこの章でさらっと(否定)?[先後]読みが正規言語の範疇で出来るという（私にとって）大変重要な事実が書かれてました。実装しますかな。&lt;/p&gt;

&lt;h2 id=&#34;2章-正規表現の歴史:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;2章 正規表現の歴史&lt;/h2&gt;

&lt;p&gt;一口に正規表現といっても色々あるんだよーな感じな内容。恐らく後の章で比較する時のために役者を揃える目的。&lt;/p&gt;

&lt;p&gt;「Unixの正規表現といえばEREのこととする」と書いてあったのでこの章は許さない。あとegrepを使ってる。
奴は互換性のためだけに残された非推奨コマンドで、実体は grep -Eだ。古のシェルスクリプトでもない限りgrep -Eを使え。絶対許さない。&lt;/p&gt;

&lt;h2 id=&#34;3章-プログラマのための一歩進んだ正規表現:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;3章 プログラマのための一歩進んだ正規表現&lt;/h2&gt;

&lt;p&gt;正規表現の形式的な話のあとはエンジン毎のサポートする機能の違いだとかベンチマークだとかの話。VM型とDFA型の性能特徴が出てて面白かった。&lt;/p&gt;

&lt;p&gt;そして正規表現の限界(メールアドレスの精密なバリデーションには正規表現は使えないから妥協しろ、など)にも言及。
恐らく使う側からしたらこの辺の話を聞きたかったんだろうが私はそんなに興味ない。&lt;/p&gt;

&lt;h2 id=&#34;4章-dfa型エンジン:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;4章 DFA型エンジン&lt;/h2&gt;

&lt;p&gt;オートマトンの話から入る。んでNFAからDFAを構築する話。ドラゴンブックに載ってたトンプソンのアルゴリズムや部分集合構成法が紹介されてた。
しかもPythonによる実装も載っててすごいありがたい。理論系の資料だと自然言語によるアルゴリズムだけで分かりづらいんですよねー。解説も平易。&lt;/p&gt;

&lt;p&gt;次にDFAのOn the Fly構成の話。ちゃんと載ってるのはありがたい。しかしほぼ必須の機能といいつつ参考資料が載ってないのが気になった。資料が必要ないくらい簡単なのかな。&lt;/p&gt;

&lt;p&gt;最後にDFAの良いところが載ってる。VMと比較したい人には嬉しい点ですね。&lt;/p&gt;

&lt;h2 id=&#34;5章-vm型エンジン:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;5章 VM型エンジン&lt;/h2&gt;

&lt;p&gt;トイレに行きたくてうずうずしながら読んだので少し軽めにしか読んでない（ごめんなさい）。最初はVMとはなんぞや？という話から正規表現VMの挙動について、CレベルでのAPIについて、実装についてなど。
著者が開発している鬼雲で採用されてる方式なだけあってかなり詳しくて丁寧。VMの仮想アセンブラ例とスタックの遷移なども細かく書いてある。&lt;/p&gt;

&lt;p&gt;最初に必要最小限な機能をナイーブに実装したVMのコードを紹介して読者に雰囲気を掴ませたあと徐々に最適化していき、最後は鬼雲のコードを見せます。&lt;/p&gt;

&lt;p&gt;鬼雲の拡張機能のための命令や高速化のための工夫なども載ってて実装の際にはかなり役立つ筈。ここで目的の1つであったVM方式での後方参照の実装の仕方を知ります。&lt;/p&gt;

&lt;p&gt;Unicodeつらいよねーって話とか。Unicode対応しようかと思いましたがこれ読んで諦めました。&lt;/p&gt;

&lt;p&gt;AST/バイトコードレベルでの最適化の話もありました。私がプリントしたASTが簡単になるように変換していたものや、インタプリタの機能を出来る限り小さくするためにASTレベルで実現していた機能が実は最適化だったことを知りました。&lt;/p&gt;

&lt;h2 id=&#34;正規表現エンジンの三大技術動向:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;正規表現エンジンの三大技術動向&lt;/h2&gt;

&lt;p&gt;JIT、固定文字列探索、ビットパラレルについて。やはりドラゴンブックのように古い本だとこの辺はカバーし切れない。&lt;/p&gt;

&lt;h3 id=&#34;jitの話:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;JITの話&lt;/h3&gt;

&lt;p&gt;まあ、知ってるよって思ったのですがVM命令を実際にアセンブラに変換した例が載っていて後の参考になりそうだった。あとなぜバイトコードよりJITした方が速いのかの図解がめちゃくちゃ分かりやすかった。あの図、Direct Threaded VMの説明にも使えるのでいつか説明する機会があったら参考にさせてもらいます。
ところで本に載ってた鬼雲のコードはDTにしてなかったけど簡単のためなのかな？あるいは厳格にC89に準拠するため？&lt;a href=&#34;https://github.com/picrin-scheme/picrin/blob/master/extlib/benz/vm.c#L583&#34;&gt;picrinみたく&lt;/a&gt;プリプロセッサで分岐すれば使えるのに。&lt;/p&gt;

&lt;p&gt;流石にOn the Flyコンパイルの話はなかった。まあ、あんまりメリットないしやんないか。&lt;/p&gt;

&lt;h3 id=&#34;固定文字列探索の話:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;固定文字列探索の話&lt;/h3&gt;

&lt;p&gt;grepよりgrep -Fの方が速いよねーって話かと思ったらそれだけではなかった。&lt;code&gt;http://([^/?#]*)?([?#]*)(\?([^#]*))?(#(.*))?&lt;/code&gt;みたいな正規表現にマッチさせる時に、まず &lt;code&gt;http://&lt;/code&gt; を固定文字列探索で高速に見付けてからそこを起点にマッチを始める高速化手法があるそうです。固定文字列探索が高速なのはQuick Search（多分尺取り法と同じ）などのアルゴリズムがあるからですねー。あとSIMDやAVXも使える。さらに今回の&lt;code&gt;http://&lt;/code&gt;みたいな&amp;rdquo;キーワード&amp;rdquo;を抽出する技術の話も。&lt;/p&gt;

&lt;h3 id=&#34;ビットパラレルの話:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;ビットパラレルの話&lt;/h3&gt;

&lt;p&gt;先の固定文字列探索の話に関連して。固定文字列ではなく文字クラスまで含めても高速に扱える方法。なるほど〜といったところ。SIMDやAVXが使えない/使いづらい言語でも実践出来そうでいいですね。&lt;/p&gt;

&lt;h2 id=&#34;正規表現の落とし穴:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;正規表現の落とし穴&lt;/h2&gt;

&lt;p&gt;RE2のモチベーションでもある、バックトラックによってマッチングが指数時間になってしまう問題から。「RE2使え」ってくるかと思ったらユーザーレベルでどうにかする話や正規表現の最適化の部分でどうにかする話もあった。&lt;/p&gt;

&lt;p&gt;落とし穴とその対策の話があるのですが、一番気になったのがエンジンによる挙動の違い。私の正規表現エンジンはEREを実装することを目標として、grep -Eで挙動を確かめながら実装してたのですがちょっと怪しくなってきた。&lt;/p&gt;

&lt;p&gt;マッチ戦略が最左最長か自身がないのもあるけどグルーピングの話。pythonではグループは上書きされて、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; r = re.compile(&#39;(\w+,?)*&#39;)
&amp;gt;&amp;gt;&amp;gt; re.match(&#39;apple,banana,kiwi&#39;).groups()
(&#39;kiwi&#39;,)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となるそうです。最初、私の正規表現エンジンもこの挙動をしていたのですが、grep -Eは例えば&lt;code&gt;echo &#39;apple,banana,kiwi&#39; | grep -o -E &#39;([a-z],?)*&#39;&lt;/code&gt;が&lt;code&gt;apple,banana,kiwi&lt;/code&gt;を返すのでわざわざ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;| Star =&amp;gt; (case acc of
                           [] =&amp;gt; raise Parse
                         | Group(i, x) :: xs  =&amp;gt; parse(ts, Group(i, Kleene x) :: xs, e, gi)
                         | x :: xs =&amp;gt; parse(ts, Kleene x :: xs, e, gi))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように括弧の後にスターが来たら括弧の中のクリーネ閉包をとってました。まあ、実装はそれぞれらしいのでこれが間違ってる訳ではないのですがパーサを不必要に複雑にしてしまったことを反省。&lt;/p&gt;

&lt;p&gt;残りはアトミックグループの話だとか。&lt;/p&gt;

&lt;h2 id=&#34;正規表現を越えて:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;正規表現を越えて&lt;/h2&gt;

&lt;p&gt;正規表現周りのツールの紹介の後はBNF、PEGの話。恥ずかしながら、BNFの表現範囲である文脈自由言語が正規表現言語+括弧の対応だということを初め知りました。いや、もしかしたらドラゴンブックに書いてたのかもしれませんが見落してました。&lt;/p&gt;

&lt;p&gt;PEGについては、BNFあるしいいやって思ってたのですがマッチが線形時間だったりBNFで表現出来ない範囲まで表現出来たりと中々楽しそうでした。&lt;/p&gt;

&lt;p&gt;あとまさかの「草生やす」の説明をした伏線を回収。&lt;/p&gt;

&lt;h2 id=&#34;付録a-1-正規と非正規の壁:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;付録A.1 正規と非正規の壁&lt;/h2&gt;

&lt;p&gt;正規言語の話とその辺の証明。否定は正規だけど後方参照は非正規だとか。この本で一番理論寄りな話でありながら同値関係とは〜とかから解説していてすごい丁寧（簡単に理解出来るとは言っていない）。いや、でも本当に正規言語関連の証明が欲しかったらまずはここ参照するかってくらい丁寧ですよ。&lt;/p&gt;

&lt;h2 id=&#34;付録a-2-正規性の魅力:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;付録A.2 正規性の魅力&lt;/h2&gt;

&lt;p&gt;だんだん感想が雑になってるのからも分かる通り、この辺で力尽きたのでこの章は流しました。後日読みます。&lt;/p&gt;

&lt;h1 id=&#34;全体を通して:617daf1ef9d19b0890ebaf6be4722a4b&#34;&gt;全体を通して&lt;/h1&gt;

&lt;p&gt;論文やWeb上の資料への参照をばら撒いていますが本書自体は理論寄りになりがちな正規表現の解説を平易に書いていて、かなり敷居を下げてくれたなという印象。正規表現やエンジンの歴史、それによる実装の違いなども説明しているのでこの本を持っていれば正規表現でハマるということもなくなりそう。まえがきにもある通り、Web上では断片的にしか入らない知識が1冊にまとまっている。個人的にはDFAの話をもうちょっと詳しく知りたかった。DFAを実装する時の最適化の話とか。&lt;/p&gt;

&lt;p&gt;私のように正規表現を実装したい人だけでなく「正規表現の最適化ってどこまで賢いの？」だとか「このパターンは正規表現で表現出来るの？」だとか「書いた正規表現が魔境で理解出来ないから綺麗に書きたい」だとか思ってる人にも良い本だと思います。&lt;/p&gt;

&lt;p&gt;因みに&lt;a href=&#34;http://gihyo.jp/book/2015/978-4-7741-7270-5&#34;&gt;この本&lt;/a&gt;、33,00円ですが私は4,800円でも買った。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>tarballベースの軽量バックアップツール&#39;Sheltar&#39;を作った</title>
      <link>http://keens.github.io/blog/2015/05/06/tarballbe_sunokeiryoubakkuapputsu_rutsukutta</link>
      <pubDate>Wed, 06 May 2015 20:45:53 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/05/06/tarballbe_sunokeiryoubakkuapputsu_rutsukutta</guid>
      <description>

&lt;p&gt;κeenです。みなさんバックアップは何使ってますか？大抵のOSには標準でバックアップツールが付いてますがそれ使ってます？私も使ってます。
しかしやつらはそのOSでしか動かない/動かす方法があまり知られていないのでマシンがクラッシュしたりマシンを失くした時に困ります。&lt;/p&gt;

&lt;p&gt;そこで候補に上がるのが安心と信頼のtarballですが今度は増分バックアップが取りづらいという問題があります。なのでtarballベースの差分バックアップツールを作りました。&lt;/p&gt;

&lt;p&gt;まあ、捜せば同じようなものが色々あるでしょうが捜し回るのが面倒だし色々インストールするのも嫌なのでえいやと作ってしまいました。&lt;/p&gt;

&lt;p&gt;タイトルにある通り&lt;a href=&#34;https://github.com/KeenS/sheltar&#34;&gt;Sheltar&lt;/a&gt;といいます。ポータブルなB Shellスクリプト製です。どこでも動くと思います。バックアップ（避難）だしshellだしtarだしって適当に付けたら意外にもコンフリクトがありませんでした。しかも&lt;a href=&#34;http://ultra.wikia.com/wiki/Sheltar&#34;&gt;ウルトラ怪獣&lt;/a&gt;にも居るという奇跡的な名前です。&lt;/p&gt;

&lt;h1 id=&#34;目的:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;目的&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E5%A2%97%E5%88%86%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97&#34;&gt;増分バックアップ&lt;/a&gt;をとる&lt;/li&gt;
&lt;li&gt;UbuntuとMac間でのデータ同期にも使いたい(家のルータがしょぼいのでrsyncを使いたくなく、USBメモリ経由とかが良い)&lt;/li&gt;
&lt;li&gt;なのでファイル形式はポータブルなtarballで&lt;/li&gt;
&lt;li&gt;メタデータとかは極力置かず、最悪他のツールからでもバックアップデータをサルベージ出来るようにしたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。 GNU tarには増分バックアップ用のオプションがありますがファイル抽出は手作業でやる必要があります。
また、(多分)BSD tarには増分バックアップ用のオプションがないのでそこもカバーする必要があるかなと思って作りました。&lt;/p&gt;

&lt;p&gt;あとオプションがあるとはいっても一々覚えてられないのでスクリプト化してしまいたかったってのもあります。&lt;/p&gt;

&lt;h1 id=&#34;使い方:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;使い方&lt;/h1&gt;

&lt;h2 id=&#34;step0:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;STEP0&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/KeenS/sheltar&#34;&gt;ここ&lt;/a&gt;からSheltarを入手しましょう。&lt;code&gt;sheltar&lt;/code&gt;スクリプト1つで完結しているのでcloneしなくてもrawをwgetしてきても大丈夫です。&lt;/p&gt;

&lt;h2 id=&#34;step1:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;STEP1&lt;/h2&gt;

&lt;p&gt;増分バックアップなので複数のtarballが作られます。バックアップ用のディレクトリを用意しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir /mnt/dev1/backup
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;step2:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;STEP2&lt;/h2&gt;

&lt;p&gt;バックアップしたいファイルをリストアップしましょう。バックアップは継続的に行なうものなので1回限りのコマンドライン引数で渡す訳にはいきませんね。&lt;/p&gt;

&lt;p&gt;pngファイルをバックアップしたいとしましょうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ find Pictures -name &#39;*.png&#39; &amp;gt;&amp;gt; list.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで良さそうです。ディレクトリの中身全部をバックアップしたいなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo Pictures/ &amp;gt;&amp;gt; list.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でも構いません。最後の&amp;rsquo;/&amp;lsquo;重要です。最初のバックアップの時には問題ありませんが&amp;rsquo;/&amp;lsquo;がないと増分バックアップの時にディレクトリ自体のlast modified timeを見て変更を判断します。&lt;/p&gt;

&lt;h2 id=&#34;step3:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;STEP3&lt;/h2&gt;

&lt;p&gt;あとは実行するだけですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sheltar backup /mnt/dev1/backup list.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;その後、増分バックアップを取るのも同じく&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sheltar backup /mnt/dev1/backup list.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で可能です。前回のアーカイブファイルのlast modified time より新しいファイルだけをバックアップしてくれます。&lt;/p&gt;

&lt;p&gt;因みに今のところバックアップディレクトリに余計なものがあると正しく動作してくれないので注意です。&lt;/p&gt;

&lt;h2 id=&#34;復元:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;復元&lt;/h2&gt;

&lt;p&gt;全部のファイルをカレントディレクトリにぶちまけたいなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sheltar extract /mnt/dev1/backup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。抽出するファイルを指定したいなら&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sheltar extract /mnt/dev1/backup file1 file2 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とします。&lt;/p&gt;

&lt;p&gt;カレントディレクトリに同名ファイルが既にある場合は新しい方を残します。&lt;/p&gt;

&lt;h1 id=&#34;その他:1c518fffcb9f45ff4a1b2c6719541034&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;まだまだ未完成です。欲しい機能があったら&lt;a href=&#34;https://github.com/KeenS/sheltar/issues&#34;&gt;issue&lt;/a&gt;に投げてくれると実装するかもしれません。&lt;a href=&#34;https://github.com/KeenS/sheltar/pulls&#34;&gt;Pull Request&lt;/a&gt;もお待ちしております
あと、ドックフードはまだ食べてません。一応テストはしてますが…。Macをまともに使う気になったら使い始めると思います。&lt;/p&gt;

&lt;p&gt;あ、そうそう。今回比較的コメントを多く書いたのでシェルスクリプトを勉強したい方はソース読んでみて下さい。
こんな感じです。Doxygenがシェルスクリプトに対応してないので疑似ドキュメント形式のコメントですが。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Extract the all files from backups in $ST_BACKUP_DIR.
# A file with the same name as extracting file will be preserved if it is newer than its counterpart.
## @filesystem extract all the backup files to CWD
st_extract_all()
{
    # This is preferable to `for TARBALL in $(ls)` because the names of listed files
    # can contain whilespaces
    ls --sort=time -r &amp;quot;${ST_BACKUP_DIR}&amp;quot; | while read TARBALL
    do
        tar xf &amp;quot;${ST_BACKUP_DIR}/${TARBALL}&amp;quot; \
            --keep-newer-files               \
            --preserve-permissions           \
            --preserve-order
    done
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SMLを書くLisperの悩み</title>
      <link>http://keens.github.io/blog/2015/05/03/smlwokakulispernonayami</link>
      <pubDate>Sun, 03 May 2015 13:23:17 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/05/03/smlwokakulispernonayami</guid>
      <description>&lt;p&gt;SMLばっかり書いてたら「お前Lisperじゃないだろ」って怒られたとかそういう話ではなく。&lt;/p&gt;

&lt;p&gt;ML系の言語は関数は1つの引数しかとれません。じゃあ複数の値を受け取りたい時はどうするかというと 1. 値を組(タプル)にして受け取る 2. 関数を返す関数((を返す関数)*)にして1つづつ受け取る の2種類の方法があります。
それに纏わる話。&lt;/p&gt;

&lt;p&gt;それぞれの記法を例示すると&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;値を組(タプル)にして受け取る&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;fun add (x, y) = x + y
add (1, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あるいは、手続型言語に似せて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;add(1, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とするスタイルもあります&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;関数を返す関数((を返す関数)*)に(カリー化)して1つづつ受け取る&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;fun add x y = x + y
add x y  (*= ((add x) y)  *)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;となります。勿論、2.のように何度も関数を呼び出すよりは1.のように一度で全ての値を渡してしまった方が速い筈です。なのでプリミティブっぽい関数はタプル式にした方が良さそうです。
また、無名関数を定義する時にSMLでは&lt;code&gt;fun&lt;/code&gt;のように自動でカリー化してくれる構文がないので複数の引数を受け付ける関数を引数にとる高階関数を定義するときはタプル式の方が都合が良いでしょう。&lt;/p&gt;

&lt;p&gt;例えば二項演算子はタプル式で定義しなければなりませんし、&lt;code&gt;List.foldl&lt;/code&gt;のシグネチャも&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(&#39;a * &#39;b -&amp;gt; &#39;b) -&amp;gt; &#39;b -&amp;gt; &#39;a list -&amp;gt; &#39;b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;勿論、積極的に最適化を行なうコンパイラではuncurry optimizationや、closure eliminationでカリー化によるオーバーヘッドはなくなります。
むしろ、カリー化した方が部分適用が出来るので利便性は上がります。となると後は無名関数の問題ですが、OCamlやHaskellなど無名関数にもカリー化した定義が出来る構文のある言語だとそれも問題なく、タプル式の引数の渡し方はしないようです。&lt;/p&gt;

&lt;p&gt;SMLは流石に&amp;rsquo;Standard&amp;rsquo;なので最適化を仮定したり余計な構文を突っ込んだりはしづらいのでしょう。なのでこの問題はSML特有のようです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ここまで、なぜタイトルがML系言語ではなくSML限定なのかの前置き。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;こういう関数呼び出しがあるとします。&lt;code&gt;sub: string * int -&amp;gt; char&lt;/code&gt;は文字列の0番目の文字を取り出します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;sub(str, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これに&lt;code&gt;Char.isAlpha : char -&amp;gt; bool&lt;/code&gt;を適用します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;Char.isAlpha sub(str, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これ、コンパイルエラーになります。みなさん何でか分かりますか？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sub(str, 0)&lt;/code&gt;はあくまで&lt;code&gt;sub&lt;/code&gt;に&lt;code&gt;(str, 0)&lt;/code&gt;というタプルを渡している文なのでコンパイラはこう解釈するのです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;(Char.isAlpha sub) (str, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;毎回このようなエラーを出すのが面倒なので関数の呼び出しには全て手続き型言語のように括弧をつけることを考え始めます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;Char.isAlpha(sub(str, 0))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかしそうは問屋が卸さないのがカリー化された関数。&lt;code&gt;String.isPrefix: string -&amp;gt; string -&amp;gt; bool&lt;/code&gt;に次のような呼び出しをすると勿論怒られます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;String.isPrefix(&amp;quot;/usr/local&amp;quot; path)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必ず&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;String.isPrefix &amp;quot;/usr/local&amp;quot; path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としないといけません。これまた関数呼び出しがネストすると面倒で、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;app (fn s =&amp;gt; print (s ^ &amp;quot;\n&amp;quot;)) (List.filter (String.isPrefix &amp;quot;/usr/local&amp;quot;) paths)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように毎回括弧が付き纏います。ここまでくるとS式みたく&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;(app (fn s =&amp;gt; print (s ^ &amp;quot;\n&amp;quot;)) (List.filter (String.isPrefix &amp;quot;/usr/local&amp;quot;) paths))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書きたくなってくるのがLisperの心情。これなら慣れないデータコンストラクタや関数呼び出しや中置演算子の優先順位問題も解決!やったね!!と思ったのですがやっぱりタプル式の関数呼出が行く手を阻むのでした。
&lt;code&gt;(sub(str, i))&lt;/code&gt; とか訳分からなすぎる。括弧多すぎる。&lt;/p&gt;

&lt;p&gt;ということでどっちに揃えたら良いのかさえ分かってないのにどっちにも揃えられてないSMLに対して悩みを抱えるLisperの悩みでした。&lt;/p&gt;

&lt;p&gt;因みに&lt;a href=&#34;https://github.com/nrnrnr/SML-Lint&#34;&gt;SML-Lint&lt;/a&gt;は&lt;code&gt;Char.isAlpha()&lt;/code&gt;のような書き方は無駄な括弧がついてると怒ってきます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SML#をMacでビルドする</title>
      <link>http://keens.github.io/blog/2015/04/29/smlsharpwomacdebirudosuru</link>
      <pubDate>Wed, 29 Apr 2015 16:09:08 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/04/29/smlsharpwomacdebirudosuru</guid>
      <description>

&lt;p&gt;κeenです。SML#2.0.0を文鎮と化していたMBAにインストールしたのでメモをば。&lt;/p&gt;

&lt;p&gt;基本は&lt;a href=&#34;http://d.hatena.ne.jp/keita44_f4/20140412/1397279451&#34;&gt;よんたさんの記事&lt;/a&gt;をMacに翻訳した感じです。&lt;/p&gt;

&lt;p&gt;モチベーションは、&lt;a href=&#34;http://www.pllab.riec.tohoku.ac.jp/smlsharp/ja/?Download&#34;&gt;公式の配布物&lt;/a&gt;がMac版だとMacPorts版しかなく、
portsとhomebrewの混在は避けた方が良いと聞いたのでどうにかして自前ビルドしようとしたことです。&lt;/p&gt;

&lt;h1 id=&#34;注意書き:d4eee8946023292eeefbfeb9ba252a7c&#34;&gt;注意書き&lt;/h1&gt;

&lt;p&gt;冒頭にも書いてあるようにMBAは普段使ってなくて、このエントリーもMBAじゃないマシンから書いているのでコマンド類はコピペでなく写経してます。
typoがあるかもしれないのでコピペして動かなかったら一応この記事のtypoを疑って下さい。&lt;/p&gt;

&lt;h1 id=&#34;gmp32bitの準備:d4eee8946023292eeefbfeb9ba252a7c&#34;&gt;GMP32bitの準備&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ brew install gmp --32-bit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で終わり。バージョン6.0.0aが入りました。
既にインストールされていたら多分64bit版が入っているので一旦 &lt;code&gt;brew remove gmp&lt;/code&gt; してから再度インストールすると良いです。尚、バイナリ版はないようで、ビルドが始まります。checkに時間が掛かる。&lt;/p&gt;

&lt;h1 id=&#34;llvm34-32bitの準備:d4eee8946023292eeefbfeb9ba252a7c&#34;&gt;LLVM34 32bitの準備&lt;/h1&gt;

&lt;p&gt;骨が折れるところですね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget http://llvm.org/releases/3.4.2/llvm-3.4.2.src.tar.gz
$ gzcat llvm-3.4.2.src.tar.gz | tar xf -
$ cd llvm-3.4.2.src
$ ./configure --build=i686-mac-darwin CC=&#39;gcc -m32&#39; CXX=&#39;g++ -m32&#39; --prefix=/usr/local/Cellar/llvm34/3.4.2a
$ make -j4
$ make -j4 install
$ cd ../
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としたら上手くいきました。何故上手くいったんでしょうねー。あとprefixは割と気持悪いのでみなさん適切な場所にインストールしましょうね。&lt;/p&gt;

&lt;h1 id=&#34;sml-のビルド:d4eee8946023292eeefbfeb9ba252a7c&#34;&gt;SML# のビルド&lt;/h1&gt;

&lt;p&gt;これが一番骨が折れるところですね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget http://www.pllab.riec.tohoku.ac.jp/smlsharp/download/smlsharp-2.0.0.tar.gz
$ gzcat smlsharp-2.0.0.tar.gz | tar xf -
$ cd smlsharp-2.0.0
$ ./configure --with-llvm=/usr/local/Cellar/llvm34/3.4.2a/      \
               LDFLAGS=&#39;-L/usr/local/Cellar/gmp/6.0.0a/lib&#39;     \
              CPPFLAGS=&#39;-I/usr/local/Cellar/gmp/6.0.0a/include&#39; \
                    CC=&#39;gcc -m32&#39;                               \
                   CXX=&#39;g++ -m32&#39;
$ make -j4
$ make -j4 install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;としたら出来ました。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:d4eee8946023292eeefbfeb9ba252a7c&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;誰かhomebrewにして。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SMLSharpを使ってSMLのon-the-flyエラーチェック</title>
      <link>http://keens.github.io/blog/2015/04/23/smlsharpwotsukattesmlnoon-the-flyerrorchekkingu</link>
      <pubDate>Thu, 23 Apr 2015 23:01:17 +0900</pubDate>
      
      <guid>http://keens.github.io/blog/2015/04/23/smlsharpwotsukattesmlnoon-the-flyerrorchekkingu</guid>
      <description>

&lt;p&gt;κeenです。最近SMLを結構書いてるのですが中置演算子が乱立する言語はLisperにはつらくて、しょっちゅうコンパイルエラーを出します。
そこでSML#をflymakeで動かしてOn The Flyにエラーチェックをします。&lt;/p&gt;

&lt;p&gt;なぜSML#かというと &lt;code&gt;-ftypecheck-only&lt;/code&gt; オプションがあって、シンタックスと型エラーのチェックだけを行なえるからです。&lt;/p&gt;

&lt;p&gt;色々試したのですが設定はこれだけで済みました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sml&#34;&gt;(eval-after-load &#39;flymake
  &#39;(progn 
    (add-to-list &#39;flymake-allowed-file-name-masks &#39;(&amp;quot;.+\\.sml$&amp;quot;
                                                    (lambda ()
                                                      (list &amp;quot;/usr/local/bin/smlsharp&amp;quot; (list &amp;quot;-ftypecheck-only&amp;quot; (buffer-file-name))))
                                                    (lambda () nil)))
    (add-to-list &#39;flymake-err-line-patterns &#39;(&amp;quot;^\\([^: ]*\\):\\([0-9]+\\)\\.\\([0-9]+\\)-[0-9]+\\.[0-9]+ \\(Error\\|Warning\\):&amp;quot;
                                              1 2 3 4))))
(add-hook &#39;sml-mode-hook #&#39;flymake-mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;quot;/usr/local/bin/smlsharp&amp;quot;&lt;/code&gt; のところは各自書き換えて下さい。尚、SML#はエラーメッセージを複数行に跨って出すのですがそれがflymakeと相性が悪いのでエラーメッセージの取得は諦めました。&lt;/p&gt;

&lt;p&gt;多くの場合、 &lt;code&gt;flymake-simple&lt;/code&gt; という枠組みの中で設定を書くのですがテンポラリファイルを作る構造がどうしてもインターフェースファイルと相性が悪かったので生のflymakeを使ってます。
というかflymakeは元々 &lt;code&gt;-ftypecheck-only&lt;/code&gt; みたいなのを前提に作られてたのに実際にコンパイル走らせないとエラーメッセージ取得出来ない言語が多過ぎてフレームワークが出来たのでこれが本来の使い方です。&lt;/p&gt;

&lt;h1 id=&#34;おまけ:311ce9d5e51e732b1928a84bcceb27a3&#34;&gt;おまけ&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nrnrnr/SML-Lint&#34;&gt;SML-Lint&lt;/a&gt;というものがあって、スタイルワーニングを出してくれます。ただ、これはパッチを当てないと使えなかったりスタイルワーニングのみしか出さなかったりするので気が向いた時に紹介します&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>