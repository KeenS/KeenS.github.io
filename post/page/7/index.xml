<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/post/</link>
    <description>Recent content in Posts on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 21 Dec 2019 22:31:35 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Rustのクロージャ3種を作って理解する</title>
      <link>//KeenS.github.io/blog/2016/10/10/rustnokuro_ja3tanewotsukutterikaisuru/</link>
      <pubDate>Mon, 10 Oct 2016 16:48:43 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/10/10/rustnokuro_ja3tanewotsukutterikaisuru/</guid>
      <description>&lt;p&gt;κeenです。Rustのクロージャ、3種類もあって複雑ですよね。
こういう複雑なものはRustの気持になって考えれば理解出来たりします。ということで手でクロージャを作って理解してみましょう。&lt;/p&gt;

&lt;p&gt;尚、これはRustの1.12.0-stableと1.14.0-nightly (6e8f92f11 2016-10-07)で実験しています。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLでモナド</title>
      <link>//KeenS.github.io/blog/2016/10/10/smldemonado/</link>
      <pubDate>Mon, 10 Oct 2016 11:05:38 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/10/10/smldemonado/</guid>
      <description>&lt;p&gt;κeenです。ML Workshop 2016でなんかSMLで型クラスする発表があったらしいので追ってみます。&lt;/p&gt;

&lt;p&gt;implicit parameterをexplicitに渡すのではなく、モジュールとファンクタを使った実装です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pijulのインストールが難易度高いので解説する</title>
      <link>//KeenS.github.io/blog/2016/09/29/pijulnoinsuto_ruganan_idotakainodekaisetsusuru/</link>
      <pubDate>Thu, 29 Sep 2016 22:15:51 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/09/29/pijulnoinsuto_ruganan_idotakainodekaisetsusuru/</guid>
      <description>&lt;p&gt;κeenです。ふとTwitterで&lt;a href=&#34;http://pijul.org&#34;&gt;Pijul&lt;/a&gt;の話題を見掛けたついでにインストールしようと思ったら難易度が高かったので解説します。
Pijulそのものについては&lt;a href=&#34;//KeenS.github.io/blog/2016/02/14/dvcsnomoderu_aruihapijulnitsuite/&#34;&gt;過去のエントリ&lt;/a&gt;を参照して下さい。&lt;/p&gt;

&lt;p&gt;因みにPijulは「ピーフール」みたいに発音するそうです。「フー」は喉の奥から出す破擦音ですね。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustでシェル作った</title>
      <link>//KeenS.github.io/blog/2016/09/04/rustdeshierutsukutta/</link>
      <pubDate>Sun, 04 Sep 2016 16:26:20 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/09/04/rustdeshierutsukutta/</guid>
      <description>&lt;p&gt;κeenです。
先日、先輩社員と話してるとシェルを作る話になりました。
だいたいのコンピュータサイエンスの学生なら学部生の頃に課題でシェルを作りますが数学科にいた私は作ったことありませんでした。
でも、その時「今ならシェルなんて作ろうと思えばすぐに作れますよ」なんて言っちゃったのでなんか作りました。
まあ、習作程度の雑なものです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mirah 0.2がリリースされました。</title>
      <link>//KeenS.github.io/blog/2016/08/11/mirah_0_2gariri_susaremashita/</link>
      <pubDate>Thu, 11 Aug 2016 15:32:39 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/08/11/mirah_0_2gariri_susaremashita/</guid>
      <description>&lt;p&gt;κeenです。久しぶりに&lt;a href=&#34;mirah.org&#34;&gt;mirah&lt;/a&gt;のリリースが出ましたので新機能の紹介をしたいと思います。&lt;/p&gt;

&lt;p&gt;リリース版のダウンロードは &lt;a href=&#34;https://github.com/mirah/mirah/releases/tag/0.2.0&#34;&gt;こちら&lt;/a&gt;から。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>私がコードを書くときテストは書かない</title>
      <link>//KeenS.github.io/blog/2016/08/02/watashigako_dowokakutokitesutohakakanai/</link>
      <pubDate>Tue, 02 Aug 2016 00:12:22 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/08/02/watashigako_dowokakutokitesutohakakanai/</guid>
      <description>&lt;p&gt;ちょっとポエムというか自分語りを。会社の同期と話してて少し刺激されたので。あとは&lt;a href=&#34;https://note.mu/ruiu/n/n1083b2a5d547&#34;&gt;ソースコードって実際のところどういうふうに書いていますか？｜Rui Ueyama｜note&lt;/a&gt;にも刺激されて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>シェル芸十八般</title>
      <link>//KeenS.github.io/blog/2016/07/13/shierugeijuuhachihan/</link>
      <pubDate>Wed, 13 Jul 2016 23:34:03 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/07/13/shierugeijuuhachihan/</guid>
      <description>&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;武芸十八般のひとつシェル芸ってワードがふと湧いてきたけどどちらかというとシェル芸十八般とかの方がよさそう。grep, cut, xargs,&amp;hellip;&lt;/p&gt;&amp;mdash; κeen (@blackenedgold) &lt;a href=&#34;https://twitter.com/blackenedgold/status/753211663927513088&#34;&gt;2016年7月13日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Container Desgin Patterns</title>
      <link>//KeenS.github.io/blog/2016/07/02/container_desgin_patterns/</link>
      <pubDate>Sat, 02 Jul 2016 22:26:10 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/07/02/container_desgin_patterns/</guid>
      <description>&lt;p&gt;κeenです。先日、Kubernetesの開発者が書いた&lt;a href=&#34;http://blog.kubernetes.io/2016/06/container-design-patterns.html&#34;&gt;Kubernetes: Container Design Patterns&lt;/a&gt;というのを教えてもらって、面白かったのでそれを紹介します。
ただ漫然とコンテナを使っているだけでは気付かない使い方があったのでコンテナに興味のある方は是非一読下さい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustの所有権/ミュータビリティの分割</title>
      <link>//KeenS.github.io/blog/2016/06/19/rustnoshoyuuken_myu_tabiriteinobunkatsu/</link>
      <pubDate>Sun, 19 Jun 2016 20:42:14 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/06/19/rustnoshoyuuken_myu_tabiriteinobunkatsu/</guid>
      <description>&lt;p&gt;κeenです。昔所有権/ミュータビリティを分割したくなったけどぱっと方法が思いつかなくて困ったことがあるので今更ながら備忘録として残しておきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>multirustが非推奨になったようなのでrustupに移行する</title>
      <link>//KeenS.github.io/blog/2016/06/12/multirustgahisuishouninattayounanoderustupniikousuru/</link>
      <pubDate>Sun, 12 Jun 2016 15:23:06 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/06/12/multirustgahisuishouninattayounanoderustupniikousuru/</guid>
      <description>&lt;p&gt;κeenです。どうやらもうそろそろRustのツールチェーン管理はmultirustじゃなくてrustupを使った方が良さそうなので移行しようと思います。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>cargo-profilerを試す</title>
      <link>//KeenS.github.io/blog/2016/05/14/cargo_profilerwotamesu/</link>
      <pubDate>Sat, 14 May 2016 20:59:13 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/05/14/cargo_profilerwotamesu/</guid>
      <description>&lt;p&gt;κeenです。先日Rustのニュースに流れてきたcargo profilerを試してみます。
元の紹介記事はこちら&lt;a href=&#34;http://www.suchin.co/2016/05/11/Introducing-Cargo-Profiler/&#34;&gt;Introducing Cargo Profiler · suchin&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;GitHubレポジトリはこちら&lt;a href=&#34;https://github.com/pegasos1/cargo-profiler&#34;&gt;pegasos1/cargo-profiler: cargo subcommand to profile binaries&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RustでベアメタルRaspberry PiのLチカ</title>
      <link>//KeenS.github.io/blog/2016/05/04/rustdebeametaruraspberry_pinolchika/</link>
      <pubDate>Wed, 04 May 2016 11:43:26 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/05/04/rustdebeametaruraspberry_pinolchika/</guid>
      <description>&lt;p&gt;κeenです。GWもくもく会で机の片隅で埃被ってたRSPiのベアメタルを触ってみたのでその成果報告を。
ベアメタルについて知らない人でも読めるように書きます。そしてアセンブラもCも出てきませんし、半田付けも必要ありません。
Rustしか使いません。&lt;/p&gt;

&lt;p&gt;Rustは分かるけどLチカは全く知らない、けど興味のある方は是非読んでみて下さい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LXDがリリースされたらしい</title>
      <link>//KeenS.github.io/blog/2016/04/14/lxc_2_0_0gariri_susaretarashii/</link>
      <pubDate>Thu, 14 Apr 2016 22:51:20 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/04/14/lxc_2_0_0gariri_susaretarashii/</guid>
      <description>&lt;p&gt;κeenです。頭痛い。LXDがリリースされたようなので1つ記事をば。
LXDはLinuxで動く軽量仮想化コンテナ、LXCのラッパでREST APIとCLIが提供されています。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mirah関連ツールまとめ</title>
      <link>//KeenS.github.io/blog/2016/04/04/mirahkanrentsu_rumatome/</link>
      <pubDate>Mon, 04 Apr 2016 01:16:31 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/04/04/mirahkanrentsu_rumatome/</guid>
      <description>&lt;p&gt;κeenです。寝付けないのでMirah関連ツールについてまとめようかと。
とはいってもそんなにないのですが。Mirahについて知らない人は適当にググって下さい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>リージョンとRustの返り値</title>
      <link>//KeenS.github.io/blog/2016/03/02/ri_jontorustnokaerichi/</link>
      <pubDate>Wed, 02 Mar 2016 00:05:03 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/03/02/ri_jontorustnokaerichi/</guid>
      <description>&lt;p&gt;Rustにおいては返り値ポインタで返すよりもそのまま返して、受け取る側でポインタで受け取るかそのまま受け取るかを指定するのが良い選択肢だ、といっています。
しかし初めて見る時にはどうしてそんなことが出来るのかわからず、びっくりしますよね。
それをRustがリージョンを使ってメモリ管理をしていると分かればどうなっているのか分かったのですこしばかり。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rustのゼロコスト抽象化</title>
      <link>//KeenS.github.io/blog/2016/03/01/rustnozerokosutochuushouka/</link>
      <pubDate>Tue, 01 Mar 2016 23:32:12 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/03/01/rustnozerokosutochuushouka/</guid>
      <description>&lt;p&gt;κeenです。今日Twitter上でのやりとりから少し面白いことが分かったのでそれについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>テストについて考えてみた</title>
      <link>//KeenS.github.io/blog/2016/03/01/tesutonitsuitekangaetemita/</link>
      <pubDate>Tue, 01 Mar 2016 22:49:23 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/03/01/tesutonitsuitekangaetemita/</guid>
      <description>&lt;p&gt;κeenです。
普段はテストをあまり書かない人なのですが業務では流石に書く必要があって、馴れないことをしていると色々と考えることがあったのでまとめます。
まだ私はテストのセオリーとかには詳しくないので勝手気儘に考えたことです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RustのHigher-Kinded type Trait</title>
      <link>//KeenS.github.io/blog/2016/02/28/rustnohigherkinded_type_trait/</link>
      <pubDate>Sun, 28 Feb 2016 14:40:59 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/28/rustnohigherkinded_type_trait/</guid>
      <description>&lt;p&gt;κeenです。少し前の話になりますがRustの関連型を駆使してHigher Kinded type Trait（高階型トレイト）を実現してしまったものが出回ってたのでそれについて。
本来RustはHKTをサポートしていませんが不思議なことに実装出来てしまっているのです。&lt;/p&gt;

&lt;p&gt;HKTについて微塵も知らない方にも分かるように解説していきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>druidというリアルタイムデータ分析ツールを知った</title>
      <link>//KeenS.github.io/blog/2016/02/27/druidtoiuriarutaimude_tabunsekitsu_ruwoshitta/</link>
      <pubDate>Sat, 27 Feb 2016 21:28:16 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/27/druidtoiuriarutaimude_tabunsekitsu_ruwoshitta/</guid>
      <description>&lt;p&gt;κeenです。社内ハッカソンに出てきた。そこでdruidというツール（？）を触ったのでそれについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bind Addressの意味がようやく分かった</title>
      <link>//KeenS.github.io/blog/2016/02/24/bind_addressnoimigayouyakuwakatta/</link>
      <pubDate>Wed, 24 Feb 2016 23:57:31 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2016/02/24/bind_addressnoimigayouyakuwakatta/</guid>
      <description>&lt;p&gt;κeenです。小ネタを。サーバを立ち上げる時に指定するBind Addressについてよく分かっていなかったのがようやく分かるようになったのでそれについて。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
