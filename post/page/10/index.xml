<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on κeenのHappy Hacκing Blog</title>
    <link>//KeenS.github.io/post/</link>
    <description>Recent content in Posts on κeenのHappy Hacκing Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 21 Dec 2019 22:31:35 +0900</lastBuildDate>
    
	<atom:link href="//KeenS.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>ClojureでOpenCV 3.0と戯れる</title>
      <link>//KeenS.github.io/blog/2015/06/07/clojuredeopencv3_0totawamureru/</link>
      <pubDate>Sun, 07 Jun 2015 16:56:51 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/06/07/clojuredeopencv3_0totawamureru/</guid>
      <description>&lt;p&gt;κeenです。先日OpenCV 3.0がリリースされましたね。
ちょっと触ってみようと思ったのですが公式バインディングがC++、C、Java、Pythonと中々つらい言語ばっかりなので扱いやすいClojureから触った時のメモです。&lt;/p&gt;

&lt;p&gt;2系とはAPIが変わってる部分もあるらしく、苦労しました。
UbuntuでやってるのでMacの人は適当に読み替えて下さい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCOと例外ハンドル</title>
      <link>//KeenS.github.io/blog/2015/05/31/tcotoreigaihandoru/</link>
      <pubDate>Sun, 31 May 2015 21:02:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/31/tcotoreigaihandoru/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;//KeenS.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou&#34;&gt;先日のエントリー&lt;/a&gt;の最後でループ内で例外ハンドルをすると極端に遅くなるということを書きましたが、それについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>第一級ラベルを持たない言語におけるDirect Threaded VMの実装</title>
      <link>//KeenS.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou/</link>
      <pubDate>Fri, 29 May 2015 20:26:41 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/29/daiikkyuuraberuwomotanaigengoniokerudirect_threaded_vmnojissou/</guid>
      <description>&lt;p&gt;こんにちは。κeenです。このブログでちょくちょく出てくるDirect Threaded VMについて。
SMLのようにgotoがない言語だとDT VMの実装出来ないよなー、と思ってた所、ふとアイディアが浮かんだのでそれについて。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Onigmoを最大49%高速化した話</title>
      <link>//KeenS.github.io/blog/2015/05/26/onigmowosaidai49_kousokukashitahanashi/</link>
      <pubDate>Tue, 26 May 2015 01:14:54 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/26/onigmowosaidai49_kousokukashitahanashi/</guid>
      <description>&lt;p&gt;κeenです。Rubyでも使われてる高速な正規表現エンジン、Onigmo(鬼雲)を高速化したのでその話を。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>幽霊型を知った</title>
      <link>//KeenS.github.io/blog/2015/05/24/yuureikatawoshitta/</link>
      <pubDate>Sun, 24 May 2015 22:38:47 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/24/yuureikatawoshitta/</guid>
      <description>&lt;p&gt;κeenです。かねてより気になっていた幽霊型(Phantom Type)について知ったのでアウトプット。
&lt;a href=&#34;http://www.cs.rit.edu/~mtf/research/phantom-subtyping/jfp06/jfp06.pdf&#34;&gt;このPDF&lt;/a&gt;がベースになって
ます。&lt;/p&gt;

&lt;p&gt;余談ですが英語がファントム・タイプと中々中二な名前なので和訳も幻影型とかそういう方向に走って欲かったな。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>正規表現技術入門を読んだ</title>
      <link>//KeenS.github.io/blog/2015/05/10/seikihyougengijutsunyuumonwoyonda/</link>
      <pubDate>Sun, 10 May 2015 20:32:45 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/10/seikihyougengijutsunyuumonwoyonda/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;http://gihyo.jp/book/2015/978-4-7741-7270-5&#34;&gt;正規表現技術入門&lt;/a&gt;という本の書評が望まれているようなので今日買ってきて読みました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tarballベースの軽量バックアップツール&#39;Sheltar&#39;を作った</title>
      <link>//KeenS.github.io/blog/2015/05/06/tarballbe_sunokeiryoubakkuapputsu_rutsukutta/</link>
      <pubDate>Wed, 06 May 2015 20:45:53 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/06/tarballbe_sunokeiryoubakkuapputsu_rutsukutta/</guid>
      <description>&lt;p&gt;κeenです。みなさんバックアップは何使ってますか？大抵のOSには標準でバックアップツールが付いてますがそれ使ってます？私も使ってます。
しかしやつらはそのOSでしか動かない/動かす方法があまり知られていないのでマシンがクラッシュしたりマシンを失くした時に困ります。&lt;/p&gt;

&lt;p&gt;そこで候補に上がるのが安心と信頼のtarballですが今度は増分バックアップが取りづらいという問題があります。なのでtarballベースの差分バックアップツールを作りました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLを書くLisperの悩み</title>
      <link>//KeenS.github.io/blog/2015/05/03/smlwokakulispernonayami/</link>
      <pubDate>Sun, 03 May 2015 13:23:17 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/05/03/smlwokakulispernonayami/</guid>
      <description>&lt;p&gt;SMLばっかり書いてたら「お前Lisperじゃないだろ」って怒られたとかそういう話ではなく。&lt;/p&gt;

&lt;p&gt;ML系の言語は関数は1つの引数しかとれません。じゃあ複数の値を受け取りたい時はどうするかというと 1. 値を組(タプル)にして受け取る 2. 関数を返す関数((を返す関数)*)にして1つづつ受け取る の2種類の方法があります。
それに纏わる話。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SML#をMacでビルドする</title>
      <link>//KeenS.github.io/blog/2015/04/29/smlsharpwomacdebirudosuru/</link>
      <pubDate>Wed, 29 Apr 2015 16:09:08 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/29/smlsharpwomacdebirudosuru/</guid>
      <description>&lt;p&gt;κeenです。SML#2.0.0を文鎮と化していたMBAにインストールしたのでメモをば。&lt;/p&gt;

&lt;p&gt;基本は&lt;a href=&#34;http://d.hatena.ne.jp/keita44_f4/20140412/1397279451&#34;&gt;よんたさんの記事&lt;/a&gt;をMacに翻訳した感じです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLSharpを使ってSMLのon-the-flyエラーチェック</title>
      <link>//KeenS.github.io/blog/2015/04/23/smlsharpwotsukattesmlnoon-the-flyerrorchekkingu/</link>
      <pubDate>Thu, 23 Apr 2015 23:01:17 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/23/smlsharpwotsukattesmlnoon-the-flyerrorchekkingu/</guid>
      <description>&lt;p&gt;κeenです。最近SMLを結構書いてるのですが中置演算子が乱立する言語はLisperにはつらくて、しょっちゅうコンパイルエラーを出します。
そこでSML#をflymakeで動かしてOn The Flyにエラーチェックをします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLSharpでFFIバインディングを書く時の知見</title>
      <link>//KeenS.github.io/blog/2015/04/19/smlsharpdeffibaindinguwokakutokinochiken/</link>
      <pubDate>Sun, 19 Apr 2015 13:51:33 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/19/smlsharpdeffibaindinguwokakutokinochiken/</guid>
      <description>&lt;p&gt;κeenです。最近頻繁にSML#を使ってます。SML#のメイン機能の1つであるC連携ですが、ちょっと複雑なことをやろうとするとテクニックが必要になるので共有します。&lt;/p&gt;

&lt;p&gt;Twitterとかにコメントや突っ込みお願いします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SMLのファンクタに少し踏み込んだ</title>
      <link>//KeenS.github.io/blog/2015/04/12/smlnofankutanisukoshifumikonda/</link>
      <pubDate>Sun, 12 Apr 2015 19:49:41 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/12/smlnofankutanisukoshifumikonda/</guid>
      <description>&lt;p&gt;κeenです。&lt;a href=&#34;https://github.com/bleis-tift/SmlSharpContrib&#34;&gt;SmlSharpContrib&lt;/a&gt;にコントリビュートしてます。そこでファンクタを使う用事があったのですが少し踏み込んだ使い方をしようとしたらハマったのでメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CyberAgentに入社しました</title>
      <link>//KeenS.github.io/blog/2015/04/10/cyberagentninyuushashimashita/</link>
      <pubDate>Fri, 10 Apr 2015 19:55:59 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/04/10/cyberagentninyuushashimashita/</guid>
      <description>&lt;p&gt;κeenです。少し遅くなりましたが4/1付で所属が変わったので報告です。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>誰がUTF-32が使われてないなんて言ったんだ</title>
      <link>//KeenS.github.io/blog/2015/03/31/daregautf-32gatsukawaretenainanteitsuttanda/</link>
      <pubDate>Tue, 31 Mar 2015 19:41:05 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/03/31/daregautf-32gatsukawaretenainanteitsuttanda/</guid>
      <description>&lt;p&gt;最近ではUTF-8でソースコードを書いてUTF-8で出入力をする。それ以外のエンコーディングは使われていない。…だと？誰がそんなこと言ったんだ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lispエイリアンの矢印作った</title>
      <link>//KeenS.github.io/blog/2015/03/03/lispeiriannoyajirushitsukutta/</link>
      <pubDate>Tue, 03 Mar 2015 21:30:13 +0900</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/03/03/lispeiriannoyajirushitsukutta/</guid>
      <description>&lt;p&gt;κeenです。勉強会などで役立ちそうなLispエイリアンの矢印を作りました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>面接でLispを口にして落ちない企業、私気になります！</title>
      <link>//KeenS.github.io/blog/2015/02/10/mensetsudelispwokuchinishiteochinaikigyouwatashikininarimasu/</link>
      <pubDate>Tue, 10 Feb 2015 08:01:35 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/02/10/mensetsudelispwokuchinishiteochinaikigyouwatashikininarimasu/</guid>
      <description>&lt;p&gt;κeenです。先日の記事がやたら拡散しました。その中で&lt;/p&gt;

&lt;p&gt;「面接でLispは口にしない方が良い。100%落ちる。」&lt;/p&gt;

&lt;p&gt;の一文がえらく気に入られたようです。Lispの風評被害を防ぐために1つアンケートにご協力下さい。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>就活について思ったことをここに書き記す</title>
      <link>//KeenS.github.io/blog/2015/02/07/shuukatsunitsuiteomottakotowokokonikakishirusu/</link>
      <pubDate>Sat, 07 Feb 2015 14:27:58 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/02/07/shuukatsunitsuiteomottakotowokokonikakishirusu/</guid>
      <description>&lt;p&gt;私は今4年生なので去年の今頃は就活なんてものをしていた。下の代から若干日程が変わっているがそろそろ就活ムードが出てきているのでなんか吐いておく。思い出かもしれないし愚痴かもしれないし毒かもしれない。経験かもしれないし他人の代弁かもしれない。後輩の役に立つかもしれないし人事の方に向けたメッセージかもしれない。&lt;/p&gt;

&lt;p&gt;念のために書いておくが私はIT系の会社のプログラマ、エンジニア職ばかり応募していた。他の業界、職種に当て嵌まるとは限らない。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>mlyaccを使ってみてハマったところ</title>
      <link>//KeenS.github.io/blog/2015/01/31/mlyaccwotsukattemitehamattatokoro/</link>
      <pubDate>Sat, 31 Jan 2015 11:55:51 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/31/mlyaccwotsukattemitehamattatokoro/</guid>
      <description>&lt;p&gt;κeenです。前回の&lt;a href=&#34;//KeenS.github.io/blog/2014/12/10/mllexwoshi-tutemiru/&#34;&gt;mllexの記事&lt;/a&gt;の続きです。今回はmlyaccを使ってみました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AsciiDocを使ってお手軽manページ生成</title>
      <link>//KeenS.github.io/blog/2015/01/24/generate-manpage/</link>
      <pubDate>Sat, 24 Jan 2015 10:58:29 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/24/generate-manpage/</guid>
      <description>&lt;p&gt;コマンドラインツールを作ってるみなさん、man書いてますか？コマンドラインツールを使う人は時代の変化に取り残された遺物なのでWebにドキュメント置いても読んでくれませんよ。&lt;/p&gt;

&lt;p&gt;いや、私のようにmanだけを頼りにツールを使う人もいるのでちゃんと書いて下さいね。面倒だって?AsciiDocを使えば簡単に書けますよ!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>印刷フォマット済みのテキストファイルをPDF化する</title>
      <link>//KeenS.github.io/blog/2015/01/24/a2pdf/</link>
      <pubDate>Sat, 24 Jan 2015 10:23:00 +0000</pubDate>
      
      <guid>//KeenS.github.io/blog/2015/01/24/a2pdf/</guid>
      <description>&lt;p&gt;小ネタ。古いドキュメントやらポータブルな仕様を落としてくると中身が印刷フォーマット済み(ページネーションやヘッダ、フッタをアスキーアートで表現してる)であることがあります。
それらを普通のテキスト形式だと読みづらいのでPDF化する話。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
