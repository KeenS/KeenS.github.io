<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-02-28T22:23:37+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #14でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14/"/>
    <updated>2014-02-27T14:57:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14</id>
    <content type="html"><![CDATA[<p>どうも、κeenです。Rubyをアップグレードしようとしたら<code>rvm</code>が動かなくて、あれ？ってなったら私が<code>echo -&gt; echo</code>とかいう謎のsymlinkを作ってたせいでした。このブログはOctopressで作ってるのでその間更新遅れました。</p>

<p>さて、毎月恒例<a href="http://atnd.org/events/47730">Lisp Meet Up Presented by Shibuya.lisp #14</a>でLTしてきたので報告です。今回は「Real World OCamlを読んだ感想」というタイトルです。</p>

<!-- more -->


<p>まあ、感想とは言っても内容を軽く紹介したあとにLispにインポートしてみたという内容です。</p>

<p>今回はいつも以上にスライドが説明不足なのでどうにか頑張ってUstreamを探して下さい</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31658546" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/blackenedgold/real-world-ocamllisp" title="Real World OCamlを読んでLispと協調してみた" target="_blank">Real World OCamlを読んでLispと協調してみた</a> </strong> from <strong><a href="http://www.slideshare.net/blackenedgold" target="_blank">blackenedgold</a></strong> </div></p>

<p>会場からはquicksortの例がメモリ使用量的にquicksortとは言えないとか怒られました。あとは<code>append</code>が演算子<code>@</code>で書けちゃうとコスト高いのにみんな頻繁に使っちゃうんじゃないかとかのツッコミもありました。</p>

<p>Meet Up自体は自己紹介から始まりました初めての参加の方が14人中3人だったかな？もっと増えると嬉しいですね。京都から来た博士過程の方とか「ハッカーと画家」を読んでLispに興味を持った方とかが居ました。</p>

<p>で、私のLTは上の通り。前述の通りUstreamでも流されてます。</p>

<p>次はかにたん(@kazh98)さんから。かにたんここ2ヶ月くらいMeet Upで見掛けないなと思ってたら数学の論文に&#8221;Gauche&#8221;って文字列を入れる仕事をしてたようです。LTはRacketの新バージョンの機能FFIを使って線形代数ライブラリのバインディングを作る話でした。ジョーク飛しながら軽快に喋ってて楽しかったです。スライドはこちら。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31635279" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/kazh98/racket-31635279" title="すべてをRacketに取り込もう！ ~Racket FFI と Package システムの使い方~" target="_blank">すべてをRacketに取り込もう！ ~Racket FFI と Package システムの使い方~</a> </strong> from <strong><a href="http://www.slideshare.net/kazh98" target="_blank">Kazuhiro Hishinuma</a></strong> </div></p>

<p>そのあとは休憩からのぐだぐだタイムで私はCommon Lisperで<a href="http://cl21.org/">CL21</a>の<code>lambda</code>の略称を考えてたりしました。私は<code>^</code>良いと思うんですけど英字キーボードだと<code>S-6</code>なので押しにくいそうです。<code>fn</code>は<code>function</code>の略称っぽくてダメという話。<code>function</code>はCommon Lispでは既に別の意味がありますからね。</p>

<p>懇親会では私含めて就活生が二人居るので就活の話になりましたがLisperってまともな就活してないんですね…<br/>
大学中退してバイト先に就職した、友達の始めたベンチャーに参加してから今の職場に転職した、就活せずにふらふらしてたらShibuya.lispでLispの求人があったからそこに行った…。</p>

<p>そういえばまた隣がにとりさんだったので最近何やってますかと訊いたら<code>Utopian</code>に向けて着々と準備進めてますとの返事をいただきました。まだ計画あったんですねと返すと</p>

<blockquote class="twitter-tweet" lang="ja"><p>昨日「Utopianってまだ計画あったんですね」って言われたけど、3年前からClack、Caveman、ningle、CL-DBI、SxQL、Caveman2、Integralってずっとリリースし続けてるのは全部Utopianの為ですよ</p>&mdash; 深町英太郎 (fukamachi) (@nitro_idiot) <a href="https://twitter.com/nitro_idiot/statuses/438909695881797632">2014, 2月 27</a></blockquote>


<script async src="http://KeenS.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とのこと。私もUtopianの下地を作るためにRubyにあってLispにないものを色々考えてたので色々話してたらCL21のコミット権もらっちゃいました。私はライブラリ(DateTimeとかQueueなどのデータ構造とか)を整備したいのですがそれらは0.2で追加される予定だそうなので今はissue潰しですかね。</p>

<p>まあ、そんなところです。そういえばClojureの会社に潜入したといういちせさん(＠ichisemasashi)にどんな感じか訊くの忘れてましたね…まあ、次回もいらっしゃるでしょうから次回訊けば良いですかね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MathJaxを使って数式を埋め込む]]></title>
    <link href="http://KeenS.github.io/blog/2014/02/21/mathjax/"/>
    <updated>2014-02-21T06:58:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/02/21/mathjax</id>
    <content type="html"><![CDATA[<p>小ネタです。ブログに数式を埋め込むときの話。</p>

<!-- more -->


<p><a href="http://www.mathjax.org/">MathJax</a>はHTMLに$\LaTeX$の式を埋め込んでJavaScriptでMathMLに変換するプロジェクトみたいです。</p>

<p>Octopressで使うには<code>(ocotpressroot)/source/_includes/custom/head.html</code>に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script type="text/x-mathjax-config"&gt;
</span><span class='line'>  MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ["\\(","\\)"]] } });
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;script type="text/javascript"
</span><span class='line'>  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"&gt;
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;meta http-equiv="X-UA-Compatible" CONTENT="IE=EmulateIE7" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>を追加するだけです。</p>

<p>数式を埋め込むには、上の設定だと<code>$数式$</code>又は<code>\\\(数式\\\)</code>でインライン、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\\\[
</span><span class='line'>数式
</span><span class='line'>\\\]</span></code></pre></td></tr></table></div></figure>


<p>で別行立ての数式が書けます。markdownとコンフリクトするのでバックスラッシュのエスケープ大変ですね…。<code>\begin{eqnarray*}\end{eqnarray*}</code>は無理なのかなあ</p>

<p>インライン\(e^{i\pi} = -1\)</p>

<p>別行
\[
\lim_{n \to \infty} P(Z=l) = e^{&ndash;\lambda} \frac{ \lambda ^l}{l!}
\]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell Scriptでオプションをパースするときの必勝法]]></title>
    <link href="http://KeenS.github.io/blog/2014/02/19/option-parse-for-shell/"/>
    <updated>2014-02-19T04:13:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/02/19/option-parse-for-shell</id>
    <content type="html"><![CDATA[<p>κeenです。CIMの解説 実装編の執筆はもうちょい掛かりそうです。だいたいコードが落ち着いたら書きます。</p>

<p>今回は長いオプションと短いオプションをシェルスクリプトでパースするときの話です。</p>

<!-- more -->


<p>シェルスクリプトでは<code>case</code>を使う方法と<code>getopts</code>を使う方法があります。<code>case</code>だと長いオプションと短いオプションを扱えるものの短いオプションをまとめるのに苦労し、<code>getopts</code>だと短いオプションをまとめられるものの長いオプションを扱えません。</p>

<p>そこで解決策。<code>--foo ARG</code> <code>-f ARG</code> <code>-h</code>をパースし、他のオプションも許可（無視）、<code>--</code>でパースを止めるとします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> -gt 0 <span class="o">]</span>;<span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nv">ARG</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>;<span class="nb">shift</span>
</span><span class='line'><span class="nb">    </span><span class="k">case</span> <span class="s2">&quot;$ARG&quot;</span> in
</span><span class='line'>  --foo<span class="o">)</span>  do_something_with <span class="s2">&quot;$ARG&quot;</span>;;
</span><span class='line'>  --<span class="o">)</span> <span class="nb">break</span>;;
</span><span class='line'>  --*<span class="o">)</span> ;;
</span><span class='line'>  -*<span class="o">)</span>
</span><span class='line'>      <span class="nv">OPTIND</span><span class="o">=</span>1
</span><span class='line'>      <span class="k">while </span><span class="nb">getopts</span> :f:h OPT <span class="s2">&quot;$ARG&quot;</span>; <span class="k">do</span>
</span><span class='line'><span class="k">          case</span> <span class="s2">&quot;$OPT&quot;</span> in
</span><span class='line'>              f<span class="o">)</span> do_something_with <span class="s2">&quot;$OPTARG&quot;</span>;;
</span><span class='line'>              h<span class="o">)</span> do_something;;
</span><span class='line'>          <span class="k">esac</span>
</span><span class='line'><span class="k">      done</span>
</span><span class='line'>      ;;
</span><span class='line'>  
</span><span class='line'>    <span class="k">esac</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>単純に<code>case</code>と<code>getopts</code>を組み合わせます。ポイントは<code>-*)</code>の節の<code>OPTIND=1</code>と<code>getopts</code>の第3引数でしょうか。</p>

<p>因みにこの例だと引数を消費します。引数を消費したくなければ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> -gt 0 <span class="o">]</span>;<span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nv">ARG</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>;<span class="nb">shift</span>
</span></code></pre></td></tr></table></div></figure>


<p>を</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">for </span>ARG;do
</span></code></pre></td></tr></table></div></figure>


<p>に書き換えれば良く、<code>--</code>でパースを止めたくなければ<code>--) break;;</code>の節を無くせば良く、</p>

<p>他のオプションを許したくなければ<code>--*);;</code>の節を<code>--*)exit 1;;</code>などにし、<code>getopts</code>の引数文字列<code>:f:h</code>の<code>:</code>をとって<code>getopts fh ...</code>とすれば良いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeBSDのmanページを手動インストールする]]></title>
    <link href="http://KeenS.github.io/blog/2014/02/01/freebsd-manpage/"/>
    <updated>2014-02-01T03:53:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/02/01/freebsd-manpage</id>
    <content type="html"><![CDATA[<p>FreeBSD10をインストールするときにdocをインストールしなかったら後で困ったのでメモ。
環境はUbuntu13.10上のkvmに入れたFreeBSD10です。</p>

<!-- more -->


<p>本来なら<code>sudo bsdconfig</code>(9.xまでは<code>sudo sysinstall</code>)でメニューを選んでいけばインストールできるのですが、<code>ping</code>か何かがおかしくてサーバーの名前解決ができない。<code>ping FreeBSD.org</code>や<code>ping 4.4.4.4</code>が返ってこない。しかし<code>curl</code>などは普通に動きます。</p>

<p>とりあえず</p>

<pre><code>$ ftp anonymous@ftp.jp.freebsd.org 
</code></pre>

<p>でログインし、</p>

<pre><code>ftp&gt; cd pub/FreeBSD/releases/i386/10.0-RELEASE
</code></pre>

<p>と進んで</p>

<pre><code>ftp&gt; get doc.txz
</code></pre>

<p>します。んで</p>

<pre><code>ftp&gt; bye
$ unxz -cd doc.txz | sudo tar xf - -C /
</code></pre>

<p>でインストール完了。</p>

<p>普通に配置するだけで良いんですね。mandbとかあるのかと思ってた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CIMの解説をしてみる コマンド編]]></title>
    <link href="http://KeenS.github.io/blog/2014/01/27/cim-explanation/"/>
    <updated>2014-01-27T13:55:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/01/27/cim-explanation</id>
    <content type="html"><![CDATA[<p>先日LTで紹介したCIMが思いの外反響を呼んでる(Githubのstarが15)ので解説でもしてみます。</p>

<p>コマンド編の次は実装編です。これでバグにエンカウントしたときの調査とか完璧ですね。</p>

<!-- more -->


<h1>インストーラ</h1>

<p>READMEにあるように</p>

<pre><code>curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
</code></pre>

<p>で<code>~/.cim/</code>にインストールできます。パスを変えたければ</p>

<pre><code>CIM_HOME=/path/to/cim curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
</code></pre>

<p>でOK。Cシェル系なら</p>

<pre><code>env CIM_HOME /path/to/cim curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
</code></pre>

<p>でしょうか。</p>

<p>ここでは<code>curl</code>を使ってますが<code>wget -O -</code>とか<code>fetch -o -</code>など標準出力に吐ければなんでも良いです。</p>

<p>あ、でも<code>CIM_HOME</code>を指定してインストールしたときにバグがある気がしてきました。今から直します。</p>

<p>CIMを使うにはシェルの起動時に初期化が必要ですが、インストーラが初期化ファイルを読みにいく処理を<code>.*rc</code>に書き出してくれます。Bourne Shellは<code>.profile</code>ですね。<br/>
書き出すファイルは<code>$SHELL</code>を見てます。<code>csh</code>、<code>tcsh</code>、<code>sh</code>、<code>bash</code>、<code>zsh</code>に対応してます。</p>

<p>あと<code>~/.emacs.d/eshell/</code>が存在したら<code>~/.emacs.d/eshell/profile</code>にも初期化処理を書き出します。一時期パスが間違ってて<code>~/.emacs.d/profile</code>に書き出してました。ごめんなさい。<br/>
vimshell(だっけ？)でも初期化さえしてしまえば使えると思うので誰か初期化処理書いて下さい。</p>

<h1><code>cim</code></h1>

<p>とりあえず<code>help</code>見ておきましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cim help
</span><span class='line'>CIM -- Common Lisp Implementation Manager
</span><span class='line'>
</span><span class='line'>Commands currently available
</span><span class='line'>install &lt;impl[-version]&gt;       ;; Install the impl.
</span><span class='line'>use &lt;impl[-version]&gt;           ;; Use specified impl as `cl' command's backend.
</span><span class='line'>resume [rm] [resume..]           ;; Resume suspended installation(s) or give it up.
</span><span class='line'>list &lt;command&gt;             ;; List available target of &lt;command&gt;
</span><span class='line'>reinstall &lt;impl[-version]&gt;     ;; Reinstall the impl.
</span><span class='line'>clean &lt;impl&gt;|all           ;; Clean downloaded archive and src of the impl.
</span><span class='line'>distclean &lt;impl&gt;|all           ;; Clean built dists.
</span><span class='line'>uninstall &lt;impl[-version]&gt;     ;; Uninstall the impl.
</span><span class='line'>purge &lt;impl&gt;|all           ;; Just clean and uninstall the impl.
</span><span class='line'>info                         ;; Display current state.
</span><span class='line'>get                  ;; Upgrade cim itself.
</span><span class='line'>version                  ;; Show the version
</span><span class='line'>help &lt;command&gt;             ;; Show help for &lt;command&gt;. If no commands are specified, show this help.
</span><span class='line'>
</span><span class='line'>If you want detailed help, type `cim help &lt;command&gt;'.</span></code></pre></td></tr></table></div></figure>


<h2><code>cim install</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cim help install
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  cim install &lt;impl[-version]&gt;
</span><span class='line'> 
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Install the given lisp implementation to cim directory.
</span><span class='line'>If version is not specified, install the latest version.
</span><span class='line'>If you want to pass specific options to 'configure' script,
</span><span class='line'>prefix 'flags='.
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>
</span><span class='line'>  # install sbcl-1.1.14
</span><span class='line'>  cim install sbcl-1.1.14
</span><span class='line'>  
</span><span class='line'>  # install latest clisp with option.
</span><span class='line'>  flags='--with-libsigsegv-prefix=/usr/local' cim install clisp
</span><span class='line'>
</span><span class='line'>To show available lisp implementations, type 'cim list install'.
</span></code></pre></td></tr></table></div></figure>


<p>インストールします。はい。
<code>&lt;impl[-version]&gt;</code>ってのは<code>sbcl</code>とか<code>clisp-2.48</code>とかですね。バージョンを指定しなかったら最新版になります。
<code>cim list install</code>でインストール可能なものを表示しますが載ってない古いバージョンとかもインストールできる筈です。多分。</p>

<p><code>configure</code>スクリプトに渡すフラグを指定したいときは<code>flags='flag....' cim install</code>とします。ヘルプにあるように<code>libsigsegv</code>のパスを指定しないとFreeBSDでclispをインストールできなかったので用意しました。</p>

<p>Allegroはライセンス表示した方が良いのかなーとか考えてます。</p>

<h2><code>cim use</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  cim use &lt;impl[-version]&gt; [--default]
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Use &lt;impl&gt; as background for 'cl' command. It also affects bare lisp command.
</span><span class='line'>If version is not given, use latest version.
</span><span class='line'>If --default is given, use the specified implementation at initial state.
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>
</span><span class='line'>  # use the latest sbcl
</span><span class='line'>  cim use sbcl
</span><span class='line'>  sbcl --version
</span><span class='line'>  -&gt; SBCL 1.1.14
</span><span class='line'>  # use old sbcl
</span><span class='line'>  cim use sbcl-1.1.10
</span><span class='line'>  sbcl --version
</span><span class='line'>  -&gt; SBCL 1.1.10
</span><span class='line'>
</span><span class='line'>  # use ccl-1.9 and set it default
</span><span class='line'>  cim use ccl-1.9 --default
</span></code></pre></td></tr></table></div></figure>


<p><code>cl</code>コマンドのバックエンドの切り替えと処理系のバージョンの両方を切り替えます。処理系の指定の仕方は<code>install</code>に同じ。じゃなかった。<code>install</code>に加えて<code>/bin:/usr/bin:/usr/local/bin</code>にあるものを<code>xxx-system</code>として指定できます。<code>sbcl-system</code>とか。</p>

<p>例えば</p>

<pre><code>cim use clisp-2.48
</code></pre>

<p>ってやると<code>cl</code>コマンドがバックエンドとしてclispのバージョン2.48を使うようになりますし、<code>clisp</code>コマンドのバージョンも2.48になります。
この<code>clisp</code>の部分はリンクを貼り替えてて、一つのシェルで変更すると他のシェルにも影響が及ぶ問題があるのでそのうち直します。これ結構面倒なのでそのうちです。<br/>
clisp = clisp-2.48な状態で<code>cim use sbcl</code>するとclisp = clisp-2.48なまま<code>cl</code>のバックエンドがsbclになります。上手く使って下さい。</p>

<p><code>--default</code>を付けると次回からのデフォルト値を指定したものにしつつ<code>cim use</code>します。</p>

<h2><code>cim resume</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cim help resume
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  cim resume [rm] &lt;impl[-version]&gt; | all
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Resume interrupted installation of &lt;impl&gt;. If &lt;version&gt; is not given, the latest version is used.
</span><span class='line'>If 'rm' is given, remove &lt;impl&gt; from 'resume' list.
</span><span class='line'>If target is 'all', do on all the available target.
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>
</span><span class='line'>  # resume the installation of clisp with configure flags
</span><span class='line'>  flags='--with-libsigsegv-path=/usr/local' cim resume clisp
</span><span class='line'>
</span><span class='line'>  # remove all the available target.
</span><span class='line'>  cim resume rm all
</span></code></pre></td></tr></table></div></figure>


<p><code>cim install</code>がエラー終了したり<code>Ctrl-C</code>で中断したりしたやつを再開してくれるコマンドです。<code>cim install sbcl</code>を中断したなら<code>cim resume sbcl</code>で再開できます。<code>cim resume all</code>で中断された全てのインストールを再開します。終了ステータスは再開してもまたエラーで終了したやつの数になります。</p>

<p><code>cim resume rm sbcl</code>だと<code>cim list resume</code>の結果から<code>sbcl</code>を削除できます。<code>resume</code>はしませんよ。<code>cim resume rm all</code>とかも可能です。</p>

<h2><code>cim list</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cim help list
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  cim list &lt;subcommand&gt;
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>List available target for subcommand.
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>
</span><span class='line'>  # list available lisp implementation to install
</span><span class='line'>  cim list install
</span><span class='line'>
</span><span class='line'>  # show available target for list
</span><span class='line'>  cim list list
</span><span class='line'>
</span><span class='line'>  # targets for subsubcommands are also available
</span><span class='line'>  cim list resume rm
</span></code></pre></td></tr></table></div></figure>


<p>さっきから出てきてるので分かるかと思いますが、可能なターゲットを表示します。将来的には<code>zsh</code>の補完候補にも使うつもりです。そのときは<code>-b, --batch</code>オプションでhuman readableかmachine readableかを分けようかなと。</p>

<h2><code>cim reinstall</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cim help reinstall
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  cim reinstall &lt;impl[-version]&gt; | all
</span><span class='line'> 
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Force install already installed implementaion(s). Downloaded archives are resued if available
</span><span class='line'>If version is not specified, install the latest version.
</span><span class='line'>If target is 'all', do on all the available targets.
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>
</span><span class='line'>  # reinstall sbcl-1.1.14
</span><span class='line'>  cim reinstall sbcl-1.1.14
</span><span class='line'>  
</span><span class='line'>  # reinstall all installed lisp impls
</span><span class='line'>  cim reinstall all
</span><span class='line'>
</span><span class='line'>To show available lisp implementations, type 'cim list reinstall'.
</span></code></pre></td></tr></table></div></figure>


<p><code>cim install</code>は既にインストールされているものはインストールできないのですが、<code>reinstall</code>を使えば可能です。ダウンロードしたアーカイブがあればそれを使います。なければダウンロードから始めます。<code>all</code>は察しのようにインストール済のものを全て<code>reinstall</code>します。</p>

<h2><code>cim clean</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cim help clean
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  cim clean &lt;impl[-version]&gt; | all
</span><span class='line'> 
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Remove donwloaded archives and extracted sources of the given lisp implementations.
</span><span class='line'>If version is not specified, install the latest version.
</span><span class='line'>If target is 'all', do on all the available targets.
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>
</span><span class='line'>  # clean sbcl-1.1.14
</span><span class='line'>  cim clean sbcl-1.1.14
</span><span class='line'>  
</span><span class='line'>  # clean all installed lisp impls
</span><span class='line'>  cim clean all
</span><span class='line'>
</span><span class='line'>To show available lisp implementations, type 'cim list clean'.
</span></code></pre></td></tr></table></div></figure>


<p><code>cim install</code>は基本的に不要なものも削除しないので、それが嫌なら<code>clean</code>を使いましょうというスタンスです。アーカイブとソースを削除します。</p>

<h2><code>cim distclean</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$cim help distclean
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  cim distclean &lt;impl[-version]&gt; | all
</span><span class='line'> 
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Clean built files of the given lisp implementation. It doesn't mean uninstall.
</span><span class='line'>If version is not specified, install the latest version.
</span><span class='line'>If target is 'all', do on all the available targets.
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>
</span><span class='line'>  # distclean sbcl-1.1.14
</span><span class='line'>  cim distclean sbcl-1.1.14
</span><span class='line'>  
</span><span class='line'>  # distclean all installed lisp impls
</span><span class='line'>  cim distclean all
</span><span class='line'>
</span><span class='line'>To show available lisp implementations, type 'cim list distclean'.
</span></code></pre></td></tr></table></div></figure>


<p><code>cim clean</code>より控えめなコマンドです。コンパイルするときに<code>make</code>で生成されたファイルを削除します。<code>make clean</code>的な。</p>

<h2><code>cim uninstall</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cim help uninstall
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  cim uninstall &lt;impl[-version]&gt; | all
</span><span class='line'> 
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Uninstall the given lisp implementaion(s). It does't remove donwloaded archives and extracted sources.
</span><span class='line'>If version is not specified, install the latest version.
</span><span class='line'>If target is 'all', do on all the available targets.
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>
</span><span class='line'>  # uninstall sbcl-1.1.14
</span><span class='line'>  cim uninstall sbcl-1.1.14
</span><span class='line'>  
</span><span class='line'>  # uninstall all installed lisp impls
</span><span class='line'>  cim uninstall all
</span><span class='line'>
</span><span class='line'>To show available lisp implementations, type 'cim list uninstall'.
</span></code></pre></td></tr></table></div></figure>


<p>アンインストールします。はい。ただしダウンロードしたアーカイブとソースは削除しません。</p>

<h2><code>cim purge</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cim help purge
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  cim purge &lt;impl[-version]&gt; | all
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Uninstall and clean up downloaded files of the given lisp implementation.
</span><span class='line'>This command is equivalent to 'clean' and 'uninstall'.
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>
</span><span class='line'>  # purge the latest sbcl
</span><span class='line'>  cim purge sbcl
</span><span class='line'>
</span><span class='line'>To show available target for 'purge', type 'cim list purge'
</span></code></pre></td></tr></table></div></figure>


<p><code>uninstall</code>のアーカイブとソースを削除する版です。</p>

<h2><code>cim info</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cim help info
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  cim info
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Display information for current cim. It includes environment variables that cim uses, what current and default lisp implementation is, what version of each implementation is used, and where system lisp is.
</span><span class='line'>
</span><span class='line'>Example:
</span><span class='line'>
</span><span class='line'>  # display info
</span><span class='line'>  cim info
</span></code></pre></td></tr></table></div></figure>


<p>現在の状態を表示します。こんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cim info
</span><span class='line'>CIM_ID   = 22176
</span><span class='line'>CIM_HOME = /home/kim/.cim
</span><span class='line'>
</span><span class='line'>current lisp = sbcl-system
</span><span class='line'>default lisp = sbcl-system
</span><span class='line'>
</span><span class='line'>abcl  = abcl-1.2.1
</span><span class='line'>alisp = alisp-9.0
</span><span class='line'>ccl   = ccl-1.9
</span><span class='line'>clisp = clisp-2.49
</span><span class='line'>ecl   = ecl-13.5.1
</span><span class='line'>gcl   = gcl-2.6.9
</span><span class='line'>sbcl  = sbcl-system
</span><span class='line'>
</span><span class='line'>sbcl-system  = /usr/local/bin/sbcl
</span><span class='line'>gcl-system   = /usr/bin/gcl
</span></code></pre></td></tr></table></div></figure>


<p><code>CIM_ID</code>ってのは<code>cim</code>がそれぞれのシェルの状態を管理するためのIDです。まあ、そのシェルのプロセスIDですね。逆にプロセスIDの取得と環境変数の設定さえできれば<code>cim</code>は動かせるのでEmacsでも簡単に動きます。</p>

<h2><code>cim get</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cim help get
</span><span class='line'>Usage:
</span><span class='line'>  cim get
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Upgrade to the latest cim.
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>
</span><span class='line'>  cim get
</span></code></pre></td></tr></table></div></figure>


<p>cim自身のアップデートです。なんでこんな名前かというと<code>rvm</code>がそうだからです。現状はgithubのKeenS/CIMのmasterからとってきます。stable版ができたらstableに変更しますね。実はブランチを指定してとってくる方法もあったりはします。<code>cim get --branch stable</code>か <code>CIM_INSTALL_BRANCH=stable cim get</code>です。まだブランチが無いので意味ないんですけどね。</p>

<p>この辺で気付いたかもしれませんが結構環境変数で制御できるようにデザインされてます。rubyがそんな感じだからです。</p>

<h2><code>cim version</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cim help version
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  cim version
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Show current cim's version
</span><span class='line'>
</span><span class='line'>Example:
</span><span class='line'>
</span><span class='line'>  cim version
</span></code></pre></td></tr></table></div></figure>


<p>めちゃくちゃバグがあるのにversionが1.0.0に見えるの気のせいです。きっと100点中の1点なんですよ。</p>

<h2><code>cim help</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cim help help
</span><span class='line'>Help for 'help' is not prepared, sorry.</span></code></pre></td></tr></table></div></figure>


<p>あー。<code>help</code>のhelp用意してなかったー。まあ、上で使ったのが全てです。</p>

<h1><code>cl</code></h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cl -h
</span><span class='line'>Usage: cl [switchs] [--] [programfile] [argumensts]
</span><span class='line'>
</span><span class='line'>-C DIR          set *default-pathname-defaults* DIR.
</span><span class='line'>-d, --debug     set debugging flags (push :debug into *features*)
</span><span class='line'>-e, --eval SEXP one line of script. Several -e's are allowed. Omit [programfile]
</span><span class='line'>-f, --load FILE load the FILE
</span><span class='line'>-i EXT          edit *argv* files in place and make backup with the extension .EXT
</span><span class='line'>-l LIBRARY      quickload the LIBRARY
</span><span class='line'>-L LIBRARY      quickload and use-package the LIBRARY
</span><span class='line'>-r, --repl      run repl
</span><span class='line'>-q, --no-init   do not load $CIM_HOME/init.lisp
</span><span class='line'>--no-rl         do not use rlwrap. This is effective only when --repl is specified
</span><span class='line'>--no-right      do not display right prompt. This is effective only when --repl is specified
</span><span class='line'>--no-color      do not use color. This is effective only when --repl is specified
</span><span class='line'>-h, --help      print this help
</span><span class='line'>-v, --version   print the version
</span><span class='line'>
</span><span class='line'>If neither programfile, -e (--eval) nor -r (--repl) are specified, cl reads scripts from the standard input and then eval them.
</span></code></pre></td></tr></table></div></figure>


<p>まあ、見たら分かりますね。ruby由来のオプションとShelly由来のオプションと私の好みのオプションがあります。<code>cl</code>を起動する方法は</p>

<ul>
<li><code>cl script.lisp</code></li>
<li><code>cl &lt; script.lisp</code></li>
<li><code>cl -e sexp</code></li>
<li><code>cl -r</code></li>
</ul>


<p>です。<code>cl script.lisp</code>はシェバン(最初の行が<code>#!</code>なもの)を無視します。</p>

<p>また、これも環境変数<code>LISP_IMPL</code>でバックエンドを制御できます。これはShelly由来ですね。</p>

<p>もう一つ、デバッガは起動しません。スクリプトやワンライナーはエラーを吐いて終了して欲しいですし次に述べますがREPLも目的からしてデバッガは相応しくないと思うからです。因みにですが<code>-d</code>オプションをつけてもデバッガは起動しません。理由はオプション解析のほとんどをLispに任せているので起動時のオブションである<code>--disable-debugger</code>を制御できないからです。需要が高そうならシェルスクリプト内で解析して頑張ってみます。</p>

<p>あ、<code>-c, --compile FILE</code>オプションつけ忘れてた。いつか入れます。<code>(compile-file FILE)</code>で可能でしょうからすぐに入るはずです。</p>

<h2><code>cl -r</code></h2>

<p>一応開発向けではなくて、ちょっと試したいときや初心者が本を片手に動かすときを想定して作ってます。エラーはメッセージのみ表示。ちょっと試したいときはあんまりデバッガを必要としませんしスタックトレースもどうせ深さ1~2なのであまり必要でないからです。なにより初心者にとってデバッガは何をして良いか分かりませんし覚えても処理系毎に操作が違います。その辺を分り易い統一インターフェースを作ることも考えたのですが「それって<code>swank</code>」って結論に至ったのでこのままです。</p>

<h1><code>ql</code></h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ql -- Command line interface for quicklisp
</span><span class='line'>
</span><span class='line'>Commands currently available
</span><span class='line'>deps &lt;system&gt;           ;; Install dependencies of &lt;system&gt;.
</span><span class='line'>help [command]            ;; Show help.
</span><span class='line'>install[quickload] &lt;system&gt;...  ;; Install given system.
</span><span class='line'>list {remote | local}     ;; List available/installed systems.
</span><span class='line'>search[system-propos] &lt;keyword&gt; ;; Search quicklisp.
</span><span class='line'>uninstall &lt;system&gt;          ;; Uninstall system.
</span><span class='line'>update [system]           ;; Update dist info and installed systems.</span></code></pre></td></tr></table></div></figure>


<p>一番未完成なコマンドです。主な理由は私が<code>quicklisp</code>の使い方を分かってないからです。</p>

<h2><code>ql deps</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ql help deps
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  ql deps [--path &lt;path&gt;] &lt;system&gt;
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Install dependencies of given system. If path is specified, install dependencies there.
</span><span class='line'>Once you run 'ql --path &lt;path&gt; deps', you don't need to specify '--path' because the path is written out to '.quicklisp-path' in current directory.
</span><span class='line'>You can run 'ql deps' for a local system if '.asd' file is in current directory.
</span><span class='line'>This command is useful when you want to separate quicklisps for local project.
</span><span class='line'>
</span><span class='line'>Example:
</span><span class='line'>
</span><span class='line'>  ql deps --path ./quicklisp my-project
</span></code></pre></td></tr></table></div></figure>


<p>rubyの<code>bundler</code>を参考に作りました。<code>Gemfile</code>に対応する<code>QLfile</code>でも読もうかと思いましたが良く考えたら<code>.asd</code>で十分じゃんとの思いに至ったのでカレントパスの<code>asd</code>ファイルを読みます。<br/>
が、奴は依存システムのバージョンまでは指定できなかった気がするのでやっぱり必要な気がします。</p>

<p><code>ql deps --path ./ql myapp</code>とすると依存システム(+新たな<code>quicklisp</code>本体)を<code>./ql</code>にインストールしてくれます。<code>quicklisp</code>本体のインストールは不要ですがどうやったら回避できるかは今模索中です。<br/>
<code>--path</code>の位置が<code>cim use --default</code>と違うのでご注意下さい。これは主に内部で使ってる<code>parse-option</code>の欠陥に由来します。<br/>
一度指定すると<code>.quicklisp-path</code>にパスを書き出してくれるので次回からは必要なくなります。カレントディレクトリに複数の<code>asd</code>ファイルがあってそれぞれでパスを使い分けたいとかはできません。<br/>
あと、最大の欠陥として<code>./ql</code>にシステムをインストールしてもそれを読み込みにいくコマンドがないので実用性ゼロです← まあ、<code>cl</code>あたりを弄ってカレントパスに<code>.quicklisp-path</code>があったら読みにいくようにします。その辺は<code>.lisp-impl</code>とかも含めて考えます。</p>

<h2><code>ql help</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ql help help
</span><span class='line'>Help for 'help' is not prepared, sorry.
</span></code></pre></td></tr></table></div></figure>


<p>こいつもhelp用意してなかった。まあ、良いや。</p>

<h2><code>ql install</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ql help install
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  ql install &lt;system&gt;...
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Install given system(s) to $CIM_HOME/quicklisp.
</span><span class='line'>
</span><span class='line'>Example:
</span><span class='line'>
</span><span class='line'>  # install clack
</span><span class='line'>  ql install clack
</span></code></pre></td></tr></table></div></figure>


<p>なんでこいつがhelpの先頭に居ないんでしょうね。<code>cim</code>に比べて適当ですね。</p>

<p><code>ql quickload</code>っていう別名も持ってます。<code>ql help</code>には<code>quickload</code>が本名で<code>install</code>がエイリアスって書いてありましたが実装ミスりました。</p>

<p>名前の通り<code>ql:quickload</code>します。<code>system</code>は複数指定できます。</p>

<h2><code>ql list</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ql list
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  ql list {remote | [local]}
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>List installed systems. if 'remote' is given, list all the available systems. 'ql list local' is equivalent to 'ql list'.
</span><span class='line'>
</span><span class='line'>Example:
</span><span class='line'>
</span><span class='line'>  ql list remote
</span></code></pre></td></tr></table></div></figure>


<p><code>cim list</code>と使い方が違ってアレですね。現状<code>quicklisp</code>に登録されているもの全てを表示する<code>ql list remote</code>とインストールしたものだけを表示する<code>ql list [local]</code>があります。<code>ql deps</code>でパスを指定したやつらにも使いたかったのですが方法が分かんないのでとりあえず先送りです。</p>

<h2><code>ql search</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ql help search
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  ql search &lt;keyword&gt;
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Search quicklisp for &lt;keyword&gt;.
</span><span class='line'>
</span><span class='line'>Example:
</span><span class='line'>
</span><span class='line'>  ql search http
</span></code></pre></td></tr></table></div></figure>


<p>別名<code>system-apropos</code>。別名と本名が<code>ql help</code>と違うのも単に<code>ql:system-apropos</code>を呼ぶのも<code>ql install</code>と同じです。出力結果をもうちょっと制御したいなと思ってます。</p>

<h2><code>ql uninstall</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ql help uninstall
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  ql uninstall &lt;system&gt;...
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Uninstall given system(s).
</span><span class='line'>
</span><span class='line'>Example:
</span><span class='line'>
</span><span class='line'>  ql uninstall caveman clack
</span></code></pre></td></tr></table></div></figure>


<p><code>ql:uninstall</code>に同じ。以上。</p>

<h2><code>ql update</code></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ql help update
</span><span class='line'>Usage:
</span><span class='line'>
</span><span class='line'>  ql update [client]
</span><span class='line'>
</span><span class='line'>Description:
</span><span class='line'>
</span><span class='line'>Update installed systems. If target 'client' is given, update quicklisp itself.
</span><span class='line'>
</span><span class='line'>Example:
</span><span class='line'>
</span><span class='line'>  ql update client
</span></code></pre></td></tr></table></div></figure>


<p><code>ql:update-all-dists</code>か<code>ql:update-client</code>かを選べます。最初はsystem毎にアップデートしたかったのですが無理っぽいので止めました。</p>

<h1>おわりに</h1>

<p>とりあえずCIMの機能はこれで全部です。あ、開発用に<code>cim reset</code>とかありますけど使わないで下さい。とういうか使うなよ。絶対使うなよ。</p>

<p>これら使ってみてバグがあったらgithubのissueに投げるなりtwitterで報告するなりして下さい。</p>

<p>ところでCIMは私はちむと読んでます。しー・あい・えむと読む人も居るようです。何でも良いです。プロジェクトとしてのちむとコマンドとしてのちむを区別するためにコマンドは小文字で<code>cim</code>、そして<code>cim</code>、<code>cl</code>、<code>ql</code>を含んだプロジェクトは大文字でCIMと書くことにします。今考えました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #13でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13/"/>
    <updated>2014-01-24T02:29:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13</id>
    <content type="html"><![CDATA[<p>もう12時回ったので昨日になってしまいましたが<a href="http://atnd.org/events/46746#comments">Lisp Meet Up presented by Shibya.lisp #13</a>に参加してLTしてきたので報告(?)エントリです。</p>

<!-- more -->


<p>先月東京に戻ってきた深町さんがめちゃくちゃ宣伝してたせいか20人参加希望があり、19人参加しました。</p>

<p>自己紹介ではClojureが多いなーってのとRubyistが混ってたりしたのが印象的でした。Emacs Lispの人も居たり。</p>

<p>LTは一人目がにとり(深町英太郎 (fukamachi))(@nitro_idiot)さん。今更ながら呼び方に困りましたね。内容はO/Rマッパーの<a href="https://github.com/fukamachi/integral"><code>integral</code></a>の機能と実装について。<br/>
非Common Lisperが多い中Meta Object Protocolについて色々説明したりと大変そうでした。私はCommon LisperなのでMOPにそんな使い方がるのかとか結構面白かったです。<br/>
<s>スライドはまだ上げてないみたいです。そのうち上がるでしょう。</s>上がりました。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30362150" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/fukamachi/lisp-meet-up-presented-by-shibuyalisp-13" title="Integral - New O/R Mapper for Common Lisp" target="_blank">Integral &ndash; New O/R Mapper for Common Lisp</a> </strong> from <strong><a href="http://www.slideshare.net/fukamachi" target="_blank">fukamachi</a></strong> </div></p>

<p>二人目が私。最近作ってる<a href="https://github.com/KeenS/CIM"><code>CIM</code></a>についてです。スライド見るのが速いですね。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30338391" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/blackenedgold/cim-common-lisp-implementation-manager" title="CIM - Common Lisp Implementation Managerを作りました" target="_blank">CIM &ndash; Common Lisp Implementation Managerを作りました</a> </strong> from <strong><a href="http://www.slideshare.net/blackenedgold" target="_blank">blackenedgold</a></strong> </div></p>

<p>実際にそれぞれのコマンドを動かしてみた結果、予想してなかったエラーなとがあったものの割と聴衆の反応は良かったです。あとはPure Bourne Shell Scriptで挑んで爆死した話とかしたりですね。「詳解シェルスクリプト」を読んだり<code>man</code>ページ読んだりして頑張ったんですよ。</p>

<p>それが終わったら一旦休憩。そしたらわざわざ深町さんが私のところに来て下さって「Shellyより良いプロダクトになると思います。頑張って下さい。」との御言葉を頂きました。非常に嬉しかったです。私が作ったものが認められた。しかも着想の元になったShellyの作者の深町さんから。<br/>
でもその後実際に何人か使ってみてくれたのですが、バグが立て続けに3つくらい発覚して「…これ、テスト必要ですね」と絶句。分かってます。分かってますけど難しいんです泣。<br/>
他はgithubでCIMを探そうとしてる方が居たんですが同じ名前のレポジトリがめちゃくちゃあって検索性悪いなとか。何故か私のハンドルネームの最初の文字がk(ケー)ではなくκ(カッパ)なのを知ってたり。</p>

<p>その後の懇親会では向かいが深町さん、隣が佐野さん(実践Common Lispの訳者)で、Common Lispの今後とか色々な話をしてました。<a href="http://redmonk.com/sogrady/2014/01/22/language-rankings-1-14/">ここ</a>のグラフでCommon Lispがありえない位置にいるしどうやったら普及するんだろうねーとか。</p>

<p>運営のchikuさん potixさん、発表を聞いてCIMを試してくれたりGithubにstarくれたりしたみなさんありがとう御座いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mpd 小ネタ]]></title>
    <link href="http://KeenS.github.io/blog/2014/01/21/mpd-something/"/>
    <updated>2014-01-21T02:29:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/01/21/mpd-something</id>
    <content type="html"><![CDATA[<p>mpdのちょっとした便利な使い方。</p>

<!-- more -->


<p><code>at</code>がRSPiにインストールされてる前提で、RSPi上で</p>

<pre><code>$ at 7:00
at&gt; mpc toggle
^D
</code></pre>

<p>とすればRSPiを目覚ましや時報として使えます。停止にはsshログインして<code>mpc toggle</code>する必要があるのでそこまでする頃には起きてる筈。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSPiでMongoDBを動かし、Twitter post alertを作った話]]></title>
    <link href="http://KeenS.github.io/blog/2014/01/19/rspi-plus-mongodb-plus-twitter/"/>
    <updated>2014-01-19T18:17:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/01/19/rspi-plus-mongodb-plus-twitter</id>
    <content type="html"><![CDATA[<p>κeenです。ここのところ寒い日が続いてますね。寒いと家に扃(ひきこも)ってTweet数が急上昇します。  すると一日に何postしてるか気になるのでカウンタを作りました。<br/>
そのときの苦労話です。</p>

<!-- more -->


<p>ただ、どうせ記録取るなら色々やりたいのでRspberry Piで一日のpost数、fav数、そしてメンヘラなことにフォロー/フォロワー全員のidを毎日記録することにしました。これで誰にリムられたかブロられたか一目瞭然ですね。</p>

<p>ここで一つ問題が。post, fav数は良いのですがフォロー/フォロワーのid一覧は毎日変わるのでmysqlで管理するのはちょっと面倒かなと。なのでMongoDBで管理することにしたいんですが、raspbianの<code>apt</code>にないんですよね。仕方ないので手動ビルドで対応しました。</p>

<h2>MongoDBのビルド</h2>

<p><a href="http://c-mobberley.com/wordpress/index.php/2013/10/14/raspberry-pi-mongodb-installation-the-working-guide/">ここ</a>を参考に</p>

<pre><code>cd ~/compile
sudo apt-get install build-essential libboost-filesystem-dev libboost-program-options-dev libboost-system-dev libboost-thread-dev scons libboost-all-dev python-pymongo git
git clone https://github.com/skrabban/mongo-nonx86
cd mongo-nonx86
sudo scons
</code></pre>

<p>としました。が、<code>scons</code>に一晩かかるとのことなので放置してたら何故かraspberry piが落ちてる…<br/>
気をとりなおして再起動。もう一度<code>sudo scons</code>すると今度はエラー終了。<code>sig 9 killed</code>…いや、私なにもしてないですよ?ダメ元で今度は</p>

<pre><code>sudo scons install
</code></pre>

<p>したら完走。良ク分カラン。狂想曲感が出てますね。</p>

<h2>MongoDBのインストール</h2>

<p>さっきのでインストール終わったと思うでしょ？違うんですよ。<code>init.d</code>だとか<code>mongodb.conf</code>だとかは配置されてないんですよ。<code>debian/</code>以下に色々入ってるので</p>

<pre><code>cd debian
sudo cp mongodb.conf /etc/mongodb.conf
</code></pre>

<p>までは良いのですが、<code>init.d</code>と<code>mongodb.upstart</code>の<code>mongod</code>のパスが<code>/usr/bin/mongod</code>でハードコードされてるんですよ。上の<code>sudo scons install</code>だと<code>/usr/local/bin/mongod</code>です。さらに起動オプションに<code>--dbpadh /var/lib/mongodb</code>と<code>--logpath /var/log/mongodb/mongodb.log</code>が指定されていて、<code>mongodb.conf</code>で上書きしているにも係らずそこまでのパスが存在しないとエラー吐いて起動してくれないので修正。<br/>
<code>mongodb.upstart</code>は直ぐ分かるので良いとして、<code>init.d</code>は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>48d47
</span><span class='line'>&lt; 
</span><span class='line'>50c49
</span><span class='line'>&lt; DAEMON=/usr/bin/mongod
</span><span class='line'>---
</span><span class='line'>&gt; DAEMON=/usr/local/bin/mongod
</span><span class='line'>100c99
</span><span class='line'>&lt; DAEMON_OPTS="$DAEMON_OPTS --config $CONF"
</span><span class='line'>---
</span><span class='line'>&gt; DAEMON_OPTS="run --config $CONF"
</span></code></pre></td></tr></table></div></figure>


<p>な感じの修正です。なんか空行が一つ減ってますが気にしない。<br/>
ここまでしたらようやく</p>

<pre><code>chmod +x init.d mongodb.upstart
sudo cp init.d /etc/init.d/mongodb
sudo cp mongodb.upstart /etc/init/mongodb
</code></pre>

<p>で完了です。<code>man</code>とかもあるのですが配置の仕方が分からないので放置←</p>

<pre><code>sudo service mongodb start
mongo
</code></pre>

<p>で接続確認できます。</p>

<h2>Twitterのpostを集約する</h2>

<p>ビックリするくらい簡単。twitterのAPI keyを持ってる前提ですが。</p>

<pre><code>sudo gem install twitter mongo
</code></pre>

<p>で必要なgemをインストールし、
<code>~/.twitter.rb</code>に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$client</span> <span class="o">=</span> <span class="ss">Twitter</span><span class="p">:</span><span class="ss">:REST</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">conf</span><span class="o">|</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="n">consumer_key</span> <span class="o">=</span> <span class="s2">&quot;yours&quot;</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="n">consumer_secret</span> <span class="o">=</span> <span class="s2">&quot;yours&quot;</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="n">access_token</span> <span class="o">=</span> <span class="s2">&quot;yours&quot;</span>
</span><span class='line'>  <span class="n">conf</span><span class="o">.</span><span class="n">access_token_secret</span> <span class="o">=</span> <span class="s2">&quot;yours&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>と保存しておきます。昔と形式が変わりましたね。この形式になってからスレッドセーフになり、Twitter Stream APIにも対応してるようです。いつか扱ってみたい</p>

<p>集計ですが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#! /usr/local/bin/ruby</span>
</span><span class='line'><span class="c1"># coding: utf-8</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;twitter&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;time&#39;</span>
</span><span class='line'><span class="nb">load</span> <span class="s2">&quot;~/.twitter.rb&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">doc</span> <span class="o">=</span>  <span class="p">{</span> <span class="s2">&quot;tweets&quot;</span>    <span class="o">=&gt;</span> <span class="vg">$client</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">tweets_count</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;favs&quot;</span>      <span class="o">=&gt;</span> <span class="vg">$client</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">favorites_count</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;followers&quot;</span> <span class="o">=&gt;</span> <span class="vg">$client</span><span class="o">.</span><span class="n">friend_ids</span><span class="o">.</span><span class="n">to_a</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;friends&quot;</span>   <span class="o">=&gt;</span> <span class="vg">$client</span><span class="o">.</span><span class="n">follower_ids</span><span class="o">.</span><span class="n">to_a</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;timestamp&quot;</span> <span class="o">=&gt;</span>  <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y%m%d%H%M%S&quot;</span><span class="p">)}</span>
</span><span class='line'><span class="n">col</span> <span class="o">=</span>  <span class="ss">Mongo</span><span class="p">:</span><span class="ss">:Connection</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">db</span><span class="p">(</span><span class="s2">&quot;twitter&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collection</span><span class="p">(</span><span class="s2">&quot;tweets&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">last</span> <span class="o">=</span> <span class="n">col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;timestamp&quot;</span><span class="p">,</span><span class="ss">:desc</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>
</span><span class='line'><span class="n">tweets_sub</span> <span class="o">=</span> <span class="n">doc</span><span class="o">[</span><span class="s2">&quot;tweets&quot;</span><span class="o">]</span> <span class="o">-</span> <span class="n">last</span><span class="o">[</span><span class="s2">&quot;tweets&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">favs_sub</span> <span class="o">=</span> <span class="n">doc</span><span class="o">[</span><span class="s2">&quot;favs&quot;</span><span class="o">]</span> <span class="o">-</span> <span class="n">last</span><span class="o">[</span><span class="s2">&quot;favs&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">followers_sub</span> <span class="o">=</span> <span class="n">doc</span><span class="o">[</span><span class="s2">&quot;followers&quot;</span><span class="o">].</span><span class="n">length</span> <span class="o">-</span> <span class="n">last</span><span class="o">[</span><span class="s2">&quot;followers&quot;</span><span class="o">].</span><span class="n">length</span>
</span><span class='line'><span class="n">friends_sub</span> <span class="o">=</span> <span class="n">doc</span><span class="o">[</span><span class="s2">&quot;friends&quot;</span><span class="o">].</span><span class="n">length</span> <span class="o">-</span> <span class="n">last</span><span class="o">[</span><span class="s2">&quot;friends&quot;</span><span class="o">].</span><span class="n">length</span>
</span><span class='line'><span class="n">col</span><span class="o">.</span><span class="n">insert</span> <span class="n">doc</span>
</span><span class='line'><span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;前回計測(</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">last</span><span class="o">[</span><span class="s2">&quot;timestamp&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">strftime</span> <span class="s2">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="si">}</span><span class="s2">)以降</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">message</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">tweets_sub</span><span class="si">}</span><span class="s2">回ツイートし</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">message</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">favs_sub</span><span class="si">}</span><span class="s2">回favり</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">message</span> <span class="o">+=</span> <span class="s2">&quot;友達は</span><span class="si">#{</span><span class="n">friends_sub</span><span class="o">.</span><span class="n">abs</span><span class="si">}</span><span class="s2">人</span><span class="si">#{</span><span class="n">friends_sub</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="s2">&quot;増え&quot;</span> <span class="p">:</span> <span class="s2">&quot;減り&quot;</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">message</span> <span class="o">+=</span> <span class="s2">&quot;フォロワーは</span><span class="si">#{</span><span class="n">followers_sub</span><span class="o">.</span><span class="n">abs</span><span class="si">}</span><span class="s2">人</span><span class="si">#{</span><span class="n">followers_sub</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="s2">&quot;増え&quot;</span> <span class="p">:</span> <span class="s2">&quot;減り&quot;</span><span class="si">}</span><span class="s2">ました&quot;</span>
</span><span class='line'><span class="vg">$client</span><span class="o">.</span><span class="n">update</span> <span class="n">message</span>
</span></code></pre></td></tr></table></div></figure>


<p>で全部です。Rubyのハッシュ+配列がそのままinsert/selectできるのでぜんぜんMongoDBを意識しなくて良いですね。</p>

<p>ところで<code>datetime</code>型が無さげだったので<code>timestamp</code>をソートキー兼idにするために<code>YYYYMMDDHHMMSS</code>形式の文字列で格納してます(整数は8bitまでっぽかったです)。他に良い方法があると思うのですが思いつきませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.emacsの整理をした話 + EmacsとViとShellとLispを悪魔合体させたら超絶便利だった]]></title>
    <link href="http://KeenS.github.io/blog/2013/12/13/dot-emacs-clean-up/"/>
    <updated>2013-12-13T02:55:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/12/13/dot-emacs-clean-up</id>
    <content type="html"><![CDATA[<p>やや長いタイトルですが・・・
年末になって大掃除がやってきましたね。みなさんもそろそろ.emacsの大掃除をしましょう。</p>

<!-- more -->


<p>私の.emacsは元々1300行ちょいあってEmacsの起動に7~8秒(体感)かかってましたが
大掃除&amp;高速化をした結果800行弱、起動に1秒(体感)ほどになったので整理の仕方を共有しますね。</p>

<p>前提ですが、私はinitローダーとかは使ってません。全部<code>init.el</code>に書いてます。で、機能毎にページを作って(<code>C-q C-l</code>)ます。
ただ、それだけだと視認性が悪いので見出しとして<code>C-u C-u C-u ;</code>で<code>;</code>を64個挿入して次の行にコメントで<code>#</code>付きのタイトルを付けてます。</p>

<p>具体的には</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="nv">^L</span>
</span><span class='line'><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class='line'><span class="c1">;; #Lisp</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じのものが機能毎に書かれてます。これで<code>C-s</code>や<code>M-x occur</code>でハッシュタグのように検索することも<code>C-v</code>でスクロールしていって目grepすることも<code>C-x ]</code>で機能毎にジャンプすることもできます。</p>

<h1>1. Emacsの最新版を使う</h1>

<p>結構重要です。「標準のやつだと欲いこの機能がないから拡張パッケージ入れた」なんてのも最新版では改善されていたりします。
例えば私は<code>emacs-w3m</code>を使っていましたが、Emacsのmasterブランチには<code>eww</code>なるEmacs Lisp製のブラウザが入っているのでそれを使うようにしました。</p>

<p> <s>ただ、これが絶対的正義かというとそうでもなく、パッケージで入れてない分
Ubuntuのインプットメソッドとの連携部分がなかったので<code>uim.el</code>を入れる
必要が出てきたりと、面倒な部分もありました。Emacs標準のインプットメソッドはどうにも使いものにならず、
<code>ddskk</code>もuim-skkとコンフリクトする(というか<code>C-j</code>上書きとかありえない)ので使いません。インプットメソッドの切り替え部分は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;&lt;hiragana-katakana&gt;&quot;</span><span class="p">)</span> <span class="nf">#&#39;</span><span class="nv">uim-mode</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;&lt;zenkaku-hankaku&gt;&quot;</span><span class="p">)</span> <span class="nf">#&#39;</span><span class="nv">uim-mode</span><span class="p">)</span> <span class="p">(</span><span class="nv">autoload</span> <span class="nf">#&#39;</span><span class="nv">uim-mode</span> <span class="s">&quot;uim&quot;</span> <span class="no">nil</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>になりました。</s></p>

<p>2013-12-16追記<br/>
これは私が<code>~/.Xresources</code>に<code>Emacs*useXIM: false</code>を書いていたのが原因でした。<code>Emacs*useXIM: true</code>に書き換え、<code>xrdb ~/.Xresources</code>すると直りました。</p>

<h1>2. 普段使わない設定は全部消す</h1>

<p>基本ですね。私は<code>summary-edit.el</code>だとか<code>multiverse.el</code>だとかるびきちさんの本を読んで便利そうだから入れたものの、
結局使わなかったものの設定&amp;elispをごっそり削除。
あとかなりの言語に対してデフォルトで<code>auto-mode-alist</code>が設定されていたので<code>auto-mode-alist</code>の設定も全部消して、必要になったら書き足すようにしました。</p>

<h1>3. 普段使っていても代替の効くものは削除</h1>

<p>これは高速化の意味と自分の環境に依存しない意味があります。
最近、自分のラップトップ以外でもEmacsを触ることが多くあって、デフォルトのキーを上書きして使ってる部分で何度も誤操作したのでそれを減らす目的です。
<code>bm.el</code>は<code>C-x r SPC</code>の<code>register</code>系や<code>C-x C-SPC</code>で対応(registerは覚えれば使い出がありそうなのでいつか解説書くかもです)、<code>open-junk-file.el</code>は<code>~/tmp</code>を作って対応、
<code>recentf-ext.el</code>は<code>helm-file-buffers</code>だとか。</p>

<p>あと全て<code>helm.el</code>に置き換えて<code>helm.el</code>と<code>anything.el</code>が混在してる状態をどうにかしたかったのですが、<code>php-completion.el</code>かなにかが依存しててトドメを刺せませんでした。</p>

<p>あと、<code>viewer</code>の代替を探していたらタイトルにあるように悪魔合体が起きたので後で書きますね。</p>

<h1>4. できる限り標準のものを使う</h1>

<p>標準で提供されているパッケージは<code>autoload</code>が<code>emacs</code>バイナリに組込まれてる(と思う)ので起動時のオーバーヘッドはありません。
<code>flymake.el</code>や<code>ruby-mode.el</code>が標準で提供されてるのに気付いたのでそれを使ったりなど。一度<code>(emacsroot)/lisp</code>以下を眺めてみることをお勧めします。結構発見があるものです。</p>

<h1>5.<code>autoload</code>を使う</h1>

<p><code>autoload</code>とはファイルの読み込みを必要になるまで遅らせる仕組みです。「必要になる」ってのはそのファイルで定義されている関数が呼ばれたときです。
賢い<code>require</code>と思えば良いでしょう。</p>

<pre><code>(autoload #'関数名 "関数が呼ばれたときに読むファイル名" nil interactivep)
</code></pre>

<p>みたいに使います。<code>interactivep</code>の部分は<code>M-x</code>で呼ぶものなら<code>t</code>、そうでなければ<code>nil</code>です。
<code>require</code>を<code>autoload</code>で書き換えていけば理論上起動時の読み込み0にできるのでかなり高速化できます。</p>

<p>が、実際は一々<code>autoload</code>書くのはしんどいので次です。</p>

<h1>6.できる限り<code>package.el</code>を使う</h1>

<p><code>package.el</code>は必要な関数の<code>autoload</code>を自動生成して読み込んでおいてくれるのでかなりの手間が省けます。そして<code>autoload</code>があるのに<code>require</code>してると折角の<code>package.el</code>の配慮が無駄になります。</p>

<p>自動生成された<code>autoload</code>は<code>elpa/パッケージのディレクトリ/パッケージ-autoloads.el</code>にあるので確認しながら<code>init.el</code>の邪魔なものを消していきます。
これでかなり<code>init.el</code>の行数が減ります。今まで無駄な設定していたんだなと気付きます。</p>

<h1>7. <code>eval-after-load</code>を使う</h1>

<p>8割程の設定は<code>autoload</code>で対応できるのですが、
踏み込んだ設定をしているとパッケージの内部の関数を使ってしまって
どうしてもその式が評価される前にパッケージが読み込まれている必要があることがあります。</p>

<p>そんなときは<code>eval-after-load</code>を使います。名前のまんま、ロードした後で<code>eval</code>してくれます。</p>

<pre><code>(eval-after-load 'ファイル名
    '式)
</code></pre>

<p>の形で使います。複数の式を使いたい場合は<code>progn</code>を使って</p>

<pre><code>(eval-after-load 'ファイル名
    '(progn
         式1
         式2...))
</code></pre>

<p>のように使います。あるパッケージの拡張パッケージなんかもここで読むと良いかもしれません。</p>

<h1>8.その他</h1>

<p>メールクライアントを標準のものにしようとしましたが、<code>gnus.el</code>はちょっと受け付けなくてその他はimapを喋らないので断念。
でも色々調べてたら<code>mew</code>より<code>wanderlust</code>の方が良いようなので使い初めました。表示が綺麗で良いですね。
HTMLのレンダリングも<code>emacs-w3m</code>に頼らず標準の<code>shr.el</code>を使っているのも◎。</p>

<p>同じような経緯で<code>JDEE</code>をやめて<code>malabar.el</code>を使うようにしました。ただ、私は<code>maven</code>使いではないので微妙ではあります。
まあ、そもそもプロジェクト単位でJavaを書くことがないってのもあるんですが。Androidのスケルトンがantなのでantでできたら嬉しいなーって。</p>

<h1>EmacsとViとShellとLispを悪魔合体させた話</h1>

<p>私はEmacsの狂信者ですが読み専のときはちょいちょいviを使うこともあります。片手で操作できるのは便利です。
Emacsで読み専といえば<code>view-mode</code>です。そこでもhjklを使うべく<code>view-mode-map</code>に手を加えてましたが、大掃除ということで全部削除。</p>

<p>その後で<code>emacsroot/lisp/emulate/</code>以下を読んでいるとなんかviのエミュレーターが3つも見付かりました。<code>vi.el</code>、<code>vip.el</code>、<code>viper.el</code>です。
後者になるほどviとの互換性が高くなります。とりあえずは<code>hjkl</code>が使えれば良いので<code>vi.el</code>を使ってみたところ、ん〜…といったところ。<code>vip.el</code>と試して結局<code>viper.el</code>に落ち着きました。</p>

<pre><code>(global-set-key (kbd "C-x C-q") #'(lambda ()
                    (interactive)
                    (toggle-viper-mode)
                    (force-mode-line-update)))
</code></pre>

<p>設定はこんな感じです。<code>toggle-viper-mode</code>してもモードラインの表示が変わらないことがあったので<code>force-mode-line-update</code>を加えました。</p>

<p><code>viper.el</code>は単なるviのエミュレートだけではなく、Levelに応じて良い感じにemacsと悪魔合体してくれます。私は最高レベルの5にしました。&#8221;C-x C-s&#8221;など
基本的なコマンドはそのまま使えるようになってます。<code>:</code>で始まるvi(ex)のコマンドも使えます。<code>C-z</code>でemacs&lt;&ndash;>viを切り替えたり。非常に便利です。</p>

<p>尚、私はvi使いであってvim使いではないのでevilは使いません。</p>

<p>もう一つ、shellの話。今までは<code>multiterm</code> × <code>zsh</code>な感じでしたが、「できる限り標準のものを使う」方針で<code>eshell</code>に切り替えました。<code>eshell</code>はEmacs Lispで書かれたshellです。これが思った以上に便利です。
るびきちさんの本では標準出力とエラー出力の切り分けができてないと書かれてましたがそれは修正されてるようです。</p>

<p>あとは<code>/dev/kill</code>だとか<code>&gt;&gt;&gt;</code>だとかバッファへのリダイレクトだとか<code>grep</code>の上書きだとか色々楽しい拡張もあるのですが、一番は<code>eshell</code>がLispであること。
<code>eshell</code>上で任意のEmacs Lisp式を実行できます。最近Emacs LispやLispに精通してきたので非常に有り難いです。<br/>
それにファイルを開くときもその後で同じディレクトリのファイルを開くことが多いので一旦 <code>cd</code>してから<code>find-file</code>をするとアクセスし易くて捗ります。
もう起動時に<code>eshell</code>が立ち上がるようにして、基本そこから操作するようにしてます。guakeもそんなに使わなくなりました。
他の環境でも使えるので安心して依存できます。</p>

<p>で、ファイルを開くときはどうしてるかというと実はemacsの<code>find-file</code>ではなくviの<code>:e file-name</code>です。Emacs上でLispで出来たShellを使いつつviを動かしてます。
かなり人を選びますが「EmacsのヘビーユーザーでLispに精通しててviを便利だと思ってる人」は試してみてはいかがでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ClackのHandlerの書き方]]></title>
    <link href="http://KeenS.github.io/blog/2013/12/06/lisp-advent-calendar-7/"/>
    <updated>2013-12-06T00:06:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/12/06/lisp-advent-calendar-7</id>
    <content type="html"><![CDATA[<p>(この記事は<a href="http://qiita.com/advent-calendar/2013/lisp">Lisp Advent Calendar</a> 7日目のためのエントリです。<br/>
  (<a href="http://meymao.hatenablog.com/entry/2013/12/06/140029">6日目</a> meymaoさんより「Lisperがクリスマスに贈るべきプレゼント三選」)<br/>
  (<a href="http://www.principia-m.com/ts/0081/index-jp.html">8日目</a> athos0220さんよりマクロとクロージャで作る並行プログラミング言語))</p>

<p>ClackのHandlerの書き方についてちゃちゃっと解説します。</p>

<!-- more -->


<p>さっくりゆるふわな感じで行くので<a href="http://clacklisp.org/">clack公式</a>だとか<a href="http://clacklisp.org/tutorial/ja/">チュートリアル</a>だとかも参考にして下さい。とは言ってもCommon Lispな方なら知ってるでしょう。</p>

<h2>Clackって？</h2>

<p>PerlのPlackやRubyのRackと同じくCommon Lispの統一HTTPサーバーインターフェースです。開発時はHunchentootで、本番はFastCGIでみたいなことが簡単にできます。</p>

<h2>Handlerって？</h2>

<p>HunchentootやFastCGIといったバックエンドとClackとの間でリクエストやレスポンスの受け渡しを担当します。さっくり言うとHandlerを書けばClackで使えるサーバーが増える訳です。今(2013-12現在)のところ、Hunchentoot、FastCGI、Apache + mod_lisp2があるようです。</p>

<p>じゃあ、実際に軽量サーバーの<a href="https://github.com/gigamonkey/toot">toot</a>のハンドラを書きながら解説しますね</p>

<h2>準備</h2>

<p><code>git clone git@github.com:fukamachi/clack.git</code>してclackのソースコードを持ってきます。他のHanderがそうしてるようなので</p>

<ul>
<li> <code>clack/clack-handler-toot.asd</code></li>
<li> <code>clack/src/core/handler/toot.lisp</code></li>
</ul>


<p>   を作ります。<code>core</code>じゃなくて<code>contrib</code>だろとかそもそも自分のリポジトリに作れよとかは自由にやって下さい。<code>clack/clack-handler-toot.asd</code>は適当に似た名前のやつをコピーすれば良いんじゃないですかね？（適当</p>

<h2>書き方</h2>

<p>いたって簡単で、<code>run (app &amp;key debug (port 5000)) -&gt; acceptor</code>と<code>stop (acceptor) -&gt; 多分決まってない</code>を実装すれば良いです。</p>

<p>とはいっても<code>stop</code>は1行で終わりますが<code>run</code>は大きく分けて</p>

<ol>
<li>. サーバーを立ち上げる</li>
<li>. サーバーから渡されたリクエスト(多くの場合<code>request</code>オブジェクト)をplistにして<code>app</code>に渡す</li>
<li>. <code>app</code>のlist形式の返値を適切な形(多くの場合<code>response</code>オブジェクト)にしてサーバーに返す</li>
<li>. エラーハンドリング</li>
</ol>


<p>の4つの作業があります。一つ一つ説明していきますね。</p>

<h3>1 サーバーを立ち上げる</h3>

<p>tootの場合は<code>toot:start-server (&amp;key handler port)</code>を使いました。スレッド立てるのはclackがやってくれます。はい。</p>

<h3>2 サーバー渡されたリクエスト(多くの場合<code>request</code>オブジェクト)をplistにして<code>app</code>に渡す</h3>

<p>tootの場合、<code>key</code>の<code>handler</code>が<code>requesut</code>オブジェクトを受け取って<code>response</code>オブジェクトを返せば良いので</p>

<pre><code>(lambda (req)
    .....
    (call app (handle-request req))
    .....
)
</code></pre>

<p>って感じで<code>handle-request</code>に実装を書きます。</p>

<p><code>handle-request</code>の内部は<code>req</code>を<a href="http://clacklisp.org/tutorial/ja/04-the-environment.html">clack公式のチュートリアル</a>に載っているプロパティに一つ一つ変換していきます。このプロパティとバックエンドのオブジェクトのスロット名と実際のHTTPヘッダの名前が必ずしも一致しないのが泣き所です。さらに、大抵のサーバーの場合リクエストオブジェクトのスロットの詳細まではドキュメントに載ってないのでソースを参照しながら書くことになります。また、そもそも対応する値が無くて、他の情報を切り貼りして作らないといけなかったり、どうしようもなくて空にしないといけないこともあります。</p>

<p>tootハンドラは</p>

<pre><code>(defun handle-request (req)
  "Convert Request from server into a plist
before pass to Clack application."
  (let ((content-length (and (request-header :content-length req)
                             (parse-integer (request-header :content-length req) :junk-allowed t)))
    (port-and-host (get-port-and-host req)))
    (append
     (list
      :request-method (request-method req)
      :script-name ""
      :path-info (url-decode (request-path req))
      :server-name (car port-and-host)
      :server-port (cdr port-and-host)
      :server-protocol (server-protocol req)
      :request-uri (request-uri req)
      :url-scheme :HTTP;(request-scheme req)
      :remote-addr (remote-addr req)
      :remote-port (remote-port req)
      :query-string (request-query req)
      :content-length content-length
      :content-type (request-header :content-type req)
      :raw-body (let ((stream (toot::request-body-stream req)))
                  ;(when content-length
                    ;(setf (flex:flexi-stream-bound stream) content-length))
                  stream)
      :clack.uploads nil
      :clack.handler :toot)

     (loop for (k . v) in (toot::request-headers req)
           unless (find k '(:request-method :script-name :path-info :server-name :server-port :server-protocol :request-uri :remote-addr :remote-port :query-string :content-length :content-type :accept :connection))
             append (list (intern (format nil "HTTP-~:@(~A~)" k) :keyword)
                          v)))))
</code></pre>

<p>こんな感じに実装されてます。tootからインポートしたものの他、一部ヘルパー関数も使ってますが挙動はまあ、名前から察して下さい。</p>

<h3>3 <code>app</code>の返値のplistを適切な形(多くの場合<code>response</code>オブジェクト)にしてサーバーに返す</h3>

<p><code>app</code>を<code>call</code>してやると<code>(status headers body)</code>という形式のlistが返ってきます。<code>status</code>は数値、<code>headers</code>はplist、<code>body</code>はパスネーム又は文字列のリストです。</p>

<p>さっきはこんな感じで呼んだのでした。</p>

<pre><code>(lambda (req)
    .....
    (call app (handle-request req))
    .....
)
</code></pre>

<p>もうお分かりかと思いますが</p>

<pre><code>(lambda (req)
    (handle-response
        (call app (handle-request req)))
)
</code></pre>

<p>として、実装は<code>handle-response</code>に書きます。…が、tootは<code>response</code>オブジェクトではなく<code>request</code>オブジェクトに変更を加えたものを返すようなので</p>

<pre><code>(lambda (req)
    (handle-response
        req
        (call app (handle-request req)))
)
</code></pre>

<p>として、<code>app</code>の返値を元に<code>req</code>を書き換えます。こちらもあまりドキュメントが無いので頑張ってソース読むしかないです。因みに<code>body</code>はパスネームならそのファイルの内容を、文字列のリストならそれぞれを改行(<code>&lt;br&gt;</code>ではなく<code>\n</code>)で連結したものを返す必要があります。</p>

<p>tootハンドラの実装載せときますね。</p>

<pre><code>(defun handle-response (req res)
  (destructuring-bind (status headers body) res
    (etypecase body
      (pathname
       (multiple-value-call #'serve-file
     (values req body (parse-charset (getf headers :content-type)))))
      (list
       ;; XXX: almost same as Clack.Handler.Hunchentoot's one.
       (setf (status-code req) status)
       (loop for (k v) on headers by #'cddr
             with hash = (make-hash-table :test #'eq)
             if (gethash k hash)
               do (setf (gethash k hash)
                        (format nil "~:[~;~:*~A, ~]~A" (gethash k hash) v))
             else if (eq k :content-type)
               do (multiple-value-bind (v charset)
                      (parse-charset v)
                    (setf (gethash k hash) v)
                    (setf (toot::response-charset req) charset))
             else do (setf (gethash k hash) v)
             finally
          (loop for k being the hash-keys in hash
                using (hash-value v)
                do (setf (response-header k req) v)))
       (toot::send-response req (with-output-to-string (s)
      (format s "~{~A~^~%~}" body)))))))
</code></pre>

<p>です。</p>

<pre><code>(destructuring-bind (status headers body) res
  (etypecase body
    (pathname ...)
    (list ...)))
</code></pre>

<p>がテンプレートですね。<code>pathname</code>のときはtootに丸投げして<code>list</code>のときは<code>headers</code>とかを真面目に処理してます。</p>

<h3>4 エラーハンドリング</h3>

<p>早い話が500 internal server errorです。普通、Lispはエラーが起きるとデバッガに落ちますがサーバーは走り続ける必要がるのであらゆるエラーを無視する必要があります。が、しかしデバッグするとき(<code>run</code>のキーワード引数に<code>debug</code>がありましたね)はデバッガに落ちると嬉しいです。なので例のラムダを少し変更します。</p>

<pre><code>(lambda (req)
              (handle-response
               req
               (if debug (call app (handle-request req))
           (aif (handler-case (call app (handle-request req))
              (condition () nil))
            it
            '(500 nil nil)))))
</code></pre>

<p>これで完成です。</p>

<h2>テスト</h2>

<p>Clackにはテストが付いてます。テストケース自体は<code>clack/src/core/test/suite.lisp</code>に書かれてます。</p>

<p><code>clack/t/core/handler/hunchentoot.lisp</code>を参考に<code>clack/t/core/handler/toot.lisp</code>を作り、<code>clack/clack-test.asd</code>の<code>hunchentoot</code>を<code>toot</code>に書き換えたら準備完了です。<code>(ql:quickload :clack-test)</code>しましょう。テストが走ります。そして恐らくエラーが出て止まるでしょう。変な値を返すとサーバーじゃなくてテストの方がエラーで死ぬんですね。</p>

<p>そしたら<code>clack/src/core/test/suite.lisp</code>を開いて期待された値がなんだったかを調べてサーバーを修正します。で、また<code>(ql:quickload :clack-test)</code>の繰り返し。でも一回<code>quickload</code>しちゃうと読み直してくれないので私は一々<code>M-x slime-restart-inferior-lisp</code>してました。なんか違う気がする。これだけじゃなくてテスト全般。溢れるバッドノウハウ感。</p>

<p>とりあえずバックエンドにバグがあるとかのどうしようもない場合を除いてテストに全部合格すれば完成です</p>

<h2>完成したら</h2>

<p>どうしたらいいんでしょうね。分かんないです。clackにpull-req送るんでしょうか。あるいはquicklispに登録?私はとりあえず<a href="https://github.com/KeenS/clack">ブランチに置いてます</a>が恐らく誰も使ってないですし知らないと思います。</p>

<h2>で、何作ればいい？</h2>

<p><a href="https://github.com/fukamachi/clack/issues?state=open">clackのissue</a>にまだ作られてないものがリストされてます。「自分では需要はないけどなんか作ってみたい」といった奇特な方はそこから試すと良いんじゃないでしょうか。GAEとかmongrel2とか需要ありそうな気がします。</p>

<h2>まとめ</h2>

<p>誰得</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UbuntuでEmacsからGPGを透過的に扱う]]></title>
    <link href="http://KeenS.github.io/blog/2013/12/04/emacs-gpg/"/>
    <updated>2013-12-04T22:52:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/12/04/emacs-gpg</id>
    <content type="html"><![CDATA[<p>暗号化といえばGPGですがEmacsからGPGで暗号化されたファイルを編集しようとすると毎回パスワードを訊かれて鬱陶しいです。これはキーリングを登録することで解決できました。</p>

<!-- more -->


<h2>Step1 Keyringに登録する</h2>

<p>Dashboardから[key]で検索すると[パスワードと鍵]が見付かります。
左上の[+]で新たにキーリングを追加します。</p>

<p><img src="http://KeenS.github.io/images/2013-12-04-1.png" title="keyring" alt="こんな感じ"></p>

<p>GPGを選択します</p>

<p><img src="http://KeenS.github.io/images/2013-12-04-2.png" title="Selecting GPG" alt="こんな感じ"></p>

<p>必要な情報を入力します。このメールアドレスは実在しなくても作れますが、ブルートフォースかけられたときの警告とかに使われそうなので実在した方が良い気がします。とりあえず後で使うので覚えておいて下さい。</p>

<p><img src="http://KeenS.github.io/images/2013-12-04-3.png" title="'Input info &#34;こんな感じ&#34;" alt="'Input info &#34;こんな感じ&#34;"></p>

<p>あとはパスワードのプロンプトが出るので入力して、エントロピーを発生させたら終わりです。</p>

<h2>Step2 ファイルを準備する</h2>

<p>ここが肝です。ファイルの先頭に</p>

<pre><code>-*- epa-file-encrypt-to: (my@mailaddress) -*-
</code></pre>

<p>を挿入します。既存の暗号化されたファイルでも同じです。</p>

<h2>Step3 暗号化する</h2>

<p><code>M-x epa-encrypt-file</code>で暗号化できます。暗号化するファイル名を指定したらキーリングを選べます</p>

<p><img src="http://KeenS.github.io/images/2013-12-04-4.png" title="Selecting GPG" alt="こんな感じ"></p>

<h2>Step4 編集する</h2>

<p>あとはもう透過的に使えます。でもなんか実験してたらファイル保存できなかった。先にGPGで暗号化してたやつはできたのに。要調査です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rsync小ネタ]]></title>
    <link href="http://KeenS.github.io/blog/2013/11/30/something-about-rsync/"/>
    <updated>2013-11-30T21:51:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/11/30/something-about-rsync</id>
    <content type="html"><![CDATA[<p><a href="http://KeenS.github.io/blog/2013/11/13/what-recent/">mpdを導入したとき</a>にrsyncでパーミッションの問題が発生したと言ってましたが解決策がありました。</p>

<!-- more -->


<p>まず基本。</p>

<p><code>rsync</code>でバックアップをとるときは</p>

<pre><code>rsync -avz dir/ me@remote:backup
</code></pre>

<p>です。<code>dir</code>のあとの<code>/</code>は重要です。<code>dir</code>自体か<code>dir</code>の中身かを左右します。<code>zsh</code>はそこんとこイマイチ理解してないようで悲しいです。因みに<code>-a</code>は<code>-rltogpD</code>の略です。でも今回みたいにパーミッションを含めたくないときは</p>

<pre><code>rsync -rltogD -vz dir/ me@remote:backup
</code></pre>

<p>と<code>-p</code>を抜くかと思いきや、</p>

<pre><code>rsync -avz --no-p dir/ me@remote:backup
</code></pre>

<p>なる記法があるそうです。便利ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #11でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2013/11/29/lispmeetup-11/"/>
    <updated>2013-11-29T00:31:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/11/29/lispmeetup-11</id>
    <content type="html"><![CDATA[<p>「Makefile書けない人がMake 4.0触ってみた」での発表です。</p>

<!-- more -->


<p>まあ、これが殆どなんですけどね。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/28661586" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/blackenedgold/lispmeetup11" title="Lispmeetup11" target="_blank">Lispmeetup11</a> </strong> from <strong><a href="http://www.slideshare.net/blackenedgold" target="_blank">blackenedgold</a></strong> </div></p>

<p><a href="https://github.com/KeenS/Shibuya.lisp-LispMeetUp-11">githubのソース</a>も参照下さい。</p>

<p>あとUStreamにも上がってました。</p>

<p><a href="http://www.ustream.tv/recorded/41155561">http://www.ustream.tv/recorded/41155561</a></p>

<p>いや、改めて自分の発表聞いてみると酷いwもうちょっと喋るの上手くなりたいです</p>

<p>会場ではこのあと、「使えるのは良いけど誰が使うんだろーねー」とかの話題になりました。</p>

<p>次の発表はかにたん(<a href="https://twitter.com/kazh98">@kazh98</a>)さんからR<sup>7</sup> RSの新機能についての発表でした。</p>

<p>「すごい！」っていうより「今まで無かったんかい！」って機能が満載でしたね。</p>

<p>その後、chikuさんによるライブコーディングで、お題は<code>(loop repeat 1000 collect (float (/ (random 1000) 1000)))</code>で生成された浮動小数点数1000このヒストグラムを作るものです。データの格納をhashでやるかalistかplistかとかだったり最終的にヒストグラムにするときに数字->&lsquo;*&#8217;の変換とかで外野から色々飛んで楽しかったです。</p>

<p>自然数nが与えられてn個の&#8217;*&lsquo;を返すってどうするんだろ。formatでできるのかな？<code>(coerce (make-array n :initial-element #\*) 'string)</code>が個人的には気に入りました。</p>

<p>12/05追記:<code>(make-string n :initial-elemet #\*)</code>というもっと直接的な方法がありました。</p>

<p>懇親会は&#8217;80~&lsquo;90年代のPCの話で盛り上がって私にはちんぷんかんぷんでした。それ以上に小2でファミコンの改造/ハックをやってたってのは凄いですね。</p>

<h2>その他</h2>

<p><a href="https://github.com/KeenS/CIM">cim</a>の開発ぼちぼち進んでます。<code>syset</code>あたりがまだ手をつけてないです。あとインストーラが動いてくれない。コアダンンプ機能必要なのでは？など。<code>Quicklisp</code>のロードって案外重いんですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ここ１ヶ月くらいの近況]]></title>
    <link href="http://KeenS.github.io/blog/2013/11/13/what-recent/"/>
    <updated>2013-11-13T21:20:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/11/13/what-recent</id>
    <content type="html"><![CDATA[<p> #isucon 参戦記がフォロワーの多い@tagomorisさんとか@nitro_idiotさんとかにツイートされて普段の数十倍のアクセスが来てテンション上がったので近況書きますね。</p>

<!-- more -->


<h2>isuconの勉強</h2>

<p>件の記事でも書いてますけどMySQLとNginXとCapistranoの勉強しました。SQLって書けると案外楽しいですね。あとN+1問題を学んだり、<code>IF EXISTS TRRIGER</code>的な文がなくて殺そうかと思ったり。</p>

<p>NginXはキャッシュとかですね。キャッシュキーに<code>$cookie_isucon_session</code>とか入れてログインしてるユーザーが来ても対応できたので良かったです（小並感</p>

<p>Capistranoはどうせだからと3.0を使ったのですが調べても2.x時代の情報ばっかり引っ掛かって苦労しました。その代わり、isucon本戦では複数サーバーへのデプロイ機能を存分に使わせて頂きました。ほぼログインしなくても問題ないですね。</p>

<p>例えば</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&#39;my app&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;git@bitbucket.org:me/myrepo.git&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/home/me/app&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_via</span><span class="p">,</span> <span class="ss">:remote_cache</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:nginx</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:reload</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">execute</span> <span class="ss">:sudo</span><span class="p">,</span> <span class="s1">&#39;service nginx reload&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:restart</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">execute</span> <span class="ss">:sudo</span><span class="p">,</span> <span class="s1">&#39;service nginx restart&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:start</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">execute</span> <span class="ss">:sudo</span><span class="p">,</span> <span class="s1">&#39;service nginx start&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じです。で、もう一つ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:stage</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class='line'><span class="n">server</span> <span class="s1">&#39;123.4.5.67&#39;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&#39;me&#39;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="s1">&#39;web&#39;</span>
</span><span class='line'><span class="n">server</span> <span class="s1">&#39;123.4.5.68&#39;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&#39;me&#39;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="s1">&#39;web&#39;</span>
</span><span class='line'><span class="n">server</span> <span class="s1">&#39;123.4.5.69&#39;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&#39;me&#39;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="s1">&#39;web&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:ssh_options</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">keys</span><span class="p">:</span> <span class="sx">%w(~/.ssh/id_rsa)</span><span class="p">,</span>
</span><span class='line'>  <span class="n">forward_agent</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>  <span class="n">auth_methods</span><span class="p">:</span> <span class="sx">%w(publickey)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>を書いておけばこの3台のサーバーに一斉にデプロイしてくれます。(上の例だとnginxですが、まあいいでしょう。)</p>

<h2>Shibuya.lisp</h2>

<p>Lisp Meet Up #10で発表してきました。内容は<code>fluentd</code>をCommon Lispから使う話。<br/>
スライド</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/27444839" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/blackenedgold/common-lisp-27444839" title="Common Lisp でビッグデータを作ろう" target="_blank">Common Lisp でビッグデータを作ろう</a> </strong> from <strong><a href="http://www.slideshare.net/blackenedgold" target="_blank">blackenedgold</a></strong> </div></p>

<p>Ustreamは見つかりませんでした。てへペロ</p>

<p>恐らく、<code>Log4CL</code>はやりたいことと目的が違いますね。全く別のロギングフレームワークを作るのが良さげな気がします。isuconの懇親会で開発者の@tagomorisさんにアドバイスも頂きましたし作るかもしれません。</p>

<h2>mpd</h2>

<p><a href="http://KeenS.github.io/blog/2013/09/29/mplayer/">以前、mplayer2が正常に動作しないとかぼやいて</a>ましたが、結局あきらめました。で、代わりに<a href="http://www.musicpd.org/">Music Player Daemon(MPD)</a>なるものを見付けて、しかもRaspberry Piで動き、iPod/Androidから操作できるとのことで、導入しました。</p>

<p>MPDはまさしくRaspberry Piのような機器向で、音楽を鳴らすサーバーと操作するクライアントが完全に分かれてます。</p>

<pre><code>$ sudo apg-get install mpd mpc
</code></pre>

<p>とかでRSPiに入れた気がします。クライアントはAndroidは<code>MPDroid</code>、iPodは<code>MPoD</code>っていうアプリです。</p>

<p><code>scp</code>で手元の曲をRSPiコピーし、iPodから繋ぐも曲が見えない。色々試した結果、<code>scp</code>でコピーしたときにパーミッションの問題が出てたようなのでそこを解決したらちゃんと動きました。</p>

<p>動画(iPod)</p>

<iframe width="560" height="315" src="http://KeenS.github.io//www.youtube.com/embed/x5CWtXbCkqo" frameborder="0" allowfullscreen></iframe>


<p>黒ばっかで見づらくて申し訳ありません。iPodからではなくスピーカから音が出てるのが分かりますかね？思ったより音が入ってないので分りづらいですね（汗</p>

<h2>CIM</h2>

<p><a href="https://github.com/fukamachi/shelly/">Shelly</a>を使って<a href="https://gist.github.com/KeenS/7059301">Common Lispスクリプトをexecutableにしよう</a>ってのをやってましたが少しshellyが求めているのと違うようだったので「シェルスクリプトでshelly的な物を実装しよう！ついでにrvmみたいにバージョン管理できたら嬉しいな！！」って思い付きで<a href="https://github.com/KeenS/CIM">Common Lisp Implementation Manager(CIM)</a>を作り始めました。まだCLISP, ECL, GCLのインストールぐらいしかできてません。</p>

<p>初めてシェルスクリプトを書き、初めてBourne Shellを触り(普段はzsh)、早くも挫折しそうです。今めっちゃシェルスクリプトの勉強してます。目的はImplementationの管理じゃなくて統一インターフェースの<code>cl</code>コマンドなのにそこが全然進んでないですね。<code>ql</code>に至っては1行も書いてない。まあ、<code>cl</code>を使って書くつもりなので<code>cl</code>が出来ないことにはどうしようもないんですが。</p>

<p><code>syset</code>とかネーミングセンスが無かったり(発音しずらい。シセット…サイセットって読もうかな)ダウンロードしたアーカイブのチェックサムとか全く見てなかったり色々ツッコみたくなりますが温かい目で見て下さい。気に入ったらpull-reqとかして下さい。</p>

<h2>Octomacs</h2>

<p>Octomacsに一回pull-req送ってからコミッタ気取りのκeenですが、<code>octomacs-preview</code>と<code>octomacs-deploy</code>を実装しました。<code>C-u</code>をつけると<code>generate</code>が付いてきます。テストをしてない（できない？）+サーバーを殺す(<code>octomacs-preview-quit</code>とかの名前かなあ。現状は<code>*octomacs preview*</code>バッファを<code>kill-buffer</code>すればいい)コマンドを実装してないのでpull-reqは投げてませんが使ってみたい方は<a href="https://github.com/KeenS/octomacs">こちら</a>をどうぞ。まあ、今からpushするんですがね。ちゃんとこの記事も<code>octomacs-new-post</code>から始まり、<code>octomacs-preview</code>で確認しつつ<code>octomacs-deploy</code>でデプロイしました。あとは過去の記事を編集する<code>octomacs-edit</code>を実装すれば完璧ですね。</p>

<p>こんなかんじです。<code>CIM</code>がんばります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[チーム「銀杏絶滅しろ」でisucon学生賞もらってきました]]></title>
    <link href="http://KeenS.github.io/blog/2013/11/11/isucon-final-stage/"/>
    <updated>2013-11-11T22:18:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/11/11/isucon-final-stage</id>
    <content type="html"><![CDATA[<p>しばらく間が空きました。まあ、その間のことはいつかまとめて書きます。今回は<a href="http://isucon.net/">isucon#3</a>について。</p>

<p><a href="http://KeenS.github.io/blog/2013/10/09/isucon-qualifying-event/">先日</a>、isucon#3の予選を突破したと書きましたが、日曜にその決勝戦があったので報告です。</p>

<!-- more -->


<h2>準備</h2>

<p>とりあえずyokoteさんが予定が入って参加できないので@c0umeさんと二人で毎週会って予選の問題を解き直しつつSQLの勉強とかやってました。
MariaDBを試したりもしましたが大して変んないねーとか。最終的に4万点くらいになったのかな？
あとisucon#2で複数台構成の練習とか地味にデプロイツールCapistranoのお勉強とかもしてました。非常に便利です。</p>

<h1>当日</h1>

<p>サークルを休む許可も貰えたので何事も心配なく10時にヒカリエに集合。
名札とかもらって本格的な感じ。
<img src="http://KeenS.github.io/images/isucon-name-strap.jpg" title="name-strap" alt="名札とチームの看板(?)"></p>

<p>お題のアプリは画像版ツイッターで、処理的には投稿された画像を生/中/小にサイズ変更して返すのがほとんど。htmlはインデックスだけであとはjson APIですしDBまわりも画像のアクセスレベルとユーザーのフォロー関係程度で、必要最低限といった感じ。単純にファイスサイズで攻めてきましたね。</p>

<p>因みにこれ、ストーリーとしてはエンジニア二人で作って騒いでたら社長が聞き付けて「18時に大規模プロモーションかけるからそれまでに対策しといてね。あ、サーバーは4台増やしといたよ」ってなっててそれを見た瞬間のみんなの反応が</p>

<blockquote class="twitter-tweet"><p>社長を殺そう <a href="https://twitter.com/search?q=%23isucon&amp;src=hash">#isucon</a></p>&mdash; tagomoris (@tagomoris) <a href="https://twitter.com/tagomoris/statuses/398992801850875904">November 9, 2013</a></blockquote>


<script async src="http://KeenS.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とかでしたw</p>

<p>そうそう、そんなストーリーなもんでサーバー5台中1台にしかアプリがデプロイされてない状態でスタートです。</p>

<h2>やったこと</h2>

<p>@c0umeさんがサーバーセットアップしてる間に私がアプリを読んできになったところをスカイプに張っていきました。</p>

<p>何も考えずにとりあえずnginxを野良ビルドしてgzip配信を有効にしようとするも、なぜかnginx.confが上手く機能せずにハマる。結局conf.d以下を読んでた部分が悪さをしてたと判明。ようやくアプリ側にとりかかる。</p>

<p>とりあえずリクエストの度に画像を変換してるのでそれをどうにかしようということに。POSTされた時点で変換する方針だったのですが、
私は変換した画像の「パスネーム」をDBに突っ込もうって思ってたのですが@c0umeさんは画像の「バイナリデータ」を突っ込もうとしてたらしく、意思疎通ができずに若干揉めました。</p>

<p>結局、1台リバースプロキシ、3台app、 1台DBの構成で、appで画像のPOSTを受けたら3サイズにコンバートしてDBに突っ込むことに。ですがとりあえず段階を踏もうということで第一段は画像をblobとしてMySQLにツッコみます。第二段でコンバートして突っ込む、第三段でさらにgzip圧縮して突っ込むことにしました。</p>

<p>私がapp側、@c0umeさんがDB側でやりました。</p>

<p>外部プロセスを呼んでると遅いと聞いたのでRMagickを使って変換するようにして、さらにファイルに書き出さずに<code>Magick::ImageList#from_blob</code>と<code>#to_blob</code>を使って書き換えました。</p>

<p>今回、RMagickを初めて使ったのですが、ハマることハマること。<code>Magick::ImageList#crop</code>非破壊的であったり、関連ブログに書いてあるメソッドがないとか言われたり。最終的にDBが終わった@c0umeさんにも手伝ってもらってバグ取りが完了し、ベンチマークが走るようになった時点でもう終わり近く。大きな変更はやめてキャッシュとかレスポンスだけ返して裏で処理を走らせるとかをやりましたがどれもベンチマークが巧妙に作られてて失敗に終りました。あとUnicornに謎のエラーが出続けてましたが特にベンチに影響はなかったので放置しました</p>

<p>それで初期スコアが1100だったのが5400程度になりました。最後20分くらいは<code>chkconfig</code>とかでfailしないよう確認作業をしてタイムアップ。暫定学生1位、全体で7位だったかと思います。</p>

<p>failしないことだけを祈って1時間後の結果発表を待ちます。本計測は3分ですし謎のエラーもありましたし不安要素はいっぱいありました。</p>

<h2>結果</h2>

<p>failしませんでした。よかった。上のチームがfailしたらしく、最終順位は学生1位、全体6位でした。まあ、failしなかったチームは7チームしかいなかったのでなんとも言い難いですが。</p>

<p><img src="http://KeenS.github.io/images/isucon-scores.jpg" title="scores-of-each-team" alt="最終スコア。一位のLINE選抜チームは2位に4倍差を付けて圧勝しました。"></p>

<p>スコア的には3位と2倍差だったので案外良い線いってたのかもしれません。</p>

<p>それで、タイトルにあるように学生賞もらいました。</p>

<p><img src="http://KeenS.github.io/images/isucon-prize.jpg" title="prize" alt="中身は現生5万円。"></p>

<p>この5万は2万ずつ二人で分けて、あとの1万でyokoteさんと3人で肉を食べに行きます。</p>

<p>因みに私はこういう風に使いました。</p>

<p><img src="http://KeenS.github.io/images/isucon-books.jpg" title="books" alt="欲しいものより普段買いそうにないけど気になるものを選びました。"></p>

<p>その後懇親会ではGoとかnodeの人達がライブラリが若くてバグがあって苦しんだりしてた話を聞きました。fujiwara組長のところには行けませんでした。</p>

<h2>感想</h2>

<p>たのしかったです（小並感<br/>
ベンチマークツール自体がラウンドロビンでリクエスト飛ばしてくるのでリバースプロキシ不要でしたね。あとはあせりすぎて手汗でタッチパッドの誤反応が頻発したり挙句なぜかカーネルがCPU100%使い始めて作業できなくなったりして冷や冷やしました。@c0umeさんには多大な迷惑お掛けしました。そのPC寿命じゃね？とか言われたり。</p>

<p>来年は胸を張れるようなスコアを出したいですね。
LINE、カヤック、データホテルのみなさんありがとうございました</p>

<h2>その他</h2>

<p>κeenは就活生です。RubyかLispでできる仕事探してます。</p>

<p>あとamazonほしいものリストも上げときますね。[[<a href="http://www.amazon.co.jp/registry/wishlist/TA077537OIUP">http://www.amazon.co.jp/registry/wishlist/TA077537OIUP</a>]]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON#3予選に参加しました]]></title>
    <link href="http://KeenS.github.io/blog/2013/10/09/isucon-qualifying-event/"/>
    <updated>2013-10-09T15:49:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/10/09/isucon-qualifying-event</id>
    <content type="html"><![CDATA[<p><a href="http://isucon.net/">ISUCON</a>#3の予選に参加してきた話です。</p>

<!-- more -->


<p>ISUCON(Iikanjini SpeedUp CONtest)とは椅子を投げないなどの一部のルールを除き、基本なんでもアリのWebアプリケーションチューニングコンテストです。</p>

<p>なんで私がこんなのに参加するかというと、サークルのOBさんから告知があり、8月に学生向けのISUCON夏期講習会に参加したからです。第３回となる今回は学生枠を作るとのことで事前に学生のレベルを上げておこうという方針だそうです。</p>

<p>その講習会でコテンパンにやられてめげつつも、もう一回チャレンジしようということで夏期講習会で知りあったasamiさんとその友達のyokoteさんでチームを組んで参戦しました。</p>

<p>ちなみにこのチーム、予選3日前にSkype会議で結成したもので、予選当日も各自自宅にいてSkypeで連絡を取ってたので私はyokoteさんとはまだ会ったことありません←</p>

<h2>準備</h2>

<p>事前の話しあいではasamiさんがAWSの準備からgit(bitbucket)、ssh鍵の設定までやってくれることになりました。私も本来ならISUCON#2で練習をしておくべきだったのですが、サークルとかを言い訳に、ISUCONの記事に目を通すだけに終りました。</p>

<h2>当日</h2>

<p>10時に開始しました。10時40分に起きました←</p>

<p>私が起きた頃にはasamiさんが色々設定を済ませていたので問題のアプリケーションを<code>git clone</code>して公開鍵をSkypeにペタっと貼って参戦。アプリを読むにMarkdownでメモを投稿できるもの。</p>

<p>フムフムってなってたらsslのバージョン問題でログインできてなかったyokoteさんも参戦し、asamiさんが<code>my.cnf</code>をいじってスコアが</p>

<p>900→2500</p>

<p>となりました。スゲー。あ、言語はasamiさんとyokoteさんが書けるperlを選択。私は1ミリも読めませんがサーバーをいじる気だったので気にしませんでした。</p>

<p>で、私がフロントサーバーをapacheからnginxに移行し、staticファイルをnginxから出すようにして、さらにキャッシュするようにし、ログを消したら</p>

<p>2500→2800</p>

<p>となりました。後で考えるとこのログを消したのまずかったですね。asamiさんがなんかpythonのツールを使ってトラフィック監視してたのでいっかなーって思ってたんですが。</p>

<p>その間asamiさんがslow queryのログを吐かせてボトルネックを見付けようとしますが、どれも平均的に重い。ソートに使われてる<code>created_at</code>にyokoteさんがインデックスを貼ってくれたりしましたが大した改善はみられず。後にこのインデックスはベンチマークが初期化するときに消されてるのではということが発覚しました。</p>

<p>あとは私がworker_connectionをいじったりasamiさんがmemcachedを使ってクエリの数を減らしたりyokoteさんがストレージエンジンをarchiveに変えたり色々しましたが努力虚しくスコアは改善しませんでした。</p>

<p>外部で<code>markdown</code>コマンドを呼んでるところを(それがperl製のスクリプトだったので)アプリに埋め込んでしまえばちょっとは速くなるかなと思いましたが私はperlをいじれませんし大差ないだろうからいっかと思って放置してたのですが、後で聞くと案外それでスコア伸びたそうです。nginxのログを見てれば気づいたことだったのに…</p>

<p>ということで大したこともできず予選敗退です。因みに1位とは10倍くらいの差がありました。</p>

<h2>振り返って</h2>

<p>後で他の方のブログとかを見るとそんな手があったのかとかそこに罠があったのかとか全然気づかなかったことがたくさんありました。とりあえず勉強しなきゃって思ったのは
 + redis
 + プロファイラ
 + デプロイツール
ですね。asamiさんがデプロイツールを用意してくれてたのですが私には使いこなせず、折角git管理してたのにその利点を生かせませんでした。(私は手動デプロイしてました)</p>

<p>あとはボトルネックから攻める、redisで書き換えるといったこをとほとんどの上位チームがやってたのでそこは勉強したいです。</p>

<p>来年も開催されるなら是非参加したいですね。</p>

<h2>追記</h2>

<p>まさか…まさかこんなことになるとは…</p>

<p><a href="http://isucon.net/archives/32951235.html">学生枠上位3チーム中2チームが動作検証で失格となり</a>、繰り上げで私達のチームakyが予選通過となりました。ビックリすね。終ったあとasamiさんがしっかり動作確認してからAMIを提出してくれたからでしょう。</p>

<p>6割くらい嬉しいのですが、失格となったチーム魔王は夏期講習会で一緒だったメンバーのチームで、内心お祝いしてたのにこんなことになって残念です。スコアも正常に動作していたら16000点だったそうです。</p>

<p>あと1ヶ月、精進して本戦で晒しものにならないよう頑張ります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tiarraにercで接続したときの/loadの問題]]></title>
    <link href="http://KeenS.github.io/blog/2013/10/06/tiarra-erc/"/>
    <updated>2013-10-06T00:35:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/10/06/tiarra-erc</id>
    <content type="html"><![CDATA[<p><a href="http://www.clovery.jp/tiarra/">tiarra</a>に<a href="http://www.emacswiki.org/ERC">erc</a>で接続したときの/loadの問題。</p>

<!-- more -->


<p>tiarraは有名なircプロキシ。ercはEmacs上で動くircクライアント。これらを使っているとtiarraが自動でログインしてくれないのでおかしいなと思っていたらtiarraの自動ログインモジュールを有効にしていなかった模様。</p>

<p>書き換えていざ設定を反映しようとすると若干困りました。どこに<code>/load</code>と打てばいいんだろ。</p>

<p>最初に誘導されるバッファ(ircバッファ名がプロキシサーバー名になってるやつ)に<code>/load</code>と打つと</p>

<pre><code>ERC&gt; /load
Incorrect arguments. Usage:
/LOAD line
Load the script provided in the LINE.
If LINE continues beyond the file name, the rest of
it is put in a (local) variable `erc-script-args',
which can be used in Emacs Lisp scripts.

The optional FORCE argument is ignored here - you can't force loading
a script after exceeding the flood threshold.
</code></pre>

<p>ですって。ああ…。<code>/load</code>コマンドがercに食われてる…</p>

<p>流石に解決策あるだろって思って調べたら</p>

<pre><code>/quote load
</code></pre>

<p>だそうです。</p>

<pre><code>ERC&gt; /quote load
-192.168.1.4- *** Reloaded configuration file.
-192.168.1.4- *** Module Channel::Join::Connect will be loaded newly.
</code></pre>

<p>はい。ちゃんとloadしてくれました。</p>

<p>以上小ネタでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacsのdired-modeを使い易くする]]></title>
    <link href="http://KeenS.github.io/blog/2013/10/04/emacs-dired/"/>
    <updated>2013-10-04T19:51:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/10/04/emacs-dired</id>
    <content type="html"><![CDATA[<p>Emacsの標準ライブラリ<code>dired.el</code>を読んでたら色々発見があったのでメモ兼dired-modeとはなんじゃらほいって方にも一から解説してみます。</p>

<!-- more -->


<p>とは言ってもいきなり解説しなくて申し訳ないのですが、最初に</p>

<pre><code>(ffap-bindings)
</code></pre>

<p>を設定しておきましょう。<code>C-x C-f</code>が非常に便利になります。
だいたいの方が設定してるかと思いますが、まだという方は<code>init.el</code>に書いて保存し、最後の<code>)</code>の後にカーソルを持っていって<code>C-x C-e</code>しましょう。設定が反映されます。
この設定で<code>C-x C-f</code>の入力がファイル以外も受け付けてくれますし、カーソルにポイントされてるファイルやURLをデフォルトで開こうとしてくれます。</p>

<p>…よし。じゃあ解説始めますよ。<code>C-x C-f ~/</code>してみて下さい。上の設定をしていたらディレクトリでも開ける筈です。するとホームディレクトリが<code>ls -al</code>された感じのバッファが出てくると思います。</p>

<p> <img src="http://KeenS.github.io/images/Screenshot_from_2013-10-04.png" title="dired-mode-screenshot" alt="私のホームはちょっとマズいのがあったので.emacs.dのスクリーンショット"></p>

<p>これが<code>dired-mode</code>です。これは普通に<code>n</code>(<code>C-n</code>でも可)や<code>p</code>(<code>C-p</code>でも可)で移動して、Enterでそのファイルやディレクトリを開けます。これだけでも十分便利なのですが、ここからさらにファイル操作までできます。</p>

<p>適当なファイルにカーソルを合わせて<code>C</code>するとコピー先を聞かれるので、入力してあげるとコピーしてくれます。複数ファイルをコピーしたいなら、コピーしたいファイル上で<code>m</code>してマークを付けて、<code>C</code>すれば一括でコピーできます。</p>

<p>勿論、他にもコマンドはあります。同じような使い方のできる代表的なものを挙げると、</p>

<table>
<thead>
<tr>
<th></th>
<th> コマンド </th>
<th> 操作(実行されるLinuxコマンド)    </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <code>C</code>      </td>
<td> コピー(<code>cp</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>R</code>      </td>
<td> リネーム/移動(<code>mv</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>D</code>      </td>
<td> 削除(<code>rm</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>M</code>      </td>
<td> 権限操作(<code>chmod</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>G</code>      </td>
<td> グループ変更(<code>chgrp</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>O</code>      </td>
<td> 所有権変更(<code>chown</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>Z</code>      </td>
<td> 圧縮/展開(<code>compress/uncompress/gunzip/bunzip/unzip</code>)</td>
</tr>
<tr>
<td></td>
<td> <code>B</code>      </td>
<td> (*.elファイルの)バイトコンパイル</td>
</tr>
<tr>
<td></td>
<td> <code>!</code>      </td>
<td> 任意のコマンドの実行。デフォルトで空気読んだコマンドになってる。</td>
</tr>
</tbody>
</table>


<p>他にも無数に操作はありますがファイル操作はこんなものでしょう。あとはバッファを閉じる<code>q</code>や親ディレクトリに移動する<code>^</code>、バッファの更新を行なう<code>g</code>、マークを外す<code>u</code>(<code>U</code>で全解除)を覚えていれば操作には困らない筈です。</p>

<p>が、頻繁に使っているとより良く使いたくなります。そこで今回見付けた設定を紹介します。</p>

<p>まず</p>

<pre><code>(add-hook 'dired-load-hook (lambda ()
                  (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)))
</code></pre>

<p>から。これはdired-modeで<code>r</code>するとバッファがエディタブルになり、ファイル名を普通に変更できます。そのまま<code>C-x C-s</code>すればリネームの終了です。<br/>
普通にEmacsの編集コマンドが使えるので <code>M-%</code>とかで一括拡張子変更とか<code>C-x r t</code>でファイル名にプリフィクスつけたり自由自在です。</p>

<p>次に</p>

<pre><code>(setq dired-listing-switches (purecopy "-Ahl"))
</code></pre>

<p>Emacsがdired-modeを表示するとき、実際に裏で <code>ls -al</code>を走らせているのですが、そのときのオプションを変更できます。但し内部で<code>-l</code>の結果を利用してるのでこれは必須です。しかしそれ以外は自由に設定できます。因みにWindowsでもEmacsがエミュレートしてくれるので設定可能ですが、一部未実装のものもあるそうです。</p>

<p>頻繁に使うなら</p>

<pre><code>(setq dired-dwim-target t)
</code></pre>

<p>もお勧めです。</p>

<p>これを設定しておくと、ウィンドウを分割して左右にdiredバッファを開いているとき、<code>R</code>や<code>C</code>のデフォルトの宛先がもう片方のディレクトリになります。伝わりますかね？</p>

<p> <img src="http://KeenS.github.io/images/Screenshot_from_2013-10-05.png" title="dired-mode in both of split window" alt="分割した両方のWindowでdired-modeを実行した状態。"></p>

<p>のようにdiredでディレクトリA, Bを開いてるときにディレクトリAでファイルのコピーやら移動やらをするときにデフォルトでBに移動やコピーを行なうようになります。いくつかのファイルをディレクトリ間で移動させるときに非常に便利ですね。</p>

<p>あ、<code>C-x C-f /ftp:user@ftp-server:/path/to/dir</code>でFTPサーバーのディレクトリ/ファイルにもアクセスできるのは御存じですよね？これと組合せるとEmacsが割と使い易いFTPクライアントに大変身!</p>

<p>あとは私がどうしても欲しかったtarballですね。
 <div><script src='https://gist.github.com/KeenS/6828197.js?file=dired-tar.el'></script>
<noscript><pre><code>(defun dired-tar (tarname files &amp;optional arg)
  &quot;A dired-mode extension to archive files marked. With prefix argument, the tarball is gziped.&quot;
  (interactive (let ((files (dired-get-marked-files)))</p>

<pre><code>     (list (read-string &amp;quot;Tarball name: &amp;quot; (concat (file-relative-name (car files)) &amp;quot;.tar.gz&amp;quot;))
           files &amp;quot;P&amp;quot;)))
</code></pre>

<p>  (let ((tar (if arg</p>

<pre><code>     (if dired-guess-shell-gnutar
         (concat dired-guess-shell-gnutar &amp;quot; zcf %s %s&amp;quot;)
       &amp;quot;tar cf - %2s | gzip &amp;gt; %1s&amp;quot;)
       &amp;quot;tar cf %s %s&amp;quot;)))
(shell-command (format tar tarname (mapconcat 'file-relative-name files &amp;quot; &amp;quot;)))))
</code></pre>

<p>(add-hook &lsquo;dired-load-hook (lambda () (define-key dired-mode-map &quot;T&quot; &#8216;dired-tar)))
</code></pre></noscript></div></p>

<p>これでtarballにまとめたいファイルをマークして<code>T</code>すればまとめてくれます。<code>C-u T</code>するとgzip圧縮までしてくれます。因みに解凍/展開はファイル上で<code>!</code>するとデフォルトコマンドが展開(<code>tar xzvf</code>など)になってるので専用コマンドは必要ありません。補足ですが個人用なのでテストとかしてません。一旦御自身で動作テストなどをされてから実行されることをお勧めします。</p>

<p>他にも色々なコマンドがたくさんあったので興味のある方は探求してみて下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MPlayerがうまく動かない]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/29/mplayer/"/>
    <updated>2013-09-29T01:51:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/29/mplayer</id>
    <content type="html"><![CDATA[<p>MPlayerを使ってBGMを流すコマンドを作ろうとしたときに困ったことがいくつかあったので誰か解決して下さい。</p>

<!-- more -->


<p>スクリプトは3年前で更新がとまってる<code>mplayer-ruby</code>を使ってRubyでmplayerを叩く方針。</p>

<p>案の定バグに当りました。スペースの入ってるファイルをうまく処理できない。これは内部的にシェルを呼んでるのですが、そのときにシェルエスケープをしてないためです。<code>require 'shellwords'</code>しとけば<code>String#shellescape</code>メソッドが追加されるので<code>mplayer-ruby</code>の何箇所かにある<code>file</code>を<code>file.shellescape</code>すれば解決しました。</p>

<p>さらにDirty Hack。複数ファイルを<code>load_file</code>で渡してると詰まるようなので思いきって<code>MPlayer::Slave#initialize</code>を改造して引数に再生ファイルの配列(元々はファイル名の文字列)を渡すようにしました。</p>

<p>これで</p>

<div><script src='https://gist.github.com/KeenS/6308894.js?file=BGM'></script>
<noscript><pre><code>#!/usr/bin/env ruby -Ku
# _*_ coding:UTF-8 _*_
require 'mplayer-ruby'
require 'libnotify'

class MPlayer::Slave
  def now_playing
    summary = &quot;&quot;
    summary +=   get(:meta_title).chomp
    summary += &quot; -- &quot; +  get(:meta_artist).chomp
    body = &quot;NowPlaying&quot;
    Libnotify.show(body: body, summary: summary)
  end
end

music = &quot;/your/path/to/music/directory/&quot;
playlist = File.read( music + &quot;BGM.list&quot;).split(&quot;\n&quot;).map{|f| music + f }.shuffle
player = MPlayer::Slave.new playlist
player.loop
Signal.trap(:INT) {player.quit;exit}
Signal.trap(:KILL) {player.quit;exit}
player.now_playing
while line = player.stdout.gets
  player.now_playing if line =~ /playback/
end
</code></pre></noscript></div>


<p>が動くようになりました。</p>

<p>しかし一つ問題がありまして、再生が1曲目で止まっちゃいます。<code>loop</code>を指定してるのにです。mplayerを直接叩いてみるに、mplayerのバグっぽい…複数ファイル指定したときは本来なら全曲1回は再生してくれるはずなのに再生しませんし<code>-loop 0</code>オプションガン無視。今回入れたのはUbuntuのapt-getで入るやつで、バージョン(?)は「MPlayer2 UNKNOWN &copy; 2000-2012 MPlayer Team」だそうです。</p>

<p>Ubuntuはパッケージが古いことが往々にしてあるので冷静に自分でビルドしようとしても<code>fridibi</code>がないとかで怒られる。</p>

<p>どなたか解決方法御存じないですか???</p>

<h2>追記</h2>

<p><code>-loop -1</code>を渡すとループしてくれました。それドキュメントと逆…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのgistプラグインが動かなかったので修正した]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/26/patch-to-gist-plugin/"/>
    <updated>2013-09-26T22:57:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/26/patch-to-gist-plugin</id>
    <content type="html"><![CDATA[<p>どうもGithubのgistのURLが変わってる(?)っぽくてOctopressのgistプラグインが動いてくれなかったので修正しました。</p>

<!-- more -->


<p>Octopressの最新版でも修正されてなかったっぽいです。自分の使い方が悪かったのかなぁ…</p>

<p>原因は生のソースコードを取ってくるときに<code>"https://raw.github.com/gist/#{gist}/#{file}"</code>にアクセスするんですがそいつが404返すんですね。ブラウザからgistにいって&#8221;view raw&#8221;をクリックすると<code>"https://gist.github.com/#{gist_id}/#{gist}/raw/#{file}"</code>でした。gist_idってかGithubアカウントです。この辺、挙動が怪しくて、gist_idがなくてもリダイレクトしてくれたりしてくれなかったりします。APIによって違うようです。問題の<code>raw</code>APIはリダイレクトしてくれないので割と大きめにプラグインを書き換える必要がありました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diff --cc plugins/gist_tag.rb
</span><span class='line'>index 1620345,0000000..58acd2a
</span><span class='line'>mode 100644,000000..100644
</span><span class='line'>--- a/plugins/gist_tag.rb
</span><span class='line'>+++ b/plugins/gist_tag.rb
</span><span class='line'>@@@ -1,105 -1,0 +1,105 @@@
</span><span class='line'> +# A Liquid tag for Jekyll sites that allows embedding Gists and showing code for non-JavaScript enabled browsers and readers.
</span><span class='line'> +# by: Brandon Tilly
</span><span class='line'> +# Source URL: https://gist.github.com/1027674
</span><span class='line'> +# Post http://brandontilley.com/2011/01/31/gist-tag-for-jekyll.html
</span><span class='line'> +#
</span><span class='line'> +# Example usage:  //embeds a gist for this plugin
</span><span class='line'> +
</span><span class='line'> +require 'cgi'
</span><span class='line'> +require 'digest/md5'
</span><span class='line'> +require 'net/https'
</span><span class='line'> +require 'uri'
</span><span class='line'> +
</span><span class='line'> +module Jekyll
</span><span class='line'> +  class GistTag &lt; Liquid::Tag
</span><span class='line'> +    def initialize(tag_name, text, token)
</span><span class='line'> +      super
</span><span class='line'> +      @text           = text
</span><span class='line'> +      @cache_disabled = false
</span><span class='line'> +      @cache_folder   = File.expand_path "../.gist-cache", File.dirname(__FILE__)
</span><span class='line'> +      FileUtils.mkdir_p @cache_folder
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'> +    def render(context)
</span><span class='line'>-       if parts = @text.match(/([a-zA-Z\d]*) (.*)/)
</span><span class='line'>-         gist, file = parts[1].strip, parts[2].strip
</span><span class='line'>-         script_url = script_url_for gist, file
</span><span class='line'>-         code       = get_cached_gist(gist, file) || get_gist_from_web(gist, file)
</span><span class='line'>++      if parts = @text.match(/([a-zA-Z]*) ([a-zA-Z\d]*) (.*)/)
</span><span class='line'>++        gist_id, gist, file = parts[1].strip, parts[2].strip, parts[3].strip
</span><span class='line'>++        script_url = script_url_for gist_id, gist, file
</span><span class='line'>++        code       = get_cached_gist(gist_id, gist, file) || get_gist_from_web(gist_id, gist, file)
</span><span class='line'> +        html_output_for script_url, code
</span><span class='line'> +      else
</span><span class='line'> +        ""
</span><span class='line'> +      end
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'> +    def html_output_for(script_url, code)
</span><span class='line'> +      code = CGI.escapeHTML code
</span><span class='line'> +      &lt;&lt;-HTML
</span><span class='line'> +&lt;div&gt;&lt;script src='#{script_url}'&gt;&lt;/script&gt;
</span><span class='line'> +&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;#{code}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
</span><span class='line'> +      HTML
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'>-     def script_url_for(gist_id, filename)
</span><span class='line'>-       url = "https://gist.github.com/#{gist_id}.js"
</span><span class='line'>++    def script_url_for(gist_id, gist, filename)
</span><span class='line'>++      url = "https://gist.github.com/#{gist_id}/#{gist}.js"
</span><span class='line'> +      url = "#{url}?file=#{filename}" unless filename.nil? or filename.empty?
</span><span class='line'> +      url
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'>-     def get_gist_url_for(gist, file)
</span><span class='line'>-       "https://raw.github.com/gist/#{gist}/#{file}"
</span><span class='line'>++    def get_gist_url_for(gist_id, gist, file)
</span><span class='line'>++      "https://gist.github.com/#{gist_id}/#{gist}/raw/#{file}"
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'>-     def cache(gist, file, data)
</span><span class='line'>-       cache_file = get_cache_file_for gist, file
</span><span class='line'>++    def cache(gist_id, gist, file, data)
</span><span class='line'>++      cache_file = get_cache_file_for gist_id, gist, file
</span><span class='line'> +      File.open(cache_file, "w") do |io|
</span><span class='line'> +        io.write data
</span><span class='line'> +      end
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'>-     def get_cached_gist(gist, file)
</span><span class='line'>++    def get_cached_gist(gist_id, gist, file)
</span><span class='line'> +      return nil if @cache_disabled
</span><span class='line'>-       cache_file = get_cache_file_for gist, file
</span><span class='line'>++      cache_file = get_cache_file_for gist_id, gist, file
</span><span class='line'> +      File.read cache_file if File.exist? cache_file
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'>-     def get_cache_file_for(gist, file)
</span><span class='line'>++    def get_cache_file_for(gist_id, gist, file)
</span><span class='line'> +      bad_chars = /[^a-zA-Z0-9\-_.]/
</span><span class='line'> +      gist      = gist.gsub bad_chars, ''
</span><span class='line'> +      file      = file.gsub bad_chars, ''
</span><span class='line'>-       md5       = Digest::MD5.hexdigest "#{gist}-#{file}"
</span><span class='line'>-       File.join @cache_folder, "#{gist}-#{file}-#{md5}.cache"
</span><span class='line'>++      md5       = Digest::MD5.hexdigest "#{gist_id}-#{gist}-#{file}"
</span><span class='line'>++      File.join @cache_folder, "#{gist_id}-#{gist}-#{file}-#{md5}.cache"
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'>-     def get_gist_from_web(gist, file)
</span><span class='line'>-       gist_url          = get_gist_url_for gist, file
</span><span class='line'>++    def get_gist_from_web(gist_id, gist, file)
</span><span class='line'>++      gist_url          = get_gist_url_for gist_id, gist, file
</span><span class='line'> +      raw_uri           = URI.parse gist_url
</span><span class='line'> +      proxy             = ENV['http_proxy']
</span><span class='line'> +      if proxy
</span><span class='line'> +        proxy_uri       = URI.parse(proxy)
</span><span class='line'> +        https           = Net::HTTP::Proxy(proxy_uri.host, proxy_uri.port).new raw_uri.host, raw_uri.port
</span><span class='line'> +      else
</span><span class='line'> +        https           = Net::HTTP.new raw_uri.host, raw_uri.port
</span><span class='line'> +      end
</span><span class='line'> +      https.use_ssl     = true
</span><span class='line'> +      https.verify_mode = OpenSSL::SSL::VERIFY_NONE
</span><span class='line'> +      request           = Net::HTTP::Get.new raw_uri.request_uri
</span><span class='line'> +      data              = https.request request
</span><span class='line'> +      if data.code.to_i != 200
</span><span class='line'> +        raise RuntimeError, "Gist replied with #{data.code} for #{gist_url}"
</span><span class='line'> +      end
</span><span class='line'> +      data              = data.body
</span><span class='line'>-       cache gist, file, data unless @cache_disabled
</span><span class='line'>++      cache gist_id, gist, file, data unless @cache_disabled
</span><span class='line'> +      data
</span><span class='line'> +    end
</span><span class='line'> +  end
</span><span class='line'> +
</span><span class='line'> +  class GistTagNoCache &lt; GistTag
</span><span class='line'> +    def initialize(tag_name, text, token)
</span><span class='line'> +      super
</span><span class='line'> +      @cache_disabled = true
</span><span class='line'> +    end
</span><span class='line'> +  end
</span><span class='line'> +end
</span><span class='line'> +
</span><span class='line'> +Liquid::Template.register_tag('gist', Jekyll::GistTag)
</span><span class='line'> +Liquid::Template.register_tag('gistnocache', Jekyll::GistTagNoCache)</span></code></pre></td></tr></table></div></figure>


<p>なんかOctopressのブランチが面倒だったり<code>magit.el</code>の使い方がよく分らなかったのでアレですが伝えたいことは伝わるdiffだと思います。</p>

<p>見ての通り<code>gist_id</code>というパラメーターを追加してリクエストURLをちょこっと書き換えただけです。この修正を加えたあとは</p>

<pre><code>{%  gist KeenS 6688683 script.lisp %}
</code></pre>

<p>で使えます。</p>

<p>本当にこれでいいのかなあ…なんか違う気がするなぁ。表示もイマイチだし。けどこれしかないのだから仕方がないですね。正確な情報を持ってる方いらっしゃいましたらコメントお願いします。</p>

<h2>追記</h2>

<p><a href="http://rcmdnk.github.io/blog/2013/05/06/blog-octopress/">http://rcmdnk.github.io/blog/2013/05/06/blog-octopress/</a>にあるエントリを見て変更加えました。やり方は貼られてあるdiffを<code>*scratch*</code>バッファにコピー、<code>M-x ediff-patch-file</code>でパッチ適用しました。</p>

<p>しかしどうもパッチの元のバージョンが古いらしく、何度もエラー出しながら手でパッチファイルを修正しました。もうちょっとパッチに慣れないとな…</p>

<p>しかも苦労してパッチ適用したのに表示変わらないなーって思ってたらどうもCleanpressは<code>sass/partial</code>を読み込まないようなので無駄骨でした。<code>sass/parts/_syntax.sass</code>をひたすら様子見ながら修正しました。</p>

<p>diffは…いいや。希望があったら晒します。</p>
]]></content>
  </entry>
  
</feed>
