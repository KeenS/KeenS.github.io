<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2013-09-29T02:23:00+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MPlayerがうまく動かない]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/29/mplayer/"/>
    <updated>2013-09-29T01:51:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/29/mplayer</id>
    <content type="html"><![CDATA[<p>MPlayerを使ってBGMを流すコマンドを作ろうとしたときに困ったことがいくつかあったので誰か解決して下さい。</p>

<!-- more -->


<p>スクリプトは3年前で更新がとまってる<code>mplayer-ruby</code>を使ってRubyでmplayerを叩く方針。</p>

<p>案の定バグに当りました。スペースの入ってるファイルをうまく処理できない。これは内部的にシェルを呼んでるのですが、そのときにシェルエスケープをしてないためです。<code>require 'shellwords'</code>しとけば<code>String#shellescape</code>メソッドが追加されるので<code>mplayer-ruby</code>の何箇所かにある<code>file</code>を<code>file.shellescape</code>すれば解決しました。</p>

<p>さらにDirty Hack。複数ファイルを<code>load_file</code>で渡してると詰まるようなので思いきって<code>MPlayer::Slave#initialize</code>を改造して引数に再生ファイルの配列(元々はファイル名の文字列)を渡すようにしました。</p>

<p>これで</p>

<div><script src='https://gist.github.com/KeenS/6308894.js?file=BGM'></script>
<noscript><pre><code>#!/usr/bin/env ruby -Ku
# _*_ coding:UTF-8 _*_
require 'mplayer-ruby'
require 'libnotify'

class MPlayer::Slave
  def now_playing
    summary = &quot;&quot;
    summary +=   get(:meta_title).chomp
    summary += &quot; -- &quot; +  get(:meta_artist).chomp
    body = &quot;NowPlaying&quot;
    Libnotify.show(body: body, summary: summary)
  end
end

music = &quot;/your/path/to/music/directory/&quot;
playlist = File.read( music + &quot;BGM.list&quot;).split(&quot;\n&quot;).map{|f| music + f }.shuffle
player = MPlayer::Slave.new playlist
player.loop
Signal.trap(:INT) {player.quit;exit}
Signal.trap(:KILL) {player.quit;exit}
player.now_playing
while line = player.stdout.gets
  player.now_playing if line =~ /playback/
end
</code></pre></noscript></div>


<p>が動くようになりました。</p>

<p>しかし一つ問題がありまして、再生が1曲目で止まっちゃいます。<code>loop</code>を指定してるのにです。mplayerを直接叩いてみるに、mplayerのバグっぽい…複数ファイル指定したときは本来なら全曲1回は再生してくれるはずなのに再生しませんし<code>-loop 0</code>オプションガン無視。今回入れたのはUbuntuのapt-getで入るやつで、バージョン(?)は「MPlayer2 UNKNOWN &copy; 2000-2012 MPlayer Team」だそうです。</p>

<p>Ubuntuはパッケージが古いことが往々にしてあるので冷静に自分でビルドしようとしても<code>fridibi</code>がないとかで怒られる。</p>

<p>どなたか解決方法御存じないですか???</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのgistプラグインが動かなかったので修正した]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/26/patch-to-gist-plugin/"/>
    <updated>2013-09-26T22:57:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/26/patch-to-gist-plugin</id>
    <content type="html"><![CDATA[<p>どうもGithubのgistのURLが変わってる(?)っぽくてOctopressのgistプラグインが動いてくれなかったので修正しました。</p>

<!-- more -->


<p>Octopressの最新版でも修正されてなかったっぽいです。自分の使い方が悪かったのかなぁ…</p>

<p>原因は生のソースコードを取ってくるときに<code>"https://raw.github.com/gist/#{gist}/#{file}"</code>にアクセスするんですがそいつが404返すんですね。ブラウザからgistにいって&#8221;view raw&#8221;をクリックすると<code>"https://gist.github.com/#{gist_id}/#{gist}/raw/#{file}"</code>でした。gist_idってかGithubアカウントです。この辺、挙動が怪しくて、gist_idがなくてもリダイレクトしてくれたりしてくれなかったりします。APIによって違うようです。問題の<code>raw</code>APIはリダイレクトしてくれないので割と大きめにプラグインを書き換える必要がありました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diff --cc plugins/gist_tag.rb
</span><span class='line'>index 1620345,0000000..58acd2a
</span><span class='line'>mode 100644,000000..100644
</span><span class='line'>--- a/plugins/gist_tag.rb
</span><span class='line'>+++ b/plugins/gist_tag.rb
</span><span class='line'>@@@ -1,105 -1,0 +1,105 @@@
</span><span class='line'> +# A Liquid tag for Jekyll sites that allows embedding Gists and showing code for non-JavaScript enabled browsers and readers.
</span><span class='line'> +# by: Brandon Tilly
</span><span class='line'> +# Source URL: https://gist.github.com/1027674
</span><span class='line'> +# Post http://brandontilley.com/2011/01/31/gist-tag-for-jekyll.html
</span><span class='line'> +#
</span><span class='line'> +# Example usage:  //embeds a gist for this plugin
</span><span class='line'> +
</span><span class='line'> +require 'cgi'
</span><span class='line'> +require 'digest/md5'
</span><span class='line'> +require 'net/https'
</span><span class='line'> +require 'uri'
</span><span class='line'> +
</span><span class='line'> +module Jekyll
</span><span class='line'> +  class GistTag &lt; Liquid::Tag
</span><span class='line'> +    def initialize(tag_name, text, token)
</span><span class='line'> +      super
</span><span class='line'> +      @text           = text
</span><span class='line'> +      @cache_disabled = false
</span><span class='line'> +      @cache_folder   = File.expand_path "../.gist-cache", File.dirname(__FILE__)
</span><span class='line'> +      FileUtils.mkdir_p @cache_folder
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'> +    def render(context)
</span><span class='line'>-       if parts = @text.match(/([a-zA-Z\d]*) (.*)/)
</span><span class='line'>-         gist, file = parts[1].strip, parts[2].strip
</span><span class='line'>-         script_url = script_url_for gist, file
</span><span class='line'>-         code       = get_cached_gist(gist, file) || get_gist_from_web(gist, file)
</span><span class='line'>++      if parts = @text.match(/([a-zA-Z]*) ([a-zA-Z\d]*) (.*)/)
</span><span class='line'>++        gist_id, gist, file = parts[1].strip, parts[2].strip, parts[3].strip
</span><span class='line'>++        script_url = script_url_for gist_id, gist, file
</span><span class='line'>++        code       = get_cached_gist(gist_id, gist, file) || get_gist_from_web(gist_id, gist, file)
</span><span class='line'> +        html_output_for script_url, code
</span><span class='line'> +      else
</span><span class='line'> +        ""
</span><span class='line'> +      end
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'> +    def html_output_for(script_url, code)
</span><span class='line'> +      code = CGI.escapeHTML code
</span><span class='line'> +      &lt;&lt;-HTML
</span><span class='line'> +&lt;div&gt;&lt;script src='#{script_url}'&gt;&lt;/script&gt;
</span><span class='line'> +&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;#{code}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
</span><span class='line'> +      HTML
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'>-     def script_url_for(gist_id, filename)
</span><span class='line'>-       url = "https://gist.github.com/#{gist_id}.js"
</span><span class='line'>++    def script_url_for(gist_id, gist, filename)
</span><span class='line'>++      url = "https://gist.github.com/#{gist_id}/#{gist}.js"
</span><span class='line'> +      url = "#{url}?file=#{filename}" unless filename.nil? or filename.empty?
</span><span class='line'> +      url
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'>-     def get_gist_url_for(gist, file)
</span><span class='line'>-       "https://raw.github.com/gist/#{gist}/#{file}"
</span><span class='line'>++    def get_gist_url_for(gist_id, gist, file)
</span><span class='line'>++      "https://gist.github.com/#{gist_id}/#{gist}/raw/#{file}"
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'>-     def cache(gist, file, data)
</span><span class='line'>-       cache_file = get_cache_file_for gist, file
</span><span class='line'>++    def cache(gist_id, gist, file, data)
</span><span class='line'>++      cache_file = get_cache_file_for gist_id, gist, file
</span><span class='line'> +      File.open(cache_file, "w") do |io|
</span><span class='line'> +        io.write data
</span><span class='line'> +      end
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'>-     def get_cached_gist(gist, file)
</span><span class='line'>++    def get_cached_gist(gist_id, gist, file)
</span><span class='line'> +      return nil if @cache_disabled
</span><span class='line'>-       cache_file = get_cache_file_for gist, file
</span><span class='line'>++      cache_file = get_cache_file_for gist_id, gist, file
</span><span class='line'> +      File.read cache_file if File.exist? cache_file
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'>-     def get_cache_file_for(gist, file)
</span><span class='line'>++    def get_cache_file_for(gist_id, gist, file)
</span><span class='line'> +      bad_chars = /[^a-zA-Z0-9\-_.]/
</span><span class='line'> +      gist      = gist.gsub bad_chars, ''
</span><span class='line'> +      file      = file.gsub bad_chars, ''
</span><span class='line'>-       md5       = Digest::MD5.hexdigest "#{gist}-#{file}"
</span><span class='line'>-       File.join @cache_folder, "#{gist}-#{file}-#{md5}.cache"
</span><span class='line'>++      md5       = Digest::MD5.hexdigest "#{gist_id}-#{gist}-#{file}"
</span><span class='line'>++      File.join @cache_folder, "#{gist_id}-#{gist}-#{file}-#{md5}.cache"
</span><span class='line'> +    end
</span><span class='line'> +
</span><span class='line'>-     def get_gist_from_web(gist, file)
</span><span class='line'>-       gist_url          = get_gist_url_for gist, file
</span><span class='line'>++    def get_gist_from_web(gist_id, gist, file)
</span><span class='line'>++      gist_url          = get_gist_url_for gist_id, gist, file
</span><span class='line'> +      raw_uri           = URI.parse gist_url
</span><span class='line'> +      proxy             = ENV['http_proxy']
</span><span class='line'> +      if proxy
</span><span class='line'> +        proxy_uri       = URI.parse(proxy)
</span><span class='line'> +        https           = Net::HTTP::Proxy(proxy_uri.host, proxy_uri.port).new raw_uri.host, raw_uri.port
</span><span class='line'> +      else
</span><span class='line'> +        https           = Net::HTTP.new raw_uri.host, raw_uri.port
</span><span class='line'> +      end
</span><span class='line'> +      https.use_ssl     = true
</span><span class='line'> +      https.verify_mode = OpenSSL::SSL::VERIFY_NONE
</span><span class='line'> +      request           = Net::HTTP::Get.new raw_uri.request_uri
</span><span class='line'> +      data              = https.request request
</span><span class='line'> +      if data.code.to_i != 200
</span><span class='line'> +        raise RuntimeError, "Gist replied with #{data.code} for #{gist_url}"
</span><span class='line'> +      end
</span><span class='line'> +      data              = data.body
</span><span class='line'>-       cache gist, file, data unless @cache_disabled
</span><span class='line'>++      cache gist_id, gist, file, data unless @cache_disabled
</span><span class='line'> +      data
</span><span class='line'> +    end
</span><span class='line'> +  end
</span><span class='line'> +
</span><span class='line'> +  class GistTagNoCache &lt; GistTag
</span><span class='line'> +    def initialize(tag_name, text, token)
</span><span class='line'> +      super
</span><span class='line'> +      @cache_disabled = true
</span><span class='line'> +    end
</span><span class='line'> +  end
</span><span class='line'> +end
</span><span class='line'> +
</span><span class='line'> +Liquid::Template.register_tag('gist', Jekyll::GistTag)
</span><span class='line'> +Liquid::Template.register_tag('gistnocache', Jekyll::GistTagNoCache)</span></code></pre></td></tr></table></div></figure>


<p>なんかOctopressのブランチが面倒だったり<code>magit.el</code>の使い方がよく分らなかったのでアレですが伝えたいことは伝わるdiffだと思います。</p>

<p>見ての通り<code>gist_id</code>というパラメーターを追加してリクエストURLをちょこっと書き換えただけです。この修正を加えたあとは</p>

<pre><code>{%  gist KeenS 6688683 script.lisp %}
</code></pre>

<p>で使えます。</p>

<p>本当にこれでいいのかなあ…なんか違う気がするなぁ。表示もイマイチだし。けどこれしかないのだから仕方がないですね。正確な情報を持ってる方いらっしゃいましたらコメントお願いします。</p>

<h2>追記</h2>

<p><a href="http://rcmdnk.github.io/blog/2013/05/06/blog-octopress/">http://rcmdnk.github.io/blog/2013/05/06/blog-octopress/</a>にあるエントリを見て変更加えました。やり方は貼られてあるdiffを<code>*scratch*</code>バッファにコピー、<code>M-x ediff-patch-file</code>でパッチ適用しました。</p>

<p>しかしどうもパッチの元のバージョンが古いらしく、何度もエラー出しながら手でパッチファイルを修正しました。もうちょっとパッチに慣れないとな…</p>

<p>しかも苦労してパッチ適用したのに表示変わらないなーって思ってたらどうもCleanpressは<code>sass/partial</code>を読み込まないようなので無駄骨でした。<code>sass/parts/_syntax.sass</code>をひたすら様子見ながら修正しました。</p>

<p>diffは…いいや。希望があったら晒します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shellyを使ってCommon LispファイルをExecutableにする]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/26/shelly-script/"/>
    <updated>2013-09-26T21:25:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/26/shelly-script</id>
    <content type="html"><![CDATA[<p>コマンドラインからCommon Lispの関数を実行できる<a href="https://github.com/fukamachi/shelly">Shelly</a>を使ってCommon Lispファイルを実行形式にしてみました。
Shellyは</p>

<pre><code>$ shly + 1 2
3
</code></pre>

<p>みたいに関数を実行できます。</p>

<!-- more -->


<p>モチベーションとしては、<a href="http://blog.8arrow.org/entry/20120521/1337596483">Shellyの作者深町さん</a>がTwitterで「Shellyでloadを使うとスクリプトみたいに実行できる」と発言していたのがきっかけで、Shebangを無視できればUNIX系ではExecutableにできるのでは？と思いついてやってみました。</p>

<p><code>read</code>して<code>eval</code>して…とか考えてましたが、<code>load</code>に<code>stream</code>を渡せるようなので案外簡単にできました。</p>

<div><script src='https://gist.github.com/KeenS/6688683.js?file=script.lisp'></script>
<noscript><pre><code>(in-package :shelly)
(export (defvar *argv* nil))
(in-package :cl-user)

(defun script (file argv)
  &quot;Execute a file as script ignoring shebang&quot;
  (setf shelly:*argv* argv)
  (let* ((in (open file :if-does-not-exist :error))
     (first-char (read-char in))
     (second-char (read-char in)))
    (cond
      ((and (char= first-char #\#) (char= second-char #\!))
       (read-line in))
      (t (unread-char second-char in)
     (unread-char first-char in)))
    (load in)
    (values)))
</code></pre></noscript></div>


<p>コマンドライン引数を受け取るために<code>*argv*</code>という変数を用意してます。</p>

<p>こんなことを<code>~/.shelly/Shellyfile</code>に書いておき、Lispの初期化ファイルに</p>

<pre><code>#+shelly
(load "~/.shelly/Shellyfile")
</code></pre>

<p>と書いてます。この<code>~/.shelly/Shellyfile</code>にはShelly向けの関数を溜め込んでいく予定です。</p>

<p>あとは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="err">#</span><span class="nv">!shly</span> <span class="nv">script</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">hello</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;Hello ~a~%&quot;</span> <span class="p">(</span><span class="nb">first</span> <span class="nv">shelly:*argv*</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">hello</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>を<code>foo.lisp</code>に書き込めば</p>

<pre><code>$ chmod u+x foo.lisp
$./foo.lisp κeen
Hello κeen
</code></pre>

<p>と実行できます。勿論、</p>

<pre><code>$shly script foo.lisp κeen
</code></pre>

<p>としても同じです。
一部の処理系ではこのようなことが出来ますが、コマンドライン引数の渡し方とかも処理系依存なのでポータブルに書くなら一つ試してみてはいかがでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Common Lispスタイルガイド]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/21/google-commonlisp-style-guide/"/>
    <updated>2013-09-21T17:00:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/21/google-commonlisp-style-guide</id>
    <content type="html"><![CDATA[<p>この度、<a href="http://google-styleguide.googlecode.com/svn/trunk/lispguide.xml">Google Common Lispスタイルガイド</a>が<a href="http://google-common-lisp-style-guide-ja.cddddr.org/">日本語に</a>なりました。</p>

<!-- more -->


<p>私が見付けた時点でほとんど日本語になってたのですが、ちょいちょい訳し残しがあったのでお手伝いをして、とりあえず英文は消えました。</p>

<p>ただまあこれで完成かというとそうでもなく、第一段階で「とりあえず」日本語になっただけ。第二段階がまだ残ってます。直訳も多々ありますし記法が統一できてなかったりします。</p>

<p>ですがこれで英語が苦手な方でも読めるかと思いますので読んでみて、変なところがあったらじゃんじゃんPull-Req送って下さい。マスターリポジトリは@massoさんの<a href="https://github.com/g000001/google-common-lisp-style-guide-ja">https://github.com/g000001/google-common-lisp-style-guide-ja</a>です。コメントに元の英文とか訳者のコメントとか残ってるので日本語が訳わかめな状態だったらそっちの方が分り易いかもしれません。</p>

<p>みなさん第二段階のご協力お願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitあれこれ]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/18/some-git-matters/"/>
    <updated>2013-09-18T15:13:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/18/some-git-matters</id>
    <content type="html"><![CDATA[<p>githubで共同作業してたらいろいろ困ったことがあったのでそのときのメモ。はじめてやって困ったことなので経験ある人には常識なのかもしれません。</p>

<!-- more -->


<h2>マスターリポジトリに追従する</h2>

<p>マスターをフォークして自分のレポジトリで作業、終ったらマスターにpull-reqという流れで作業してました。するとマスターが変更されたときに自分のリポジトリに反映させる必要があります。そのときは<a href="http://qiita.com/xtetsuji/items/555a1ef19ed21ee42873">http://qiita.com/xtetsuji/items/555a1ef19ed21ee42873</a>を参考に、</p>

<pre><code>$ git remote add upstream git@github.com:g000001/google-common-lisp-style-guide-ja.git
$ git fetch upstream
$ git merge upstream/master
</code></pre>

<p>でできました。</p>

<h2>Pull-Reqを正しく送る</h2>

<p>まず、masterでpull-req送るととりこまれるまで自分のマスターへのコミットが反映され続けるんですね。それで一回失敗。</p>

<p>じゃあ、ということでブランチを切ることに。するとまた問題が。
まあ、自分がアホっていったらアホなんですけど</p>

<pre><code>     _A_    _B_    _C_
*_/___\A'/___\B'/___\C'_HEAD
</code></pre>

<p>みたいなブランチの作り方してしまいました。<code>A</code>,<code>B</code>,<code>C</code>それぞれでpull-req送ったんですけど当然</p>

<pre><code>A : A
B : B-A'
C : C-B'-A'
</code></pre>

<p>みたいなヒストリのまま送られるわけです。<code>A</code>,<code>B</code>,<code>C</code>は同じファイルの違う箇所への変更なのでヒストリを</p>

<pre><code>       _C_
      /_B_
     /_A_ 
*_/______HEAD
</code></pre>

<p>のようにしたいわけです。<code>magit.el</code>さんにお助け願おうかと思いましたが、そもそも出来るか分らないのでTwitterで投げてみたところ、@mod_poppo氏に助けていただきました。<code>git reset</code>と<code>git cherry-pick</code>でできます。</p>

<p><code>A</code>のブランチは問題ないので<code>B</code>でやると、まず私は<code>magit.el</code>で必要な<code>B</code>のコミットを調べておいて</p>

<pre><code>$ git reset --hard *
</code></pre>

<p>で<code>*</code>に<code>HEAD</code>を戻して<code>A</code>, <code>B</code>で加えた変更を全て破棄。</p>

<pre><code>$ git cherry-pick B-commits
</code></pre>

<p>で<code>B</code>での変更のみ適用</p>

<pre><code>$ git push -f origin branch
</code></pre>

<p>で自分のリポジトリに反映(=pull-reqにも反映)<br/>
としました。<code>*</code>と<code>B-commits</code>はそれぞれリビジョンIDを調べて下さいね。</p>

<p>私の説明じゃ分りづらいと思うので
<a href="http://d.hatena.ne.jp/murank/20110327/1301224770">http://d.hatena.ne.jp/murank/20110327/1301224770</a>にあるすばらしい図を参考にして下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octomacs.elを修正しました]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/16/octomacs-el/"/>
    <updated>2013-09-16T21:24:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/16/octomacs-el</id>
    <content type="html"><![CDATA[<p>EmacsからOctopressに投稿できるOctomacs.elが最新版のrvm.elに対応してないようだったので修正してみました。</p>

<!-- more -->


<p>原因はOctomacs.elがrvm.elの内部で使われている関数を使っていたのですが、その関数が最新版で削除されていたからだったみたいです。</p>

<p>結論として、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*** /home/kim/.emacs.d/lisp/octomacs/octomacs.el 2013-09-16 22:29:14.498296762 +0900
</span><span class='line'>--- /home/kim/.emacs.d/elpa/octomacs-20121026.1649/octomacs.el    2013-08-31 23:54:13.044373498 +0900
</span><span class='line'>***************
</span><span class='line'>*** 4,10 ****
</span><span class='line'>  ;;
</span><span class='line'>  ;; Author: Jacob Helwig &lt;jacob@technosorcery.net&gt;
</span><span class='line'>  ;; Homepage: http://technosorcery.net
</span><span class='line'>! ;; Version: 0.0.1
</span><span class='line'>  ;; URL: https://github.com/jhelwig/octomacs
</span><span class='line'>  ;;
</span><span class='line'>  ;;; License:
</span><span class='line'>--- 4,11 ----
</span><span class='line'>  ;;
</span><span class='line'>  ;; Author: Jacob Helwig &lt;jacob@technosorcery.net&gt;
</span><span class='line'>  ;; Homepage: http://technosorcery.net
</span><span class='line'>! ;; Version: 20121026.1649
</span><span class='line'>! ;; X-Original-Version: 0.0.1
</span><span class='line'>  ;; URL: https://github.com/jhelwig/octomacs
</span><span class='line'>  ;;
</span><span class='line'>  ;;; License:
</span><span class='line'>***************
</span><span class='line'>*** 133,146 ****
</span><span class='line'>  (defun octomacs-format-rake-task-with-args (task &optional arguments)
</span><span class='line'>    "Build a shell suitable string of the rake TASK name with the specified ARGUMENTS."
</span><span class='line'>    (let ((arguments-string (if arguments
</span><span class='line'>!                               (format "[%s]" (if (listp arguments) (mapconcat 'octomacs-shell-escape-string arguments ", ") arguments))
</span><span class='line'>                              "")))
</span><span class='line'>      (format "'%s%s'" task arguments-string)))
</span><span class='line'>  
</span><span class='line'>  (defun octomacs-rake-with-rvm (directory task &optional arguments)
</span><span class='line'>    "Run rake task TASK with specified ARGUMENTS in DIRECTORY using rvm"
</span><span class='line'>    (let* ((default-directory (file-name-as-directory (expand-file-name directory)))
</span><span class='line'>!          (rvmrc-info (or (rvm--load-info-rvmrc) (rvm--load-info-ruby-version) (rvm--load-info-gemfile)))
</span><span class='line'>           (rvm-command (if rvmrc-info
</span><span class='line'>                            (concat "rvm " (mapconcat 'identity rvmrc-info "@") " do ")
</span><span class='line'>                          "")))
</span><span class='line'>--- 134,148 ----
</span><span class='line'>  (defun octomacs-format-rake-task-with-args (task &optional arguments)
</span><span class='line'>    "Build a shell suitable string of the rake TASK name with the specified ARGUMENTS."
</span><span class='line'>    (let ((arguments-string (if arguments
</span><span class='line'>!                               (format "[%s]" (mapconcat 'octomacs-shell-escape-string arguments ", "))
</span><span class='line'>                              "")))
</span><span class='line'>      (format "'%s%s'" task arguments-string)))
</span><span class='line'>  
</span><span class='line'>  (defun octomacs-rake-with-rvm (directory task &optional arguments)
</span><span class='line'>    "Run rake task TASK with specified ARGUMENTS in DIRECTORY using rvm"
</span><span class='line'>    (let* ((default-directory (file-name-as-directory (expand-file-name directory)))
</span><span class='line'>!          (rvmrc-path (rvm--rvmrc-locate directory))
</span><span class='line'>!          (rvmrc-info (if rvmrc-path (rvm--rvmrc-read-version rvmrc-path) nil))
</span><span class='line'>           (rvm-command (if rvmrc-info
</span><span class='line'>                            (concat "rvm " (mapconcat 'identity rvmrc-info "@") " do ")
</span><span class='line'>                          "")))
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じです。これでちゃんと<code>.rvmrc</code>やら<code>.ruby-version</code>やら<code>.ruby-gemset</code>やらを反映してくれます。<a href="https://github.com/jhelwig/octomacs/pull/2">pull-req投げてみました</a>。初pull-reqです。英語心配です。</p>

<p>俺、pull-reqとりこまれたら<code>rake gen_deploy</code>にも挑戦するんだ…</p>

<p>あ、因みにこの投稿は<code>init.el</code>に</p>

<pre><code>(setq octomacs-workdir-alist '(("default" . "~/Ruby/octopress")))
</code></pre>

<p>して<code>octomacs-new-post</code>から投稿してます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qiitaのユーザーヒアリングを受けてきました。]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/13/met-qiita-engineer/"/>
    <updated>2013-09-13T18:20:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/13/met-qiita-engineer</id>
    <content type="html"><![CDATA[<p>今日の夕方、Qiitaのユーザーヒアリングを受けたのでその報告です。</p>

<!-- more -->


<p>ユーザーヒアリングはQiitaがサービス向上のために「Qiitaアカウントを持っていてストックをするなど活動はしているが投稿をしてない人」を対象に「ねえ？なんで投稿しないの？ねえ、どうしてなの？Qiitaより良いサービスがあるの？そっか。私じゃだめなの？」って聞いてまわる活動です(違</p>

<p>場所は駒場キャンパスのイタリアントマトで、小西さんと高橋さん
<img src="http://KeenS.github.io/images/qiita-engineers.jpg" title="Qiita-engineers" alt="左が小西さん、右が高橋さん">
と色々お話させていただきました。二方とも気さくで話しやすく、ちょいちょい脱線しながらも「ブログあるしー」とか「これどうしたらいいんでしょうねとか書きこめないしー」とか答えてました。</p>

<p>一番大きかったのはバグ報告ができたのとqiita.elをメンテナンスしてほしいっていう要望を伝えれたところですかね。バグ伝えたときは割とマジになって詳細聞いてくれましたw</p>

<p>話を聞くに全社員5人だそうです。それで5つのプロダクトを回してるんだとか。大変そうですね。</p>

<p>あとは、記念品。
<img src="http://KeenS.github.io/images/cards.jpg" title="Cards-and-stackers" alt="いただいた名刺とステッカー">
名刺の色はEmacerが薄紫でVimmerが黒だそうです。面白い。</p>

<p>最後に他にQiitaのユーザーヒアリングの対象になりそうな人(プログラマだけど情報をアウトプットしてない人)が知り合いにいないかとかバイト募集してるんで興味ありそうな人いたら声掛けて下さいとか言われました。バイトは顧客開拓か、できそうならデータマイニングらへんになるそうです。<br/>
興味のある方いましたら是非どうぞ。</p>

<p>あとで左上のソーシャルのところにQiita加えます(今は画像作る時間がない</p>

<h2>2013/09/17追記</h2>

<p>Qiitaをソーシャルに加えました。やりかたは<a href="blog/2013/09/07/cookpad/">COOKPADの記事</a>参照。<br/>
画像はまーる書いてちょんなので簡単に作れると思いますが<a href="http://KeenS.github.io/images/social/qiita.png">こちら</a>です。御自由にお使い下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeBSD10でちょっとこけた]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/12/error-on-svn/"/>
    <updated>2013-09-12T23:21:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/12/error-on-svn</id>
    <content type="html"><![CDATA[<p>FreeBSD10をインストールしてたときにちょっとつまったところがあったのでメモ。</p>

<!-- more -->


<h2>(前回までのあらすじ)</h2>

<p>FreeBSD10をインストールしたkvmのイメージでFreeBSDのソースをコンパイルできなくなっていたのでκeenはイメージに最新のFreeBSDを上書きインストールすることを決意したのであった</p>

<h2>今回</h2>

<p><a href="https://pub.allbsd.org/FreeBSD-snapshots/">https://pub.allbsd.org/FreeBSD-snapshots/</a>から最新版isoをダウンロードして</p>

<pre><code>$ kvm -cdrom ~/Download/FreeBSD-10.0-HEAD-r255472-JPSNAP-i386-i386-disc1.iso -boot d -m 2048 -smp 3 FreeBSD10.img
</code></pre>

<p>でブート&amp;インストール。普通にインストーラに従って問題無し。<br/>
もう一度</p>

<pre><code>$ kvm -m 2048 -smp 3 FreeBSD10.img
</code></pre>

<p>でブート。<code>/usr/src</code>が空なのを確認して、最近標準添付になったsvnliteでソースをチェックアウト。</p>

<pre><code># cd /usr
# rmdir src
# svnlite co https://svn0.us-west.FreeBSD.org/base/head src
</code></pre>

<p>で、エラー。<br/>
内容は</p>

<blockquote><p>server sent a truncated http response body.</p></blockquote>

<p>不明。<code>svn(lite)</code>のエラーらしいことは分った。<code>https:</code>が悪い気がするので<code>http:</code>にしようかと思ったけど、ふとダメ元で以前はできなかった<code>svn:</code>のスキーマにしてみた。</p>

<pre><code># svnlite co svn://svn0.us-west.FreeBSD.org/base/head src
</code></pre>

<p>できた。なんだよ。</p>

<h3>蛇足</h3>

<p>このあと</p>

<pre><code># svnlite co svn://svn0.us-west.FreeBSD.org/ports/head ports
</code></pre>

<p>でportsもチェックアウトしましたよ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[COOKPADのアイコン]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/07/cookpad/"/>
    <updated>2013-09-07T19:09:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/07/cookpad</id>
    <content type="html"><![CDATA[<p>クックパッドにレシピ初投稿の記念として左上のソーシャルアイコンにクックパッドを追加しました。</p>

<!-- more -->


<p>もともとソーシャルアイコン自体今使ってるOctopressのテーマ、CleanPressにはないのですが、別のテーマからもらってきました。</p>

<p>加えた変更は<br/>
source/_includes/header.htmlに</p>

<pre><code>&lt;nav id="sub-nav"&gt;{%  include custom/social.html %}&lt;/nav&gt;&lt;br&gt;
</code></pre>

<p>を、<br/>
source/_includes/custom/social.htmlのdivの中に</p>

<pre><code>{%  if site.cookpad_user %}
&lt;a class="cookpad" href="http://cookpad.com/kitchen/3303629" title="COOKPAD"&gt;COOKPAD&lt;/a&gt;
{%  endif %}
</code></pre>

<p>を、<br/>
sass/parts/_header.scssの&amp;.githubとかが並んでるところに</p>

<pre><code>&amp;.cookpad{
    background: image-url('social/cookpad.png') center no-repeat #FF9933;
    border: 1px solid #FF9933;
        &amp;:hover{
            border: 1px solid darken(#FF9933, 10%);
        }
}
</code></pre>

<p>を、<br/>
_config.ymlに</p>

<pre><code>#COOKPAD
cookpad_user: your_ID
</code></pre>

<p>を加え、<br/>
source/images/social/に
<a href="http://KeenS.github.io/images/social/cookpad.png">この画像</a>をつっこみました。16x16なのでめっちゃちっちゃいです。</p>

<p>画像はクックパッドの公式のバナーのピクセル数を数えながら作ったのですが、アンチエイリアスのかけかたとか分らなかったので質はかなり低いです。
かといって公式のやつ勝手に改造はマズいでしょうし。</p>

<p>16x16で白い部分のみ、背景透過でだれか作って下さい←<br/>
因みに私の作った画像は自由にご使用下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redmineのインストール]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/05/install-redmine/"/>
    <updated>2013-09-05T16:35:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/05/install-redmine</id>
    <content type="html"><![CDATA[<p>私はバイトではプロジェクト管理に<a href="http://backlog.jp">Backlog</a>のサービスを利用してますが、同様のOSSに<a href="http://redmine.jp">Redmine</a>なるものがあると聞いて動かしてみたときのメモ。</p>

<!-- more -->


<p>以下、公式の引用。</p>

<blockquote><p>Redmineはオープンソースのプロジェクト管理ソフトウェアです。</p>

<p>プロジェクトのタスク管理、進捗管理、情報共有が行えます。SubversionやGitなどのバージョン管理システムとの連携機能も備えており、ソフトウェア開発やwebサイト制作などのITプロジェクトで特に威力を発揮します。</p></blockquote>

<p>Redmineの管理団体(？)が<a href="http://hosting.redmine.jp/">MyRedmine</a>というホスティングサービスを提供してたりしますが、今回はこれをローカルで動かします。</p>

<p><a href="http://redmine.jp/guide/RedmineInstall/">公式ドキュメント</a>を参考に作業していきます。</p>

<p>まずはダウンロード。現在の最新版は2.3.2だそうです。</p>

<pre><code>$cd ~/Ruby
$svn checkout http://svn.redmine.org/redmine/branches/2.3-stable redmine    
</code></pre>

<p>んで、グローバルの空間を汚したくないので新たにGemsetを作ります。本来ならbundler仕事なのですが、railsのバージョンとか仕組みの問題が面倒臭そうだったのでGemsetで管理。</p>

<pre><code>$rvm use --create 1.9.3@redmine
$cd redmine
$echo ruby-1.9.3-p448 &gt; .ruby-version
$echo redmine &gt; .ruby-gemset
</code></pre>

<p>これで~/Ruby/redmineにcdすると自動的にrvmが1.9.3@redmineに切り替えてくれます。<br/>
※注意<br/>
<code>.rvmrc</code>に<code>rvm use 1.9.3@redmine</code>と書いてたら怒られます。<code>.ruby-version</code>と<code>.ruby-gemset</code>がバージョン管理システムに依存しない新しい書き方だそうです。</p>

<p>データベースはデフォルトだとMySQLを使う設定になってますがこんなお試しにのためにMySQLを動かしたくないのでSQLiteに変更。</p>

<pre><code>$cp config/{database.yml.example, database.yml}
</code></pre>

<p>のあと、database.ymlのproductionの部分を以下のように変更。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sqlite3</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">db/redmine.sqlite3</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとは<code>bundle install</code>。(bundlerはインストールされてる前提です)</p>

<pre><code>$bundle install --without development test
</code></pre>

<p>すると…あれ？RMagickでコケる…。公式ドキュメントには <code>bundle</code>の<code>--without</code>に<code>rmagick</code>を加えろと書いてますが画像扱えないのは悔しいので色々調べた結果、</p>

<pre><code>$sudo apt-get install libmagic-dev libmagickwand-dev
</code></pre>

<p>で依存関係を満せるようです。これでようやく<code>bundle install</code>が通ります。</p>

<p>ここまできたらあとはドキュメント通り。</p>

<pre><code>$rake generate_secret_token
$RAILS_ENV=production rake db:migrate
$RAILS_ENV=production rake redmine:load_default_data
$rails s
</code></pre>

<p>…あれ？<code>rails s</code>でコケる。<br/>
これは自分がrailsに慣れてなかったのが問題のようで、正しくは</p>

<pre><code>$rails s -e production
</code></pre>

<p>だそうです。</p>

<pre><code>$RAILS_ENV=production rails s
</code></pre>

<p>としても同じ。これで<a href="http://localhost:3000">localhost:3000</a>にアクセスするとRedmineが開きます。</p>

<p><img src="http://KeenS.github.io/images/redmine-home.png" title="redmine-home" alt="Redmineのホーム画面"></p>

<p>因みにAdminのID、パスワードはadminだそうです。</p>

<p>データベースの設定のexample部分にjenkinsとかいう文字列があったけど連携できるのかなぁ。要調査。</p>

<hr />

<h3>補足</h3>

<p>デフォルトのWEBrickだと遅いのでGemfileに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;thin&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>を加えて、<code>bundle install</code>し直すと自動的にThinを使ってくれるそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PDFユーティリティ]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/03/pdftk/"/>
    <updated>2013-09-03T23:34:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/03/pdftk</id>
    <content type="html"><![CDATA[<p>小ネタ。コマンドラインからPDFを編集した話の備忘録。</p>

<!-- more -->


<p><a href="http://www.seeds-std.co.jp/seedsblog/181.html">こちら</a>
に紹介されてるように、pdftkというツールである程度のことはできる。</p>

<pre><code>$sudo apt-get install pdftk
</code></pre>

<p>でインストール可能。<br/>
今回は</p>

<pre><code>$for pdf in *.pdf
&gt;&gt;do
&gt;&gt;  pdftk $pdf cat 1-endR output `basename $pdf .pdf`_rot.pdf
&gt;&gt;done
</code></pre>

<p>で全てのPDFの全てのページを右周りに回転し、名前に_rotを付けて保存した。</p>

<pre><code>pdftk *.pdf cat output all.pdf
</code></pre>

<p>とかで結合なんかもできて便利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Tutorial]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/03/rails-tutorial/"/>
    <updated>2013-09-03T22:15:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/03/rails-tutorial</id>
    <content type="html"><![CDATA[<p>夜中にコーヒー飲むと眠れなくなりますね。昨晩もコーヒー飲んだら朝まで眠れず、寝たのが朝8時半、起きたのが16時でした。明日提出のレポート終ってないのに…</p>

<p>さて、かなり良いRuby on Railsのチュートリアルを見付けたので紹介します。<br/>
<a href="http://railstutorial.jp">Ruby on Rails チュートリアル：実例を使ってRailsを学ぼう</a></p>

<!-- more -->


<p>これはただのrailsの紹介ではなくてgitだとかherokuだとかを使ってかなり実践的にアプリケーションを作ていくものです。1, 2章で軽くrailsを動かしてみたあと、3章以降でテスト駆動開発でアプリケーションを構築していきます。</p>

<p>このテスト駆動開発の環境がすばらしいのなんのって、最初動かしたとき思わずニヤリとしました。しかも何故か(何も設定してないのに)Emacsのモードバーの色がテストの結果に応じて変わるという。<br/>
マウス操作もキーストロークも無くコードの正しさを教えてくれるのは非常に快適でした。</p>

<p>文体も訳本にありがちな片言の日本語ではなく読み易いですし、Ruby自体の解説もあり、「Scaffoldを使えば簡単にできるんだぜ~」じゃなくてちゃんとMVCの関係とかを解説して身に付いた上で「今後はScaffoldでより手軽に作れるよ」なのでRailsに限らずWeb開発のチュートリアルとして秀逸でした。</p>

<p>私もまだ5章までしか進めてないのですが是非一度試してみて下さい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Githubの変更を追う]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/02/rss-of-github/"/>
    <updated>2013-09-02T00:09:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/02/rss-of-github</id>
    <content type="html"><![CDATA[<p>こんばんは。κeenです。普段、Github上で最新のソースを追ってるプロジェクトは
こまめにgit pullすることで更新を確認してたのですが、別の方法があることに気づきました。</p>

<!-- more -->


<p>単純にWatchという便利な機能もあるのですが、RSSでソースを追うこともできるようです。
RSSのアイコンが見当らなかったのでないものと思ってましたがちゃんとあるんですね。</p>

<p>RSSのAPIはgithub.com/ORG/PROJECT/commits/BRANCH.atomになります。<br/>
たとえばMirahのmasterブランチの最新のコミットを受け取りたかったら、<br/>
<a href="https://github.com/mirah/mirah/commits/master.atom  ">https://github.com/mirah/mirah/commits/master.atom  </a>
になります。試してませんがcommitsのところをissuとかにすればissuを追えるのかもしれません。</p>

<p>watchとの違いは、watchはwikiの変更やissuなど全てを追うところと、通知がメール and/or github上での通知なところですね。</p>

<p>メールじゃなくてgithubの通知でもなくてRSSで受け取りたい方は試してみてはいかがでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブログ開設しました]]></title>
    <link href="http://KeenS.github.io/blog/2013/09/01/first-post/"/>
    <updated>2013-09-01T12:58:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/09/01/first-post</id>
    <content type="html"><![CDATA[<p>はじめまして。κeenです。今までLispでblogエンジンを作って
blogを開設したいと思いつつも時間がなかったりWifiアダプタ失くしたりして
結局あきらめ、github+octopressでblog作ることにしました。</p>

<!-- more -->


<p>octopress、テーマも充実してて非常に便利なのですが、私Markdown書いたことないんですね…<br/>
とりあえずMarkdownの勉強がてらblogを書くことになりそうです。</p>

<p>記事の内容としてはブログタイトルにあるように私がRuby, Emacs, Lispその他を扱ってるときに
はまったことなどをメモしていく感じになると思います。主にTwitterで活動してるので @blackenedgold
を監視してるといいかもしれません。</p>

<p>では次回以降Markdownを勉強して出直してきます</p>
]]></content>
  </entry>
  
</feed>
