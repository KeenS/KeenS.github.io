<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-08-21T13:36:30+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[isucon夏期講習2014に参加してきた]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/21/isucon-summer-2014/"/>
    <updated>2014-08-21T12:16:03+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/21/isucon-summer-2014</id>
    <content type="html"><![CDATA[<p>レポート締切間近のκeenです。ISUCON夏期講習2014に参加してきたのでレポートです。とはいっても去年の夏期講習もISUCONも参加してるので目新しいことはないんですが。主な目的はメンバー集めです。</p>

<!-- more -->


<h1>流れ</h1>

<ul>
<li>LINEの採用情報:
 ISUCONがきっかけでLINEに内定貰った人がいるよう。因みに自分はLINE落ちた。</li>
<li><p>ISUCONの概要の説明:
うん。知ってる。</p>

<p> <iframe src="//www.slideshare.net/slideshow/embed_code/38160090" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/tagomoris/isucon2014" title="ISUCONの話(夏期講習2014)" target="_blank">ISUCONの話(夏期講習2014)</a> </strong> from <strong><a href="http://www.slideshare.net/tagomoris" target="_blank">SATOSHI TAGOMORI</a></strong> </div></p></li>
<li>過去問を解く:
 去年の予選の問題だった。うん。知ってる。</li>
<li>パフォーマンス向上に関しての解説:
 これもISUCON反省会とかそんなんでkazeburoさんが話してた気がする</li>
</ul>


<iframe src="//www.slideshare.net/slideshow/embed_code/38162132" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/kazeburo/isucon-summerclass2014action1" title=" Webアプリケーションの パフォーマンス向上のコツ 概要編" target="_blank"> Webアプリケーションの パフォーマンス向上のコツ 概要編</a> </strong> from <strong><a href="http://www.slideshare.net/kazeburo" target="_blank">Masahiro Nagano</a></strong> </div></p>

<iframe src="//www.slideshare.net/slideshow/embed_code/38163927" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/kazeburo/isucon-summerclass2014action2" title=" Webアプリケーションの パフォーマンス向上のコツ 実践編" target="_blank"> Webアプリケーションの パフォーマンス向上のコツ 実践編</a> </strong> from <strong><a href="http://www.slideshare.net/kazeburo" target="_blank">Masahiro Nagano</a></strong> </div></p>

<ul>
<li>morisさんによるライブチューニング:
 失敗してた</li>
<li>懇親会</li>
</ul>


<h1>自分の作業</h1>

<p>前年度参加者がハイパフォーマンス叩き出して俺TUEEEEEEしても意味がないので次回のISUCONで試したいことを試して地雷踏むことにした。</p>

<h2>sshのRSAAuthenticationの設定</h2>

<p>何故かハマる。</p>

<p>id_rsa.pubをauthorized_keysに突っ込んでUserPAMの設定まで確認して<code>sudo service sshd restart</code>したのにパスワードを求められる。確か色々確認してもう一回sshdリスタートしたら通った気がする。原因不明。</p>

<p>そういや</p>

<pre><code>curl https://github.com/KeenS.keys &gt;&gt; .ssh/authorized_keys
</code></pre>

<p>のワンライナー使えば良かった。</p>

<h2>アプリケーションをgitで管理する</h2>

<p>やらかす。</p>

<p>最初isucon/webapp/ruby/だけをgitで管理した。それだと足りないので次にisucon/全体をgitで管理しようとしたらisucon/webapp/ruby/がサブモジュール扱いされて困った。サブモジュール分かんね。色々試すもついぞisucon/のgitでisucon/webapp/ruby/を管理出来なかった。結局.git吹っ飛ばして再度<code>git init .</code>した。これは次回までの宿題ですね。</p>

<p>あと地味にisucon/init.shが.gitignoreされてて困った。</p>

<h2>サーバーマシンをgitサーバーにする</h2>

<p>前回はbitbucketで管理してたがしばらく使わない内にパスワードを忘れてしまったのと(もしかしたら以前のバイト先のメールアドレスで登録してた?)pingが400msのbitbucketサーバー使うのに気が引けたのでサーバーマシンをgitサーバーにしようと決意。ハマる。</p>

<p>gitのマニュアルを適当に読んでたのが悪かった。ローカルで<code>git clone iscon@machine:isucon</code>してもなんか怒られてしばらく悩む。正解は、先ずリモートで<code>git clone --bare isucon isucon.git</code>してから<code>git clone iscon@machine:isucon.git</code>だった。</p>

<p>次にリモートで</p>

<pre><code>mv isucon isucon.back
git clone isucon.git isucon
</code></pre>

<p>したら.gitignoreとかその辺の関係でベンチマークやら何やらが動かなくなる。自分でベンチマークをビルドする羽目に。</p>

<p>新たにcloneせずに</p>

<pre><code>cd isucon
git remote add origin ../isucon.git
</code></pre>

<p>すれば良かったのだろうか。要調査。</p>

<h2>細かなチューニング</h2>

<p>markdownのバックエンドをrdiscountにしたり。これもGemfileで困る。結局あれはローカルで<code>bundle install --no-deploy</code>してから<code>git push</code>したら良かったのだろうか。これも宿題。</p>

<h2>インデックスを張る</h2>

<p>isucon/config/init.sqlに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">users_idx_username</span> <span class="k">ON</span> <span class="n">users</span> <span class="p">(</span><span class="n">username</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">memos_idx_id_is_private_created_at_id</span> <span class="k">ON</span> <span class="n">memos</span> <span class="p">(</span><span class="n">is_private</span><span class="p">,</span> <span class="n">created_at</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">memos_idx_id_user_created_at</span> <span class="k">ON</span> <span class="n">memos</span> <span class="p">(</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">,</span> <span class="n">created_at</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>を書いてisucon/init.shに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>mysql -u isu-user isucon &lt; ./config/init.sql &gt; log 2&gt;<span class="p">&amp;</span>1
</span><span class='line'><span class="c">#データ投入後になにかしらの作業をしたい場合はこのシェルスクリプトに書いてください</span>
</span></code></pre></td></tr></table></div></figure>


<p>を書くもエラーが出る。結局絶対パスで書いて2〜3回実行したら通ったのでパスの問題だったかと。しかし1回で通らなかったのは謎。</p>

<p>あとデバッグ大変だった。ベンチマークツールさん、初期化スクリプトでエラー出したらエラーログ吐いて下さいよ。</p>

<p>そういやリダイレクト先のlogファイルは結局行方不明のままだった。</p>

<h2>N+1クエリの解決</h2>

<p>SQL書けなすぎてJOINとかFORCE INDEX書くのに戸惑った。一々書いてはmysqlのコンソールに貼ってエラーメッセージ読んでってやってた。すんなりやりたい。</p>

<h2>リバースプロキシをNginXにする</h2>

<p>まずは</p>

<pre><code>sudo yum install nginx
mv /etc/nginx/nginx.conf ./config/
git add ./config/nginx.conf
git commit -m 'add nignx.conf'
sudo ln -s /home/isu-user/isucon/config/nginx.conf /etc/nginx/
sudo service httpd stop
sudo service nginx start
</code></pre>

<p>だったかな?最初<code>ln</code>に絶対パスを使ってなくてエラー出たりしたけど。</p>

<p>んで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>location / <span class="o">{</span>
</span><span class='line'>   proxy_pass   http://localhost:5000<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>だけ書くも<code>404 http://localhost:5000/なんちゃら Not Found</code>が出る。そういや、とプロキシヘッダを追加。それでも画像などはとれない。多分rootをいじらなかったのが原因。次の手で静的ファイルをNginXでキャッシュするように設定したら直った。</p>

<p>あまり記録残してないけどこの辺で2900点くらいで首位だった気がする。因みに初期値は1700くらい。</p>

<h2>Varnishを噛ませる</h2>

<p>前回、ベンチマークツールのチェックが甘くてVarnishを使うだけでスコアが跳ね上がるというのを知っていたのでちょっとチート臭いけどどうせ本番でも必要だしということで練習もかねて使う。</p>

<pre><code>sudo yum install varnish
mv /etc/sysconfig/varnish ./config
git add ./config/varnish
git commit -m 'varnish'
sudo ln -s /home/isu-user/isucon/config/varnish /etc/sysconfig/varnish
mv /etc/varnish/default.vcl ./config
git add ./config/default.vcl
git commit -m 'default.vcl'
sudo ln -s /home/isu-user/isucon/config/default.vcl /etc/varnish/default.vcl
</code></pre>

<p>的なことをやった。あとはvarnishを80番にしてバックエンドを4000番にして、NginXを4000番にした。それだけでスコアが14000くらいになった。varinish簡単だし優秀。</p>

<h2>my.cnfのチューニング</h2>

<p>もはやvarnishが仕事してる所為でボトルネックはベンチマークツールなのだけど一応。</p>

<p>とはいってもinnodb_buffer_pool_sizeを2GBから6GBにしただけ。因みに与えられたマシンのメモリは8GB。スコアは一応微増。でもまあ誤差の範囲内。</p>

<p>この辺でタイムオーバー。</p>

<h1>懇親会</h1>

<p>目の前の人がClojure推しの人でだいたいそんな話してた。</p>

<p>チームメンバー捜しは席の周りの人が当日出れない人ばかりだったのと席替えがなかったので失敗に終わる。誰か学生枠で一緒に出ましょうよ。学生賞目指しましょうよ。</p>

<h1>やり残したこととか反省とか</h1>

<ul>
<li>ローカルで変更→commit→push→リモートでpull→再起動→ベンチマークのワークフローが結構面倒だったしpull忘れ、再起動忘れがあったのでpushより後を自動化したい。出来ればgitのコミットログとベンチマークのスコアをペアで保存しながら。hook使ったら割と出来そうな気はするんだけどなあ。</li>
<li>折角サーバー与えられたんだしMySQLのslow logを吐かせるの一回練習しとけば良かった。</li>
<li>結局capistrano使わなかった。複数台構成なら必須だし復習しておきたかったのに。</li>
<li>メンバー捜したかった。</li>
</ul>


<p>マジでメンバー捜してます。学生枠で出たい人@blackenedgoldまでお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs便利機能/Tips紹介]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/13/emacs-utility-functions/"/>
    <updated>2014-08-13T23:15:37+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/13/emacs-utility-functions</id>
    <content type="html"><![CDATA[<p>κeenです。このブログのアクセスログを見てるとEmacsの記事が好評なようなのでここは一つ私の知ってる便利機能を全列挙してみますね。</p>

<!-- more -->


<p>どの辺から常識でどの辺からTipsかは私の主観です。だいたいるびきちさんの本に載ってるのは常識扱いです。</p>

<p>※<code>-!-</code>でカーソル位置、<code>-¡-</code>でマーク位置を表すものとします。<br/>
※私はEmacsのtrunkをビルドして使ってるので最新のリリース版のEmacsにも含まれない機能もあるかもしれません。</p>

<h1>改行/インデント系</h1>

<h2><code>C-m</code> <code>RET</code> <code>C-j</code> <code>C-o</code></h2>

<p>最初の頃は混乱してました。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> key       </th>
<th align="left"> lisp function</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> C-m = RET </td>
<td align="left"> <code>newline</code></td>
</tr>
<tr>
<td></td>
<td align="left"> C-j       </td>
<td align="left"> <code>newline-and-indent</code></td>
</tr>
<tr>
<td></td>
<td align="left"> C-o       </td>
<td align="left"> <code>open-line</code></td>
</tr>
</tbody>
</table>


<p>です。<code>C-m</code>と<code>C-o</code>の違いはカーソルが現在行に残るか残らないかです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaa-!-aaa</span></code></pre></td></tr></table></div></figure>


<p>↓ <code>C-m</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaa
</span><span class='line'>-!-aaa</span></code></pre></td></tr></table></div></figure>


<p>ですが、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaa-!-aaa</span></code></pre></td></tr></table></div></figure>


<p>↓ <code>C-o</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaa-!-
</span><span class='line'>aaa</span></code></pre></td></tr></table></div></figure>


<p>です。</p>

<p><code>C-o</code>の改行後にインデントする版を捜したのですが<code>C-M-o (split-line)</code>という近いコマンドはあるもののまさにというのはありませんでした。</p>

<p>※trunkではデフォルトで<code>electric-indent-mode</code>がonになってるので<code>C-m/RET</code>と<code>C-j</code>が入れ替わります。<br/>
※現在行と改行した先の行両方をインデントする<code>indent-then-newline-and-indent</code>という関数もあります。</p>

<h2><code>M-^</code>(<code>delete-indentation</code>)</h2>

<p>直感的には<code>newline-and-indent</code>の逆関数です。今の行を上の行にくっつけます。そのとき邪魔になるインデントは取り除いてくれます。<code>M-- M-^</code>とすると下の行を今の行にくっつけてくれます。</p>

<h2><code>C-M-j</code>(<code>indent-new-comment-line</code>)</h2>

<p>コメント内で使う<code>C-j</code>です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="c1">;;; This is a comment-!-</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓ <code>C-M-j</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="c1">;;; This is a comment</span>
</span><span class='line'><span class="c1">;;; -!-</span>
</span></code></pre></td></tr></table></div></figure>


<p>です。</p>

<h2><code>M-m</code>(<code>back-to-indentation</code>)</h2>

<p>現在行の空白文字でない最初の文字に移動します。viでいう<code>^</code>です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">aaa-!-bbb</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">-!-aaabbb</span>
</span></code></pre></td></tr></table></div></figure>


<p>です。</p>

<h2><code>electric-indent-mode</code></h2>

<p>さっきちらっと触れました。<code>C-m</code>が<code>newline-and-indent</code>になって<code>C-j</code>が<code>newline</code>になるモードです。</p>

<h1>削除/kill-ring系</h1>

<h2><code>&lt;C-S-backspace&gt;</code>(<code>kill-whole-line</code>)</h2>

<p>おなじみ <code>C-k</code>(<code>kill-line</code>)は現在位置から行末までを削除しますが、それだとぬるいといって<code>C-k</code>で現在行をまるごと削除する設定(<code>(setq kill-whole-line t)</code>)してる人もいますが、実は<code>&lt;C-S-backspace&gt;</code>で可能なのでした。鍛えられた左手の小指の先と腹でCaps LockとShiftを同時押しすれば難易度もそんなに高くない！</p>

<h2><code>C-M-w</code>(<code>append-next-kill</code>)</h2>

<p>nextのkillコマンドでkillした内容をkill-ringにappendします。チュートリアルにも載ってた気がするんですがすっかり忘れてました。</p>

<h1>編集系</h1>

<h2><code>electric-pair-mode</code></h2>

<p>開き括弧を挿入すると自動で閉じ括弧を挿入してくれます。リージョンを選択して括弧を挿入するとリージョンを囲むように括弧を挿入してくれます。これ大事。挿入後のカーソルは開き/閉じのどちらを入力したかに依ります。まあ、想像付きますね。地味に鉤括弧にも対応。</p>

<p><code>ruby-mode</code>はこの挙動を上書きしてるので殴り殺したくなります。</p>

<h2><code>subword-mode</code></h2>

<p>私はキャメルケースが嫌いという超個人的理由で使ってないのですが、キャメルケースがコーディング規約な言語を使う人には便利でしょう。キャメルケースの1こぶを1単語と見做します。例えば&#8221;SubWord&#8221;は&#8221;Sub&#8221; &ldquo;Word&#8221;と認識されます。</p>

<pre><code>-!-SubWord 
</code></pre>

<p>で<code>M-f</code>(<code>forward-word</code>)すると通常は</p>

<pre><code>SubWord-!-
</code></pre>

<p>となりますが<code>subword-mode</code>内だと</p>

<pre><code>Sub-!-Word
</code></pre>

<p>となります。その他word系の操作が全部こぶ単位になります。</p>

<p>因みにモードラインの表示が&#8221;, &ldquo;と、微妙な感じです。</p>

<h2><code>superword-mode</code></h2>

<p><code>subword-mode</code>の逆です。Lispの&#8221;this-is-a-symbol&#8221;といったシンボルが&#8221;this&#8221; &ldquo;-is&rdquo; &ldquo;-a&rdquo; &ldquo;-symbol&#8221;と認識されていたのが&#8221;this-is-a-symbol&#8221;と認識されます。</p>

<p>因みにモードラインの表示は &ldquo;$^2$&rdquo; です。</p>

<h2><code>C-x C-u</code>(<code>upcase-region</code>)</h2>

<p>リージョンを選択した状態で使うとリージョンを大文字にしてくれます。
これを使ったTipsです。</p>

<p>シチュエーションは全部大文字の単語(定数とかで良く出てくる)を入力したいが、Caps Lockは既にCtrlにしてあるので使えないって状態です。<br/>
先ず、<code>C-@</code>します。そして目的の単語を小文字のまま入力します。そして<code>C-x C-u</code>します。すると全て大文字になります。便利。<code>C-x C-l</code>(<code>lowercase-region</code>)でも同じこと出来ますが、使いたいシチュエーションは少ないでしょう。</p>

<p>尚、このコマンドはデフォルトで無効になっているので普段使いするには一回使ってダイアログを出さないようにするか<code>init.el</code>に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;upcase-region</span> <span class="ss">&#39;disabled</span> <span class="no">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>を追加しておく必要があります。</p>

<h2><code>M-- M-u</code>(<code>upcase-word</code>)</h2>

<p><code>upcase-word</code>はカーソルの次の単語を大文字にしますが、負の前置引数を与えると直前の単語を大文字にしてくれます。ちょっと押し辛いですが一応覚えておきましょう。<code>M-- M-l</code>(<code>capitalize-word</code>)もそれなりに使えるかもしれません。</p>

<h1>complete系</h1>

<p><code>icomplete-mode</code>するとミニバッファでの入力時に補完候補が随時表示されますが、実はあの候補に色々操作出来るのです。</p>

<h2><code>M-p</code> / <code>M-n</code></h2>

<p>ヒストリを辿れます</p>

<h2><code>C-j</code></h2>

<p>先頭の候補に決定します。</p>

<h2><code>C-,</code> / <code>C-.</code></h2>

<p>候補を後/先に送ります。キーボードを見て&lt; / &gt;を押せば良いので簡単ですね。</p>

<h2><code>C-M-i</code></h2>

<p>先頭の候補を補完します。続けて<code>C-M-i</code>すると順次次候補になります。</p>

<h2><code>C-r</code></h2>

<p>ヒストリを検索します。</p>

<h2><code>C-s</code></h2>

<p>ミニバッファ内を前方検索します。あまり需要なさそうですね。</p>

<h1>isearch</h1>

<p>isearchはカーソルをバッファに残したままミニバッファを編集するのでキーバインドが特殊です。</p>

<h2><code>C-s</code>(<code>isearch-repeat-forward</code>)</h2>

<p>検索文字列が空の状態で<code>C-s</code>すると前回の検索文字列で検索します。</p>

<h2><code>C-j</code>(<code>isearch-printing-char</code>)</h2>

<p>RETが決定に使われてるので改行はC-jになります。</p>

<h2><code>C-w</code>(<code>isearch-yank-word-or-char</code>)</h2>

<p>カーソル下の単語又は文字を検索文字列にします。連続して押すと範囲を広げます。</p>

<h2><code>C-M-w</code>(<code>isearch-del-char</code>)</h2>

<p>1文字削除します。<code>DEL</code>(<code>isearch-delete-char</code>)とは違って削除してもバッファのポイントは戻りません。</p>

<h2><code>C-M-y</code>(<code>isearch-yank-char</code>)</h2>

<p>カーソル下の文字を検索文字列に足します。</p>

<h2><code>M-s C-e</code>(<code>isearch-yank-line</code>)</h2>

<p>カーソルから行末までを検索文字列にします。</p>

<h2><code>M-s</code>(<code>isearch-toggle-</code>)系</h2>

<p>isearchには実は文字列検索だけでなく、さまざまな検索方法があります。
<code>M-s _</code>(<code>isearch-toggle-symbol</code>)、<code>M-s c</code>(<code>isearch-toggle-case-fold</code>)、<code>M-s r</code>(<code>isearch-toggle-regexp</code>)、<code>M-s w</code>(<code>isearch-toggle-word</code>)、あたりを覚えておくと良いでしょう。</p>

<h1>バッファ/ウィンドウ系</h1>

<h2>split-threshold</h2>

<p>Emacsはデフォルトの状態では何かしらのウィンドウを分割するアクション(e.g. <code>list-buffers</code>)でウィンドウを上下に分割します。しかしワイドディスプレイを使っていると左右に分割して欲しいものです。そこで、この設定です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">split-height-threshold</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">split-width-threshold</span> <span class="mi">100</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>この設定で、幅が100桁以上なら左右、100桁未満なら上下に分割するようになります。100という数字は私が試行錯誤して出した最適解です。<code>split-height-threshold</code>と<code>split-width-threshold</code>を同時に設定したら先に<code>split-height-threshold</code>が判定されるようです。</p>

<h2><code>C-x 4</code>(<code>-other-window</code>)系</h2>

<p>ウィンドウを分割して隣のウィンドウに別のファイルを開きたい、あるいは既に分割してある隣のウィンドウに別のバッファを持ってきたいといったときに使うのが<code>C-x 4</code>(<code>-other-window</code>)系のコマンドです。<code>C-x 4 C-f</code>(<code>find-file-other-window</code>)、<code>C-x 4 b</code>(<code>switch-to-buffer-other-window</code>)、<code>C-x 4 0</code>(<code>kill-buffer-and-window</code>)あたりを覚えておけば良いでしょう。詳しくは<code>C-x 4 C-h</code>すると見れます。</p>

<p>似たようなのに、<code>C-x 5</code>(<code>-other-frame</code>)系のコマンドがありますが、私はEmacsのフレームを2つ以上出したいという状況に遭遇したことがないので省略します。</p>

<h2><code>find-alternate-file</code></h2>

<p>ほぼ<code>find-file</code>と同じ挙動ですが、現在のバッファをkillしてから新たなファイルを開きます。あるファイルを開こうとして間違ったファイルを開いてしまったときに使います(バッファの内容が空なので間違ったことが直ぐ分かる)。地味に便利なのですがデフォルトでキーが割り当てられていません。<code>C-x C-a</code>あたりが妥当でしょうか。</p>

<h1>rectangle(矩形選択)系</h1>

<p>最近機能が強化されてるrectangle系です。プリフィクスが<code>C-x r</code>と押し辛いのが難点ですが、使用頻度が高い訳ではないのでまあ妥当でしょう。</p>

<p>region-rectangleはカーソルとマークで成す長方形を範囲とします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">ab-!-cdefg</span>
</span><span class='line'><span class="nv">hijklmn</span>
</span><span class='line'><span class="nv">opqrs-</span><span class="err">¡</span><span class="nv">-tu</span>
</span></code></pre></td></tr></table></div></figure>


<p>のとき、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">cde</span>
</span><span class='line'><span class="nv">jkl</span>
</span><span class='line'><span class="nv">qrs</span>
</span></code></pre></td></tr></table></div></figure>


<p>がregion-rectangleに入ります。</p>

<p>しかしこれだと分り辛いものです。そこで、最近<code>C-x SPC</code>でregion-rectangleを視覚表示出来るようになりました。るびきちさんの本に載ってる<code>sense-region</code>に近いです。</p>

<h2><code>C-x r k</code>(<code>kill-rectangle</code>) / <code>C-x r d</code>(<code>delete-rectangle</code>) / <code>C-x r M-w</code>(<code>copy-rectangle-as-kill</code>)</h2>

<p>名前のままですね。<code>kill-rectangle</code>や<code>copy-rectangle-as-kill</code>が保存するkill-ringは通常のkill-ringとは異なります。</p>

<p>region-rectangleを視覚表示した状態で<code>C-w</code>すると<code>kill-rectangle</code>になるようです(他のコマンドは未確認)</p>

<h2><code>C-x r y</code>(<code>yank-rectangle</code>)</h2>

<p><code>kill-rectangle</code>や<code>copy-rectangle-as-kill</code>が保存したものを吐きます。どのように挿入されるかというと、<br/>
rectangleのkill-ringが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">cde</span>
</span><span class='line'><span class="nv">jkl</span>
</span><span class='line'><span class="nv">qrs</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、バッファが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">-!-foo</span>
</span><span class='line'><span class="nv">bar</span>
</span><span class='line'><span class="nv">baz</span>
</span></code></pre></td></tr></table></div></figure>


<p>のとき、<code>C-x r y</code>すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">cdefoo</span>
</span><span class='line'><span class="nv">jklbar</span>
</span><span class='line'><span class="nv">qrs-!-baz</span>
</span></code></pre></td></tr></table></div></figure>


<p>となります。</p>

<h2><code>C-x r t</code>(<code>string-rectangle</code>)</h2>

<p>rectangle-regionを文字列で置換します。ちょっと実用的な例を出しましょうかね。</p>

<p>バッファが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">pic_</span><span class="o">-</span><span class="err">¡</span><span class="o">-</span><span class="n">list_first</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="n">pic_list_second</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="n">pic_list</span><span class="o">-!-</span><span class="n">_third</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>で<code>C-x r t RET vector</code>すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">pic_vector_first</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="n">pic_vector_second</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="n">pic_vector_third</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>となります。最近プレビュー機能が入ったので入力しながらリアルタイムでバッファが書き換わります。最小設定主義のemacsにしては珍しい変更ですね。</p>

<p>尚、幅0のregion-rectangleに使うとプリフィクスを付けられることも覚えておきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">-</span><span class="err">¡</span><span class="o">-</span><span class="n">This</span> <span class="n">sentence</span> <span class="n">is</span>
</span><span class='line'><span class="o">-!-</span><span class="n">a</span> <span class="n">quotation</span>
</span></code></pre></td></tr></table></div></figure>


<p>に<code>C-x r t RET &gt;</code>すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">&gt;</span> <span class="n">This</span> <span class="n">sentence</span> <span class="n">is</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">a</span> <span class="n">quotation</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>と出来ます。</p>

<h1>register系</h1>

<p>register系も<code>C-x r</code>のブリフィクスを持ちます。非常に高機能なのに押し辛く、rectangleと紛らわしいキーバインドなのは残念です。</p>

<p>registerの概念は分り辛いのですが、「何でも保存出来る箱」で、しかも「キー1つにつき箱一つ」です。viの名前付きバッファと似ていますが何でも保存出来る点で異なります。</p>

<p>それぞれの機能を見てちょっと自分で試してみて理解して下さい。</p>

<h2><code>C-x r SPC</code>(<code>point-to-register</code>)</h2>

<p>レジスタにポイントを登録します。<code>C-x r C-SPC</code>でも<code>C-x r C-@</code>でも同じです。</p>

<p><code>C-x r SPC</code>すると&#8221;Point to Register: &ldquo;とプロンプトが出るので、現在のポイントを登録させたいレジスタを選びます。レジスタを選ぶというのは好きなキーを押せばよいです。私は考えるのが面倒なのでaから順番に使っていってます。</p>

<p>これだけだと分かりにくいので次のコマンドも参考にして下さい。</p>

<h2><code>C-x r j</code>(<code>jump-to-register</code>)</h2>

<p><code>point-to-register</code>でレジスタに登録したポイントに飛びます。例えばaレジスタにポイントを登録したなら<code>C-x r j RET a</code>でそこに飛べます。最近、現在登録されてるレジスタ一覧が出るようになったので然程迷わないかと思います。</p>

<h2><code>C-x r x</code>(<code>copy-to-register</code>)</h2>

<p>レジスタに選択範囲の文字列を登録します。<code>C-x r s</code>でも同じです。</p>

<p>rectangleと同じプリフィクスを使っているがために非常に覚え辛いキーバインドになってしまっています。しかもkill-ringとの差別化がイマイチ分からないので需要なさそうですね。</p>

<h2><code>C-x r r</code>(<code>copy-rectangle-to-register</code>)</h2>

<p>region-rectangleをレジスタに登録します。</p>

<h2><code>C-x r i</code>(<code>insert-register</code>)</h2>

<p>レジスタに登録した文字列/rectangle/数字をバッファに挿入します。<code>C-x r g</code>でも同じです。</p>

<p>ポイントを挿入しようとすると数字が入るようです(ポイントは内部的には数字)。</p>

<h2><code>C-x r n</code>(<code>number-to-register</code>)</h2>

<p>レジスタに数字を登録します。登録した数字は<code>C-x r +</code>(<code>increment-regiser</code>)で増やしたり(負の前置引数を与えれば減らすことも可能)<code>insert-register</code>でバッファに挿入することも可能。キーボードマクロなんかで役に立つのかな？</p>

<h2><code>C-x r w</code>(<code>window-configuration-to-register</code>)</h2>

<p>現在のフレームのwindow-configuration(ウィンドウの分割や表示されるバッファ)をレジスタに登録します。復元は<code>C-x r j</code>(<code>jump-to-register</code>)です。</p>

<p>同様の機能を提供するために数々のプラグインが作られてきましたが標準で提供されることになりました。</p>

<p>これと次の<code>frameset-to-register</code>は最近入った機能だった気がします。</p>

<h2><code>C-x r f</code>(<code>frameset-to-register</code>)</h2>

<p>frameset(フレームの数や位置、サイズ、そしてそれぞれのフレームのwindow-configuration)をレジスタに登録します。復元は<code>C-x r j</code>(<code>jump-to-register</code>)です。</p>

<h2>蛇足</h2>

<p>キーは割り当てられてませんがキーボードマクロの保存/実行やレジスタにappend/prependするコマンドもあるようです。</p>

<p>同じ<code>C-x r</code>のプリフィクスの機能にブックマークがありますが、るびきちさんの本に載ってるので割愛します。</p>

<h1>vc(バージョン管理)系</h1>

<p>詳しい使い方は多数の記事があると思うのでそちらに任せるとして、よく使うものを紹介します。尚、るびきちさんの本の頃からは大分進化してるのでvcに関しては参考にしない方が良いかと思います。例えば<code>git init</code>相当をするコマンド(<code>vc-create-repo</code>)は追加されてます。その他mergeやpull/pushなども。</p>

<p>各vcsの対応状況は</p>

<blockquote><p>;; Supported version-control systems presently include CVS, RCS, GNU<br/>
;; Arch, Subversion, Bzr, Git, Mercurial, Monotone and SCCS<br/>
;; (or its free replacement, CSSC).</p></blockquote>

<p>とあります。かなり多いですね。というかこんなにvcsあったんですね。</p>

<p>私が最近gitしか使ってないので他のvcsでどうなるかは分かりません。一応vc.el自体vcsの差異を吸収するものなのですが、vcs固有の挙動もあるのです。</p>

<h2><code>C-x v =</code>(<code>vc-diff</code>)</h2>

<p><code>git diff &lt;バッファのファイル&gt;</code>相当です。大体、しばらく作業してそろそろコミットするかーって時に使います。表示されるバッファはdiff-modeになっているのでdiffの部分でRETすると変更箇所にジャンプ出来ます。</p>

<h2><code>C-x v l</code>(<code>vc-print-log</code>) / <code>C-x v L</code>(<code>vc-root-log</code>)</h2>

<p><code>C-x v l</code>(<code>vc-print-log</code>) で現在ファイルの、 <code>C-x v L</code>(<code>vc-root-log</code>) でバージョン管理下全体のログ(コミットグラフ)を見れます。TABでログ間を移動出来たりRETでログを展開したりDでそのログのdiffを見たり色々なことが出来ます。diffを表示させたら勿論RETで変更箇所に飛べます。変更履歴を追うときは圧倒的に便利。</p>

<p>私もそこまで深追いしてないのでlogバッファでの操作の調査は読者の課題とする。</p>

<h2><code>C-x v v</code>(<code>vc-next-action</code>)</h2>

<p>vcの中で一番有名なコマンドでしょうから詳細は省きます。私が強調したいのはコミットログ書くときのlog-editモードです。地味に機能強化されてます。<code>C-c C-d</code>(<code>log-edit-show-diff</code>)でdiffを表示したり<code>C-c C-e</code>(<code>vc-git-log-edit-toggle-amend</code>)でamendにしたり出来ます。詳しくは<code>C-c ?</code>(<code>log-edit-mode-help</code>)して下さい。</p>

<h2><code>C-x v d</code>(<code>vc-dir</code>)</h2>

<p>ディレクトリ単位での機能を使えます。というかファイル単位でない機能(つまりvcsの多くの機能)を使えます。最近はvcを使うときはこれがメインになってます。色々機能があるので<code>&lt;f1&gt; b</code>(<code>describe-bindings</code>)して確認して下さい。</p>

<h2><code>C-x v u</code>(<code>vc-revert</code>)</h2>

<p>これは逆に使ってはいけないコマンドです。バッファのファイルのみをリバートする(<code>git checkout -- &lt;バッファのファイル&gt;</code>相当)と思いきや、<code>git reset --hard</code>するようです。no more被害者。</p>

<h1>view-mode</h1>

<p>かなりキーバインドが特殊ですが割と便利な機能です。ここで紹介したもの以外にもキーはバインドされてますが非自明なのは大体こんなもんでしょう。</p>

<h2><code>RET</code>(<code>View-scroll-line-forward</code>) / <code>y</code>(<code>View-scroll-line-backward</code>)</h2>

<p>上下に1行スクロールします。ありそうで他にない機能です。</p>

<h2><code>/</code>(<code>View-search-regexp-forward</code>) / <code>\</code>(<code>View-search-regexp-backward</code>)</h2>

<p>まさかのviバインド。ちゃんと<code>n</code>(<code>View-search-last-regexp-forward</code>)と<code>p</code>(<code>View-search-last-regexp-backward</code>)も用意されてます。</p>

<h2><code>s</code>(<code>isearch-forward</code>) / <code>r</code> (<code>isearch-backward</code>)</h2>

<p><code>C-</code>がなくなっただけですね。他にも<code>C-</code>がなくなっただけのコマンドはいっぱいありますが<code>/</code>/<code>\</code>との比較で出しました。</p>

<h2><code>m</code>(<code>point-to-register</code>) / <code>'</code>(<code>register-to-point</code>)</h2>

<p><code>m</code>でマークして<code>'</code>でジャンプです。</p>

<h2>やめる系</h2>

<p>なぜか一杯あります。前提として、view-modeは別のファイルから「view-modeで(時に別ウィンドウで)ファイルを開く」系のコマンドで呼ばれることが多いというのがあります。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> コマンド                   </th>
<th align="left"> 説明</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>e</code>(<code>View-exit</code>)           </td>
<td align="left"> view-modeを抜ける。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>E</code>(<code>View-exit-and-edit</code>)  </td>
<td align="left"> view-modeを抜けてバッファを編集出来るようにする。つまり、read-only-modeも抜ける。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>c</code>(<code>View-leave</code>)          </td>
<td align="left"> view-modeを抜けてバッファを切り替えるがバッファはkillしない。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>C</code>(<code>View-kill-and-leave</code>) </td>
<td align="left"> view-modeを抜けてバッファをkillして以前のバッファに切り替る。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>q</code>(<code>View-quit</code>)           </td>
<td align="left"> view-modeを抜けてウィンドウ内の状態を元に戻し、フォーカスも戻す。大抵バッファをkillする。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>Q</code>(<code>View-quit-all</code>)       </td>
<td align="left"> view-modeを抜けてウィンドウ構成を元に戻す。大抵バッファをkillする。</td>
</tr>
</tbody>
</table>


<p>うん。覚えられね。</p>

<h1>dired系</h1>

<p>便利なのに情報が少ないdired系。私はUbuntuのUnityを捨ててStumpwmを使っているのでファイルエクスプローラは専らEmacsですからよく使います。<a href="http://localhost:4000/blog/2013/10/04/emacs-dired/">以前のエントリ</a>以外の便利機能を紹介します。</p>

<p>因みに呆れるほどキーがバインドされてるのでここで紹介するのはほんの一部です。画像のサムネイル関連の機能なんかもあります。</p>

<h2><code>+</code>(<code>dired-create-directory</code>)</h2>

<p>ディレクトリを作ります。</p>

<h2><code>(</code>(<code>dired-hide-ditail-mode</code>)</h2>

<p>初期状態では<code>ls -l</code>っぽい内容が表示されてますが<code>ls</code>に変更出来ます。</p>

<h2><code>v</code>(<code>dired-view-file</code>)</h2>

<p>ポイント下のファイルをview-modeで開きます。view-modeでは<code>q</code>でバッファを閉じれるので、あるディレクトリ下のファイルを連続して読みたいときに便利です。</p>

<h2><code>o</code>(<code>dired-find-file-other-window</code>)</h2>

<p>別ウィンドウでファイルを開きます。</p>

<h2><code>C-o</code>(<code>dired-display-file</code>)</h2>

<p>別ウィンドウでファイルを開きますが、フォーカスは移りません。</p>

<p>diredに限らず、ファイルへのリンクをリスト表示するバッファでは大抵<code>v</code>と<code>o</code>と<code>C-o</code>が使えます。</p>

<h2><code>i</code>(<code>dired-maybe-insert-subdir</code>)</h2>

<p>バッファの下にポイント下のディレクトリの内容を追加します。ツリー表示にする機能はないようです。</p>

<h2><code>%</code>(<code>dired--regexp</code>)系</h2>

<p><code>% C</code>(<code>dired-do-copy-regexp</code>)など色々あるのですがとりあえず使いそうなのは<code>% g</code>(<code>dired-mark-files-containing-regexp</code>)と<code>% m</code>(<code>dired-mark-files-regexp</code>)ですかね。</p>

<p>拡張子でマークするコマンドがあった気がしたのですが見当りませんでした。</p>

<h2>検索/置換系</h2>

<p>これも色々ある上にキーバインドが覚えづらいです。ポイント下又はマークしたファイル全てに操作を行います。キーを覚えるより<code>M-x</code>で実行した方が速そうですね。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> キー          </th>
<th align="left"> コマンド</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>Q</code>           </td>
<td align="left"> <code>dired-do-query-replace-regexp</code></td>
</tr>
<tr>
<td></td>
<td align="left"> <code>M-s a C-s</code>   </td>
<td align="left"> <code>dired-do-isearch</code></td>
</tr>
<tr>
<td></td>
<td align="left"> <code>M-s a C-M-s</code> </td>
<td align="left"> <code>dired-do-isearch-regexp</code></td>
</tr>
</tbody>
</table>


<h1>eww (Emacs Web WOWer)</h1>

<p>elispで書かれたブラウザ(正確にはWOWerらしい)です。レンダリングエンジンにはかつてgnusで使われて今は別プロジェクトになったshr.el(Simple HTML Renderer)が使われています。HTMLの他に簡単なCSSも理解します。</p>

<p>libxsltなどのSGML解析系のライブラリを有効にしてビルドしないと使えないのでEmacsを野良ビルドする人は要注意です。</p>

<h2><code>M-x eww</code></h2>

<p>URL又はキーワードで検索します。検索エンンジンは<code>eww-search-prefix</code>で制御出来ます。</p>

<p>googleで検索したかったら</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">setq-default</span> <span class="nv">eww-search-prefix</span> <span class="s">&quot;https://www.google.co.jp/search?q=&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>です。</p>

<h2>キーバインド</h2>

<p>infoライクに設定されてます。そんなに多くないのですが、一部抜粋すると<code>n</code>(<code>eww-next-url</code>)、<code>p</code>(<code>eww-previous-url</code>)、<code>l</code>(<code>eww-back-url</code>)、<code>r</code>(<code>eww-forward-url</code>)、<code>H</code>(<code>eww-list-histories</code>)、<code>&amp;</code>(<code>eww-browse-with-external-browser</code>)、<code>b</code>(<code>eww-add-bookmark</code>)、<code>B</code>(<code>eww-list-bookmarks</code>)、<code>q</code>(<code>quit-window</code>)です。</p>

<p><code>n</code> / <code>p</code>と<code>l</code> / <code>r</code>の違いは、<code>l</code> / <code>r</code>はヒストリを辿る機能、<code>n</code> / <code>p</code>はヘッダに<code>&lt;link rel="Next/Prev" ...&gt;</code>が設定されているときにそれを辿ります。あまり馴染がないかもしれませんが広告料稼ぐためにページ分割しているサイトが多いので結構便利ですよ。</p>

<h1>newsticker</h1>

<p>最後に最近見付けたRSS/Atomリーダーの紹介です。</p>

<p>先ず、こんな感じの設定をします。ニュースサイトは自分の好きなものを選んで下さい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">setq-default</span> <span class="nv">newsticker-url-list</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;産経&quot;</span> <span class="s">&quot;http://sankei.jp.msn.com/rss/news/points.xml&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="s">&quot;朝日-IT/Sci&quot;</span> <span class="s">&quot;http://rss.asahi.com/rss/asahi/science.rdf&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="s">&quot;技術評論社&quot;</span> <span class="s">&quot;http://rss.rssad.jp/rss/gihyo/feed/rss2?rss&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="s">&quot;Planet Lisp&quot;</span> <span class="s">&quot;http://planet.lisp.org/rss20.xml&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="s">&quot;Hacker News&quot;</span> <span class="s">&quot;https://news.ycombinator.com/rss&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">setq-default</span> <span class="nv">newsticker-url-list-defaults</span>
</span><span class='line'>              <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;LWN (Linux Weekly News)&quot;</span> <span class="s">&quot;http://lwn.net/headlines/rss&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">setq-default</span> <span class="nv">newsticker-retrieval-interval</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">newsticker-html-renderer</span> <span class="nf">#&#39;</span><span class="nv">shr-render-region</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、<code>M-x newsticker-show-news</code>でニュースを取ってきてくれます。</p>

<p>3ペインの画面(treeview)になるかと思いますが、基本操作を覚えれば<code>C-x o</code>で移動する必要はありません。</p>

<h2><code>f</code>(<code>newsticker-treeview-next-feed</code>) / <code>F</code>(<code>newsticker-treeview-prev-feed</code>)</h2>

<p>ニュースサイト間を移動します。</p>

<h2><code>n</code>(<code>newsticker-treeview-next-item</code>) / <code>p</code>(<code>newsticker-treeview-prev-item</code>)</h2>

<p>ニュース間を移動します。</p>

<h2><code>SPC</code>(<code>newsticker-treeview-next-page</code>)</h2>

<p>ニュースのページを送ります。戻すキーは無いようです。</p>

<h2><code>v</code>(<code>newsticker-treeview-browse-url</code>)</h2>

<p>今開いているニュースをブラウザで開きます。RSSは概要しか送られてこないのでこの機能は必須ですね。</p>

<h2><code>q</code>(<code>newsticker-treeview-quit</code>)</h2>

<p>画面を閉じます。</p>

<h1>最後に</h1>

<p>いかがだったでしょうか。ちょっと長いので途中読み飛ばし気味だったかもしれませんが1つでも覚えていただけたら幸いです。</p>

<p>因みに、このエントリを書き始めたのは8/13だったのですが、あまりに長く、途中合宿を挟んだりしたので公開は8/20になってしまいました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mirah 0.1.3がリリースされました]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/07/mirah-0-dot-1-3/"/>
    <updated>2014-08-07T23:52:15+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/07/mirah-0-dot-1-3</id>
    <content type="html"><![CDATA[<p>本日2回目のκeenです。次はRuby-likeな文法でJavaが書けるMirah言語の0.1.3がリリースたのでこれを期にMirahの紹介をします。</p>

<!-- more -->


<h1>Mirahとは？</h1>

<p><a href="http://mirah.org">公式ページ</a>。JRubyの開発者がJRubyのためにJavaを書くのが嫌になったという理由で作り始めた言語です。2008年にスタートだったかな？JRubyの開発の片手間に開発してるのでコミットペースはゆっくりです。</p>

<p><a href="https://github.com/mirah/mirah">github</a>のREADMEから引用すると、</p>

<ul>
<li>Ruby-like シンタックス</li>
<li>.classにコンパイルされる</li>
<li>Javaと同じスピード</li>
<li>ランタイムライブラリ必要なし</li>
</ul>


<p>な言語です。私的には</p>

<ul>
<li>型推論がある</li>
<li>マクロがある</li>
<li>面倒な部分はコンパイラが補ってくれる</li>
</ul>


<p>、Javaです。多くのJVM上の言語は独自言語+Java FFIって感じですが、Mirahは文法をRuby風にしただけで、吐かれるバイトコードはJavaコンパイラが吐くのものと等価です。</p>

<h1>サンプルコード</h1>

<p>一番Javaっぽいコードを見せましょう。ファイル名は<code>HelloWorld.mirah</code>の他に<code>hello_world.mirah</code>でも構いません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HelloWorld</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">main</span><span class="p">(</span><span class="ss">args</span><span class="p">:</span><span class="nb">String</span><span class="o">[]</span><span class="p">)</span><span class="ss">:void</span>
</span><span class='line'>    <span class="no">System</span><span class="o">.</span><span class="n">out</span><span class="o">.</span><span class="n">println</span><span class="p">(</span><span class="s2">&quot;Hello World&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>まあ、Javaですね。JavaのstaticメソッドとRubyのクラスメソッドが対応しています。これをMirahの機能を使って書き換えていきます。</p>

<h2>暗黙のクラス</h2>

<p>ファイル名からクラス名が推測出来るので省略することが出来ます。すなわち、トップレベルのメソッド定義は推測されたクラス内でのメソッド定義として扱われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">main</span><span class="p">(</span><span class="ss">args</span><span class="p">:</span><span class="nb">String</span><span class="o">[]</span><span class="p">)</span><span class="ss">:void</span>
</span><span class='line'>  <span class="no">System</span><span class="o">.</span><span class="n">out</span><span class="o">.</span><span class="n">println</span><span class="p">(</span><span class="s2">&quot;Hello World&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでも動きます。</p>

<h2>暗黙のmain</h2>

<p>トップレベルの式はmain内のものとして扱われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">System</span><span class="o">.</span><span class="n">out</span><span class="o">.</span><span class="n">println</span><span class="p">(</span><span class="s2">&quot;Hello World&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうも書けることになります。ただし、argsにアクセス出来ないので複雑なことをやりたかったら大人しく<code>self.main</code>を書きましょう。</p>

<h2>putsマクロ</h2>

<p>mirahには組込みで<code>puts</code>というマクロが定義されています。これはコンパイル時に<code>System.out.println</code>に展開されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こう書けます。ここまでくるとRubyと同じコードになりますね。あ、()が省略可能なのは良いですよね。Ruby系の言語ではよくあることです。</p>

<h1>もうちょっとサンプル</h1>

<p>mirah/exmpleから面白いのを拾ってきます。だいたいRubyです。</p>

<h2>リテラル</h2>

<p>ほぼRubyです。つまり、<code>[]</code>が配列ではなくArrayListになってます。尚、自動でintがIntegerに変換されてます。
また、hashはHashMapです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s1">&#39;non-interpolated string&#39;</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="s2">&quot;interpolated is better than </span><span class="si">#{</span><span class="n">str</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">heredoc</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="no">EOS</span>
</span><span class='line'><span class="sh">this is a here doc</span>
</span><span class='line'><span class="no">EOS</span>
</span><span class='line'><span class="n">int</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'><span class="n">char</span> <span class="o">=</span> <span class="sc">?a</span>
</span><span class='line'><span class="n">float</span> <span class="o">=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">14159265358979323846264</span>
</span><span class='line'><span class="n">regex</span> <span class="o">=</span> <span class="sr">/\d(cow)+\w\\/</span>  <span class="c1"># in Java, this would be &quot;\\\\d(cow)+\\\\w\\\\\\\\&quot;</span>
</span><span class='line'><span class="n">regex2</span> <span class="o">=</span> <span class="sr">/interpolated </span><span class="si">#{</span><span class="n">regex</span><span class="si">}</span><span class="sr">/</span>
</span><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">list</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="n">byte</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">byte</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;one&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;two&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;three&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<h2>修飾import</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">HashMap</span> <span class="n">as</span> <span class="n">H</span>
</span></code></pre></td></tr></table></div></figure>


<p>って書けます</p>

<h2>型推論</h2>

<p>Swingの例です。変数の型を書いてないことに注目して下さい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JFrame</span>
</span><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JButton</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># FIXME blocks need to be inside a MethodDefinition, but main doesn&#39;t</span>
</span><span class='line'><span class="c1"># have one.</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span>
</span><span class='line'>  <span class="n">frame</span> <span class="o">=</span> <span class="no">JFrame</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;Welcome to Mirah&quot;</span>
</span><span class='line'>  <span class="n">frame</span><span class="o">.</span><span class="n">setSize</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">300</span>
</span><span class='line'>  <span class="n">frame</span><span class="o">.</span><span class="n">setVisible</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">button</span> <span class="o">=</span> <span class="no">JButton</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;Press me&quot;</span>
</span><span class='line'>  <span class="n">frame</span><span class="o">.</span><span class="n">add</span> <span class="n">button</span>
</span><span class='line'>  <span class="n">frame</span><span class="o">.</span><span class="n">show</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">button</span><span class="o">.</span><span class="n">addActionListener</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>    <span class="no">JButton</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">getSource</span><span class="p">)</span><span class="o">.</span><span class="n">setText</span> <span class="s2">&quot;Mirah Rocks!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<h2>暗黙のInterface及び暗黙のabstractメソッド</h2>

<p>先のSwingの例を良く見て下さい。この部分です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">button</span><span class="o">.</span><span class="n">addActionListener</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>    <span class="no">JButton</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">getSource</span><span class="p">)</span><span class="o">.</span><span class="n">setText</span> <span class="s2">&quot;Mirah Rocks!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Javaだと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">addactionlistener</span><span class="o">(</span><span class="k">new</span> <span class="nf">ActionListener</span><span class="o">(){</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">event</span><span class="o">){</span>
</span><span class='line'>        <span class="n">JButton</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getSource</span><span class="o">).</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Mirah Rocks!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>となっていたところが、</p>

<ol>
<li>引数の型がインターフェースだったときはブロックで<code>new Class(){}</code>と同じ働きになる</li>
<li>abstractメソッドが一つのときはそれも省略出来る</li>
</ol>


<p>というルールにより簡潔に書けます。これで引数の中に文が現れるという最悪の事態を回避出来ます。Java8のlambda式に近いのかな？Java8に詳しくなくてゴメンなさい。</p>

<p>似たようなので、Threadも</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'> <span class="c1"># do something</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書けます。</p>

<h2>マクロによる既存クラスの拡張</h2>

<p>マクロは展開後のASTがJavaとして有効であれば良いのでJavaでは出来ない芸当が可能です。</p>

<p>シンプルだけど強力な例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">times</span><span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hi&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>intを<code>times</code>マクロで拡張してます。その他、<code>each</code>などの便利マクロや<code>attr_accessor</code>(getterとsetterを自動生成する)など色々あります。ユーザー定義のマクロで拡張も可能ですが、今シンプルに書けるシンタックスが議論中です。</p>

<h1>Javaとの互換性とか完成度とか</h1>

<p>まだ未実装機能はいっぱいあります。<code>final</code>とか<code>synchronized</code>とか。あとスコープもRuby風に<code>private</code>以下で定義されたものはprivateですがメソッド/フィールド単位では制限出来ません<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。ジェネリクスの構文もまだサポートされてません<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>のでジェネリクスの定義は不可能、使用も型推論で型を明示的に書かなくても良いときのみ可能です。インターフェースやアノテーションはあります。</p>

<p><a href="https://docs.google.com/spreadsheets/d/1t7NVsyysIlj6OF6E26OrVJ1AVrL8i2yzbMv92cdHN8c/edit#gid=0">ここ</a>にTODOがありますが、inner classやlambda(多分Java8のlambda式とは別もの)が弱いようです。</p>

<p>でもまあ、Mirah自体Mirahでセルフホスティングされてますし一つ言語を作れる程度には機能は揃ってます。遊んでみる分には十分使えると思います。</p>

<h1>マクロの話</h1>

<p>Mirahはオブジェクト指向で静的型付けの言語でマクロを実装してます。Lisper的には割と面白かったのでちょいと触れますね。</p>

<p>まずは簡単な例から。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">macro</span> <span class="k">def</span> <span class="nf">puts</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>  <span class="n">quote</span> <span class="p">{</span><span class="no">System</span><span class="o">.</span><span class="n">out</span><span class="o">.</span><span class="n">println</span><span class="p">(</span><span class="sb">` [node] `</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lisperなら</p>

<ul>
<li><code>macro def</code>で<code>defmacro</code></li>
<li><code>quote block</code>でquasiquote</li>
<li>バックスラッシュで囲んでunquote</li>
</ul>


<p>などが読み取れると思います。</p>

<p>今のはASTは陽には出てこない簡単な例でしたが、次はちょっと飛躍しますよ？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">macro</span> <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">abstract</span><span class="p">(</span><span class="ss">klass</span><span class="p">:</span><span class="no">ClassDefinition</span><span class="p">)</span>
</span><span class='line'>  <span class="n">anno</span> <span class="o">=</span> <span class="no">Annotation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@call</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">position</span><span class="p">,</span> <span class="no">Constant</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SimpleString</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;org.mirah.jvm.types.Modifiers&#39;</span><span class="p">)),</span>
</span><span class='line'>                        <span class="o">[</span><span class="no">HashEntry</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SimpleString</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;flags&#39;</span><span class="p">),</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="no">SimpleString</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ABSTRACT&#39;</span><span class="p">)</span><span class="o">]</span><span class="p">))</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">klass</span><span class="o">.</span><span class="n">annotations</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">anno</span><span class="p">)</span>
</span><span class='line'>  <span class="n">klass</span><span class="o">.</span><span class="n">setParent</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="n">klass</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>macroにも型がある。その型はASTの型。</li>
<li>というかClassDefinitionとかいう型がある</li>
<li>ASTをいじるときにASTのNodeオブジェクトのメンバをゴニョゴニョするという手段がある</li>
</ul>


<p>などが読み取れると思います。また、ClassDefinitionを受け取ってClassDefinitionを返しているのでmacro chainが可能ですね。</p>

<p>次はASTを自分で組み立てる例です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">macro</span> <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">attr_reader</span><span class="p">(</span><span class="nb">hash</span><span class="ss">:Hash</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">methods</span> <span class="o">=</span> <span class="no">NodeList</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">size</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span>
</span><span class='line'>      <span class="n">e</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="nb">method</span> <span class="o">=</span> <span class="n">quote</span> <span class="k">do</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">`</span><span class="n">e</span><span class="o">.</span><span class="n">key</span><span class="sb">`:`</span><span class="n">e</span><span class="o">.</span><span class="n">value</span><span class="sb">`  #`</span>
</span><span class='line'>          <span class="err">@</span><span class="sb">`e.key`</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">methods</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">methods</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>NodeListがprognみたいなものでその中にMethodDefinitionを突っ込んでいってますね。中々楽しい。</p>

<p>余談:ところでgetterメソッド名がgetKeyじゃなくてkeyになってますよね。コンパイル後は変換してくれるのかなと思い、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@foo</span> <span class="o">=</span> <span class="s2">&quot;a&quot;</span>
</span><span class='line'><span class="kp">attr_accessor</span> <span class="ss">:foo</span> <span class="o">=&gt;</span> <span class="ss">:String</span>
</span></code></pre></td></tr></table></div></figure>


<p>をコンパイル、ディスアセンブルしてみました。すると、<code>foo</code>と<code>set_foo</code>というメソッドが定義されてましたorz。Ruby的にはまあ良いんですがコンパイル後はJavaなのでそこはgetKey/setKeyにしてほしかったですね。もしかしたら今はシンボルをキャメルケースに変換出来ないのかもしれません</p>

<p>閑話休題。また、呼び出し元の情報もとれます。これはStringの+マクロです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">macro</span> <span class="k">def</span> <span class="nf">+</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>  <span class="n">quote</span> <span class="p">{</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="sb">`@call.target`</span><span class="si">}#{</span><span class="sb">`arg`</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>@call</code>に呼び出し元の情報が入ってるのでそれを使って情報をとれます。</p>

<p>gensymなんかもあります。これはintのtimesマクロです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">macro</span> <span class="k">def</span> <span class="nf">times</span><span class="p">(</span><span class="ss">block</span><span class="p">:</span><span class="no">Block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="k">if</span> <span class="n">block</span><span class="o">.</span><span class="n">arguments</span> <span class="o">&amp;&amp;</span> <span class="n">block</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">required_size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">block</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">required</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">identifier</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">gensym</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">last</span> <span class="o">=</span> <span class="n">gensym</span>
</span><span class='line'>  <span class="n">quote</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="sb">`i`</span> <span class="o">&lt;</span> <span class="sb">`last`</span>
</span><span class='line'>      <span class="n">init</span> <span class="p">{</span> <span class="sb">`i`</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="sb">`last`</span> <span class="o">=</span> <span class="sb">`@call.target`</span><span class="p">}</span>
</span><span class='line'>      <span class="n">post</span> <span class="p">{</span> <span class="sb">`i`</span> <span class="o">=</span> <span class="sb">`i`</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>      <span class="sb">`block.body`</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>whileの中にある<code>init</code>と<code>post</code>はRubyでいう<code>BEGIN</code>と<code>END</code>、JVM的には<code>for</code>の実装のために使われているのでしょうか。</p>

<h1>まとめとか雑感とか</h1>

<p>0.1.3で一番大きな変更はセルフホストされたことですね。今まではJRubyで書かれてたのでHello Worldのコンパイルに16秒とか掛かってました。今のmirahc.jarはかなり小さく、1MBちょっとしかありません。</p>

<p>入手法はgithubから良いかんじにダウンロード出来るんじゃないですかね？（適当）</p>

<p>古いバージョンにはMirahのコードと等価なJavaのソースを吐くオプションがありましたがコンパイラが変わってなくなりました。かつてheadiusはこの機能を使って吐いたコードをJRubyにコミットしたことがあるそうです。今新しいコンパイラが安定してきたのでそろそろ再実装されそうです。</p>

<p>exampleですが一応私のコミットも入ってます。<code>grep keen NOTICE</code>ってやってみて下さい。</p>

<p>mirah-mode.elをちまちま書いてますが道程は通そうです。ブロックコメント(<code>/* .. */</code>)がネスト可能なのですが、正規表現だと<code>/*/*</code>を<code>/*</code>2つと<code>*/</code>1つと認識しちゃってつらいです。</p>

<p>今回細かいところは省きましたがexampleとかあと公式ページとかgithubのwikiとか見て下さいね。</p>

<p>ある程度の完成度になってきてるのでみなさんも遊んでみて下さい。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>pull-reqは入ってるのですが、まだマージされてません<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>まだリテラルの議論が終わってないだけで、内部はジェネリクスに対応してるので近い内に入りそうな気はします。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shibuya.XSS TT #5 に参加してきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/07/shibuya-dot-xss-tt-number-5-nican-jia-sitekimasita/"/>
    <updated>2014-08-07T23:12:34+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/07/shibuya-dot-xss-tt-number-5-nican-jia-sitekimasita</id>
    <content type="html"><![CDATA[<p>強化練中のκeenです。明日も朝早いのでこんな時間にエントリー書いてて寝坊しないか心配です。</p>

<p>Shibuya.XSS TT #5 がLINEのオフィスで行なわれてたので覗きに行ってきました。名前はXSSですが内容はセキュリティ全般でしたね。</p>

<!-- more -->


<p>Mozillaの脆弱性バグ報奨金制度にチャレンジした話だとか色々あったのですがやっぱセキュリティの話なのでオフレコな話題が多く、あまり書けることは無いです。
malaさんが飛び入りでさっきサイボウズの脆弱性を見付けたから話します、ってやろうとしてサイボウズの竹迫さんに止められてたり（結局Googleの未修正の脆弱性の話してました。データガンガン抜いててやばかった。）。</p>

<p>話せる話題はblob URI SchemeとサニタイズとmXSSの話ですね。(俄知識なので誤謬があるかと思います。あまり信用しないで下さい)</p>

<h2>blob URI Scheme</h2>

<p>example.com/XXXXXX-XXXXXX-XXXXXX
みたいなURLのことです。blobの名前の通りバイナリをデコードしたURLで、アップロードした画像の一時URLなんかに使われるそうです。似たようなのにdata URI Schemeとかjavascript URI Schemeとかがあるそうです。</p>

<p>これの扱われ方が他とはちょっと違うらしく、<code>iframe</code>内でこのURIでXSSをするとoriginが親コンテンツのものになるそうです。つまり<code>iframe</code>内からSame Origin Policy突破可能。その他にも面白い特徴があって要研究って言ってました。</p>

<h2>サニタイズとmXSS</h2>

<p>mutate base XSSだったかな？</p>

<p>ユーザーの入力をJS側でサニタイズしようとする時の話です。
一つ思い付くのはJSでHTMLパーザを書いて許可しないタグを検出する方法ですが、どうしてもブラウザのパーザと互換性を確保出来ない（ブラウザ毎の非互換性がある）ためそこが脆弱性になるそうです。</p>

<p>そこでブラウザのパーザを呼び出すAPIがあるのでそれを使ってDOMを作り、タグを洗い出す方法が考えられます。ここまでは良いのですが、最後HTMLに追加するときに文字列化してinnerHTMLで書き込もうとするとmXSSの危険性があるそうです。具体的には特定の状況で<code>&amp;lt;</code>や<code>&amp;gt;</code>が<code>&lt;</code>や<code>&gt;</code>に変化してしまい、入力と出力でDOM構造が変わってしまうことがあるそうです。怖い。</p>

<p>セキュリティ大変ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud9の紹介とLispのセットアップ]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/02/introduction-to-cloud9/"/>
    <updated>2014-08-02T01:02:18+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/02/introduction-to-cloud9</id>
    <content type="html"><![CDATA[<p>κeenです。先日のLisp Meet Upで紹介した<a href="https://c9.io">Cloud9</a>の詳解でも書きます。まあ、そんなに詳しくないんですけどね。</p>

<!-- more -->


<h1>Cloud9について</h1>

<p>先日のスライドを見てない方はまず見て下さい。</p>

<p><a href="http://keens.github.io/slide/cloud-9.html">Cloud 9の紹介 | κeenのHappy Hacκing Blog</a></p>

<p>公式の詳解ムービー(en)もあります。まあ、一般的なIDEの機能は一通り揃ってるようです。git連携とかも。
<a href="https://www.youtube.com/user/c9ide/videos?flow=grid&amp;view=1">CloudNine Ide &ndash; YouTube</a></p>

<p>スライドでバックエンドは一人一つDockerが与えられるって書きましたが自分のVMをバックエンドにも出来るようです。</p>

<p>省略しましたが他のユーザーとの連携機能も多数あって、チャットだとかワークスペースの共有だとかソーシャルコーディング関連も多数機能があります。全社導入の折には役立つ機能なんじゃないでしょうか。</p>

<p>ローカルファイルをアップロードしたり逆にローカルにダウンロードとかも出来るようです。</p>

<p>尚、IDE本体は<a href="https://github.com/ajaxorg/ace">ACEという名前でオープンソースで開発されてる</a>のでプラグインとかのドキュメントはそっちもあたると良いようです。</p>

<h1>Cloud9事始め</h1>

<p>スクショとかは適当にスライドを参照して下さい(手抜き)</p>

<h2>アカウントを作る</h2>

<p><a href="https://c9.io">c9.io</a>にアクセスしてGithubかBitbucketのアカウントでログイン出来ます(以後、Githubでログインしたものとします。Bitbucketの方は適宜読み替えて下さい)。Cloud9で書いたコードをHerokuやらなんやらに直接上げるつもりなら普通にCloud9アカウント作っても良いと思いますが、多くの場合どちらかとの連携を使うと思うので素直にGithubでログインしましょう。</p>

<p>ログインしたらダッシュボードに飛ばされます。demo-projectと自分のGithubのプロジェクトがサイドバーにある筈です。</p>

<h2>細かな設定</h2>

<p>demo-projectでも開きましょうか。demo-projectを選択してstart editingです。</p>

<p>IDEというかEditorの設定が出てくる筈です(多分)。キーバインディングとかタブ幅とか設定しましょう。そして、<code>C-h</code>で<code>backward-delete-char</code>出来ないと死んでしまう方のための設定はこちらです。Preferencesのkeybindingsのedit your keymap fileからkeymap fileに飛んで、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="nt">&quot;command&quot;</span><span class="p">:</span> <span class="s2">&quot;backspace&quot;</span><span class="p">,</span> <span class="nt">&quot;keys&quot;</span><span class="p">:[</span><span class="s2">&quot;Ctrl-H&quot;</span><span class="p">,</span> <span class="s2">&quot;Backspace&quot;</span><span class="p">]},</span>
</span><span class='line'>    <span class="p">{</span><span class="nt">&quot;command&quot;</span><span class="p">:</span> <span class="s2">&quot;replace&quot;</span><span class="p">,</span> <span class="nt">&quot;keys&quot;</span><span class="p">:[</span><span class="s2">&quot;Alt-Shift-5&quot;</span><span class="p">]}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>と編集、保存しましょう。どうも、キーにコマンドを割り当てるのではなく、コマンドにキーを割り当ててる(?)っぽいのでCtrl-Hを持ってる<code>replace</code>を別のキーにしないと動かないようでした。尚、これはファイルをいじらなくてもsearch keybindingsのところから目的のコマンドを捜して、keystrokeのところをクリックして、割り当てたいキーストロークをすれば割り当て出来るようです。その際、自分のkeymap fileも対応して書き変わります。</p>

<h2>Common Lispのセットアップ</h2>

<p>処理系のインストールはいくつか方法があります。</p>

<ol>
<li><code>apt-get</code>で入れる</li>
<li>バイナリを落してくる</li>
<li><a href="https://github.com/KeenS/CIM">CIM</a>を使う</li>
</ol>


<p>のいずれかの方法で処理系を入れて下さい。<code>apt-get</code>で入れる場合はかなり古いバージョンが入ります。CIMで入れる場合は<code>sudo apt-get install time</code>しておかないとSBCLのビルドが出来ませんでした。他の処理系は確認してないです。どの処理系でも良いんですがとりあえずSBCLを入れたってことで話進めますね。私がそれしか確認してないので。</p>

<p>また、便利のためrlwrapを入れましょう。<code>sudo apt-get install rlwrap</code>です。</p>

<p>そこまでいったらrun scriptを作りましょう。上のメニューバーから[Run]>[Run With]>[New Runner]と進みます。で、run scriptの内容はどの方法で処理系を入れたかに依るのですが、</p>

<p>1の場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;cmd&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;sudo&quot;</span><span class="p">,</span> <span class="s2">&quot;rlwrap&quot;</span><span class="p">,</span> <span class="s2">&quot;sbcl&quot;</span><span class="p">,</span> <span class="s2">&quot;--load&quot;</span><span class="p">,</span> <span class="s2">&quot;$file&quot;</span><span class="p">,</span> <span class="s2">&quot;$args&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;info&quot;</span> <span class="p">:</span> <span class="s2">&quot;Started SBCL :: $project_path$file_name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;env&quot;</span> <span class="p">:</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nt">&quot;selector&quot;</span> <span class="p">:</span> <span class="s2">&quot;source.ext&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>だそうです(<a href="http://cjelupton.wordpress.com/2014/07/24/hacking-lisp-in-the-cloud-pt-3/">引用元</a>)。<code>sudo</code>がついてるのはWEBアプリの場合0.0.0.0で待つためにroot権限が必要だからかな？</p>

<p>これは実行した後でREPLに入ってデバッガとか扱う感じの設定ですね。<br/>
単に実行したいだけののきは<code>--load</code>の部分を<code>--script</code>に変えれば良さそうです(未確認)<br/>
2の場合も同じ設定でいけそうな気がします。PATHぐらい必要かな?(未確認)</p>

<p>3の場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;cmd&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;sudo&quot;</span><span class="p">,</span> <span class="s2">&quot;cl&quot;</span><span class="p">,</span> <span class="s2">&quot;$file&quot;</span><span class="p">,</span> <span class="s2">&quot;$args&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;info&quot;</span> <span class="p">:</span> <span class="s2">&quot;Started cl :: $project_path$file_name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;env&quot;</span> <span class="p">:</span> <span class="p">{</span><span class="nt">&quot;CIM_HOME&quot;</span><span class="p">:</span><span class="s2">&quot;$HOME/.cim&quot;</span><span class="p">,</span><span class="nt">&quot;PATH&quot;</span><span class="p">:</span> <span class="s2">&quot;$CIM_HOME/bin:$PATH&quot;</span><span class="p">,</span> <span class="nt">&quot;LISP_IMPL&quot;</span><span class="p">:</span> <span class="s2">&quot;sbcl&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;selector&quot;</span> <span class="p">:</span> <span class="s2">&quot;source.ext&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>です。本来CIMは<code>$CIM_HOME/init.*</code>を呼ばないと動かないのですが、ショートカットする環境変数を設定することで無理矢理動かしてます。Cloud9のinitスクリプト(jsファイル)があるようなのでそこでCIMをinitしておけば無理せずとも出来そうですがあまり深く踏み込んでないです。</p>

<p>尚、この設定は実行即終了のものです。実行してREPLに入りたい場合は<code>"cmd"</code>を<code>["cl","-rf", "$file", "$args"]</code>にすると出来ます。</p>

<h2>動かしてみる</h2>

<p>上記のrun scriptを設定、保存したらメニューバーから[File]>[New File]と進み、新しいファイルを作ります。<br/>
一番簡単に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">write-line</span> <span class="s">&quot;Hello Cloud9&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>とでも書きましょうか。そして[>Run]してちょいと待つと実行出来る筈です。動かなかったら手動で[Run]>[Run With]>[My Runner]とかしてみましょう。ここまで来ればセットアップ完了です。</p>

<h1>今後の課題というか要調査というか</h1>

<h2>シンタックスハイライト</h2>

<p>Lisp Meet Upでも喋りましたがハイライトが最悪です。ユーザー定義ハイライターも(少くともACEレベルでは)出来そうなのでどうにかする必要があります。</p>

<h2>インデント</h2>

<p>Lispのインデントはタブn個とかで済むようなものじゃなくてどのオペレータの中にいるかに依って変わります。その辺どうにかなって欲しいですね。
もしかしたらClojureは上手くいってるかもしれないのでそこからインポートしてくれると嬉しいですね。</p>

<h2>swankインターフェース</h2>

<p>initスクリプトがあるって事はもしかしたらIDEもプログラマブルなのかもしれないのでswankインターフェースを作れるかもしれません。</p>

<h2>CIMインターフェース</h2>

<p>initスクリプトがあるって事は(ry。最終目標はメニューバーからどの処理系を使うか選択可能とかで。</p>

<h1>まとめ</h1>

<ul>
<li>Cloud9を紹介した</li>
<li>Common Lispのセットアップ方法を示した</li>
<li>誰か諸問題解決して下さい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #19でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19/"/>
    <updated>2014-07-30T00:30:40+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19</id>
    <content type="html"><![CDATA[<p>κeenです毎月恒例の<a href="https://atnd.org/events/53246">Lisp Meet Up presented by Shibuya.lisp</a>でLTしてきたのでレポートです。</p>

<!-- more -->


<p>今回は募集20に対して参加登録20、参加18、LT4本と集りの良い会でした。</p>

<p>自己紹介ではほぼCLの人ばっかりでした。珍しいところ（？）では数理システムの方が居たり会場を提供して下さってるサイバーエージェントの方が覗きにきてたり。</p>

<p>LT1本目はTOYOZUMIさんから連作の一つのCommon Lisp最適化発展。画像のエッジ検出をするときの関数の最適化の話でした。カーネルを渡すだけで最適なコードを生成するそうです。コーナーケースのif式をループの外に追い出してたりと半分成程、あとはよく分かんない話してるなーって。<br/>
最終的には<code>eval</code>を使ってるらしく、本当に速度出るの？って気になりましたが本人もやってみたところ速くなってビックリだったそうです。</p>

<p>スライドはこちら。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/37456264" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/toyozumiKouichi/common-lisp-37456264" title="Common lisp最適化発展" target="_blank">Common lisp最適化発展</a> </strong> from <strong><a href="http://www.slideshare.net/toyozumiKouichi" target="_blank">Toyozumi Kouichi</a></strong> </div></p>

<p>動画は今回から私が担当なので処理が終ったらリンク張ります。</p>

<p>次はTakagiさんよりcl-cudaについて。話聞く前は「どうせC APIをCFFIで叩いただけだろ(ホジ」って思ってましたがさすがにGPGPUはそんなに簡単じゃなかったようです。
cl-cudaはLispのAPIを叩いたらCUDA向けのCコードを吐いてCUDA専用のコンパイラ通してモジュールとして動的に読み込んで、ってやってくれるそうです。すごい。
完成度も、CUDAを研究に使ってたchikuさんによると普通使う分にはほぼ困らなくて、あとは構造体のサポートがあれば良いかも程度だそうです。すごい。</p>

<p>スライドはまだ見付けてないです。</p>

<p>3番目は私から、WebブラウザベースのIDE、<a href="https://c9.io/">Cloud9</a>の紹介とLispの対応状況について。
スライドはこのブログに載せてますが、こちら</p>

<p><a href="http://keens.github.io/slide/cloud-9.html">Cloud 9の紹介 | κeenのHappy Hacκing Blog</a></p>

<p>もうちょっと説明が欲しそうな雰囲気だったので別記事立てますね。@potix2さんが社内チャットに流したところなり反応が良かったようなので普通にIDEとして優れてるんじゃないでしょうか。</p>

<p>最後はかにたん(@kazh98)から床下からLispが出てきた話。うん。本当に床下からLispが出てきた話でした。かにたんの研究室すごいですね。みなさんの家の床下にもLispがあるかもしれませんよm9っ。</p>

<p>最後の最後にかにたんの研究室から出てきたLispについてTOYOZUMIさんがモニタをスクリーンに映しつつみんなで色々議論。なんかWEBのマニュアルがポルトガル語で書かれてたのでポルトガル語喋れる人捜したけど居なかったり。次回、床下Lispを動かしてみようってなりました。</p>

<p>そこでもう閉場の時間だったので懇親会へ。11名が参加。</p>

<p>私とかにたんとpotix2さんがschemeの実装の話してたり@mhkojiさんがhunchentootがありえないくらい遅いって話してたり色々でしたね。
CIMの話も出てました。実用上Windowsサポートは外せないってことで@snmstsさんがCでCIMを書き直してるだとか@nitro_idiotさんがshellyでCIMを使うにあたってCIM側でコアのマネジメントして欲しいって言ってただとか。</p>

<p>C CIMは面白そうですね。ビルドしなきゃいけないから手軽さの問題が…とかlibcurlに依存するとLinuxが…とか言ってたら「ディストリのパッケージシステムに乗せてしまえば問題無い」と一刀両断。その発想はなかった。むしろパッケージシステムに入った方が手軽。</p>

<p>今からCloud9の記事とCIMのコアマネジメント頑張りますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[近況]]></title>
    <link href="http://KeenS.github.io/blog/2014/07/13/jin-kuang/"/>
    <updated>2014-07-13T20:30:37+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/07/13/jin-kuang</id>
    <content type="html"><![CDATA[<p>κeenです。書く書くいってた近況です。思ったよりあります。</p>

<!-- more -->


<h1>5月</h1>

<h2><a href="http://connpass.com/event/5795/">関数型言語LT大会</a>でLTしてきた</h2>

<p>みんなすごいH本を読み終わったくらいの実力の人達かなって思ってゆるめに準備していったらプロばっかで爆死しました。</p>

<ul>
<li>発表スライド</li>
</ul>


<iframe src="//www.slideshare.net/slideshow/embed_code/34529429" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/blackenedgold/functional-lt" title="(define)なしで再帰関数を定義する" target="_blank">(define)なしで再帰関数を定義する</a> </strong> from <strong><a href="http://www.slideshare.net/blackenedgold" target="_blank">blackenedgold</a></strong> </div></p>

<ul>
<li><a href="http://togetter.com/li/667778">togetter</a></li>
</ul>


<p>因みにここで初めて@wasabiz氏と面会しました。</p>

<h2><a href="https://github.com/wazabiz/picrin">picrin</a>にコミットを始める</h2>

<p>wasabiz氏に会ってからC言語の勉強がてらpicrinのソースでも読んでみるかってなって紆余曲折あってコミットしはじめました。</p>

<p>主には<a href="https://code.google.com/p/chibi-scheme/">chibi scheme</a> のテストケースのインポートとそれによって判明したバグフィクスあたりですね。あとは最近ようやく<a href="https://gmplib.org/">GMP</a>と<a href="http://www.mpfr.org/">MPFR</a> のポートが動いたのでプルリク投げました。今は山葵寿司からレビューを受けて直す作業ですね。</p>

<h2><a href="http://atnd.org/events/50865">Lisp Meet Up #17</a>に参加した</h2>

<p>Scheme回なのに人も発表も多かったので私はLTは控えました。実際時間ギリギリまでLTやってましたし。レポートは<a href="http://shibuya.lisp-users.org/">公式ページ</a>に上ってます。</p>

<p>処理系の話が複数聞けたのは有益でしたね。</p>

<h1>6月</h1>

<h2><a href="http://shibuya.lisp-users.org/">Shibuya.lisp</a>の運営になった</h2>

<p>毎回参加してたら声かかりました。動画周りの担当です。頑張ります。</p>

<h2><a href="http://connpass.com/event/6402/">天下一altJS武闘大会</a>でLTしてきた</h2>

<p>今回は#functionalLTで爆死した反省からLispを前面に押し出しました。発表もEmacs上で行なったり。その結果「最高に怖い」なんて言われてたのでまあ、成功だったんじゃないですかね。</p>

<ul>
<li><a href="https://gist.github.com/KeenS/f3deeca6295d7454cb17">発表資料スライド</a></li>
<li><a href="http://KeenS.github.io/slide/sshi-deshu-kualtjs.html">スライドをreveal.jsに変換したもの</a></li>
<li><a href="http://togetter.com/li/678010">togetter</a></li>
</ul>


<p>因みに<a href="http://atnd.org/events/52355">Lisp Meet Up #18</a>はサークルの用事で逃しました</p>

<h1>7月</h1>

<p>進捗ダメです。このブログに<a href="http://KeenS.github.io/slide/">スライドページ</a>つけたりしました。reveal.jsです。</p>

<p>いちおうOctopressのプラグイン的な感じなってはいるんですが、レイアウトやインクルードファイルも追加してて面倒なので公開してません。このブログのテーマ(cleanpress)以外で動くかも分かりませんし。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パーティションテーブルとか色々吹っ飛ばした話]]></title>
    <link href="http://KeenS.github.io/blog/2014/06/12/partision-table/"/>
    <updated>2014-06-12T12:12:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/06/12/partision-table</id>
    <content type="html"><![CDATA[<p>ご不沙汰しております、κeenです。先日（と言ってもしばらく前）、安いHDDを買ってきてFreeBSDでも入れて遊ぼうかとしていました。</p>

<!-- more -->


<p>そうするとインストールは正常に終わるのにリブートするとブートローダが見付からないとか怒られます。おかしいな〜と思って元のHDDに付け替えてインストールメディアをごちゃごちゃしてまたHDDを付け替えてインストールしてを10回くらい繰り返したでしょうか。</p>

<p>はい、挿さってるHDD勘違いして元のHDDにFreeBSD焼いちゃいました。パーティションテーブルとかHDDの先頭にあったWindowsのパーティションとか全滅です。しかもまだFreeBSD起動しない。どうするよこれ。</p>

<p>USBに焼いてたArchがあったのでどうにかUbuntuを落してきてOS自体は復旧出来ました。因みにFreeBSDが起動しなかった理由はハードウェアがBSDだとかGPTだとかのパーティションテーブルに対応してなかったのが原因っぽいです。尚、LinuxもBSDのパーティションテーブルを理解しないので一旦ddとかで強制的にパーティションテーブルを上書きしないと正常にインストール出来ませんでした。</p>

<p>で、ですよ。問題は飛んだデータです。Windowsの方はどうでも良くてUbuntuの方もほとんどの重要なソースコードはgithubやgitbreakで管理してたので問題無くて、重要でないソースコードは仕方無いとして、LTの資料はまあ、SlideShareにあるし良いとして、KVMイメージはそんなに育ててなかったのでまた作り直すことにして、その他のデータはDropBoxに逃がしてて、残り、<code>cl21-datacollections</code>とこのブログのソースはgitで管理してなかったので消えてしまいました。</p>

<p><code>cl21-datacollections</code>は書き直すより他ないので図書館でアルゴリズムイントロダクションを借りてきました。まあ、そのうち出現すると思います。Lisp Meet UpでTOYOZUMIさんにそそのかされたCSB+木も実装してみるつもりです。</p>

<p>ブログの方はソースが無いと流石につらいので掘り起こしたデータの受け皿に新たに500GのHDDと外付け用のカバーを買ってきて<br/>
<img src="http://KeenS.github.io/images/HDD.jpg" title="HDD" alt="買ってきたHDDたち" /><br/>
<code>test-disk</code>や<code>photorec</code>といったパーティション、データ復旧ツールで復旧を試みました。</p>

<p>パーティション再認識ツールの<code>test-disk</code>は全然駄目で、わずかに<code>/</code>を認識するだけでその下のファイル情報は全く読み出せませんでした。</p>

<p>しゃあないのでデータ復旧ツールの<code>photorec</code>を一晩回してみると…800万くらいのファイルが掘り起こされました。因みにファイル名は機械的につけられたものです。<br/>
ザーっと眺めてみるとほとんどブラウザキャッシュの残骸ですね。因みに拡張子はすっげー適当につけられてるのでせいぜいバイナリかテキストかを見分けられる程度でした。</p>

<p>流石に人力で捜すのは無理なのでOctopress用のマークダウンを拾ってくるスクリプト書いてまた一晩回してみたものの、集まったのは何故かRubiniusのブログばかりでこのブログのデータはゼロ。どうしようもなく、githubに上がってるHTMLから復旧することにしました。</p>

<p>Nokogiri使ってHTMLのタグをちまちまMarkdownに直すスクリプト書いてる途中で「これ、他にもやってる人いるんじゃね？」という思いが。<br/>
調べてみると、ありました。<a href="https://github.com/xijo/reverse_markdown">Reverse Markdown</a>というそうです。ここまでくればあとはNokogiri使ってメタデータとメインの部分抜き出してくるだけなので楽勝ですね。まあ、 <code>{%</code> や<code>#</code>をスケープするなどの作業もあるのですが。#をエスケープしなきゃいけないのはreverse_markdownのバグっぽそうですね。<br/>
画像はディレクトリごとコピーし、Sassはcleanpressを再度インストール、その他自分で手を加えた部分はこのブログに残してあったのでそこを参照しました。</p>

<p>ブログ更新出来なかった間になにしてたかは別記事にしますね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #16 でLTしてきました。]]></title>
    <link href="http://KeenS.github.io/blog/2014/04/25/lisp-meet-up-number-16/"/>
    <updated>2014-04-25T01:35:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/04/25/lisp-meet-up-number-16</id>
    <content type="html"><![CDATA[<p>κeenです。年度末/年度始めで色々あり、しばらく更新できてませんでしたが <a href="http://atnd.org/events/49370">Lisp Meet Up Presented by Shibuya.lisp #16</a>に参加してきたのでレポートです。</p>

<!-- more -->


<p>最近はLisp Meet Upも盛況で毎回ほぼ満席ですね。今回も満席でした。というか立ち見出てました。</p>

<p>自己紹介では初参加の方が多くてCLerが多い印象でした。昔研究とかでCL使ってて久し振りに、とか。私個人的にはTwitterでフォローしてる方々とお会い出来て楽しかったです。</p>

<p>LTは私とTOYOZUMIさんが告知してました。しかしTOYOZUMIさんは当日体調が悪くて欠席したので私と飛び入りのchikuさんで計2件のLTがありました。TOYOZUMIさんは何回かに分けて発表するうちの1回だったので次回LTしていただけるかと思います。</p>

<p>私のやつは↓です。時間ギリギリで作ったのであんまりいじめないで下さい。因みにまだソースはgithubに上げてないです（後述）</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/33794330" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/blackenedgold/lisp-meetup16" title="CL21で色々なデータ構造を実装してみようとした">CL21で色々なデータ構造を実装してみようとした</a></strong> from <strong><a href="http://www.slideshare.net/blackenedgold">blackenedgold</a></strong></p>

<p>会場からはCL21作者のにとりさんから「abstract-sequenceは最低限実装しなきゃいけないメソッドは少ない」との指摘がありましたがqueueとして機能するために色々頑張ったのです。</p>

<p>abstract-setとかは欲しいですねとの声もありました。issueに上げておきますかな</p>

<p>また、chikuさんからheapの実装について色々と指摘があり、 <a href="http://www.amazon.co.jp/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD%E3%83%80%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3-%E7%AC%AC3%E7%89%88-%E7%B7%8F%E5%90%88%E7%89%88-%E4%B8%96%E7%95%8C%E6%A8%99%E6%BA%96MIT%E6%95%99%E7%A7%91%E6%9B%B8-%E3%82%B3%E3%83%AB%E3%83%A1%E3%83%B3/dp/476490408X">Introduction to Algorithms</a>という本を紹介されました。とりあえず大学の図書館から借りてきたのでそれを読んだらcl21-data-collectionsに手を加えてgithubに上げます。</p>

<p>次はchikuさんから <a href="https://github.com/chiku-samugari/chiku.util">chiku-utils</a>というオレオレライブラリの紹介がありました。スライドは見付け次第貼りますね。結構便利そうな関数やマクロがあったので一度見てみると良いかもしれません。</p>

<p>その後は休憩からのぐだぐだ時間でした。chikuさんの発表の中で出てきた<code>keymin</code>という関数について会場から一般的には<code>argmin</code>と言うとの指摘があり、その場でかにたんが<code>argmin</code>の定義の数式を書いたことから私とかにたんとラジカルこうじさんでマスハラをしあってました。というか主にかにたんがマスハラしてました。Lispの話はあまりしませんでしたね… あとは私がゼミで <a href="http://www.amazon.co.jp/gp/product/0124077269/ref=oh_details_o00_s00_i00?ie=UTF8&amp;psc=1">パタヘネ</a>を読んでることからパタヘネってC言語の入門書だよねとかの会話とか。StumpWMについてもちょっと話したかな？</p>

<p>そうだ。次回のScheme回は <a href="https://bitbucket.org/ktakashi/sagittarius-scheme/overview">Sagittarius</a>の作者のKeiさんが次回LTする気満々とのことで話題に上がってました。それに <a href="https://github.com/wasabiz/picrin">picrin</a>の作者のわざびず君も来るかもとかですしTOYOZUMIさんの連作もありますし次回は長くなるか2回に分けるかになるかもしれません。</p>

<p>その後の懇親会は9人が参加でしたがアルコールを飲む方はあまりいませんでしたね。飲んでたのは3~4人かな?多くの方が普通にお酒に弱いだとかバイクで来てるだとか次の日仕事があるとかですね。もう普通に食事でも良いのでは。私のいたテーブルでの会話は佐野さんがLispの本をめっちゃ持ってるだとかでしたね。実践Common Lispを訳者ということを割り引いても多いくらい持ってるそうです。CLtL2とかもめっちゃ持ってるそうです。謎ですね。</p>

<p>今回のまとめ</p>

<ul>
<li>かにたんをホワイトボードに近付けてはいけない</li>
</ul>


<p>最後になりますがイベント管理や会場手配など運営の方々ありがとう御座いまいした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #14でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14/"/>
    <updated>2014-02-27T14:57:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14</id>
    <content type="html"><![CDATA[<p>どうも、κeenです。Rubyをアップグレードしようとしたら<code>rvm</code>が動かなくて、あれ？ってなったら私が<code>echo -&gt; echo</code>とかいう謎のsymlinkを作ってたせいでした。このブログはOctopressで作ってるのでその間更新遅れました。</p>

<p>さて、毎月恒例 <a href="http://atnd.org/events/47730">Lisp Meet Up Presented by Shibuya.lisp #14</a>でLTしてきたので報告です。今回は「Real World OCamlを読んだ感想」というタイトルです。</p>

<!-- more -->


<p>まあ、感想とは言っても内容を軽く紹介したあとにLispにインポートしてみたという内容です。</p>

<p>今回はいつも以上にスライドが説明不足なのでどうにか頑張ってUstreamを探して下さい</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31658546" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/blackenedgold/real-world-ocamllisp" title="Real World OCamlを読んでLispと協調してみた">Real World OCamlを読んでLispと協調してみた</a></strong> from <strong><a href="http://www.slideshare.net/blackenedgold">blackenedgold</a></strong></p>

<p>会場からはquicksortの例がメモリ使用量的にquicksortとは言えないとか怒られました。あとは<code>append</code>が演算子<code>@</code>で書けちゃうとコスト高いのにみんな頻繁に使っちゃうんじゃないかとかのツッコミもありました。</p>

<p>Meet Up自体は自己紹介から始まりました初めての参加の方が14人中3人だったかな？もっと増えると嬉しいですね。京都から来た博士過程の方とか「ハッカーと画家」を読んでLispに興味を持った方とかが居ました。</p>

<p>で、私のLTは上の通り。前述の通りUstreamでも流されてます。</p>

<p>次はかにたん(@kazh98)さんから。かにたんここ2ヶ月くらいMeet Upで見掛けないなと思ってたら数学の論文に”Gauche”って文字列を入れる仕事をしてたようです。LTはRacketの新バージョンの機能FFIを使って線形代数ライブラリのバインディングを作る話でした。ジョーク飛しながら軽快に喋ってて楽しかったです。スライドはこちら。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31635279" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/kazh98/racket-31635279" title="すべてをRacketに取り込もう！ ~Racket FFI と Package システムの使い方~">すべてをRacketに取り込もう！ ~Racket FFI と Package システムの使い方~</a></strong> from <strong><a href="http://www.slideshare.net/kazh98">Kazuhiro Hishinuma</a></strong></p>

<p>そのあとは休憩からのぐだぐだタイムで私はCommon Lisperで <a href="http://cl21.org/">CL21</a>の<code>lambda</code>の略称を考えてたりしました。私は<code>^</code>良いと思うんですけど英字キーボードだと<code>S-6</code>なので押しにくいそうです。<code>fn</code>は<code>function</code>の略称っぽくてダメという話。<code>function</code>はCommon Lispでは既に別の意味がありますからね。</p>

<p>懇親会では私含めて就活生が二人居るので就活の話になりましたがLisperってまともな就活してないんですね…<br/>
大学中退してバイト先に就職した、友達の始めたベンチャーに参加してから今の職場に転職した、就活せずにふらふらしてたらShibuya.lispでLispの求人があったからそこに行った…。</p>

<p>そういえばまた隣がにとりさんだったので最近何やってますかと訊いたら<code>Utopian</code>に向けて着々と準備進めてますとの返事をいただきました。まだ計画あったんですねと返すと</p>

<blockquote><p>昨日「Utopianってまだ計画あったんですね」って言われたけど、3年前からClack、Caveman、ningle、CL-DBI、SxQL、Caveman2、Integralってずっとリリースし続けてるのは全部Utopianの為ですよ</p>

<p>— 深町英太郎 (fukamachi) (@nitro_idiot) <a href="https://twitter.com/nitro_idiot/statuses/438909695881797632">2014, 2月 27</a><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p></blockquote>

<p>とのこと。私もUtopianの下地を作るためにRubyにあってLispにないものを色々考えてたので色々話してたらCL21のコミット権もらっちゃいました。私はライブラリ(DateTimeとかQueueなどのデータ構造とか)を整備したいのですがそれらは0.2で追加される予定だそうなので今はissue潰しですかね。</p>

<p>まあ、そんなところです。そういえばClojureの会社に潜入したといういちせさん(＠ichisemasashi)にどんな感じか訊くの忘れてましたね…まあ、次回もいらっしゃるでしょうから次回訊けば良いですかね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MathJaxを使って数式を埋め込む]]></title>
    <link href="http://KeenS.github.io/blog/2014/02/21/mathjax/"/>
    <updated>2014-02-21T06:58:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/02/21/mathjax</id>
    <content type="html"><![CDATA[<p>小ネタです。ブログに数式を埋め込むときの話。</p>

<!-- more -->


<p><a href="http://www.mathjax.org/">MathJax</a>はHTMLに$\LaTeX$の式を埋め込んでJavaScriptでMathMLに変換するプロジェクトみたいです。</p>

<p>Octopressで使うには<code>(ocotpressroot)/source/_includes/custom/head.html</code>に</p>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">&lt;script type="text/x-mathjax-config"&gt;
</span><span class="line"> MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ["\\(","\\)"]] } });
</span><span class="line">&lt;/script&gt;
</span><span class="line">&lt;script type="text/javascript"
</span><span class="line"> src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"&gt;
</span><span class="line">&lt;/script&gt;
</span><span class="line">&lt;meta http-equiv="X-UA-Compatible" CONTENT="IE=EmulateIE7" /&gt;</span></code></pre></td>
</tr></table></div></figure>


<p>を追加するだけです。</p>

<p>数式を埋め込むには、上の設定だと<code>$数式$</code>又は<code>\\\(数式\\\)</code>でインライン、</p>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">\\\[
</span><span class="line">数式
</span><span class="line">\\\]</span></code></pre></td>
</tr></table></div></figure>


<p>で別行立ての数式が書けます。markdownとコンフリクトするのでバックスラッシュのエスケープ大変ですね…。<code>\begin{eqnarray*}\end{eqnarray*}</code>は無理なのかなあ</p>

<p>インライン\(e^{i\pi} = -1\)</p>

<p>別行&#92;[\lim_{n \to \infty} P(Z=l) = e^{–\lambda} \frac{ \lambda ^l}{l!}\]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell Scriptでオプションをパースするときの必勝法]]></title>
    <link href="http://KeenS.github.io/blog/2014/02/19/option-parse-for-shell/"/>
    <updated>2014-02-19T04:13:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/02/19/option-parse-for-shell</id>
    <content type="html"><![CDATA[<p>κeenです。CIMの解説 実装編の執筆はもうちょい掛かりそうです。だいたいコードが落ち着いたら書きます。</p>

<p>今回は長いオプションと短いオプションをシェルスクリプトでパースするときの話です。</p>

<!-- more -->


<p>シェルスクリプトでは<code>case</code>を使う方法と<code>getopts</code>を使う方法があります。<code>case</code>だと長いオプションと短いオプションを扱えるものの短いオプションをまとめるのに苦労し、<code>getopts</code>だと短いオプションをまとめられるものの長いオプションを扱えません。</p>

<p>そこで解決策。<code>--foo ARG</code> <code>-f ARG</code> <code>-h</code>をパースし、他のオプションも許可（無視）、<code>--</code>でパースを止めるとします。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td>
<td class="code"><pre><code class="sh"><span class="line"><span class="k">while</span> <span class="o">[</span> <span class="s2">"$#"</span> -gt 0 <span class="o">]</span>;<span class="k">do</span>
</span><span class="line"><span class="k"> </span><span class="nv">ARG</span><span class="o">=</span><span class="s2">"$1"</span>;<span class="nb">shift</span>
</span><span class="line"><span class="nb"> </span><span class="k">case</span> <span class="s2">"$ARG"</span> in
</span><span class="line"> --foo<span class="o">)</span> do_something_with <span class="s2">"$ARG"</span>;;
</span><span class="line"> --<span class="o">)</span> <span class="nb">break</span>;;
</span><span class="line"> --*<span class="o">)</span> ;;
</span><span class="line"> -*<span class="o">)</span>
</span><span class="line"> <span class="nv">OPTIND</span><span class="o">=</span>1
</span><span class="line"> <span class="k">while </span><span class="nb">getopts</span> :f:h OPT <span class="s2">"$ARG"</span>; <span class="k">do</span>
</span><span class="line"><span class="k"> case</span> <span class="s2">"$OPT"</span> in
</span><span class="line"> f<span class="o">)</span> do_something_with <span class="s2">"$OPTARG"</span>;;
</span><span class="line"> h<span class="o">)</span> do_something;;
</span><span class="line"> <span class="k">esac</span>
</span><span class="line"><span class="k"> done</span>
</span><span class="line"> ;;
</span><span class="line">  
</span><span class="line"> <span class="k">esac</span>
</span><span class="line"><span class="k">done</span>
</span></code></pre></td>
</tr></table></div></figure>


<p>単純に<code>case</code>と<code>getopts</code>を組み合わせます。ポイントは<code>-*)</code>の節の<code>OPTIND=1</code>と<code>getopts</code>の第3引数でしょうか。</p>

<p>因みにこの例だと引数を消費します。引数を消費したくなければ</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="sh"><span class="line"><span class="k">while</span> <span class="o">[</span> <span class="s2">"$#"</span> -gt 0 <span class="o">]</span>;<span class="k">do</span>
</span><span class="line"><span class="k"> </span><span class="nv">ARG</span><span class="o">=</span><span class="s2">"$1"</span>;<span class="nb">shift</span>
</span></code></pre></td>
</tr></table></div></figure>


<p>を</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
<td class="code"><pre><code class="sh"><span class="line"><span class="k">for </span>ARG;do
</span></code></pre></td>
</tr></table></div></figure>


<p>に書き換えれば良く、<code>--</code>でパースを止めたくなければ<code>--) break;;</code>の節を無くせば良く、</p>

<p>他のオプションを許したくなければ<code>--*);;</code>の節を<code>--*)exit 1;;</code>などにし、<code>getopts</code>の引数文字列<code>:f:h</code>の<code>:</code>をとって<code>getopts fh ...</code>とすれば良いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeBSDのmanページを手動インストールする]]></title>
    <link href="http://KeenS.github.io/blog/2014/02/01/freebsd-manpage/"/>
    <updated>2014-02-01T03:53:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/02/01/freebsd-manpage</id>
    <content type="html"><![CDATA[<p>FreeBSD10をインストールするときにdocをインストールしなかったら後で困ったのでメモ。環境はUbuntu13.10上のkvmに入れたFreeBSD10です。</p>

<!-- more -->


<p>本来なら<code>sudo bsdconfig</code>(9.xまでは<code>sudo sysinstall</code>)でメニューを選んでいけばインストールできるのですが、<code>ping</code>か何かがおかしくてサーバーの名前解決ができない。<code>ping FreeBSD.org</code>や<code>ping 4.4.4.4</code>が返ってこない。しかし<code>curl</code>などは普通に動きます。</p>

<p>とりあえず</p>

<pre><code>$ ftp anonymous@ftp.jp.freebsd.org
</code></pre>

<p>でログインし、</p>

<pre><code>ftp&gt; cd pub/FreeBSD/releases/i386/10.0-RELEASE
</code></pre>

<p>と進んで</p>

<pre><code>ftp&gt; get doc.txz
</code></pre>

<p>します。んで</p>

<pre><code>ftp&gt; bye
$ unxz -cd doc.txz | sudo tar xf - -C /
</code></pre>

<p>でインストール完了。</p>

<p>普通に配置するだけで良いんですね。mandbとかあるのかと思ってた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CIMの解説をしてみる コマンド編]]></title>
    <link href="http://KeenS.github.io/blog/2014/01/27/cim-explanation/"/>
    <updated>2014-01-27T13:55:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/01/27/cim-explanation</id>
    <content type="html"><![CDATA[<p>先日LTで紹介したCIMが思いの外反響を呼んでる(Githubのstarが15)ので解説でもしてみます。</p>

<p>コマンド編の次は実装編です。これでバグにエンカウントしたときの調査とか完璧ですね。</p>

<!-- more -->


<h1>インストーラ</h1>

<p>READMEにあるように</p>

<pre><code>curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
</code></pre>

<p>で<code>~/.cim/</code>にインストールできます。パスを変えたければ</p>

<pre><code>CIM_HOME=/path/to/cim curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
</code></pre>

<p>でOK。Cシェル系なら</p>

<pre><code>env CIM_HOME /path/to/cim curl https://raw.github.com/KeenS/CIM/master/scripts/cim_installer | /bin/sh
</code></pre>

<p>でしょうか。</p>

<p>ここでは<code>curl</code>を使ってますが<code>wget -O -</code>とか<code>fetch -o -</code>など標準出力に吐ければなんでも良いです。</p>

<p>あ、でも<code>CIM_HOME</code>を指定してインストールしたときにバグがある気がしてきました。今から直します。</p>

<p>CIMを使うにはシェルの起動時に初期化が必要ですが、インストーラが初期化ファイルを読みにいく処理を<code>.*rc</code>に書き出してくれます。Bourne Shellは<code>.profile</code>ですね。<br/>
書き出すファイルは<code>$SHELL</code>を見てます。<code>csh</code>、<code>tcsh</code>、<code>sh</code>、<code>bash</code>、<code>zsh</code>に対応してます。</p>

<p>あと<code>~/.emacs.d/eshell/</code>が存在したら<code>~/.emacs.d/eshell/profile</code>にも初期化処理を書き出します。一時期パスが間違ってて<code>~/.emacs.d/profile</code>に書き出してました。ごめんなさい。<br/>
vimshell(だっけ？)でも初期化さえしてしまえば使えると思うので誰か初期化処理書いて下さい。</p>

<h1><code>cim</code></h1>

<p>とりあえず<code>help</code>見ておきましょう。</p>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help
</span><span class="line">CIM -- Common Lisp Implementation Manager
</span><span class="line">
</span><span class="line">Commands currently available
</span><span class="line">install &lt;impl[-version]&gt; ;; Install the impl.
</span><span class="line">use &lt;impl[-version]&gt; ;; Use specified impl as `cl' command's backend.
</span><span class="line">resume [rm] [resume..] ;; Resume suspended installation(s) or give it up.
</span><span class="line">list &lt;command&gt; ;; List available target of &lt;command&gt;
</span><span class="line">reinstall &lt;impl[-version]&gt; ;; Reinstall the impl.
</span><span class="line">clean &lt;impl&gt;|all ;; Clean downloaded archive and src of the impl.
</span><span class="line">distclean &lt;impl&gt;|all ;; Clean built dists.
</span><span class="line">uninstall &lt;impl[-version]&gt; ;; Uninstall the impl.
</span><span class="line">purge &lt;impl&gt;|all ;; Just clean and uninstall the impl.
</span><span class="line">info ;; Display current state.
</span><span class="line">get ;; Upgrade cim itself.
</span><span class="line">version ;; Show the version
</span><span class="line">help &lt;command&gt; ;; Show help for &lt;command&gt;. If no commands are specified, show this help.
</span><span class="line">
</span><span class="line">If you want detailed help, type `cim help &lt;command&gt;'.</span></code></pre></td>
</tr></table></div></figure>


<h2><code>cim install</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help install
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim install &lt;impl[-version]&gt;
</span><span class="line"> 
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Install the given lisp implementation to cim directory.
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If you want to pass specific options to 'configure' script,
</span><span class="line">prefix 'flags='.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # install sbcl-1.1.14
</span><span class="line"> cim install sbcl-1.1.14
</span><span class="line">  
</span><span class="line"> # install latest clisp with option.
</span><span class="line"> flags='--with-libsigsegv-prefix=/usr/local' cim install clisp
</span><span class="line">
</span><span class="line">To show available lisp implementations, type 'cim list install'.
</span></code></pre></td>
</tr></table></div></figure>


<p>インストールします。はい。<code>&lt;impl[-version]&gt;</code>ってのは<code>sbcl</code>とか<code>clisp-2.48</code>とかですね。バージョンを指定しなかったら最新版になります。<code>cim list install</code>でインストール可能なものを表示しますが載ってない古いバージョンとかもインストールできる筈です。多分。</p>

<p><code>configure</code>スクリプトに渡すフラグを指定したいときは<code>flags='flag....' cim install</code>とします。ヘルプにあるように<code>libsigsegv</code>のパスを指定しないとFreeBSDでclispをインストールできなかったので用意しました。</p>

<p>Allegroはライセンス表示した方が良いのかなーとか考えてます。</p>

<h2><code>cim use</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim use &lt;impl[-version]&gt; [--default]
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Use &lt;impl&gt; as background for 'cl' command. It also affects bare lisp command.
</span><span class="line">If version is not given, use latest version.
</span><span class="line">If --default is given, use the specified implementation at initial state.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # use the latest sbcl
</span><span class="line"> cim use sbcl
</span><span class="line"> sbcl --version
</span><span class="line"> -&gt; SBCL 1.1.14
</span><span class="line"> # use old sbcl
</span><span class="line"> cim use sbcl-1.1.10
</span><span class="line"> sbcl --version
</span><span class="line"> -&gt; SBCL 1.1.10
</span><span class="line">
</span><span class="line"> # use ccl-1.9 and set it default
</span><span class="line"> cim use ccl-1.9 --default
</span></code></pre></td>
</tr></table></div></figure>


<p><code>cl</code>コマンドのバックエンドの切り替えと処理系のバージョンの両方を切り替えます。処理系の指定の仕方は<code>install</code>に同じ。じゃなかった。<code>install</code>に加えて<code>/bin:/usr/bin:/usr/local/bin</code>にあるものを<code>xxx-system</code>として指定できます。<code>sbcl-system</code>とか。</p>

<p>例えば</p>

<pre><code>cim use clisp-2.48
</code></pre>

<p>ってやると<code>cl</code>コマンドがバックエンドとしてclispのバージョン2.48を使うようになりますし、<code>clisp</code>コマンドのバージョンも2.48になります。この<code>clisp</code>の部分はリンクを貼り替えてて、一つのシェルで変更すると他のシェルにも影響が及ぶ問題があるのでそのうち直します。これ結構面倒なのでそのうちです。<br/>
clisp = clisp-2.48な状態で<code>cim use sbcl</code>するとclisp = clisp-2.48なまま<code>cl</code>のバックエンドがsbclになります。上手く使って下さい。</p>

<p><code>--default</code>を付けると次回からのデフォルト値を指定したものにしつつ<code>cim use</code>します。</p>

<h2><code>cim resume</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help resume
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim resume [rm] &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Resume interrupted installation of &lt;impl&gt;. If &lt;version&gt; is not given, the latest version is used.
</span><span class="line">If 'rm' is given, remove &lt;impl&gt; from 'resume' list.
</span><span class="line">If target is 'all', do on all the available target.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # resume the installation of clisp with configure flags
</span><span class="line"> flags='--with-libsigsegv-path=/usr/local' cim resume clisp
</span><span class="line">
</span><span class="line"> # remove all the available target.
</span><span class="line"> cim resume rm all
</span></code></pre></td>
</tr></table></div></figure>


<p><code>cim install</code>がエラー終了したり<code>Ctrl-C</code>で中断したりしたやつを再開してくれるコマンドです。<code>cim install sbcl</code>を中断したなら<code>cim resume sbcl</code>で再開できます。<code>cim resume all</code>で中断された全てのインストールを再開します。終了ステータスは再開してもまたエラーで終了したやつの数になります。</p>

<p><code>cim resume rm sbcl</code>だと<code>cim list resume</code>の結果から<code>sbcl</code>を削除できます。<code>resume</code>はしませんよ。<code>cim resume rm all</code>とかも可能です。</p>

<h2><code>cim list</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help list
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim list &lt;subcommand&gt;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">List available target for subcommand.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # list available lisp implementation to install
</span><span class="line"> cim list install
</span><span class="line">
</span><span class="line"> # show available target for list
</span><span class="line"> cim list list
</span><span class="line">
</span><span class="line"> # targets for subsubcommands are also available
</span><span class="line"> cim list resume rm
</span></code></pre></td>
</tr></table></div></figure>


<p>さっきから出てきてるので分かるかと思いますが、可能なターゲットを表示します。将来的には<code>zsh</code>の補完候補にも使うつもりです。そのときは<code>-b, --batch</code>オプションでhuman readableかmachine readableかを分けようかなと。</p>

<h2><code>cim reinstall</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help reinstall
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim reinstall &lt;impl[-version]&gt; | all
</span><span class="line"> 
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Force install already installed implementaion(s). Downloaded archives are resued if available
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If target is 'all', do on all the available targets.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # reinstall sbcl-1.1.14
</span><span class="line"> cim reinstall sbcl-1.1.14
</span><span class="line">  
</span><span class="line"> # reinstall all installed lisp impls
</span><span class="line"> cim reinstall all
</span><span class="line">
</span><span class="line">To show available lisp implementations, type 'cim list reinstall'.
</span></code></pre></td>
</tr></table></div></figure>


<p><code>cim install</code>は既にインストールされているものはインストールできないのですが、<code>reinstall</code>を使えば可能です。ダウンロードしたアーカイブがあればそれを使います。なければダウンロードから始めます。<code>all</code>は察しのようにインストール済のものを全て<code>reinstall</code>します。</p>

<h2><code>cim clean</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help clean
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim clean &lt;impl[-version]&gt; | all
</span><span class="line"> 
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Remove donwloaded archives and extracted sources of the given lisp implementations.
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If target is 'all', do on all the available targets.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # clean sbcl-1.1.14
</span><span class="line"> cim clean sbcl-1.1.14
</span><span class="line">  
</span><span class="line"> # clean all installed lisp impls
</span><span class="line"> cim clean all
</span><span class="line">
</span><span class="line">To show available lisp implementations, type 'cim list clean'.
</span></code></pre></td>
</tr></table></div></figure>


<p><code>cim install</code>は基本的に不要なものも削除しないので、それが嫌なら<code>clean</code>を使いましょうというスタンスです。アーカイブとソースを削除します。</p>

<h2><code>cim distclean</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$cim help distclean
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim distclean &lt;impl[-version]&gt; | all
</span><span class="line"> 
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Clean built files of the given lisp implementation. It doesn't mean uninstall.
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If target is 'all', do on all the available targets.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # distclean sbcl-1.1.14
</span><span class="line"> cim distclean sbcl-1.1.14
</span><span class="line">  
</span><span class="line"> # distclean all installed lisp impls
</span><span class="line"> cim distclean all
</span><span class="line">
</span><span class="line">To show available lisp implementations, type 'cim list distclean'.
</span></code></pre></td>
</tr></table></div></figure>


<p><code>cim clean</code>より控えめなコマンドです。コンパイルするときに<code>make</code>で生成されたファイルを削除します。<code>make clean</code>的な。</p>

<h2><code>cim uninstall</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help uninstall
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim uninstall &lt;impl[-version]&gt; | all
</span><span class="line"> 
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Uninstall the given lisp implementaion(s). It does't remove donwloaded archives and extracted sources.
</span><span class="line">If version is not specified, install the latest version.
</span><span class="line">If target is 'all', do on all the available targets.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # uninstall sbcl-1.1.14
</span><span class="line"> cim uninstall sbcl-1.1.14
</span><span class="line">  
</span><span class="line"> # uninstall all installed lisp impls
</span><span class="line"> cim uninstall all
</span><span class="line">
</span><span class="line">To show available lisp implementations, type 'cim list uninstall'.
</span></code></pre></td>
</tr></table></div></figure>


<p>アンインストールします。はい。ただしダウンロードしたアーカイブとソースは削除しません。</p>

<h2><code>cim purge</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help purge
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim purge &lt;impl[-version]&gt; | all
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Uninstall and clean up downloaded files of the given lisp implementation.
</span><span class="line">This command is equivalent to 'clean' and 'uninstall'.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> # purge the latest sbcl
</span><span class="line"> cim purge sbcl
</span><span class="line">
</span><span class="line">To show available target for 'purge', type 'cim list purge'
</span></code></pre></td>
</tr></table></div></figure>


<p><code>uninstall</code>のアーカイブとソースを削除する版です。</p>

<h2><code>cim info</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help info
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim info
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Display information for current cim. It includes environment variables that cim uses, what current and default lisp implementation is, what version of each implementation is used, and where system lisp is.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> # display info
</span><span class="line"> cim info
</span></code></pre></td>
</tr></table></div></figure>


<p>現在の状態を表示します。こんな感じ。</p>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim info
</span><span class="line">CIM_ID = 22176
</span><span class="line">CIM_HOME = /home/kim/.cim
</span><span class="line">
</span><span class="line">current lisp = sbcl-system
</span><span class="line">default lisp = sbcl-system
</span><span class="line">
</span><span class="line">abcl = abcl-1.2.1
</span><span class="line">alisp = alisp-9.0
</span><span class="line">ccl = ccl-1.9
</span><span class="line">clisp = clisp-2.49
</span><span class="line">ecl = ecl-13.5.1
</span><span class="line">gcl = gcl-2.6.9
</span><span class="line">sbcl = sbcl-system
</span><span class="line">
</span><span class="line">sbcl-system = /usr/local/bin/sbcl
</span><span class="line">gcl-system = /usr/bin/gcl
</span></code></pre></td>
</tr></table></div></figure>


<p><code>CIM_ID</code>ってのは<code>cim</code>がそれぞれのシェルの状態を管理するためのIDです。まあ、そのシェルのプロセスIDですね。逆にプロセスIDの取得と環境変数の設定さえできれば<code>cim</code>は動かせるのでEmacsでも簡単に動きます。</p>

<h2><code>cim get</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help get
</span><span class="line">Usage:
</span><span class="line"> cim get
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Upgrade to the latest cim.
</span><span class="line">
</span><span class="line">Examples:
</span><span class="line">
</span><span class="line"> cim get
</span></code></pre></td>
</tr></table></div></figure>


<p>cim自身のアップデートです。なんでこんな名前かというと<code>rvm</code>がそうだからです。現状はgithubのKeenS/CIMのmasterからとってきます。stable版ができたらstableに変更しますね。実はブランチを指定してとってくる方法もあったりはします。<code>cim get --branch stable</code>か <code>CIM_INSTALL_BRANCH=stable cim get</code>です。まだブランチが無いので意味ないんですけどね。</p>

<p>この辺で気付いたかもしれませんが結構環境変数で制御できるようにデザインされてます。rubyがそんな感じだからです。</p>

<h2><code>cim version</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help version
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> cim version
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Show current cim's version
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> cim version
</span></code></pre></td>
</tr></table></div></figure>


<p>めちゃくちゃバグがあるのにversionが1.0.0に見えるの気のせいです。きっと100点中の1点なんですよ。</p>

<h2><code>cim help</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cim help help
</span><span class="line">Help for 'help' is not prepared, sorry.</span></code></pre></td>
</tr></table></div></figure>


<p>あー。<code>help</code>のhelp用意してなかったー。まあ、上で使ったのが全てです。</p>

<h1><code>cl</code></h1>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ cl -h
</span><span class="line">Usage: cl [switchs] [--] [programfile] [argumensts]
</span><span class="line">
</span><span class="line">-C DIR set *default-pathname-defaults* DIR.
</span><span class="line">-d, --debug set debugging flags (push :debug into *features*)
</span><span class="line">-e, --eval SEXP one line of script. Several -e's are allowed. Omit [programfile]
</span><span class="line">-f, --load FILE load the FILE
</span><span class="line">-i EXT edit *argv* files in place and make backup with the extension .EXT
</span><span class="line">-l LIBRARY quickload the LIBRARY
</span><span class="line">-L LIBRARY quickload and use-package the LIBRARY
</span><span class="line">-r, --repl run repl
</span><span class="line">-q, --no-init do not load $CIM_HOME/init.lisp
</span><span class="line">--no-rl do not use rlwrap. This is effective only when --repl is specified
</span><span class="line">--no-right do not display right prompt. This is effective only when --repl is specified
</span><span class="line">--no-color do not use color. This is effective only when --repl is specified
</span><span class="line">-h, --help print this help
</span><span class="line">-v, --version print the version
</span><span class="line">
</span><span class="line">If neither programfile, -e (--eval) nor -r (--repl) are specified, cl reads scripts from the standard input and then eval them.
</span></code></pre></td>
</tr></table></div></figure>


<p>まあ、見たら分かりますね。ruby由来のオプションとShelly由来のオプションと私の好みのオプションがあります。<code>cl</code>を起動する方法は</p>

<ul>
<li><code>cl script.lisp</code></li>
<li><code>cl &lt; script.lisp</code></li>
<li><code>cl -e sexp</code></li>
<li><code>cl -r</code></li>
</ul>


<p>です。<code>cl script.lisp</code>はシェバン(最初の行が<code>#!</code>なもの)を無視します。</p>

<p>また、これも環境変数<code>LISP_IMPL</code>でバックエンドを制御できます。これはShelly由来ですね。</p>

<p>もう一つ、デバッガは起動しません。スクリプトやワンライナーはエラーを吐いて終了して欲しいですし次に述べますがREPLも目的からしてデバッガは相応しくないと思うからです。因みにですが<code>-d</code>オプションをつけてもデバッガは起動しません。理由はオプション解析のほとんどをLispに任せているので起動時のオブションである<code>--disable-debugger</code>を制御できないからです。需要が高そうならシェルスクリプト内で解析して頑張ってみます。</p>

<p>あ、<code>-c, --compile FILE</code>オプションつけ忘れてた。いつか入れます。<code>(compile-file FILE)</code>で可能でしょうからすぐに入るはずです。</p>

<h2><code>cl -r</code></h2>

<p>一応開発向けではなくて、ちょっと試したいときや初心者が本を片手に動かすときを想定して作ってます。エラーはメッセージのみ表示。ちょっと試したいときはあんまりデバッガを必要としませんしスタックトレースもどうせ深さ1~2なのであまり必要でないからです。なにより初心者にとってデバッガは何をして良いか分かりませんし覚えても処理系毎に操作が違います。その辺を分り易い統一インターフェースを作ることも考えたのですが「それって<code>swank</code>」って結論に至ったのでこのままです。</p>

<h1><code>ql</code></h1>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">ql -- Command line interface for quicklisp
</span><span class="line">
</span><span class="line">Commands currently available
</span><span class="line">deps &lt;system&gt; ;; Install dependencies of &lt;system&gt;.
</span><span class="line">help [command] ;; Show help.
</span><span class="line">install[quickload] &lt;system&gt;... ;; Install given system.
</span><span class="line">list {remote | local} ;; List available/installed systems.
</span><span class="line">search[system-propos] &lt;keyword&gt; ;; Search quicklisp.
</span><span class="line">uninstall &lt;system&gt; ;; Uninstall system.
</span><span class="line">update [system] ;; Update dist info and installed systems.</span></code></pre></td>
</tr></table></div></figure>


<p>一番未完成なコマンドです。主な理由は私が<code>quicklisp</code>の使い方を分かってないからです。</p>

<h2><code>ql deps</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help deps
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql deps [--path &lt;path&gt;] &lt;system&gt;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Install dependencies of given system. If path is specified, install dependencies there.
</span><span class="line">Once you run 'ql --path &lt;path&gt; deps', you don't need to specify '--path' because the path is written out to '.quicklisp-path' in current directory.
</span><span class="line">You can run 'ql deps' for a local system if '.asd' file is in current directory.
</span><span class="line">This command is useful when you want to separate quicklisps for local project.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql deps --path ./quicklisp my-project
</span></code></pre></td>
</tr></table></div></figure>


<p>rubyの<code>bundler</code>を参考に作りました。<code>Gemfile</code>に対応する<code>QLfile</code>でも読もうかと思いましたが良く考えたら<code>.asd</code>で十分じゃんとの思いに至ったのでカレントパスの<code>asd</code>ファイルを読みます。<br/>
が、奴は依存システムのバージョンまでは指定できなかった気がするのでやっぱり必要な気がします。</p>

<p><code>ql deps --path ./ql myapp</code>とすると依存システム(+新たな<code>quicklisp</code>本体)を<code>./ql</code>にインストールしてくれます。<code>quicklisp</code>本体のインストールは不要ですがどうやったら回避できるかは今模索中です。<br/>
<code>--path</code>の位置が<code>cim use --default</code>と違うのでご注意下さい。これは主に内部で使ってる<code>parse-option</code>の欠陥に由来します。<br/>
一度指定すると<code>.quicklisp-path</code>にパスを書き出してくれるので次回からは必要なくなります。カレントディレクトリに複数の<code>asd</code>ファイルがあってそれぞれでパスを使い分けたいとかはできません。<br/>
あと、最大の欠陥として<code>./ql</code>にシステムをインストールしてもそれを読み込みにいくコマンドがないので実用性ゼロです← まあ、<code>cl</code>あたりを弄ってカレントパスに<code>.quicklisp-path</code>があったら読みにいくようにします。その辺は<code>.lisp-impl</code>とかも含めて考えます。</p>

<h2><code>ql help</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help help
</span><span class="line">Help for 'help' is not prepared, sorry.
</span></code></pre></td>
</tr></table></div></figure>


<p>こいつもhelp用意してなかった。まあ、良いや。</p>

<h2><code>ql install</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help install
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql install &lt;system&gt;...
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Install given system(s) to $CIM_HOME/quicklisp.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> # install clack
</span><span class="line"> ql install clack
</span></code></pre></td>
</tr></table></div></figure>


<p>なんでこいつがhelpの先頭に居ないんでしょうね。<code>cim</code>に比べて適当ですね。</p>

<p><code>ql quickload</code>っていう別名も持ってます。<code>ql help</code>には<code>quickload</code>が本名で<code>install</code>がエイリアスって書いてありましたが実装ミスりました。</p>

<p>名前の通り<code>ql:quickload</code>します。<code>system</code>は複数指定できます。</p>

<h2><code>ql list</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql list
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql list {remote | [local]}
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">List installed systems. if 'remote' is given, list all the available systems. 'ql list local' is equivalent to 'ql list'.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql list remote
</span></code></pre></td>
</tr></table></div></figure>


<p><code>cim list</code>と使い方が違ってアレですね。現状<code>quicklisp</code>に登録されているもの全てを表示する<code>ql list remote</code>とインストールしたものだけを表示する<code>ql list [local]</code>があります。<code>ql deps</code>でパスを指定したやつらにも使いたかったのですが方法が分かんないのでとりあえず先送りです。</p>

<h2><code>ql search</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help search
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql search &lt;keyword&gt;
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Search quicklisp for &lt;keyword&gt;.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql search http
</span></code></pre></td>
</tr></table></div></figure>


<p>別名<code>system-apropos</code>。別名と本名が<code>ql help</code>と違うのも単に<code>ql:system-apropos</code>を呼ぶのも<code>ql install</code>と同じです。出力結果をもうちょっと制御したいなと思ってます。</p>

<h2><code>ql uninstall</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help uninstall
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql uninstall &lt;system&gt;...
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Uninstall given system(s).
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql uninstall caveman clack
</span></code></pre></td>
</tr></table></div></figure>


<p><code>ql:uninstall</code>に同じ。以上。</p>

<h2><code>ql update</code></h2>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">$ ql help update
</span><span class="line">Usage:
</span><span class="line">
</span><span class="line"> ql update [client]
</span><span class="line">
</span><span class="line">Description:
</span><span class="line">
</span><span class="line">Update installed systems. If target 'client' is given, update quicklisp itself.
</span><span class="line">
</span><span class="line">Example:
</span><span class="line">
</span><span class="line"> ql update client
</span></code></pre></td>
</tr></table></div></figure>


<p><code>ql:update-all-dists</code>か<code>ql:update-client</code>かを選べます。最初はsystem毎にアップデートしたかったのですが無理っぽいので止めました。</p>

<h1>おわりに</h1>

<p>とりあえずCIMの機能はこれで全部です。あ、開発用に<code>cim reset</code>とかありますけど使わないで下さい。とういうか使うなよ。絶対使うなよ。</p>

<p>これら使ってみてバグがあったらgithubのissueに投げるなりtwitterで報告するなりして下さい。</p>

<p>ところでCIMは私はちむと読んでます。しー・あい・えむと読む人も居るようです。何でも良いです。プロジェクトとしてのちむとコマンドとしてのちむを区別するためにコマンドは小文字で<code>cim</code>、そして<code>cim</code>、<code>cl</code>、<code>ql</code>を含んだプロジェクトは大文字でCIMと書くことにします。今考えました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #13でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13/"/>
    <updated>2014-01-24T02:29:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/01/24/lisp-meet-up-number-13</id>
    <content type="html"><![CDATA[<p>もう12時回ったので昨日になってしまいましたが <a href="http://atnd.org/events/46746#comments">Lisp Meet Up presented by Shibya.lisp #13</a>に参加してLTしてきたので報告(?)エントリです。</p>

<!-- more -->


<p>先月東京に戻ってきた深町さんがめちゃくちゃ宣伝してたせいか20人参加希望があり、19人参加しました。</p>

<p>自己紹介ではClojureが多いなーってのとRubyistが混ってたりしたのが印象的でした。Emacs Lispの人も居たり。</p>

<p>LTは一人目がにとり(深町英太郎 (fukamachi))(@nitro_idiot)さん。今更ながら呼び方に困りましたね。内容はO/Rマッパーの <a href="https://github.com/fukamachi/integral"><code>integral</code></a>の機能と実装について。<br/>
非Common Lisperが多い中Meta Object Protocolについて色々説明したりと大変そうでした。私はCommon LisperなのでMOPにそんな使い方がるのかとか結構面白かったです。<br/>
<s>スライドはまだ上げてないみたいです。そのうち上がるでしょう。</s>上がりました。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30362150" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/fukamachi/lisp-meet-up-presented-by-shibuyalisp-13" title="Integral - New O/R Mapper for Common Lisp">Integral – New O/R Mapper for Common Lisp</a></strong> from <strong><a href="http://www.slideshare.net/fukamachi">fukamachi</a></strong></p>

<p>二人目が私。最近作ってる <a href="https://github.com/KeenS/CIM"><code>CIM</code></a>についてです。スライド見るのが速いですね。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30338391" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/blackenedgold/cim-common-lisp-implementation-manager" title="CIM - Common Lisp Implementation Managerを作りました">CIM – Common Lisp Implementation Managerを作りました</a></strong> from <strong><a href="http://www.slideshare.net/blackenedgold">blackenedgold</a></strong></p>

<p>実際にそれぞれのコマンドを動かしてみた結果、予想してなかったエラーなとがあったものの割と聴衆の反応は良かったです。あとはPure Bourne Shell Scriptで挑んで爆死した話とかしたりですね。「詳解シェルスクリプト」を読んだり<code>man</code>ページ読んだりして頑張ったんですよ。</p>

<p>それが終わったら一旦休憩。そしたらわざわざ深町さんが私のところに来て下さって「Shellyより良いプロダクトになると思います。頑張って下さい。」との御言葉を頂きました。非常に嬉しかったです。私が作ったものが認められた。しかも着想の元になったShellyの作者の深町さんから。<br/>
でもその後実際に何人か使ってみてくれたのですが、バグが立て続けに3つくらい発覚して「…これ、テスト必要ですね」と絶句。分かってます。分かってますけど難しいんです泣。<br/>
他はgithubでCIMを探そうとしてる方が居たんですが同じ名前のレポジトリがめちゃくちゃあって検索性悪いなとか。何故か私のハンドルネームの最初の文字がk(ケー)ではなくκ(カッパ)なのを知ってたり。</p>

<p>その後の懇親会では向かいが深町さん、隣が佐野さん(実践Common Lispの訳者)で、Common Lispの今後とか色々な話をしてました。 <a href="http://redmonk.com/sogrady/2014/01/22/language-rankings-1-14/">ここ</a>のグラフでCommon Lispがありえない位置にいるしどうやったら普及するんだろうねーとか。</p>

<p>運営のchikuさん potixさん、発表を聞いてCIMを試してくれたりGithubにstarくれたりしたみなさんありがとう御座いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mpd 小ネタ]]></title>
    <link href="http://KeenS.github.io/blog/2014/01/21/mpd-something/"/>
    <updated>2014-01-21T02:29:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/01/21/mpd-something</id>
    <content type="html"><![CDATA[<p>mpdのちょっとした便利な使い方。</p>

<!-- more -->


<p><code>at</code>がRSPiにインストールされてる前提で、RSPi上で</p>

<pre><code>$ at 7:00
at&gt; mpc toggle
^D
</code></pre>

<p>とすればRSPiを目覚ましや時報として使えます。停止にはsshログインして<code>mpc toggle</code>する必要があるのでそこまでする頃には起きてる筈。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSPiでMongoDBを動かし、Twitter Post Alertを作った話]]></title>
    <link href="http://KeenS.github.io/blog/2014/01/19/rspi-plus-mongodb-plus-twitter/"/>
    <updated>2014-01-19T18:17:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/01/19/rspi-plus-mongodb-plus-twitter</id>
    <content type="html"><![CDATA[<p>κeenです。ここのところ寒い日が続いてますね。寒いと家に扃(ひきこも)ってTweet数が急上昇します。 すると一日に何postしてるか気になるのでカウンタを作りました。<br/>
そのときの苦労話です。</p>

<!-- more -->


<p>ただ、どうせ記録取るなら色々やりたいのでRspberry Piで一日のpost数、fav数、そしてメンヘラなことにフォロー/フォロワー全員のidを毎日記録することにしました。これで誰にリムられたかブロられたか一目瞭然ですね。</p>

<p>ここで一つ問題が。post, fav数は良いのですがフォロー/フォロワーのid一覧は毎日変わるのでmysqlで管理するのはちょっと面倒かなと。なのでMongoDBで管理することにしたいんですが、raspbianの<code>apt</code>にないんですよね。仕方ないので手動ビルドで対応しました。</p>

<h2>MongoDBのビルド</h2>

<p><a href="http://c-mobberley.com/wordpress/index.php/2013/10/14/raspberry-pi-mongodb-installation-the-working-guide/">ここ</a>を参考に</p>

<pre><code>cd ~/compile
sudo apt-get install build-essential libboost-filesystem-dev libboost-program-options-dev libboost-system-dev libboost-thread-dev scons libboost-all-dev python-pymongo git
git clone https://github.com/skrabban/mongo-nonx86
cd mongo-nonx86
sudo scons
</code></pre>

<p>としました。が、<code>scons</code>に一晩かかるとのことなので放置してたら何故かraspberry piが落ちてる…<br/>
気をとりなおして再起動。もう一度<code>sudo scons</code>すると今度はエラー終了。<code>sig 9 killed</code>…いや、私なにもしてないですよ?ダメ元で今度は</p>

<pre><code>sudo scons install
</code></pre>

<p>したら完走。良ク分カラン。狂想曲感が出てますね。</p>

<h2>MongoDBのインストール</h2>

<p>さっきのでインストール終わったと思うでしょ？違うんですよ。<code>init.d</code>だとか<code>mongodb.conf</code>だとかは配置されてないんですよ。<code>debian/</code>以下に色々入ってるので</p>

<pre><code>cd debian
sudo cp mongodb.conf /etc/mongodb.conf
</code></pre>

<p>までは良いのですが、<code>init.d</code>と<code>mongodb.upstart</code>の<code>mongod</code>のパスが<code>/usr/bin/mongod</code>でハードコードされてるんですよ。上の<code>sudo scons install</code>だと<code>/usr/local/bin/mongod</code>です。さらに起動オプションに<code>--dbpadh /var/lib/mongodb</code>と<code>--logpath /var/log/mongodb/mongodb.log</code>が指定されていて、<code>mongodb.conf</code>で上書きしているにも係らずそこまでのパスが存在しないとエラー吐いて起動してくれないので修正。<br/>
<code>mongodb.upstart</code>は直ぐ分かるので良いとして、<code>init.d</code>は</p>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">48d47
</span><span class="line">&lt; 
</span><span class="line">50c49
</span><span class="line">&lt; DAEMON=/usr/bin/mongod
</span><span class="line">---
</span><span class="line">&gt; DAEMON=/usr/local/bin/mongod
</span><span class="line">100c99
</span><span class="line">&lt; DAEMON_OPTS="$DAEMON_OPTS --config $CONF"
</span><span class="line">---
</span><span class="line">&gt; DAEMON_OPTS="run --config $CONF"
</span></code></pre></td>
</tr></table></div></figure>


<p>な感じの修正です。なんか空行が一つ減ってますが気にしない。<br/>
ここまでしたらようやく</p>

<pre><code>chmod +x init.d mongodb.upstart
sudo cp init.d /etc/init.d/mongodb
sudo cp mongodb.upstart /etc/init/mongodb
</code></pre>

<p>で完了です。<code>man</code>とかもあるのですが配置の仕方が分からないので放置←</p>

<pre><code>sudo service mongodb start
mongo
</code></pre>

<p>で接続確認できます。</p>

<h2>Twitterのpostを集約する</h2>

<p>ビックリするくらい簡単。twitterのAPI keyを持ってる前提ですが。</p>

<pre><code>sudo gem install twitter mongo
</code></pre>

<p>で必要なgemをインストールし、<code>~/.twitter.rb</code>に</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="vg">$client</span> <span class="o">=</span> <span class="ss">Twitter</span><span class="p">:</span><span class="ss">:REST</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">conf</span><span class="o">|</span>
</span><span class="line"> <span class="n">conf</span><span class="o">.</span><span class="n">consumer_key</span> <span class="o">=</span> <span class="s2">"yours"</span>
</span><span class="line"> <span class="n">conf</span><span class="o">.</span><span class="n">consumer_secret</span> <span class="o">=</span> <span class="s2">"yours"</span>
</span><span class="line"> <span class="n">conf</span><span class="o">.</span><span class="n">access_token</span> <span class="o">=</span> <span class="s2">"yours"</span>
</span><span class="line"> <span class="n">conf</span><span class="o">.</span><span class="n">access_token_secret</span> <span class="o">=</span> <span class="s2">"yours"</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td>
</tr></table></div></figure>


<p>と保存しておきます。昔と形式が変わりましたね。この形式になってからスレッドセーフになり、Twitter Stream APIにも対応してるようです。いつか扱ってみたい</p>

<p>集計ですが</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td>
<td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#! /usr/local/bin/ruby</span>
</span><span class="line"><span class="c1"># coding: utf-8</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">'twitter'</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">'mongo'</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">'time'</span>
</span><span class="line"><span class="nb">load</span> <span class="s2">"~/.twitter.rb"</span>
</span><span class="line">
</span><span class="line"><span class="n">doc</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"tweets"</span> <span class="o">=&gt;</span> <span class="vg">$client</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">tweets_count</span><span class="p">,</span>
</span><span class="line"> <span class="s2">"favs"</span> <span class="o">=&gt;</span> <span class="vg">$client</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">favorites_count</span><span class="p">,</span>
</span><span class="line"> <span class="s2">"followers"</span> <span class="o">=&gt;</span> <span class="vg">$client</span><span class="o">.</span><span class="n">friend_ids</span><span class="o">.</span><span class="n">to_a</span><span class="p">,</span>
</span><span class="line"> <span class="s2">"friends"</span> <span class="o">=&gt;</span> <span class="vg">$client</span><span class="o">.</span><span class="n">follower_ids</span><span class="o">.</span><span class="n">to_a</span><span class="p">,</span>
</span><span class="line"> <span class="s2">"timestamp"</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">"%Y%m%d%H%M%S"</span><span class="p">)}</span>
</span><span class="line"><span class="n">col</span> <span class="o">=</span> <span class="ss">Mongo</span><span class="p">:</span><span class="ss">:Connection</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">db</span><span class="p">(</span><span class="s2">"twitter"</span><span class="p">)</span><span class="o">.</span><span class="n">collection</span><span class="p">(</span><span class="s2">"tweets"</span><span class="p">)</span>
</span><span class="line"><span class="n">last</span> <span class="o">=</span> <span class="n">col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="o">[</span><span class="s2">"timestamp"</span><span class="p">,</span><span class="ss">:desc</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class="line">
</span><span class="line"><span class="n">tweets_sub</span> <span class="o">=</span> <span class="n">doc</span><span class="o">[</span><span class="s2">"tweets"</span><span class="o">]</span> <span class="o">-</span> <span class="n">last</span><span class="o">[</span><span class="s2">"tweets"</span><span class="o">]</span>
</span><span class="line"><span class="n">favs_sub</span> <span class="o">=</span> <span class="n">doc</span><span class="o">[</span><span class="s2">"favs"</span><span class="o">]</span> <span class="o">-</span> <span class="n">last</span><span class="o">[</span><span class="s2">"favs"</span><span class="o">]</span>
</span><span class="line"><span class="n">followers_sub</span> <span class="o">=</span> <span class="n">doc</span><span class="o">[</span><span class="s2">"followers"</span><span class="o">].</span><span class="n">length</span> <span class="o">-</span> <span class="n">last</span><span class="o">[</span><span class="s2">"followers"</span><span class="o">].</span><span class="n">length</span>
</span><span class="line"><span class="n">friends_sub</span> <span class="o">=</span> <span class="n">doc</span><span class="o">[</span><span class="s2">"friends"</span><span class="o">].</span><span class="n">length</span> <span class="o">-</span> <span class="n">last</span><span class="o">[</span><span class="s2">"friends"</span><span class="o">].</span><span class="n">length</span>
</span><span class="line"><span class="n">col</span><span class="o">.</span><span class="n">insert</span> <span class="n">doc</span>
</span><span class="line"><span class="n">message</span> <span class="o">=</span> <span class="s2">"前回計測(</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">last</span><span class="o">[</span><span class="s2">"timestamp"</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">strftime</span> <span class="s2">"%Y-%m-%d %H:%M:%S"</span><span class="si">}</span><span class="s2">)以降</span><span class="se">\n</span><span class="s2">"</span>
</span><span class="line"><span class="n">message</span> <span class="o">+=</span> <span class="s2">"</span><span class="si">#{</span><span class="n">tweets_sub</span><span class="si">}</span><span class="s2">回ツイートし</span><span class="se">\n</span><span class="s2">"</span>
</span><span class="line"><span class="n">message</span> <span class="o">+=</span> <span class="s2">"</span><span class="si">#{</span><span class="n">favs_sub</span><span class="si">}</span><span class="s2">回favり</span><span class="se">\n</span><span class="s2">"</span>
</span><span class="line"><span class="n">message</span> <span class="o">+=</span> <span class="s2">"友達は</span><span class="si">#{</span><span class="n">friends_sub</span><span class="o">.</span><span class="n">abs</span><span class="si">}</span><span class="s2">人</span><span class="si">#{</span><span class="n">friends_sub</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="s2">"増え"</span> <span class="p">:</span> <span class="s2">"減り"</span><span class="si">}</span><span class="se">\n</span><span class="s2">"</span>
</span><span class="line"><span class="n">message</span> <span class="o">+=</span> <span class="s2">"フォロワーは</span><span class="si">#{</span><span class="n">followers_sub</span><span class="o">.</span><span class="n">abs</span><span class="si">}</span><span class="s2">人</span><span class="si">#{</span><span class="n">followers_sub</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="s2">"増え"</span> <span class="p">:</span> <span class="s2">"減り"</span><span class="si">}</span><span class="s2">ました"</span>
</span><span class="line"><span class="vg">$client</span><span class="o">.</span><span class="n">update</span> <span class="n">message</span>
</span></code></pre></td>
</tr></table></div></figure>


<p>で全部です。Rubyのハッシュ+配列がそのままinsert/selectできるのでぜんぜんMongoDBを意識しなくて良いですね。</p>

<p>ところで<code>datetime</code>型が無さげだったので<code>timestamp</code>をソートキー兼idにするために<code>YYYYMMDDHHMMSS</code>形式の文字列で格納してます(整数は8bitまでっぽかったです)。他に良い方法があると思うのですが思いつきませんでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.emacsの整理をした話 + EmacsとViとShellとLispを悪魔合体させたら超絶便利だった]]></title>
    <link href="http://KeenS.github.io/blog/2013/12/13/dot-emacs-clean-up/"/>
    <updated>2013-12-13T02:55:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/12/13/dot-emacs-clean-up</id>
    <content type="html"><![CDATA[<p>やや長いタイトルですが・・・年末になって大掃除がやってきましたね。みなさんもそろそろ.emacsの大掃除をしましょう。</p>

<!-- more -->


<p>私の.emacsは元々1300行ちょいあってEmacsの起動に7~8秒(体感)かかってましたが大掃除&amp;高速化をした結果800行弱、起動に1秒(体感)ほどになったので整理の仕方を共有しますね。</p>

<p>前提ですが、私はinitローダーとかは使ってません。全部<code>init.el</code>に書いてます。で、機能毎にページを作って(<code>C-q C-l</code>)ます。ただ、それだけだと視認性が悪いので見出しとして<code>C-u C-u C-u ;</code>で<code>;</code>を64個挿入して次の行にコメントで<code>#</code>付きのタイトルを付けてます。</p>

<p>具体的には</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class="common-lisp"><span class="line"><span class="nv">^L</span>
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="c1">;; #Lisp</span>
</span></code></pre></td>
</tr></table></div></figure>


<p>こんな感じのものが機能毎に書かれてます。これで<code>C-s</code>や<code>M-x occur</code>でハッシュタグのように検索することも<code>C-v</code>でスクロールしていって目grepすることも<code>C-x ]</code>で機能毎にジャンプすることもできます。</p>

<h1>1. Emacsの最新版を使う</h1>

<p>結構重要です。「標準のやつだと欲いこの機能がないから拡張パッケージ入れた」なんてのも最新版では改善されていたりします。例えば私は<code>emacs-w3m</code>を使っていましたが、Emacsのmasterブランチには<code>eww</code>なるEmacs Lisp製のブラウザが入っているのでそれを使うようにしました。</p>

<p><s>ただ、これが絶対的正義かというとそうでもなく、パッケージで入れてない分
Ubuntuのインプットメソッドとの連携部分がなかったので<code>uim.el</code>を入れる
必要が出てきたりと、面倒な部分もありました。Emacs標準のインプットメソッドはどうにも使いものにならず、
<code>ddskk</code>もuim-skkとコンフリクトする(というか<code>C-j</code>上書きとかありえない)ので使いません。インプットメソッドの切り替え部分は</s></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
<td class="code"><pre><code class="common-lisp"><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">"&lt;hiragana-katakana&gt;"</span><span class="p">)</span> <span class="nf">#'</span><span class="nv">uim-mode</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">"&lt;zenkaku-hankaku&gt;"</span><span class="p">)</span> <span class="nf">#'</span><span class="nv">uim-mode</span><span class="p">)</span> <span class="p">(</span><span class="nv">autoload</span> <span class="nf">#'</span><span class="nv">uim-mode</span> <span class="s">"uim"</span> <span class="no">nil</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td>
</tr></table></div></figure>


<p>になりました。</p>

<p>2013-12-16追記<br/>
これは私が<code>~/.Xresources</code>に<code>Emacs*useXIM: false</code>を書いていたのが原因でした。<code>Emacs*useXIM: true</code>に書き換え、<code>xrdb ~/.Xresources</code>すると直りました。</p>

<h1>2. 普段使わない設定は全部消す</h1>

<p>基本ですね。私は<code>summary-edit.el</code>だとか<code>multiverse.el</code>だとかるびきちさんの本を読んで便利そうだから入れたものの、結局使わなかったものの設定&amp;elispをごっそり削除。あとかなりの言語に対してデフォルトで<code>auto-mode-alist</code>が設定されていたので<code>auto-mode-alist</code>の設定も全部消して、必要になったら書き足すようにしました。</p>

<h1>3. 普段使っていても代替の効くものは削除</h1>

<p>これは高速化の意味と自分の環境に依存しない意味があります。最近、自分のラップトップ以外でもEmacsを触ることが多くあって、デフォルトのキーを上書きして使ってる部分で何度も誤操作したのでそれを減らす目的です。<code>bm.el</code>は<code>C-x r SPC</code>の<code>register</code>系や<code>C-x C-SPC</code>で対応(registerは覚えれば使い出がありそうなのでいつか解説書くかもです)、<code>open-junk-file.el</code>は<code>~/tmp</code>を作って対応、<code>recentf-ext.el</code>は<code>helm-file-buffers</code>だとか。</p>

<p>あと全て<code>helm.el</code>に置き換えて<code>helm.el</code>と<code>anything.el</code>が混在してる状態をどうにかしたかったのですが、<code>php-completion.el</code>かなにかが依存しててトドメを刺せませんでした。</p>

<p>あと、<code>viewer</code>の代替を探していたらタイトルにあるように悪魔合体が起きたので後で書きますね。</p>

<h1>4. できる限り標準のものを使う</h1>

<p>標準で提供されているパッケージは<code>autoload</code>が<code>emacs</code>バイナリに組込まれてる(と思う)ので起動時のオーバーヘッドはありません。<code>flymake.el</code>や<code>ruby-mode.el</code>が標準で提供されてるのに気付いたのでそれを使ったりなど。一度<code>(emacsroot)/lisp</code>以下を眺めてみることをお勧めします。結構発見があるものです。</p>

<h1>5.<code>autoload</code>を使う</h1>

<p><code>autoload</code>とはファイルの読み込みを必要になるまで遅らせる仕組みです。「必要になる」ってのはそのファイルで定義されている関数が呼ばれたときです。賢い<code>require</code>と思えば良いでしょう。</p>

<pre><code>(autoload #'関数名 "関数が呼ばれたときに読むファイル名" nil interactivep)
</code></pre>

<p>みたいに使います。<code>interactivep</code>の部分は<code>M-x</code>で呼ぶものなら<code>t</code>、そうでなければ<code>nil</code>です。<code>require</code>を<code>autoload</code>で書き換えていけば理論上起動時の読み込み0にできるのでかなり高速化できます。</p>

<p>が、実際は一々<code>autoload</code>書くのはしんどいので次です。</p>

<h1>6.できる限り<code>package.el</code>を使う</h1>

<p><code>package.el</code>は必要な関数の<code>autoload</code>を自動生成して読み込んでおいてくれるのでかなりの手間が省けます。そして<code>autoload</code>があるのに<code>require</code>してると折角の<code>package.el</code>の配慮が無駄になります。</p>

<p>自動生成された<code>autoload</code>は<code>elpa/パッケージのディレクトリ/パッケージ-autoloads.el</code>にあるので確認しながら<code>init.el</code>の邪魔なものを消していきます。これでかなり<code>init.el</code>の行数が減ります。今まで無駄な設定していたんだなと気付きます。</p>

<h1>7. <code>eval-after-load</code>を使う</h1>

<p>8割程の設定は<code>autoload</code>で対応できるのですが、踏み込んだ設定をしているとパッケージの内部の関数を使ってしまってどうしてもその式が評価される前にパッケージが読み込まれている必要があることがあります。</p>

<p>そんなときは<code>eval-after-load</code>を使います。名前のまんま、ロードした後で<code>eval</code>してくれます。</p>

<pre><code>(eval-after-load 'ファイル名
    '式)
</code></pre>

<p>の形で使います。複数の式を使いたい場合は<code>progn</code>を使って</p>

<pre><code>(eval-after-load 'ファイル名
    '(progn
         式1
         式2...))
</code></pre>

<p>のように使います。あるパッケージの拡張パッケージなんかもここで読むと良いかもしれません。</p>

<h1>8.その他</h1>

<p>メールクライアントを標準のものにしようとしましたが、<code>gnus.el</code>はちょっと受け付けなくてその他はimapを喋らないので断念。でも色々調べてたら<code>mew</code>より<code>wanderlust</code>の方が良いようなので使い初めました。表示が綺麗で良いですね。HTMLのレンダリングも<code>emacs-w3m</code>に頼らず標準の<code>shr.el</code>を使っているのも◎。</p>

<p>同じような経緯で<code>JDEE</code>をやめて<code>malabar.el</code>を使うようにしました。ただ、私は<code>maven</code>使いではないので微妙ではあります。まあ、そもそもプロジェクト単位でJavaを書くことがないってのもあるんですが。Androidのスケルトンがantなのでantでできたら嬉しいなーって。</p>

<h1>EmacsとViとShellとLispを悪魔合体させた話</h1>

<p>私はEmacsの狂信者ですが読み専のときはちょいちょいviを使うこともあります。片手で操作できるのは便利です。Emacsで読み専といえば<code>view-mode</code>です。そこでもhjklを使うべく<code>view-mode-map</code>に手を加えてましたが、大掃除ということで全部削除。</p>

<p>その後で<code>emacsroot/lisp/emulate/</code>以下を読んでいるとなんかviのエミュレーターが3つも見付かりました。<code>vi.el</code>、<code>vip.el</code>、<code>viper.el</code>です。後者になるほどviとの互換性が高くなります。とりあえずは<code>hjkl</code>が使えれば良いので<code>vi.el</code>を使ってみたところ、ん〜…といったところ。<code>vip.el</code>と試して結局<code>viper.el</code>に落ち着きました。</p>

<pre><code>(global-set-key (kbd "C-x C-q") #'(lambda ()
                    (interactive)
                    (toggle-viper-mode)
                    (force-mode-line-update)))
</code></pre>

<p>設定はこんな感じです。<code>toggle-viper-mode</code>してもモードラインの表示が変わらないことがあったので<code>force-mode-line-update</code>を加えました。</p>

<p><code>viper.el</code>は単なるviのエミュレートだけではなく、Levelに応じて良い感じにemacsと悪魔合体してくれます。私は最高レベルの5にしました。”C-x C-s”など基本的なコマンドはそのまま使えるようになってます。<code>:</code>で始まるvi(ex)のコマンドも使えます。<code>C-z</code>でemacs&lt;–>viを切り替えたり。非常に便利です。</p>

<p>尚、私はvi使いであってvim使いではないのでevilは使いません。</p>

<p>もう一つ、shellの話。今までは<code>multiterm</code> × <code>zsh</code>な感じでしたが、「できる限り標準のものを使う」方針で<code>eshell</code>に切り替えました。<code>eshell</code>はEmacs Lispで書かれたshellです。これが思った以上に便利です。るびきちさんの本では標準出力とエラー出力の切り分けができてないと書かれてましたがそれは修正されてるようです。</p>

<p>あとは<code>/dev/kill</code>だとか<code>&gt;&gt;&gt;</code>だとかバッファへのリダイレクトだとか<code>grep</code>の上書きだとか色々楽しい拡張もあるのですが、一番は<code>eshell</code>がLispであること。<code>eshell</code>上で任意のEmacs Lisp式を実行できます。最近Emacs LispやLispに精通してきたので非常に有り難いです。<br/>
それにファイルを開くときもその後で同じディレクトリのファイルを開くことが多いので一旦 <code>cd</code>してから<code>find-file</code>をするとアクセスし易くて捗ります。もう起動時に<code>eshell</code>が立ち上がるようにして、基本そこから操作するようにしてます。guakeもそんなに使わなくなりました。他の環境でも使えるので安心して依存できます。</p>

<p>で、ファイルを開くときはどうしてるかというと実はemacsの<code>find-file</code>ではなくviの<code>:e file-name</code>です。Emacs上でLispで出来たShellを使いつつviを動かしてます。かなり人を選びますが「EmacsのヘビーユーザーでLispに精通しててviを便利だと思ってる人」は試してみてはいかがでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ClackのHandlerの書き方]]></title>
    <link href="http://KeenS.github.io/blog/2013/12/06/lisp-advent-calendar-7/"/>
    <updated>2013-12-06T00:06:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/12/06/lisp-advent-calendar-7</id>
    <content type="html"><![CDATA[<p>(この記事は <a href="http://qiita.com/advent-calendar/2013/lisp">Lisp Advent Calendar</a> 7日目のためのエントリです。<br/>
 ( <a href="http://meymao.hatenablog.com/entry/2013/12/06/140029">6日目</a> meymaoさんより「Lisperがクリスマスに贈るべきプレゼント三選」)<br/>
 ( <a href="http://www.principia-m.com/ts/0081/index-jp.html">8日目</a> athos0220さんよりマクロとクロージャで作る並行プログラミング言語))</p>

<p>ClackのHandlerの書き方についてちゃちゃっと解説します。</p>

<!-- more -->


<p>さっくりゆるふわな感じで行くので <a href="http://clacklisp.org/">clack公式</a>だとか <a href="http://clacklisp.org/tutorial/ja/">チュートリアル</a>だとかも参考にして下さい。とは言ってもCommon Lispな方なら知ってるでしょう。</p>

<h2>Clackって？</h2>

<p>PerlのPlackやRubyのRackと同じくCommon Lispの統一HTTPサーバーインターフェースです。開発時はHunchentootで、本番はFastCGIでみたいなことが簡単にできます。</p>

<h2>Handlerって？</h2>

<p>HunchentootやFastCGIといったバックエンドとClackとの間でリクエストやレスポンスの受け渡しを担当します。さっくり言うとHandlerを書けばClackで使えるサーバーが増える訳です。今(2013-12現在)のところ、Hunchentoot、FastCGI、Apache + mod_lisp2があるようです。</p>

<p>じゃあ、実際に軽量サーバーの <a href="https://github.com/gigamonkey/toot">toot</a>のハンドラを書きながら解説しますね</p>

<h2>準備</h2>

<p><code>git clone git@github.com:fukamachi/clack.git</code>してclackのソースコードを持ってきます。他のHanderがそうしてるようなので</p>

<ul>
<li><code>clack/clack-handler-toot.asd</code></li>
<li><code>clack/src/core/handler/toot.lisp</code></li>
</ul>


<p>を作ります。<code>core</code>じゃなくて<code>contrib</code>だろとかそもそも自分のリポジトリに作れよとかは自由にやって下さい。<code>clack/clack-handler-toot.asd</code>は適当に似た名前のやつをコピーすれば良いんじゃないですかね？（適当</p>

<h2>書き方</h2>

<p>いたって簡単で、<code>run (app &amp;key debug (port 5000)) -&gt; acceptor</code>と<code>stop (acceptor) -&gt; 多分決まってない</code>を実装すれば良いです。</p>

<p>とはいっても<code>stop</code>は1行で終わりますが<code>run</code>は大きく分けて</p>

<ol>
<li>. サーバーを立ち上げる</li>
<li>. サーバーから渡されたリクエスト(多くの場合<code>request</code>オブジェクト)をplistにして<code>app</code>に渡す</li>
<li>. <code>app</code>のlist形式の返値を適切な形(多くの場合<code>response</code>オブジェクト)にしてサーバーに返す</li>
<li>. エラーハンドリング</li>
</ol>


<p>の4つの作業があります。一つ一つ説明していきますね。</p>

<h3>1 サーバーを立ち上げる</h3>

<p>tootの場合は<code>toot:start-server (&amp;key handler port)</code>を使いました。スレッド立てるのはclackがやってくれます。はい。</p>

<h3>2 サーバー渡されたリクエスト(多くの場合<code>request</code>オブジェクト)をplistにして<code>app</code>に渡す</h3>

<p>tootの場合、<code>key</code>の<code>handler</code>が<code>requesut</code>オブジェクトを受け取って<code>response</code>オブジェクトを返せば良いので</p>

<pre><code>(lambda (req)
    .....
    (call app (handle-request req))
    .....
)
</code></pre>

<p>って感じで<code>handle-request</code>に実装を書きます。</p>

<p><code>handle-request</code>の内部は<code>req</code>を <a href="http://clacklisp.org/tutorial/ja/04-the-environment.html">clack公式のチュートリアル</a>に載っているプロパティに一つ一つ変換していきます。このプロパティとバックエンドのオブジェクトのスロット名と実際のHTTPヘッダの名前が必ずしも一致しないのが泣き所です。さらに、大抵のサーバーの場合リクエストオブジェクトのスロットの詳細まではドキュメントに載ってないのでソースを参照しながら書くことになります。また、そもそも対応する値が無くて、他の情報を切り貼りして作らないといけなかったり、どうしようもなくて空にしないといけないこともあります。</p>

<p>tootハンドラは</p>

<pre><code>(defun handle-request (req)
  "Convert Request from server into a plist
before pass to Clack application."
  (let ((content-length (and (request-header :content-length req)
                             (parse-integer (request-header :content-length req) :junk-allowed t)))
    (port-and-host (get-port-and-host req)))
    (append
     (list
      :request-method (request-method req)
      :script-name ""
      :path-info (url-decode (request-path req))
      :server-name (car port-and-host)
      :server-port (cdr port-and-host)
      :server-protocol (server-protocol req)
      :request-uri (request-uri req)
      :url-scheme :HTTP;(request-scheme req)
      :remote-addr (remote-addr req)
      :remote-port (remote-port req)
      :query-string (request-query req)
      :content-length content-length
      :content-type (request-header :content-type req)
      :raw-body (let ((stream (toot::request-body-stream req)))
                  ;(when content-length
                    ;(setf (flex:flexi-stream-bound stream) content-length))
                  stream)
      :clack.uploads nil
      :clack.handler :toot)


     (loop for (k . v) in (toot::request-headers req)
           unless (find k '(:request-method :script-name :path-info :server-name :server-port :server-protocol :request-uri :remote-addr :remote-port :query-string :content-length :content-type :accept :connection))
             append (list (intern (format nil "HTTP-~:@(~A~)" k) :keyword)
                          v)))))
</code></pre>

<p>こんな感じに実装されてます。tootからインポートしたものの他、一部ヘルパー関数も使ってますが挙動はまあ、名前から察して下さい。</p>

<h3>3 <code>app</code>の返値のplistを適切な形(多くの場合<code>response</code>オブジェクト)にしてサーバーに返す</h3>

<p><code>app</code>を<code>call</code>してやると<code>(status headers body)</code>という形式のlistが返ってきます。<code>status</code>は数値、<code>headers</code>はplist、<code>body</code>はパスネーム又は文字列のリストです。</p>

<p>さっきはこんな感じで呼んだのでした。</p>

<pre><code>(lambda (req)
    .....
    (call app (handle-request req))
    .....
)
</code></pre>

<p>もうお分かりかと思いますが</p>

<pre><code>(lambda (req)
    (handle-response
        (call app (handle-request req)))
)
</code></pre>

<p>として、実装は<code>handle-response</code>に書きます。…が、tootは<code>response</code>オブジェクトではなく<code>request</code>オブジェクトに変更を加えたものを返すようなので</p>

<pre><code>(lambda (req)
    (handle-response
        req
        (call app (handle-request req)))
)
</code></pre>

<p>として、<code>app</code>の返値を元に<code>req</code>を書き換えます。こちらもあまりドキュメントが無いので頑張ってソース読むしかないです。因みに<code>body</code>はパスネームならそのファイルの内容を、文字列のリストならそれぞれを改行(<code>&lt;br&gt;</code>ではなく<code>\n</code>)で連結したものを返す必要があります。</p>

<p>tootハンドラの実装載せときますね。</p>

<pre><code>(defun handle-response (req res)
  (destructuring-bind (status headers body) res
    (etypecase body
      (pathname
       (multiple-value-call #'serve-file
     (values req body (parse-charset (getf headers :content-type)))))
      (list
       ;; XXX: almost same as Clack.Handler.Hunchentoot's one.
       (setf (status-code req) status)
       (loop for (k v) on headers by #'cddr
             with hash = (make-hash-table :test #'eq)
             if (gethash k hash)
               do (setf (gethash k hash)
                        (format nil "~:[~;~:*~A, ~]~A" (gethash k hash) v))
             else if (eq k :content-type)
               do (multiple-value-bind (v charset)
                      (parse-charset v)
                    (setf (gethash k hash) v)
                    (setf (toot::response-charset req) charset))
             else do (setf (gethash k hash) v)
             finally
          (loop for k being the hash-keys in hash
                using (hash-value v)
                do (setf (response-header k req) v)))
       (toot::send-response req (with-output-to-string (s)
      (format s "~{~A~^~%~}" body)))))))
</code></pre>

<p>です。</p>

<pre><code>(destructuring-bind (status headers body) res
  (etypecase body
    (pathname ...)
    (list ...)))
</code></pre>

<p>がテンプレートですね。<code>pathname</code>のときはtootに丸投げして<code>list</code>のときは<code>headers</code>とかを真面目に処理してます。</p>

<h3>4 エラーハンドリング</h3>

<p>早い話が500 internal server errorです。普通、Lispはエラーが起きるとデバッガに落ちますがサーバーは走り続ける必要がるのであらゆるエラーを無視する必要があります。が、しかしデバッグするとき(<code>run</code>のキーワード引数に<code>debug</code>がありましたね)はデバッガに落ちると嬉しいです。なので例のラムダを少し変更します。</p>

<pre><code>(lambda (req)
              (handle-response
               req
               (if debug (call app (handle-request req))
           (aif (handler-case (call app (handle-request req))
              (condition () nil))
            it
            '(500 nil nil)))))
</code></pre>

<p>これで完成です。</p>

<h2>テスト</h2>

<p>Clackにはテストが付いてます。テストケース自体は<code>clack/src/core/test/suite.lisp</code>に書かれてます。</p>

<p><code>clack/t/core/handler/hunchentoot.lisp</code>を参考に<code>clack/t/core/handler/toot.lisp</code>を作り、<code>clack/clack-test.asd</code>の<code>hunchentoot</code>を<code>toot</code>に書き換えたら準備完了です。<code>(ql:quickload :clack-test)</code>しましょう。テストが走ります。そして恐らくエラーが出て止まるでしょう。変な値を返すとサーバーじゃなくてテストの方がエラーで死ぬんですね。</p>

<p>そしたら<code>clack/src/core/test/suite.lisp</code>を開いて期待された値がなんだったかを調べてサーバーを修正します。で、また<code>(ql:quickload :clack-test)</code>の繰り返し。でも一回<code>quickload</code>しちゃうと読み直してくれないので私は一々<code>M-x slime-restart-inferior-lisp</code>してました。なんか違う気がする。これだけじゃなくてテスト全般。溢れるバッドノウハウ感。</p>

<p>とりあえずバックエンドにバグがあるとかのどうしようもない場合を除いてテストに全部合格すれば完成です</p>

<h2>完成したら</h2>

<p>どうしたらいいんでしょうね。分かんないです。clackにpull-req送るんでしょうか。あるいはquicklispに登録?私はとりあえず <a href="https://github.com/KeenS/clack">ブランチに置いてます</a>が恐らく誰も使ってないですし知らないと思います。</p>

<h2>で、何作ればいい？</h2>

<p><a href="https://github.com/fukamachi/clack/issues?state=open">clackのissue</a>にまだ作られてないものがリストされてます。「自分では需要はないけどなんか作ってみたい」といった奇特な方はそこから試すと良いんじゃないでしょうか。GAEとかmongrel2とか需要ありそうな気がします。</p>

<h2>まとめ</h2>

<p>誰得</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UbuntuでEmacsからGPGを透過的に扱う]]></title>
    <link href="http://KeenS.github.io/blog/2013/12/04/emacs-gpg/"/>
    <updated>2013-12-04T22:52:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2013/12/04/emacs-gpg</id>
    <content type="html"><![CDATA[<p>暗号化といえばGPGですがEmacsからGPGで暗号化されたファイルを編集しようとすると毎回パスワードを訊かれて鬱陶しいです。これはキーリングを登録することで解決できました。</p>

<!-- more -->


<h2>Step1 Keyringに登録する</h2>

<p>Dashboardから[key]で検索すると[パスワードと鍵]が見付かります。左上の[+]で新たにキーリングを追加します。</p>

<p><img src="http://KeenS.github.io/images/2013-12-04-1.png" title="keyring" alt="こんな感じ" /></p>

<p>GPGを選択します</p>

<p><img src="http://KeenS.github.io/images/2013-12-04-2.png" title="Selecting GPG" alt="こんな感じ" /></p>

<p>必要な情報を入力します。このメールアドレスは実在しなくても作れますが、ブルートフォースかけられたときの警告とかに使われそうなので実在した方が良い気がします。とりあえず後で使うので覚えておいて下さい。</p>

<p><img src="http://KeenS.github.io/images/2013-12-04-3.png" title="'Input info &quot;こんな感じ&quot;" alt="'Input info &quot;こんな感じ&quot;" /></p>

<p>あとはパスワードのプロンプトが出るので入力して、エントロピーを発生させたら終わりです。</p>

<h2>Step2 ファイルを準備する</h2>

<p>ここが肝です。ファイルの先頭に</p>

<pre><code>-*- epa-file-encrypt-to: (my@mailaddress) -*-
</code></pre>

<p>を挿入します。既存の暗号化されたファイルでも同じです。</p>

<h2>Step3 暗号化する</h2>

<p><code>M-x epa-encrypt-file</code>で暗号化できます。暗号化するファイル名を指定したらキーリングを選べます</p>

<p><img src="http://KeenS.github.io/images/2013-12-04-4.png" title="Selecting GPG" alt="こんな感じ" /></p>

<h2>Step4 編集する</h2>

<p>あとはもう透過的に使えます。でもなんか実験してたらファイル保存できなかった。先にGPGで暗号化してたやつはできたのに。要調査です。</p>
]]></content>
  </entry>
  
</feed>
