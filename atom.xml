<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-11-09T02:06:38+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[#isucon で学生賞二連覇してきた]]></title>
    <link href="http://KeenS.github.io/blog/2014/11/09/isucondexue-sheng-shang-er-lian-ba-sitekita/"/>
    <updated>2014-11-09T01:06:24+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/11/09/isucondexue-sheng-shang-er-lian-ba-sitekita</id>
    <content type="html"><![CDATA[<p>κeenです。@nemunemu3desuさん（ねむさん）、@cocodripsさん（くーむさん）とチーム「(ρ_&ndash;)/超銀杏バスターズ&#92;(･ω･ o)」で<a href="http://isucon.net/">ISUCON4</a>で学生賞とってきた。二連覇わーい。</p>

<!-- more -->


<p>やったこと</p>

<h1>本番前</h1>

<p>なにもしなかった。しかも前日に体調崩して簡単な打ち合わせも欠席という状態。結局前回と同じく私インフラ、ねむさんアプリ、くーむさんDB。</p>

<h1>当日</h1>

<h2>朝</h2>

<p>起床成功。</p>

<h2>競技開始〜昼御飯</h2>

<p>くーむさんにssh、ねむさんにgitレポジトリの設定してもらって私はcapistranoの設定。capistrano触るのは去年のisucon以来でうんうん言いながらやってた。</p>

<p>rack-line-profをしかけてもらってNginXでjsとcss返してベンチ走らせるもなんか動かないしでつまる。運営からベンチに障害があるとのアナウンスがきてローカルで動かすもエラーが出るわプロファイル結果出ないわ。</p>

<p>foremanが死んでなかったっぽいことが判明したりとちょっと前進するもエラーは残る。</p>

<p>しばらくにらめっこしてもエラーとれないのでとりあえず昼御飯食べながらプロファイル結果見て作戦会議。ここ遅いよって言われて見てみたらrubyからmp4返してたので第一段はそこをWebDAVサーバーに置くことに。因みにエラーの原因は後にline-profのバグだったことが判明。</p>

<p>1号サーバーだけCPUが少ないので3号サーバでリクエスト受けて動画のPOSTは1号サーバーで動いてるWebDAVサーバーにスルーパス、GETはリダイレクトな感じにしよう。私がWedDAVサーバー、ねむさんがアプリ、くーむさんは引き続きアプリ読んで次のボトルネック解析。</p>

<p>因みになんで1号サーバーをWebDAVにしたかというと次の手で2号サーバーもフロントにしたかったから。</p>

<h2>昼御飯後〜15、16時くらい？</h2>

<p>静的ファイルならlighttpdかなと思ってWebDAV設定するもyumで入れたやつはWebDAV用にビルドされてなかった。結局NginXにした。</p>

<p>lighttpd、一瞬で消え去ったと思ってる方も居るかと思いますがRaspberry Piでも元気に動いてくれる良い子なんですよ！！</p>

<p>ねむさんはWebDAV叩くの初めてみたいで苦戦してたり私の設定ミスもあったりでようやく動く。これでスコアめっちゃ上がる。</p>

<blockquote class="twitter-tweet" lang="ja"><p>4位浮上うぇーーーーーい <a href="https://twitter.com/hashtag/isucon?src=hash">#isucon</a></p>&mdash; κeen (@blackenedgold) <a href="https://twitter.com/blackenedgold/status/530996733145149440">2014, 11月 8</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>どうやらネットワーク帯域を全部埋めたよう。</p>

<h2>16時以降</h2>

<p>くーむさんの分析でログをファイルに書き出してる部分がめっちゃ無駄&amp;フロントの2台化を邪魔するのでどうにかしようとの話になる。最初jsonをシリアライズしてるからMongo、いや、やっぱ安心と信頼のMySQL、いや、やっぱ既に動いてるRedisと言って結局MySQLに落ち着く。2台からアクセスが来るので1号サーバに置く。</p>

<p>くーむさんがねむさんにデータベーススキーマの設計とか説明しつつねむさんが実装、私がMySQLのリモートログインとかその他DB全般の設定をする。</p>

<p>結果間に合わず。うーむ。</p>

<h2>最後</h2>

<p>ベンチマーク毎にWebDAVにファイルが溜っていくのでどうにかしよう。今までは手動削除してたけど本番計測下手したらこけるんじゃねって不安。アプリの初期化API内でWebDAVサーパーのファイルを全部削除しようとするもなんか拒否られる。設定ミスってたかなあ。</p>

<p>結局CGI(シェル)スクリプトで叩くという荒技。レスポンスが500なのは御愛嬌。しかもNginXがfastCGIしかサポートしてないのでNginXからApacheにフォワードしてからApacheがCGI起動という曲芸のような仕様。MySQLが間に合えばこのシェルスクリプトにDBの初期化も入れるつもりだった。</p>

<h1>結果</h1>

<p>タイトルにあるように学生賞。全体は12位で一応真ん中よりは上。賞金GET!無料 VPS GET!!しかもVPSはTECHORUS社長の一声で半年から1年になりました。TECHORUS++++</p>

<p>懇親会で@tagomorisさんに学生チームで帯域を埋めるのは大したもんと褒められた。ヤッター。</p>

<h1>反省</h1>

<p>個人的には自由奔放すぎた。もうちょっと協調的だったら、とかREADMEくらい書いたら、とかあった。あと私はインフラ担当だったからどのミドルウェアがどのログ管理してて、っていうのを把握してたけど他の二人は把握出来てないことを把握してなかった。</p>

<p>チーム全体では最初ごたごたし過ぎた所為で最後MySQL入れるのが間に合わなかったのと静的ファイルをキャッシュしてなかったねっていうの。静的ファイルをキャッシュしようとしたらまぐれでCache-Control設定したかもしれない（実際2位のチームがそうらしい）。</p>

<h1>最後に</h1>

<p>私は今年で学生枠で出るのは最後でした。来年からは猛者犇めく一般枠での参加になります。予選突破が大きな目標ですね。</p>

<p>私のインフラ周りの知識や経験はほぼISUCONの経験を通して得られたもので、一年ちょっと前のSQLも見たことない自分に比べるとずいぶん成長したなと思います。LINE、COOKPAD、TECHORUSの方々、運営お疲れ様でした。本当にありがとう御座います。来年も宜しくお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCの話]]></title>
    <link href="http://KeenS.github.io/blog/2014/10/26/gcfalsehua/"/>
    <updated>2014-10-26T19:13:45+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/10/26/gcfalsehua</id>
    <content type="html"><![CDATA[<p>#関数型なんたら でGCの話を聴いて、<a href="http://www.pllab.riec.tohoku.ac.jp/papers/icfp2011UenoOhoriOtomoAuthorVersion.pdf">SML#のGCの論文</a>を読んで色々感じたのでエントリー。</p>

<!-- more -->


<h1>Snapshot GC</h1>

<p>まず、湯浅先生のSnapshot GC (<a href="http://seesaawiki.jp/w/author_nari/d/GC/extend/%A5%B9%A5%CA%A5%C3%A5%D7%A5%B7%A5%E7%A5%C3%A5%C8%B7%BFGC">解説</a>)。並列、並行、インクリメンタルにGCが出来る。恐らく一番性能が出るとのこと。解説ではmark &amp; sweepだけど私が聴いたのはCopyingだった。</p>

<p>勿論並行にするにはライトバリアが必要なんだけどその辺にまつわる話。並行じゃなくても世代別GCでもライトバリアが必要になるからその辺も頭に入れて聴いてほしい。Copyingはアロケーションが鬼のように速いのが特徴。<code>malloc</code>の感覚でメモリ確保が重いとか思ってると感覚が狂う。なので新たなオブジェクトを作るコストは非常に低い。そこにオブジェクトの変更にはライトバリアが付くとなると、大きくないオブジェクトの場合 <strong>オブジェクトを変更するより新たに作った方がコストが低くなる</strong> 。一応言っておくと、Copying GCの負荷は <em>生きている</em> オブジェクトの数に比例するのでゴミオブジェクトを大量に作ったところでそんなにGCの負荷は高くならない。勿論、GCの頻度は上がってしまうが。それも世代別GCなら軽いGCが走るだけなので回数が増えてもそんなに負荷にはならない。</p>

<p>つまるところ <strong>関数型スタイルでプログラムを書いた方がパフォーマンスが上がる</strong> ことがある。素晴しい。逆にこのような理由から関数型言語ではCopying GCを使うことが多い。</p>

<p>ただ、全ての場合で速くなる訳ではない。Copying GCはオブジェクトを移動するため、オブジェクトのアドレスが変わる。普通の参照ならGCのアルゴリズムが書き換えてくれるのだがそうはいかないのがハッシュ。ハッシュは多くの場合オブジェクトのアドレスをハッシュ値に使うため、GCが走ったらハッシュ値の再計算が必要になる。しかもハッシュの操作には破壊的なものが多いため、ライトバリアの影響も受ける。その場合、 <strong>ハッシュマップよりもツリーマップの方がパフォーマンスが出る</strong> ことがある。勿論、アルゴリズムのオーダが違うので要素数がケタ違いに大きくなるとハッシュに軍配が上がるが、通常そこまで要素を入れない。ようやく関数型言語でツリーマップが使われる理由が分かった。</p>

<h1>Bitmap GC</h1>

<p>関数型言語と相性の良いCopying GCだけど問題もある。Stop the Worldの話は世代別化やらそれこそSnopsht GCでどうにでもなるからそれはいい。Copying GCに本質的な問題。オブジェクトのアドレスの問題。GCが走ると現在のポインタが無効になる。処理系内部だけならまだ開発者が頑張れば良いんだけどC拡張を許すとそうもいかない。普通のポインタの問題だけじゃなくて構造体にポインタがあったら、とかそもそも外部ライブラリの内部のポインタをとか考えてるとどこかで割り切る必要がある。</p>

<p>そのためユーザにC拡張を気持ち良く使わせようと思うとCopying GCではつらい。Mark &amp; Sweepが現実的な選択肢になる。が、そうすると今度はパフォーマンスに問題が出る。特にフラグメント化の問題は関数型スタイルが天敵である。じゃあ、Mark &amp; Sweepの性能を改善しようというのがBitmap GC。</p>

<p>概要はMark &amp; Sweepがオブジェクトにマークを付けるのに対してオブジェクトとマークを別にしてマークだけbit列で管理すると局所性が上がって良いよねというもの。詳しくは最初に上げた論文を参照して欲しいが一応解説。</p>

<p>局所性が上がるとはいっても単にキャッシュが効くとかではない。ビット列になることでCPU命令で操作出来るようになって$O(n)$が$O(n/32)$になったりする。そして何より、Mark &amp; SweepじゃなくてSweep &amp; Markになる。Sweepはビット列を0で埋める論理削除。ほぼ一瞬。なので実質Markのコストしかかからない。</p>

<h2>構成</h2>

<p>勿論、ただのbit列でオブジェクトの生死を管理するにはヒープをサイズ毎に用意する必要がある。8bitのオブジェクト用のサブヒープ、16bitのオブジェクト用のサブヒープ…という風に。そしてそれぞれのヒープ毎にビットマップをつける。ただそれだと無限に大きいサイズのヒープが必要になるのでどこかで切ってそれ以降は普通のMark &amp; Sweepで管理するらしい。因みにSML#では4096bitが上限。32bit専用アーキテクチャなので64bitだと少し違うのかもしれない。以下、32bitアーキテクチャを仮定する。64bitでも適切に読み替えれば問題ない。</p>

<p>サブヒープはセグメント列とアロケーションポインタからなる。アロケーションポインタは次にアロケートすべき場所を差す(セグメント、ブロック、bitmap tree(後述)の情報)。</p>

<p>セグメントはオブジェクト数、ブロック列、ビットマップ、作業領域を持つ。ブロックというのが実際のオブジェクトが入る場所。8bitのサブヒープなら8bitのオブジェクトが入る。1セグメントに含まれるブロックの数は事前に決められている。要はコンパイル時なり起動時なりのパラメータになる。勿論、サブヒープ毎にブロック数をいじることになる。</p>

<p>ビットマップはただのビット列ではない。ただのintの列にするといくらCPU命令を使っても次の空いている場所を捜すのに$O(n/32)$かかってしまう。そこでbitmap treeで管理する。bitmap treeは親ビット列のi番目のビットが1のとき、i番目の子ビット列がfullである。ここでfullとは末端なら対応するブロックが使われている、それ以外なら子ビット列が全て1であるということである。これで次の空いているブロックを$Ω(log_{32} n)$で見付けることが出来る。同じワード内にあって適切なCPU命令があれば$O(1)$で済む。</p>

<p>アロケーションは先に出てきたアロケーションポインタの先が使われているか判断して、空いてれば先にデータを書き込んでアロケーションポインタをインクリメントするこのとき、特にbitmap treeは変更しない。空いてなければ空きブロックを捜す。空いてなければ次のセグメントに移って繰り返す同じ操作を行なう。最後のセグメントならセグメントプールに新しいセグメントを要求する。それももらえなければGCが走る。この辺はホットスポットらしいので色々テクニックが詰まっている。詳しくは論文を参照して欲しい。</p>

<p>GCは先に述べたように全てのサブヒープの全てのセグメントのbitmap treeを0で埋めることから始まる。そしてこれでSweep完了。</p>

<p>Markはまずrootノードについて、対応するbitmap treeを1にして、セグメントのオブジェクト数をインクリメントし、作業領域のトレーススタックに積む。あとはトレーススタックの中身の参照先をを順に同様に処理していけば良い。既にMarkされているオブジェクトは単に無視する。空になったセグメントはセグメントプールに返して、fullなセグメント(オブジェクト数=1セグメント毎のブロック数 なセグメント)はセグメント列の先頭に持ってくればアロケート時に無駄に探索されることはない。そしてアロケーションポインタを最初の空きブロックを差すようにすれば良い。</p>

<p>オブジェクトをサイズ毎に管理することでSweepを論理削除で済ませているところが良い。</p>

<h2>世代別化</h2>

<p>論文には世代別化の話もある。ライトバリアが必要なのは一緒だけど世代の管理が面白かった。安直には世代毎にサブヒープを分ける方法が思い付くが、それだとオブジェクトの移動が発生する。論文では世代毎にbitmap treeを持っている。ある世代のbitmap treeはその世代とそれより古い世代全ての生きているオブジェクトのbitmapになっている。</p>

<p>ある世代をsweepしたければ一つ古い世代のbitmap treeで上書きすれば良い。</p>

<p>ある世代のMarkは生存回数をインクリメントし、その世代のbitmap treeにMarkする。生存回数が閾値を越えたら上の世代にもMarkする。</p>

<p>全て完了したら若い世代達にも反映する(どう反映するかは論文には載ってない。差分をとって…とかかな？)。面白いのはある世代狙い撃ちでGC走らせられる点。あるいはいくつかの世代でも可能だろう。多くのアルゴリズムはある世代&#8221;以下&#8221;な気がする。これによって、マイナーGCでダメならミドルGCして、それでもダメならメジャーGCしてってなってたのが若年、中年、高年で別々に可能になる。まあ、ライトバリアの数がものすごいことになるからやらないだろうけど。なんでかっていうと若い世代から古い世代への参照もトレースする必要が出てくるから。論文に詳しく載ってないのはそんなに多くの世代を作っても現実的でないからだろう。勿論、ある世代以下を全てsweepも出来るので普通はそうする筈。</p>

<h2>リメンバーセットとライトバリア</h2>

<p>さて、さっきからライトバリアの話は出てたのに具体的になんなのかが出てこなかった。</p>

<p>世代別GCでは、マイナーGCが動くときに旧世代から新世代への参照があればその新世代のオブジェクトは生きているのでマークしなければならない。その「参照されている」ことを覚えておくのがリメンバーセット。GCされた後どうなるかは資料が見付からなかったけど旧世代に移ったものやGCされたものを取り除くんじゃないかな。</p>

<p>ライトバリアは調べたところ、多義的である。オブジェクトの参照を変更するときにごにょごにょするもの全般をライトバリアと呼んでいるようだ。Snapshot GC(並行GC)の場合はマーク中に変更された参照の先のオブジェクトもマークしていくことのようだし、RGenGC(インクリメンタル GC)はマーク中に変更された参照の元オブジェクトをグレーにすることのようだし、世代別GCではさらに色々意味がある。</p>

<p>世代別GCでのライトバリアは、全ての参照を変更する操作にフックして動く。そしてリメンバーセットを更新する。そこまでは皆共通している。そこからは、</p>

<ul>
<li>旧世代オブジェクトから新たに参照された新世代オブジェクトをリメンバーセットに加える</li>
<li>変更されたオブジェクトをリメンバーセットに加える</li>
<li>変更されたオブジェクトを、旧世代オブジェクトならリメンバーセットに加える</li>
</ul>


<p>などのバリエーションがある。それ以外にもありそう。尚、どれも正確ではない。つまり本来なら死んでいるオブジェクトも生き残る可能性がある。</p>

<p>正確にやろうと思えばリメンバー&#8221;マップ&#8221;を用意し、[新世代オブジェクト]&ndash;>[旧世代からの参照数]を保持し、参照カウントを行なえばいけると思う。</p>

<p>そこまでやらないのは性能に問題があるからかな。あとそもそも世代別GC自体正確にはオブジェクトを回収しないから正確にやってもあまり意味がないのもある。</p>

<h2>Sticky Mark世代別化</h2>

<p>Sticky Mark世代別GCというのは世代別GCを世代2つ、生存回数の閾値1とするときの簡単な実装方法。本当に簡単で、前回のMarkを残しておけば良い。それが旧世代の目印になる。あとはライトバリアとリメンバーセットを用意するだけ。元々Markのときに既にMarkされているオブジェクトはスルーされるのでアルゴリズムはほぼ変更が要らない。普通のMark &amp; Sweepでも出来るし、Bitmap GCでもアロケーションのときにbitmap treeをいじってないのでbitmap treeを0にする処理をしなければ良い。</p>

<p>さらに、リメンバーセットに関しても簡単になる。全てのオブジェクトが旧世代になるのだからリメンバーセットはクリアするだけで良い。あるいはGC毎に消えてしまうデータに格納してしまっても良い。SML#ではトレーススタックに積むことでリメンバーセットとしているようだった。何も考えなくてもGCのときにルートノードとして扱われる。重複判定に関しては読み解けなかった。</p>

<p>以下、書いてあるところの引用。最初の this factというのはリメンバーセットについて簡単になるということ。Tworkというのが作業領域。</p>

<blockquote><p>Taking advantage of this fact, we allocate a re-
membered set in the collector’s trace stack. As mentioned before,
our trace stack is implemented as a linked list using <code>Twork</code> work
areas. This is done by assigning a unique pointer slot in <code>Twork</code> to
each object. This implementation allows us to determine whether
a given object is already in the list or not by checking whether
the pointer is non-null. This automatically eliminates duplication
in the remembered set. A write barrier can then be incorporated
in the generational collector as follows. A write barrier code takes
a young object that is to be referred from the old generation due
to mutation, and marks it and pushes it to the trace stack. Minor
collector simply traces objects using the trace stack whose initial
contents is the remembered set</p></blockquote>

<p>誰か分かる人教えて下さい。</p>

<h2>複数mutater対応</h2>

<p>要はアプリケーションでスレッドを使ったときの話。1スレッドにつき1セグメント割り当てて新たなセグメントを確保するときだけロックとればアロケーション速いよねって言ってる。GCはStop the Worldしないようにするとか言ってるけど出来るのかな。</p>

<h2>パフォーマンス</h2>

<p>Bitmap GC、sticky bit世代別Bitmap GC、シンプルなCopying GC、2世代、5世代の世代別Copying GCでの比較が載ってる。Copying GCは2世代が最もパフォーマンスが良く、世代別Bitmap GCもそんなに負けてない。少くともシンプルなCopying GCには勝ってる。アロケーションは及びもつかないものの、世代別Bitmap GCはGCのStop the Worldは圧倒的に短いみたい。</p>

<h1>picrinの話</h1>

<p>picrinのGCは超シンプルなMark &amp; Sweep。んで、picrinのボトルネック。どうにかしたい。先述の理由からMark &amp; Sweepなのは維持なんだけどどう拡張しようねという話。</p>

<p>ライトバリアさえ実装してしまえばSticky Markで簡単に世代別化出来る。もうちょっと言うとライトバリアだけのデバッグが出来る。そしてまともな世代別化につながる。でもライトバリア->Bitmap化だとライトバリアも書き換える必要が出てきてあまり宜しくない。</p>

<p>Bitmap化すれば速くなるっぽい。が、メモリ管理を大幅に書き換える必要がある。特にサイズ別に管理するところ。でもそこからさらにSticky Markとかでさらに拡張可能。</p>

<p>うーん。個人的にはBitmap化してみたいんだけど完全に独自メモリ管理になっちゃうからなー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#関数型なんたら で喋ってきた]]></title>
    <link href="http://KeenS.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita/"/>
    <updated>2014-10-26T17:14:10+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita</id>
    <content type="html"><![CDATA[<p>κeenです。昨日<a href="http://connpass.com/event/8634/">函数型なんたらの集い</a>に参加してきたので報告/感想です。</p>

<!-- more -->


<p>会場提供はドワンゴということでトークはニコ生に流された模様。ちらっと覗いてみたらLinuxでも見れましたね。いつのまにかFlashのバグ直ってたんですね。
とはいえ私自身のトーク中のコメントが見れなかったのであまり意味はないのですが…</p>

<p>プレミアム会員は放送後7日は生放送の内容を見れるそうですね。見れる方々は<a href="http://live.nicovideo.jp/gate/lv196879029">コチラ</a>からどうぞ。次回からはタイムシフト予約しておこう。</p>

<h1>話した内容</h1>

<p><a href="http://keens.github.io/slide/c6h6-plus-hno3.html">C6H6+HNO3</a>というタイトルで、picrinのbenzとnitrosについて。本当はnitrosの依存関係解決器sulfuricを完成させてそれについて話し、nitroを書こう!って言う予定だったんですが着手が遅れて完成しないまま発表になりました。</p>

<p>普段関数型言語のヒトは型やらモナドで殴ってる印象があったのでマクロで殴ろうと思ったのですがマクロの話のところで焦ってしまって話が飛んでしまい、殴れずに終わりました。</p>

<p>ガチの組み込み屋さんから組み込み機器で動作検証したのかとの質問がありましたがそもそも持ってないです。そろそろ1.0が出ると思うのでそのあたりでやります。</p>

<p><strong>GCがconservativeかとの質問に対して「はい」と答えてしまいましたが間違いでした。</strong> conservativeなのはcall/ccでした。GCはexactですね。<a href="http://picrin.readthedocs.org/en/latest/intro.html">ドキュメント</a>に載ってます。</p>

<p>wasabizの名前に反応した人が多かったようですね。やっぱ有名人なのかぁ。</p>

<h1>興味深かった話</h1>

<h2><a href="http://www.slideshare.net/RuiccRail/engineerusesmonads?ref=http://connpass.com/event/8634/presentation/">エンジニアとモナド</a></h2>

<p>またモナドで殴る話かと思ったら全然違いました。トップダウンで設計するときにそれぞれを小さなDSLに分割してそれらをモナドで実装し、モナド変換子で組み合わせると良いよねとのこと。タスクアサインもモナド単位になるし分かり易い。スピードのために実際には単相化すると良いとか現実的な話をしてて非常に良かったです。</p>

<p>Lispで考えるとこうはいかないなと思います。トップダウンで設計するのが他の言語以上に向いてない気がします。というか、ボトムアップに向きすぎてる。小っさく始めて抽象が欲しければマクロを書いて…って。オブジェクト指向で作るにしてもオブジェクトとメソッドが分離してるのでボトムアップと相性が良い。この辺はポールグレアムの「ハッカーと画家」に詳しいです。</p>

<h2><a href="http://xuwei-k.github.io/slides/functional-something-shapeless/#0">shapelessの紹介</a></h2>

<p>興味を持ったのはshaplessそのものではなくてヘテロなリストやヘテロなハッシュに型をつける話。<code>{ 1 =&gt; "foo", "bar" =&gt; 2}</code>に型がつくのは面白すぎます。「高度に多相化された静的型は動的型と区別がつかなくなる」っぽかったです。</p>

<h2>パターンマッチいろいろ</h2>

<p>議論を呼んだ発表。パターンマッチを拡張する話。例えば年月日に対して<code>YMD(y, 12 25)</code>でクリスマスならそのときの年を取り出せるだとかさらにアンドを使えばHMSも一緒にマッチ出来るだとか。
そこからEgisonに話が飛んでEgisonの例のようにポーカーの役をScalaでパターンマッチする例の紹介。</p>

<p>議論を呼んだというのはパターンマッチにガードが吸収されてる件ですね。データ型のコンストラクタとエクストラクタが一対一対応してこそパターンマッチは真価を発揮する派vsパターンマッチの表現力が高ければ高い方が良い派の対立ですね。さらに前者は型の表現力が足りてないのなら型をもっと複雑にすべき派とガードを付けて網羅性の証明をすれば良い派に分かれます。私はパターンマッチには表現力があればあるほど良いよね派。</p>

<p>これはそもそもパターンに対する立場の違いがある気がするんですよね。私はパターンマッチは同じデータに対する条件判定のシンタックスシュガーとして捉えています。マッチと束縛を一緒に行なうのは便利なのとパフォーマンスのため。ガードが必要なのはパターンの表現力が足りないため。だからパターンがリッチならリッチな方が良い。そもそもLispでは網羅性のチェックは期待出来ませんので。そもそもの話動的言語はコンパイル時の検査をあきらめてその代わり表現力を得ようという思想ですからね。</p>

<p>パターンが複雑になるとメモリが爆発するとの指摘がありましたがそれに直面した人がいるらしく、パターンによる分岐の枝を実行時に伸ばしていくようなパターンマッチライブラリも存在します。（Lispは実行時にもマクロが動いていて、実行時にコードを生成することも可能なのです。）</p>

<h1>懇親会その他</h1>

<p>名古屋の<s>型々</s>方々と色々喋れました。偶々でこれきさん、みずぴーさんと同じテーブルに座り、昼御飯も一緒に。普段休日出勤してる印象が強く、名古屋に行かないと会えないと思っていたブレイスさんといよさんも一緒でした。でこれき先生はやっぱり大先生だった。</p>

<p>よんたさんにSML#のコードリーディング会開いて下さいって言ったら良いよって言ってもらいました。そろそろ64bit版も出るそうなのでリリース記念コードリーディング会&amp;芋煮会やろうって話になりました。</p>

<p>OCamlのユニコードライブラリを作ってる方とも話しました。内部でropeで持ってるらしく、その話を聞きました。ropeのユニコード化はどうやら普通に文字列をUTF-8で保持し、ropeに文字列長のフィールドを保たせるだけで良いよう。ただ、picrinはCとの連携のためちょくちょくCの文字列に変換してまた新たにropeを作って、とするので若干勝手というかボトルネックが違いそう。</p>

<p>Schemeのネイティブコンパイラを作ってる方とも話しました。Schemeの実装について喋ったり、GCについて喋ったり。GCについては興味深いことを聴いたのでもう1本エントリー書きます。あとはプロセス代数とかモデル検査とか。</p>

<h1>まとめ</h1>

<p>楽しかった。どうしてもLispは関数型とはあまり言われない（し、私も関数型言語とは思ってない）のでLisperが少なかったのですが私自身はMLも好きなので楽しめました。GCとTaPLとHaskellとScalaとEgisonに対するモチベーションが上がりました。</p>

<p>最後に開催して下さった主催の方々、会場を提供して下さったドワンゴ様、ありがとう御座いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Lispの勉強をするには、あるいは情報を得るには]]></title>
    <link href="http://KeenS.github.io/blog/2014/10/20/lisp-ja/"/>
    <updated>2014-10-20T20:35:33+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/10/20/lisp-ja</id>
    <content type="html"><![CDATA[<p><a href="http://blog.8arrow.org/entry/2014/09/05/062028">深町さんのブログ</a>で日本語でCommon Lispの質問をする方法が載ってましたが質問じゃなくて単に情報を得たい、勉強をしたいという場合が書かれてなかったので勝手に補遺。</p>

<!-- more -->


<h1>処理系選び</h1>

<p><a href="http://cl.cddddr.org/index.cgi?%BD%E8%CD%FD%B7%CF%3A%C1%AA%A4%D3%CA%FD%A4%CE%CC%DC%B0%C2">処理系:選び方の目安 &ndash; Common LISP users jp</a>や
<a href="https://sites.google.com/site/shidoinfo/Home/programing-lang/%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E/lisp/common-lisp/common-lisp-%E5%87%A6%E7%90%86%E7%B3%BB">Common Lisp 処理系 &ndash; 紫藤のWiki</a>が参考になるかと思います。</p>

<h1>開発環境構築</h1>

<p><a href="http://modern-cl.blogspot.jp/">Modern Common Lisp</a>あたりですかね。著者がちょっと古くなってきたので更新するって言ってました。</p>

<p>処理系のインストールなら*nix環境で使える拙作の<a href="https://github.com/KeenS/CIM">CIM</a>もあります。解説は<a href="http://keens.github.io/blog/2014/01/27/cim-explanation/">こちら</a>。</p>

<h1>入門</h1>

<h2>Web</h2>

<p>私の一番のおすすめはM.HiroiさんのWebページです。一応Common Lispではなくxyzzyですがここで紹介されている内容であればCommon Lispにも共通します。<br/>
<a href="http://www.geocities.jp/m_hiroi/xyzzy_lisp.html">M.Hiroi&rsquo;s Home Page / xyzzy Lisp Programming</a></p>

<h2>書籍</h2>

<ul>
<li><a href="http://www.amazon.co.jp/%E5%AE%9F%E8%B7%B5Common-Lisp-Peter-Seibel/dp/4274067211">実践Common Lisp</a>は入門から実践までいけて素晴らしいです。内容の密度が濃いです。心無しか手にとってみると少し重いです。
loopやformatなど複雑な部分はしっかりベージを割いてるので入門が終わってもリファレンスとして役立ちます。私も今でも参照してます。</li>
<li><a href="http://www.amazon.co.jp/Land-Lisp-M-D-Conrad-Barski/dp/4873115876">Land of Lisp</a>は挿絵が多く、少し学んでは実際に使ってみるのルーチンなので勉強のモチベーションを保ちやすいです。
内容は実践Common Lispに比べると細かな注釈が少ないかな？といったところ。さらっと読めて良いですね。</li>
<li><a href="http://www.amazon.co.jp/gp/product/4798118907/ref=pd_lpo_sbs_dp_ss_2?pf_rd_p=466449256&amp;pf_rd_s=lpo-top-stripe&amp;pf_rd_t=201&amp;pf_rd_i=4873115876&amp;pf_rd_m=AN1VRQENFRJN5&amp;pf_rd_r=1YA4XCHT36XJD6ZEF9KC">実用Common Lisp</a>(通称PAIP本)はぶ厚くて高い本。AI系の内容らしい。私は読んだことが泣いのですが、数理システムが入門書として使ってるそうです。</li>
</ul>


<h1>何か作る</h1>

<h2>Web</h2>

<ul>
<li><a href="http://www.usamimi.info/~ide/programe/stg_doc/stg-commonlisp.pdf">Common LispでSTGを作りますが何か</a>は有名なPDF。STG(シューティングゲーム)を作る内容。多少古い(SDLが1.2系だとか)ものの、練習には十分です。</li>
<li><a href="http://blog.8arrow.org/entry/2013/09/10/110632">Common LispでWebAppの開発に必要なN個のこと &ndash; 八発白中</a>はWeb Appを作るにあたって必要なライブラリを紹介している。紹介しているだけで作り方は書いてないのでどうにか頑張って下さい。</li>
</ul>


<p>あんまり情報無いですね…Lisperのみなさんもっとアウトプットしましょう。</p>

<h1>リファレンス</h1>

<h2>Web</h2>

<ul>
<li><a href="http://www.lispworks.com/documentation/HyperSpec/Front/">Common Lisp Hyper Spec</a>はCommon Lispの機能をサンプルと共に網羅的に、詳細に紹介しています。英語です。
主に<a href="http://www.lispworks.com/documentation/HyperSpec/Front/Contents.htm">コンテンツ</a>からドリルダウンで調べていくと良いです。時間があればじっくり眺めても良いかも。
Common Lispをやる上では必ず必要になるので、英語ですが必ず友達になっておきましょう。</li>
<li><a href="http://tips.cddddr.org/common-lisp/">逆引きCommon Lisp</a>は名前の通りやりたいことからCommon Lispの機能を調べられます。サンプルもあります。残念ながら網羅的ではないのですが凡その需要は満たせると思います。</li>
<li><a href="http://quickdocs.org/">Quickdocs</a>はライブラリのドキュメントサイト(英語)。ライブラリを捜す時にも良いと思います。</li>
</ul>


<h2>書籍</h2>

<ul>
<li><a href="http://www.amazon.co.jp/COMMON-LISP-%E7%AC%AC2%E7%89%88-Guy-L-Steele/dp/4320025881/ref=cm_lmf_tit_10">COMMON LISP 第2版</a>は通称cltl2と呼ばれるCommon Lispの原典の和訳です。一応紹介しました。今のCommon LispはANSI Common Lispになってるので少し違います。</li>
</ul>


<h1>ポータルサイト</h1>

<ul>
<li><a href="http://cl.cddddr.org/index.cgi">Common LISP users jp</a>は日本語で様々な情報が得られます。</li>
<li><a href="http://www.reddit.com/r/lisp_ja/">redditの/r/lisp_ja</a>にはLispに関連するWebページの情報が日々投稿されています。</li>
<li><a href="http://www.cliki.net/">CLiki</a>はCommon Lispの総合Wiki(英語)。非常に有用な情報が溜まってます。</li>
<li><a href="http://common-lisp.net/">Common-Lisp.net</a>はCommon Lispのコミュニティ支援サイト(英語)。多くのプロジェクトをホストしていて、そのWebページなんかもあります。</li>
</ul>


<h1>ソースコードを読む</h1>

<p>κeenの適当チョイスです。他にお勧めがあれば教えて下さい。</p>

<ul>
<li><a href="https://github.com/keithj/alexandria">alexandria</a>は有名なユーティリティパッケージ。小さな関数やマクロで構成されてるのでイディオム集みたいな感じで読めると思います。</li>
<li><a href="https://github.com/7max/log4cl">log4cl</a>はログライブラリ。ドキュメント(英語)をしっかり書いてるので読み易いです。</li>
<li><a href="https://github.com/edicl/hunchentoot">Hunchentoot</a>はWebサーバ。ドキュメント(英語)を過剰に書いてるので読める筈。</li>
</ul>


<h1>ステップアップ</h1>

<h2>Web</h2>

<ul>
<li><a href="http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/">On Lisp</a>は主にマクロについて書かれたCommon Lispプログラミングの指南書。書籍もありますが、Web版もあります。</li>
</ul>


<h2>書籍</h2>

<ul>
<li><a href="http://www.amazon.co.jp/LET-OVER-LAMBDA-Edition-1-0/dp/4434133632">Let Over Lambda</a>(通称LOL)は過激とか狂気とか宗教とか言われるエッセイ。高速化の話とかクロージャの危ない使い方とかが書かれてます。</li>
</ul>


<h1>Lisperとコミュニケーションをとる</h1>

<ul>
<li><a href="http://shibuya.lisp-users.org/">Shibuya.lisp</a>は渋谷を中心に半径2万kmを対象としたLispコミュニティ。毎月下旬の平日夜にLisp Meet Upをやってるのでひょこっとやってくると良いと思います。内容はCommon Lisp, Scheme, Clojureで回してるのでCommon Lisp回は3ヶ月に1回ですが毎回Common Lisperは来てるので別のLispの回でも構わず参加すると良いと思います。
#lispmeetup の情報は<a href="https://atnd.org/users/51173">ここ</a>から入手するのが良いかな？あとは<a href="https://twitter.com/shibuya_lisp">Twitterアカウント</a>もあります。Ustream配信もしてます。</li>
<li>IRCの#lisp-ja@irc.freenode.orgと#common-lisp-ja@irc.freenode.orgにコミュニティがあります。常に誰かがいる訳ではないのですがちょくちょく見てる人はいるので発言してみると反応があるかもしれません。今もこの投稿に対して反応があってCIMとredditの項目を追加しました。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #20でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/09/30/lisp-meet-up-number-20/"/>
    <updated>2014-09-30T09:35:05+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/09/30/lisp-meet-up-number-20</id>
    <content type="html"><![CDATA[<p>κeenです。lisp meet up # 20に参加したのでレポートです。</p>

<!-- more -->


<p>20人の募集に19人参加予定。会場は今回初めてのところでした。</p>

<h1>LT</h1>

<p>LTはTOYOZUMIさんが仕事で来れなくなったので私の1件のみ。内容はpicrinのチューニングの話と思わせてほとんどがその前振りのGCの話。</p>

<p>スライドはこちら。</p>

<p><a href="http://keens.github.io/slide/picrin-gc.html">Picrinのチューニングの話、もといGCの話 | κeenのHappy Hacκing Blog</a></p>

<p>TOYOZUMIさんのdocstringの話聞きたかった</p>

<h2>飛び入り</h2>

<ul>
<li>ブラウザ上でbiwa schemeの環境(REPLだけでなくオートインデントとか)を作ってる</li>
<li>関連して、websocketでswankと対話できるやつ作ってる</li>
<li>関連して、ブラウザ上で動くLispに似てそうなBlockyというヴィジュアル言語がある
なんかの話がありました。</li>
</ul>


<h1>余った時間</h1>

<p>chikuさんが前でGCの話してました。んで話が尽きたあたりで私がpicrinの宣伝しました。<code>(picrin control list)</code>の話です。非同期プロミス然りpicrinにはトリッキーな機能が多いですね。</p>

<p>結局ライブコーディングはしませんでしたね。</p>

<h1>懇親会</h1>

<p>Raspberry Piの話とかちょいとGCの話とかVarnishの話とかaltJSとか。ブログの話題が出たのでOctopress推しといたり。なんでみんなGithub Pages + Octopress使わないん？便利ですやん。</p>

<p>結構色々話してた気がするんですが覚えてないですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#ISUCON 4 予選に学生枠で参加してきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/09/30/isucon4-q/"/>
    <updated>2014-09-30T00:51:30+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/09/30/isucon4-q</id>
    <content type="html"><![CDATA[<p>κeenです。ISUCON 4 予選に学生枠で参加してきたのでレポートです。日曜、2日目の方に参加です。</p>

<!-- more -->


<h1>メンバー集めと準備</h1>

<p>一番苦労しました。去年と同じく、全く知らない人と組んでます。全然集らなくて、@941さんがメンバー集めの音頭をとってくれたりして、ようやく集りました。941++。</p>

<p>結局ISUCON夏期講習にいたPythonアイドルのくーむ(<a href="https://twitter.com/cocodrips">@cocodrips</a>)さんとその友達の友達のねむねむ(<a href="https://twitter.com/nemunemu3desu">@nemunemu3desu</a>)さんと出ることになりました。くーむさんは競技プログラミング系Pythonista、ねむねむさんはプログラマのためのWebサービス開発のバイトをやってるWeb系Rubyist。因みに私は去年もISUCONに出て<a href="http://KeenS.github.io/blog/2013/11/11/isucon-final-stage/">学生賞なんか貰ってる</a>のでISUCONで要求される技術は一通り、広く浅くといった感じのRubyist。普段はLisp書いてます。「Lispを書く」はダブルミーニングですよ。すごいどうでも良いけどくーむさんは情報系のM2、ねむねむさんは情報系のB4、私は数学科のB4です。</p>

<p>流石に初対面のメンバーでいきなり競技を始めても何も出来ないので一度3人で顔を合わせて打ち合わせをしました。簡単に書いてますけど待ち合わせとか苦労したんですよ。</p>

<ul>
<li>データ量とかアルゴリズムに対する感のあるくーむさんにはMySQLのチューニングを任せる</li>
<li>くーむさんは各社のインターンで実務経験があるのでデプロイとかのコードの流れ、ベンチマークの管理もやって貰う</li>
<li>その周辺のツールも作って貰う</li>
<li>Rubyでwebサービスの開発をやってるねむねむさんにはRubyのコードをがんがん弄ってもらう</li>
<li>Redisを使うことも視野に入れてもらう。Redisの経験はあるようなのでそんなに問題なさそう。</li>
<li>あとは余ったNginX、Varnishをκeenが担当する</li>
<li>恐らくNginX、Varnishは然程手間取らないのでアプリとMySQLで苦戦してる方にκeenが入る</li>
<li>最初のセットアップはAWSアカウントを作ったくーむさんにやって貰う</li>
<li>最初に計測することが大事なのでデフォルトのままログの設定だけ変えてベンチを走らせて作戦会議をする</li>
<li>チーム名は3人のアイデンティティを合わせて「(ρ_&ndash;)/超銀杏バスターズ(･ω･ o)」とする</li>
</ul>


<p>あたりを決めました。</p>

<p>くーむさんは完全に普段とドメインが違うのでちょっとつらそうでしたがSQLとかRedisとかの本を貸したらめっちゃ勉強してきたみたいでした。
流石、情報科ですね。地力が違いますね。あとはGithubの学生が使えるプライベートリポジトリを用意してくれたり。ベンチマークを走らせたら時刻とgitのコミットIDをセットにしてログ用のレポジトリに突っこむスクリプトの準備もしてくれました。</p>

<p>ねむねむさんはAWSアカウントを作って去年の予選の問題を予習してきたようでした。あとRedis使うかもって言っといたらRedis in ActionのPDFを見付けてたようなので読んできたんじゃないかなと思います。Rack用のプロファイラを試したようでした。去年も使おうとして結局使えなかったminiprofiler。ねむねむさんにも使えなかったようです。</p>

<p>私はApacheとかNginXのログフォーマットを整備してパス/メソッド毎の(合計)レスポンスタイムを出す集計スクリプトを用意。その他マスタリングNginXを一通り読み直したりOpenRestyでmemcachedやlua、Redisのプラグインがあることを確認してインストールスクリプトを書いたりしてました。Varnishは間に合いませんでした。</p>

<h1>当日</h1>

<h2>開始</h2>

<p>LINEカフェを使わせてもらうので9:20に集合。ちゃんと集まる。家の近いくーむさんがデカいディスプレイを持ってきてました。</p>

<p>LINEカフェではLINEインターンの経験のあるくーむさんが勝手が分かってるので机を勝手に動かして三人横並びに座る。真ん中にくーむさんの大きいディスプレイがきて良い感じでした。</p>

<p>10:00に号砲と共に競技開始。早速3人ともAWSの初心者でAMIの起動の仕方が分からず詰まります。ここクリックしてみて？とかいいながらログイン出来たのが10:20くらいですね。isuconユーザーにRSAのpubキーを突っ込むもパスワードを要求されてハマる。くーむさんはLinuxには不慣れなようだったので私がやるも<a href="http://KeenS.github.io/blog/2014/08/21/isucon-summer-2014/">夏期講習のとき</a>と同じく解決出来ず。うーん。結局パスワードのまま通しました。</p>

<p>gitの設定をするときにアプリとログはレポジトリを分けることは決まってましたがログを吐く場所を決めてなかったのでゴタゴタ。/var/logに吐こうとするもMySQLが吐いてくれない。権限の問題じゃね？とか言って777にするという邪悪なことをするとねむねむさんがsshを締め出される。MySQLが吐いてくれなかったのは再起動忘れ。sshを締め出されたのはsshdのログファイルの権限の問題。この辺解決したのが11時過ぎかな？</p>

<p>ごたごたしてる間はねむねむさんはアプリ読んでくーむさんはインテグレーション周りの準備してくれたり。私もちょっとアプリ読んだりエラーでググったり。</p>

<h2>作戦会議</h2>

<p>12時前なので昼御飯食べながら。</p>

<ul>
<li>ベンチマークを走らせると明かにMySQLが重いのでインデックスを張る(くーむ)</li>
<li>アプリはキャッシュ効きそうなのでガンガンRedis使う(ねむねむ)</li>
<li>とりあえずNginXの最適化とVarnishは入れる(κeen)</li>
</ul>


<p>な感じです。</p>

<h2>作業</h2>

<p>Typoがあった以外はNginXとVarnishはスムーズに。</p>

<p>実際にはくーむさんがログの自動プッシュ周りで苦戦してたのでけんちん汁を食べてる隙に私がインデックスを張ることにしました。ちまちまexplainしながらやるもどうもうまくいかない、と思ったらinit.shのヒアドキュメントが二重になってる…。そこを解消したら一気にスコア上がりました。でもWHERE狙いとORDER BY狙いってどうなんだっけとなって多少過剰なインデックスだったかもしれません。</p>

<p>それでもうMySQLはCPU使わなくなったのでワークロード上げてみたらスコア12,000くらいになりました。</p>

<p>なんか静的ファイルでベンチマークエラー出てるとくーむさんから報告がありました。Varnishの設定ミスったかなと思ったらエラーメッセージが無機質だったのでシステム関連っぽい。そこは全て独学でやってきた数学科生のググり力を発揮。調べるとローカルポートを使い果たしていた模様。システムの設定をコピペ。エラー出なくなる。</p>

<p>RubyがCPU使ってるのでNginXからのリダイレクトをunixドメインソケットに。あんまり効果無し。</p>

<p>ねむねむさんのRedisキャッシュ化が入って15,000とか。ねむねむさんを信じて「キャッシュして」とだけ言っといたので詳細は不明ですがユーザーはRedisに全部突っ込んだ模様。その後は脱MySQLを目指して黙々と作業してました。</p>

<p>私は/reportがN+1クエリなので直そうと2時間くらい奮闘。後にスコアには反映されてないことを知らされて絶望。よく見とけば良かった。しかもEmacsのバッファに残ってるものをコミットしてしまってねむねむさんのコミット上書きしてしまったりしました。</p>

<p>まだRubyがCPUを使ってるのてテンプレートエンジンを置き換えることを考えました。slimが速いと風の噂で訊いたのでくーむさんにお願いしてみるもスコアがた落ち。あれRuby製だったんですね。C製のテンプレートエンジン捜しとかなきゃ。</p>

<p>さらにくーむさんがCSSやpngのminifyを試みるもチェックサムをとられていたようで失敗。良く見たらMD5とるってレギュレーションに書いてありました。後にminifyでなくインライン化すれば良かったらしいと聞く。</p>

<h2>最終確認とか</h2>

<p>17時あたりで一旦chkconfigしてリブートしてもベンチが動くことを確認。よかった。一応AMIを作ります。その後でN+1クエリの解決が動くも当然スコアには変動なし。あとはミドルウェアのログを切って脱MySQLは間に合わなくてアプリの微改善が入りパラメータの微調整をし、17,700あたりで競技終了。</p>

<h1>終わってみて</h1>

<p>一応2日目の中では学生1位なものの、1日目10チーム、2日目4チームなので何とも言えないですね。一般枠は40,000でも本戦出場無理ポとか言ってるのに20,000にも全然届かないスコアで本戦出れるかもとか言ってるゆとりの学生です。</p>

<p>反省は</p>

<ul>
<li>レギュレーション良く読む</li>
<li>ベンチマークのスコアリングも確認する

<ul>
<li>静的ファイルは0.1点と思ってたら0.01点だった。この差大きい。</li>
</ul>
</li>
<li>権限管理は適切に</li>
<li>hangoutに思ったことを垂れ流す筈だったのに口頭で済ませてしまった

<ul>
<li>それだけならまだしもhangoutに貼ったものが無視されてしまった</li>
</ul>
</li>
<li>プロファイラ使えるようにならないとね。

<ul>
<li>RubyがCPU喰ってるのは分かってるのにどこがまずいか分かんなかったのは悔しい</li>
</ul>
</li>
<li>深みに嵌ったらあきらめる</li>
<li>ブランチ切るとミドルウェアの違いで問題が出る(varnishとnginxの80の取り合い)</li>
<li>互いのスキルを把握しておく</li>
<li>開発スタイルを決めておく</li>
<li>workload、workerprocessは最適値を捜す(コア数が4だったので4~8で決め打ちだったけど後に30くらいまで上げれると聞く)</li>
</ul>


<p>かな？私が普段Linuxを使ってるのでLinuxの設定くらいみんな出来ると思ってたら私以外Macerだったってのは予想外でした。本来なら私がAWSアカウント持ってれば問題なかったんですけどクレジットカード持ってないんですよね。つらい。</p>

<p>開発スタイルはねむねむさんがpull-reqスタイル、私が細かいコミットをマスターに入れるスタイルでした。設定ファイルとアプリの違いもありますがpull-reqスタイルの方がロールバックし易いしそっちに統一した方が良さげですね。</p>

<p>個人的に、いつも通りケアレスミスが多かったのは反省しなきゃなと思います。「あれ？動かない。あ！そうか！」みたいな。メンバーは「すげー。デバッグ速えー」って言ってましたけど違いますよ？世の中の不当評価はこうして産まれるんだと少し社会を知りました。</p>

<p>Varnishももうちょっと使い熟さないとなーってのとlua勉強しなきゃなーってのが個人的な本戦に向けた準備ですね。N+1のとこはSQLの練習が出来たので個人的には満足…って言ったらメンバーに怒られますかね。</p>

<p>全体として、チームは上手く動いてたんじゃないかなと思います。N+1のところで無駄に嵌らずにねむねむさんと2人でアプリの改修やってたら脱MySQLが間に合ったんじゃないかなってのが心残りです。インテグレーションはくーむさんのスクリプトで良い感じだったのでもうちょっと改良して本番にも使いたいですね。あとCapistranoかFabricも準備しないといけませんね。</p>

<p>本当、やらかしてばっかの私に怒ることなく一緒にやってくれたくーむさん、ねむねむさんには感謝してます。もし予選通ってたら本戦も宜しくお願いします。</p>

<p>そして忙しい中ISUCONを開催して下さったCOOKPADの方々、941さん、ありがとう御座います。ベンチマーカーの問題にも迅速に対応して下さってこちらは本当に楽しく競技出来ました。</p>

<p>P.S.<br/>
今回の作業レポジトリは<a href="https://github.com/cocodrips/isucon2014q">ここ</a>、ログレポジトリは<a href="https://github.com/tomoasleep/isucon2014qlog">ここ</a>にありますがまだ非公開です。そのうち公開されると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[低レベルなことがしたい]]></title>
    <link href="http://KeenS.github.io/blog/2014/09/18/low-level-languages/"/>
    <updated>2014-09-18T01:53:11+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/09/18/low-level-languages</id>
    <content type="html"><![CDATA[<p>低レベルなことがしたい。もうちょっと具体的に言うと、DBMを書きたい。コンパイラを書きたい。ただ動くだけじゃなくて効率的な実装がしたい。CPUの歓声が聞きたい。そのためにもバイナリを簡単に扱える言語が良い。マシン語が透けて見える言語が良い。いっそインラインアセンブラが欲しい。システムコールがスムーズに出来る(≒ C をスムーズに呼べる)言語が良い。どんな言語が適任か。</p>

<!-- more -->


<p>因みにコンパイラはLLVMをバックエンドに使う予定。何の言語のコンパイラかは決めてない。SMLのサブセットかmini Camlかその辺？</p>

<p>まず考えられるのはダイレクトにマシン語が見えるアセンブラ。でも移植性が無いからボツ。じゃあ他には？</p>

<ul>
<li>LLVMアセンブラ</li>
<li>C</li>
<li>C++</li>
<li>Java</li>
<li>SML</li>
<li>Haskell</li>
<li>OCaml</li>
<li>ATS</li>
<li>Go</li>
<li>D</li>
<li>Rust</li>
</ul>


<p>あたりかな？と思う。Common Lispはバイナリの扱いは案外いけるが流石に効率的な実装は難しい。ガチガチに型宣言つけていくくらいならそもそも静的型付けで型推論のある言語を使った方が良い。その意味ではHylasに期待したけど今はまだメンテナンス中。多分完成したら使う。</p>

<p>Nimrodなる言語もあるらしいがあまり聞かないのでスルー。</p>

<p>因みにこの中で自分が普通に書けるのはCとJava。OCamlもまあまあ。HaskellはRWH読んだっきりでアウトプットはしてない。C++とSMLはHello World + α程度。他はサンプルコード眺めてHello Worldしたかしてないかくらい。</p>

<h2>LLVMアセンブラ</h2>

<p>移植性のあるアセンブラ。アセンブラとは言ってもモジュールシステムもある、関数もある。一度学んでおくと便利な気はする。ただ、多少Cの呼び出しが面倒。メンテナンス性が悪そう。総合して悪くはない、程度かな。</p>

<h2>C</h2>

<p>Cの呼び出し易さにおいて他の追随を許さない言語。高級アセンブラの別名の通りマシン語も透けて見える。というか、書こうとしているDBMのプロトタイプはCで書かれている。だが、既にpicrinでCを書いているし、今回やりたいのとは違う気がするのでおやすみ。</p>

<h2>C++</h2>

<p>LLVM自体C++で書かれているしbetter Cな側面もあるし今回の目的に一番合致しそうな言語。ではあるんだけどあまり好きになれない。一度はやっておかなきゃいけないんだろうけど…。一旦保留で。</p>

<h2>Java</h2>

<p>安心と信頼のJava。30億のデバイスで走るJava。バイナリの扱いは上々だけど今回は使いたくない。理由は、必要上の理由ではなく論理的な理由でオブジェクトを作らなきゃいけない点。メモリ管理が出来ない点。ポインタを扱えない点。抽象性のための犠牲なんだろうけど今回は抽象性ではなく効率をとりたい。</p>

<p>ただ、後で習作としてDBMをJavaで書き直すのはありかもしれない。JavaというかMirahだろうけど。</p>

<h2>SML</h2>

<p>Standard ML。人工知能御三家のうち唯一静的型付けの言語。Haskellerがモナドモナドうるさい所為で隠れがちだがML系の言語は意外とバイナリの扱いも出来る気がする。記号処理に向いてるからとコンパイラを書こうとしたときにバイナリ扱えないと片手落ちだからかな。実際SML、OCaml、Haskellは全てセルフホストコンパイラがある。</p>

<p>SMLの中でも今回検討してるのはSML#とMLton。どちらもCとの相互呼出がある。しかも1行書くだけ。だが複雑な構造体とかはどうしようね。</p>

<p>SML#は分割コンパイルがあるしSML#自身LLVMバックエンドなのでLLVMバインディングもある。が、MLtonに比べて数倍遅く、まだ64bit対応もしてない。MLtonは速くて機能も豊富。だが分割コンパイルは無いっぽい？</p>

<p>一応コンパイラはこれらのどちらかで書くかな、と考えている。</p>

<h2>Haskell</h2>

<p>ML系の言語の中では一番人気でライブラリ豊富。言語自体はすごい好きなんだけどコミュニティが初心者をモナドで殴りにいく印象が強いのであまり好きになれない。あと参考コードとしてGHCのコードは読む気にはなれない。SMLで書いててつらくなったらトライしてみるかな。その時は(a)jhcを使うのかな？</p>

<h2>OCaml</h2>

<p>LLVMやるならOCamlらしい(?)。が、C書いててライブラリの豊富さに気付いてSML#やってCとの相互呼出に惹かれた身には少しもの足りなくなってきた。うーん。迷う。</p>

<h2>ATS</h2>

<p>元Depenent ML。低レベルなことが出来るMLらしい。しかし一々証明しながらプログラム書く気はしない。もうちょっと情報が欲しい。</p>

<h2>Go</h2>

<p>最近中々の人気を見せるGo。一応コンパイルの速いシステム記述言語との触れ込みだがWeb系で多い気がする。なんとなーく自分のやりたいことと違う方向向いてる言語な気がする。Goで書かれたDBMもあるけど。Cとの連携はトリッキーだがヘッダからラッパ自動生成してくれるのは気に入った。DBM書く候補には入れとく</p>

<h2>D</h2>

<p>やりたいこと的には多分一番合ってる言語。でもネタ言語感が拭えないのがなんとも。あと思ったよりCの呼び出しが面倒だった。一応心には留めておく。</p>

<h2>Rust</h2>

<p>まだまだ未熟な印象な言語。だがMozillaが本気で作ってるっぽいので期待も出来そう。メモリ管理も自分でやらせてくれるみたいだしDBMはこれでいこうかなと思ってる。でもCとの連携はつらそう。うーん。メモリモデルの関係上ヘッダから自動生成は出来ないのは分かるんだけどどうにかならんのですかね。</p>

<p>まあ、これだけつらつら書いておいてもCIMもpicrinもcl21も面倒看なきゃいけないしcl21-datacollectionsも復活させないといけないしちゃんと出来るんですかね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shibuya.lisp Tech Talk #8を運営&amp;LTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/09/16/lisp-tech-talk-8/"/>
    <updated>2014-09-16T21:04:12+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/09/16/lisp-tech-talk-8</id>
    <content type="html"><![CDATA[<p>κeenです。レポートに追われ試験があり合宿に行きで2週間以上空きましたが8/30にShibuya.lisp TT #8の運営をしつつLT枠での参加もしてきたので報告です。何かそこそこ大きなイベントの運営をされる方の参考になれば。</p>

<!-- more -->


<h1>キックオフミーティング</h1>

<p>キックオフミーティングが6月にありました。集まったのは5人。potix2(@potix2)さん、chikuさん、深町(@nitro_idiot)さんかにたん(@kazh98)、私。Shibuya.lispの運営はもうちょい居る筈なんですけど引く手数多のLisper達はきっと忙しいんでしょうね。</p>

<p>Shibuya.lisp TTを開催するかを含めて話し合いました。開催されるとなれば3年振りです。</p>

<p>一番の懸案事項はTTをする人がいるかでした。招待講演のアテを話し合ったりTT枠とLT枠のバランスを話し合ったりして開催可能だろうと判断しました。その場で予想参加人数、タイムテーブルや役割分担、TT枠やLT枠が応募多寡になったときの対応、懇親会をどうするかなどを話し合いました。</p>

<p>やっぱりその時点では会場が決まってないので不確定要素が多く、「会場次第」が多かったかと思います。そのときの予想や要求を元に会場の条件を絞った訳ですが。</p>

<p>必要と判断された役職は、</p>

<ul>
<li>懇親会</li>
<li>司会</li>
<li>誘導</li>
<li>照明</li>
<li>マイク</li>
<li>受付</li>
<li>会計</li>
<li>広報</li>
<li>動画</li>
<li>タイムキーパ</li>
<li>コーヒーのケータリングとかお茶とかお菓子の準備</li>
</ul>


<p>でした。5人だとどうしても人数が足りないので運営手伝いも募集することになりました。</p>

<h1>会場決定</h1>

<p>mixi様より(鈴木さん経由で)会場を提供頂きました。スクリーン2枚、飲食OK、懇親会もその場でOK、ハンディカムの貸し出しありの至れり尽せりです。鈴木さんありがとう御座います。</p>

<h1>広報</h1>

<p>広報担当のかにたんがTwitterやMeet Upで宣伝したりchikuさんがTokyo.cljに参加して宣伝したりで広報活動を行なってきました。結果、60人の枠がほぼ埋まる(キャンセル含めれば超過)程度の人数が集りました。かにたんありがとう。</p>

<p>懸案事項だったTTの発表者は早々に埋まり、むしろ応募多寡だろうと予想されたLT枠が半分しか埋まらなくて焦りました。</p>

<h1>ビデオ</h1>

<p>映像に詳しいTOYOZUMIさんに相談したところ、発表者の映像出力をキャプチャする手段があるとのことなので</p>

<ol>
<li>特殊機器による映像出力のキャプチャ</li>
<li>ハンディカムによる発表者の録画</li>
<li>WebカメラによるUstream配信</li>
</ol>


<p>の3つを行ない、3.はリアルタイムに、1.、2.を合成したものを録画映像として配信することになりました。一応私がビデオ担当でしたが一人では無理なのでchikuさんやかにたんと一緒に予行演習を行ないました。</p>

<p>扱いの分からぬ機器に悪戦苦闘し、一応動かすことは出来たものの不安が残るので、上手く動いたシナリオと動かなかったシナリオを用意しました。</p>

<h1>その他</h1>

<p>懇親会の手配やら会計やらがどうだったかは分かりません。何も気にすることが無い程スムーズに進んでたんでしょう。potix2さんと深町さんありがとうございます。</p>

<h1>当日</h1>

<h2>準備</h2>

<p>chikuさんと一緒に渋谷駅に集合し、ケータリングのコーヒーを持って会場入り。そのまま鈴木さんにお世話になりつつ会場設営。当初は私は会場設営はほどほどに、ビデオ関係の準備をしてる筈でしたが人が少ないのでそのまま設営をやってました。</p>

<p>さらにThunderboltケーブルが不足ということでビックカメラまでダッシュ。雪駄+合宿で痛めた足で走るんじゃなかった。結局Thunderboltを買ってきても機器を上手く扱うことが出来ず、失敗した方のシナリオでオペレーションしてました。</p>

<p>映像配信に関しては私のLinuxではUstream配信出来ないだとかWebカメラがスライドから遠くて見えないだとかがありましたが、全体は滞りなく進行。</p>

<h2>Talk</h2>

<p>TalkはLT枠は飛び入りが4人あり、結局良い感じに埋まりました。</p>

<ul>
<li>特別講演

<ol>
<li>笹川様 : 好きい夢の話 (<a href="https://drive.google.com/file/d/0B_H0_8eqWuVAY25lWGdiTGE5RmM/edit?usp=sharing">ビデオ</a>)</li>
</ol>
</li>
<li>TT

<ol>
<li>athosさん : genuine-hilighterの話 (<a href="https://drive.google.com/file/d/0B_H0_8eqWuVAZmJPaWpTMHZRUmc/edit?usp=sharing">ビデオ</a>)</li>
<li>深町さん : cl21の話 (<a href="https://drive.google.com/file/d/0B_H0_8eqWuVAcV91QXRzSC1JVXc/edit?usp=sharing">ビデオ</a>)</li>
<li>豊住さん : 自作画像処理ライブラリの話 (<a href="https://drive.google.com/file/d/0B_H0_8eqWuVATE5nZ0Z4V3Zwdms/edit?usp=sharing">ビデオ</a>)</li>
<li>横田さん : 型宣言と最適化の話 (<a href="https://drive.google.com/file/d/0B_H0_8eqWuVAYzhqZ2J5T0VKTXc/edit?usp=sharing">ビデオ</a>)</li>
</ol>
</li>
<li>LT (<a href="https://drive.google.com/file/d/0B_H0_8eqWuVAaGNLTGpTWWh0ZFU/edit?usp=sharing">ビデオ 1~4</a>、<a href="https://drive.google.com/file/d/0B_H0_8eqWuVAR21Pc2M4bmdpdlU/edit?usp=sharing">ビデオ 4~9</a>)

<ol>
<li>のぶかずさん : Shenの話</li>
<li>κeen : moclの話</li>
<li>かにたん : 床下LispとLisp Meet Upの話</li>
<li>すてぃべあさん : EROSの話</li>
<li>ねこはるさん : Clojureの型推論器の話</li>
<li>Takagiさん: cl-cudaの話</li>
<li>あんちべさん : Incanterの話</li>
<li>TAKUFUKUSHIMAさん : Omの話</li>
<li>zick_minohさん : 42の言語でLisp処理系を書いた話</li>
</ol>
</li>
</ul>


<p>と様々な内容に分かれて行われました。私の発表スライドは<a href="http://KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8.html">ここ</a>にあります。</p>

<h2>懇親会</h2>

<p>箸が足りない、ケータリングのボットを返却し忘れるなどとトラブルはあったものの概ね問題なく進みました。出されたのはアルコール、ソフトドリンク、寿司、ピザです。</p>

<p>だいたい言語毎に島が出来てたようです。私は撮影したビデオを取り込みつつ色々な島に入っていきました。Common Lisperでcl21コミッタでScheme実装者でClojureワナビーなのでどこにも入れて良いですね。ただ、前日スライドの微調整などであまり寝てなかったのでちょいちょい居眠りしてました。</p>

<p>片付けが終って外に出るとみなさんが待ってて下さったのでぞろぞろ帰りました。TOYOZUMIさんが2次会にカラオケに行こうと皆さん誘ってました。私は行こうかと思ったのですがカラオケはジェネレーションギャップがあるとつらいので大人しく帰りました。</p>

<h1>後日</h1>

<p>返し忘れたケータリングのポットは後日chikuさんが返してくれました。</p>

<p>録画した動画はちょいと梃摺りました。まず、長い動画なので動画サイズが4GBのところで切れてます。なのでその2つを結合し、さらにあまりにサイズが大きいので画質を落とす作業が必要でした。</p>

<p>変換はavconv(ffmpegのフォーク。Ubuntuだとこれしか入らない)で行なったのですが、MPEG4をダイレクトには結合出来ないらしことに気付くまで何度も失敗しました(1つの動画の変換に4時間とか掛かるんですよ？しかもその間CPUは100%に張り付いてるのでPC使えない)。レポートやら試験やらの合間に行なったのでそれだけで数日使いました。最終的にはmpegtsなるフォーマットに変換してcatで結合すれば良いことが分かり、</p>

<pre><code>(MP4 + MP4) -&gt; (mpegts + mpegts) -&gt; mpegts -&gt; MP4 -&gt; MP4(low quality)
</code></pre>

<p>の手順を踏んで最終動画を得ました。それでも1トークあたり1GBくらいのサイズがあります。もうちょい画質落としても良かったのかな。</p>

<p>で、今アップロード中ですが私のポンコツWiMAXルータは高負荷に耐えられず1動画数時間掛かってます。その間全くネットが使えません。はぁ。</p>

<p>実は今回の運営は私も含めTech Talk初参加の人がそれなりに居たのですがなんとか乗り切れましたね。講演をして下さった笹川様、会場を提供して下さったmixi様と鈴木さん、運営の手伝いをして下さった方々、ありがとう御座いました。そして運営のみなさん、発表者のみなさんお疲れ様でした。</p>

<p>次回もTT開催出来ると良いですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common LispでSIGINTを捉える]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp/"/>
    <updated>2014-08-27T21:45:37+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp</id>
    <content type="html"><![CDATA[<p>κeenです。もうすぐShibuya.lisp TT #8 ですね。今回はCIMのREPLの改善をしてたらSIGINTを補足しようとして詰まったので共有します。</p>

<!-- more -->


<p>結論を書いちゃうと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defvar</span> <span class="vg">*interrupt-condition*</span>
</span><span class='line'>  <span class="c1">;; It seems abcl does not raise any conditions</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">allegro</span> <span class="ss">&#39;excl:interrupt-signal</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">ccl</span> <span class="ss">&#39;ccl:interrupt-signal-condition</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">clisp</span> <span class="ss">&#39;system::simple-interrupt-condition</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">ecl</span> <span class="ss">&#39;ext:interactive-interrupt</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">sbcl</span> <span class="ss">&#39;sb-sys:interactive-interrupt</span>
</span><span class='line'>  <span class="o">#-</span><span class="p">(</span><span class="nb">or</span> <span class="nv">allegro</span> <span class="nv">ccl</span> <span class="nv">clisp</span> <span class="nv">ecl</span> <span class="nv">sbcl</span><span class="p">)</span> <span class="ss">&#39;no-conditon-known</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">with-handle-interrupt</span> <span class="p">(</span><span class="k">&amp;body</span> <span class="nv">body</span><span class="p">)</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nb">handler-case</span>
</span><span class='line'>       <span class="o">#-</span><span class="nv">ccl</span><span class="p">(</span><span class="k">progn</span>
</span><span class='line'>              <span class="o">,@</span><span class="nv">body</span><span class="p">)</span>
</span><span class='line'>       <span class="o">#+</span><span class="nv">ccl</span> <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">ccl:*break-hook*</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="kt">condition</span> <span class="nv">hook</span><span class="p">)</span>
</span><span class='line'>                                       <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">ignore</span> <span class="nv">hook</span><span class="p">))</span>
</span><span class='line'>                                       <span class="p">(</span><span class="nb">error</span> <span class="kt">condition</span><span class="p">))))</span>
</span><span class='line'>               <span class="o">,@</span><span class="nv">body</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="o">#.</span><span class="vg">*interrupt-condition*</span> <span class="p">(</span><span class="nv">c</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">handle-interrupt</span> <span class="nv">c</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じです。ABCLがコンディションを投げずに即終了してる(?)っぽいのでABCLに対しては無力です。もしかしたらJava側で捉えないといけないのかもしれません。
因みにどうやってそれぞれのコンディション名を調べたかというと、<code>(handler-case (loop) (condition (c) (print c)))</code>を各処理系のREPLで実行して<code>^C</code>しました。
Allegro CLは<code>interrupt-signal</code>がconditionのサブクラスでなかった(<code>serious-condition</code>だった)のでちょいと困りましたね。結局マニュアル読みました。</p>

<p>CIMのコードなので上記以外の処理系には対応してないです。</p>

<p>今回詰まったのはCCLですね。<code>ccl:interrupt-signal-condition</code>は定義してあるもののユーザーより先に処理系が処理するので無意味でした。なので<code>ccl:*break-hook*</code>を使って処理系が捉えるより早くコンディションを発生させました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[isucon夏期講習2014に参加してきた]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/21/isucon-summer-2014/"/>
    <updated>2014-08-21T12:16:03+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/21/isucon-summer-2014</id>
    <content type="html"><![CDATA[<p>レポート締切間近のκeenです。ISUCON夏期講習2014に参加してきたのでレポートです。とはいっても去年の夏期講習もISUCONも参加してるので目新しいことはないんですが。主な目的はメンバー集めです。</p>

<!-- more -->


<h1>流れ</h1>

<ul>
<li>LINEの採用情報:
 ISUCONがきっかけでLINEに内定貰った人がいるよう。因みに自分はLINE落ちた。</li>
<li><p>ISUCONの概要の説明:
うん。知ってる。</p>

<p> <iframe src="//www.slideshare.net/slideshow/embed_code/38160090" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/tagomoris/isucon2014" title="ISUCONの話(夏期講習2014)" target="_blank">ISUCONの話(夏期講習2014)</a> </strong> from <strong><a href="http://www.slideshare.net/tagomoris" target="_blank">SATOSHI TAGOMORI</a></strong> </div></p></li>
<li>過去問を解く:
 去年の予選の問題だった。うん。知ってる。</li>
<li>パフォーマンス向上に関しての解説:
 これもISUCON反省会とかそんなんでkazeburoさんが話してた気がする</li>
</ul>


<iframe src="//www.slideshare.net/slideshow/embed_code/38162132" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/kazeburo/isucon-summerclass2014action1" title=" Webアプリケーションの パフォーマンス向上のコツ 概要編" target="_blank"> Webアプリケーションの パフォーマンス向上のコツ 概要編</a> </strong> from <strong><a href="http://www.slideshare.net/kazeburo" target="_blank">Masahiro Nagano</a></strong> </div></p>

<iframe src="//www.slideshare.net/slideshow/embed_code/38163927" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/kazeburo/isucon-summerclass2014action2" title=" Webアプリケーションの パフォーマンス向上のコツ 実践編" target="_blank"> Webアプリケーションの パフォーマンス向上のコツ 実践編</a> </strong> from <strong><a href="http://www.slideshare.net/kazeburo" target="_blank">Masahiro Nagano</a></strong> </div></p>

<ul>
<li>morisさんによるライブチューニング:
 失敗してた</li>
<li>懇親会</li>
</ul>


<h1>自分の作業</h1>

<p>前年度参加者がハイパフォーマンス叩き出して俺TUEEEEEEしても意味がないので次回のISUCONで試したいことを試して地雷踏むことにした。</p>

<h2>sshのRSAAuthenticationの設定</h2>

<p>何故かハマる。</p>

<p>id_rsa.pubをauthorized_keysに突っ込んでUserPAMの設定まで確認して<code>sudo service sshd restart</code>したのにパスワードを求められる。確か色々確認してもう一回sshdリスタートしたら通った気がする。原因不明。</p>

<p>そういや</p>

<pre><code>curl https://github.com/KeenS.keys &gt;&gt; .ssh/authorized_keys
</code></pre>

<p>のワンライナー使えば良かった。</p>

<h2>アプリケーションをgitで管理する</h2>

<p>やらかす。</p>

<p>最初isucon/webapp/ruby/だけをgitで管理した。それだと足りないので次にisucon/全体をgitで管理しようとしたらisucon/webapp/ruby/がサブモジュール扱いされて困った。サブモジュール分かんね。色々試すもついぞisucon/のgitでisucon/webapp/ruby/を管理出来なかった。結局.git吹っ飛ばして再度<code>git init .</code>した。これは次回までの宿題ですね。</p>

<p>あと地味にisucon/init.shが.gitignoreされてて困った。</p>

<h2>サーバーマシンをgitサーバーにする</h2>

<p>前回はbitbucketで管理してたがしばらく使わない内にパスワードを忘れてしまったのと(もしかしたら以前のバイト先のメールアドレスで登録してた?)pingが400msのbitbucketサーバー使うのに気が引けたのでサーバーマシンをgitサーバーにしようと決意。ハマる。</p>

<p>gitのマニュアルを適当に読んでたのが悪かった。ローカルで<code>git clone iscon@machine:isucon</code>してもなんか怒られてしばらく悩む。正解は、先ずリモートで<code>git clone --bare isucon isucon.git</code>してから<code>git clone iscon@machine:isucon.git</code>だった。</p>

<p>次にリモートで</p>

<pre><code>mv isucon isucon.back
git clone isucon.git isucon
</code></pre>

<p>したら.gitignoreとかその辺の関係でベンチマークやら何やらが動かなくなる。自分でベンチマークをビルドする羽目に。</p>

<p>新たにcloneせずに</p>

<pre><code>cd isucon
git remote add origin ../isucon.git
</code></pre>

<p>すれば良かったのだろうか。要調査。</p>

<h2>細かなチューニング</h2>

<p>markdownのバックエンドをrdiscountにしたり。これもGemfileで困る。結局あれはローカルで<code>bundle install --no-deploy</code>してから<code>git push</code>したら良かったのだろうか。これも宿題。</p>

<h2>インデックスを張る</h2>

<p>isucon/config/init.sqlに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">users_idx_username</span> <span class="k">ON</span> <span class="n">users</span> <span class="p">(</span><span class="n">username</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">memos_idx_id_is_private_created_at_id</span> <span class="k">ON</span> <span class="n">memos</span> <span class="p">(</span><span class="n">is_private</span><span class="p">,</span> <span class="n">created_at</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">memos_idx_id_user_created_at</span> <span class="k">ON</span> <span class="n">memos</span> <span class="p">(</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">,</span> <span class="n">created_at</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>を書いてisucon/init.shに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>mysql -u isu-user isucon &lt; ./config/init.sql &gt; log 2&gt;<span class="p">&amp;</span>1
</span><span class='line'><span class="c">#データ投入後になにかしらの作業をしたい場合はこのシェルスクリプトに書いてください</span>
</span></code></pre></td></tr></table></div></figure>


<p>を書くもエラーが出る。結局絶対パスで書いて2〜3回実行したら通ったのでパスの問題だったかと。しかし1回で通らなかったのは謎。</p>

<p>あとデバッグ大変だった。ベンチマークツールさん、初期化スクリプトでエラー出したらエラーログ吐いて下さいよ。</p>

<p>そういやリダイレクト先のlogファイルは結局行方不明のままだった。</p>

<h2>N+1クエリの解決</h2>

<p>SQL書けなすぎてJOINとかFORCE INDEX書くのに戸惑った。一々書いてはmysqlのコンソールに貼ってエラーメッセージ読んでってやってた。すんなりやりたい。</p>

<h2>リバースプロキシをNginXにする</h2>

<p>まずは</p>

<pre><code>sudo yum install nginx
mv /etc/nginx/nginx.conf ./config/
git add ./config/nginx.conf
git commit -m 'add nignx.conf'
sudo ln -s /home/isu-user/isucon/config/nginx.conf /etc/nginx/
sudo service httpd stop
sudo service nginx start
</code></pre>

<p>だったかな?最初<code>ln</code>に絶対パスを使ってなくてエラー出たりしたけど。</p>

<p>んで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>location / <span class="o">{</span>
</span><span class='line'>   proxy_pass   http://localhost:5000<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>だけ書くも<code>404 http://localhost:5000/なんちゃら Not Found</code>が出る。そういや、とプロキシヘッダを追加。それでも画像などはとれない。多分rootをいじらなかったのが原因。次の手で静的ファイルをNginXでキャッシュするように設定したら直った。</p>

<p>あまり記録残してないけどこの辺で2900点くらいで首位だった気がする。因みに初期値は1700くらい。</p>

<h2>Varnishを噛ませる</h2>

<p>前回、ベンチマークツールのチェックが甘くてVarnishを使うだけでスコアが跳ね上がるというのを知っていたのでちょっとチート臭いけどどうせ本番でも必要だしということで練習もかねて使う。</p>

<pre><code>sudo yum install varnish
mv /etc/sysconfig/varnish ./config
git add ./config/varnish
git commit -m 'varnish'
sudo ln -s /home/isu-user/isucon/config/varnish /etc/sysconfig/varnish
mv /etc/varnish/default.vcl ./config
git add ./config/default.vcl
git commit -m 'default.vcl'
sudo ln -s /home/isu-user/isucon/config/default.vcl /etc/varnish/default.vcl
</code></pre>

<p>的なことをやった。あとはvarnishを80番にしてバックエンドを4000番にして、NginXを4000番にした。それだけでスコアが14000くらいになった。varinish簡単だし優秀。</p>

<h2>my.cnfのチューニング</h2>

<p>もはやvarnishが仕事してる所為でボトルネックはベンチマークツールなのだけど一応。</p>

<p>とはいってもinnodb_buffer_pool_sizeを2GBから6GBにしただけ。因みに与えられたマシンのメモリは8GB。スコアは一応微増。でもまあ誤差の範囲内。</p>

<p>この辺でタイムオーバー。</p>

<h1>懇親会</h1>

<p>目の前の人がClojure推しの人でだいたいそんな話してた。</p>

<p>チームメンバー捜しは席の周りの人が当日出れない人ばかりだったのと席替えがなかったので失敗に終わる。誰か学生枠で一緒に出ましょうよ。学生賞目指しましょうよ。</p>

<h1>やり残したこととか反省とか</h1>

<ul>
<li>ローカルで変更→commit→push→リモートでpull→再起動→ベンチマークのワークフローが結構面倒だったしpull忘れ、再起動忘れがあったのでpushより後を自動化したい。出来ればgitのコミットログとベンチマークのスコアをペアで保存しながら。hook使ったら割と出来そうな気はするんだけどなあ。</li>
<li>折角サーバー与えられたんだしMySQLのslow logを吐かせるの一回練習しとけば良かった。</li>
<li>結局capistrano使わなかった。複数台構成なら必須だし復習しておきたかったのに。</li>
<li>メンバー捜したかった。</li>
</ul>


<p>マジでメンバー捜してます。学生枠で出たい人@blackenedgoldまでお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs便利機能/Tips紹介]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/13/emacs-utility-functions/"/>
    <updated>2014-08-13T23:15:37+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/13/emacs-utility-functions</id>
    <content type="html"><![CDATA[<p>κeenです。このブログのアクセスログを見てるとEmacsの記事が好評なようなのでここは一つ私の知ってる便利機能を全列挙してみますね。</p>

<!-- more -->


<p>どの辺から常識でどの辺からTipsかは私の主観です。だいたいるびきちさんの本に載ってるのは常識扱いです。</p>

<p>※<code>-!-</code>でカーソル位置、<code>-¡-</code>でマーク位置を表すものとします。<br/>
※私はEmacsのtrunkをビルドして使ってるので最新のリリース版のEmacsにも含まれない機能もあるかもしれません。</p>

<h1>改行/インデント系</h1>

<h2><code>C-m</code> <code>RET</code> <code>C-j</code> <code>C-o</code></h2>

<p>最初の頃は混乱してました。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> key       </th>
<th align="left"> lisp function</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> C-m = RET </td>
<td align="left"> <code>newline</code></td>
</tr>
<tr>
<td></td>
<td align="left"> C-j       </td>
<td align="left"> <code>newline-and-indent</code></td>
</tr>
<tr>
<td></td>
<td align="left"> C-o       </td>
<td align="left"> <code>open-line</code></td>
</tr>
</tbody>
</table>


<p>です。<code>C-m</code>と<code>C-o</code>の違いはカーソルが現在行に残るか残らないかです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaa-!-aaa</span></code></pre></td></tr></table></div></figure>


<p>↓ <code>C-m</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaa
</span><span class='line'>-!-aaa</span></code></pre></td></tr></table></div></figure>


<p>ですが、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaa-!-aaa</span></code></pre></td></tr></table></div></figure>


<p>↓ <code>C-o</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaa-!-
</span><span class='line'>aaa</span></code></pre></td></tr></table></div></figure>


<p>です。</p>

<p><code>C-o</code>の改行後にインデントする版を捜したのですが<code>C-M-o (split-line)</code>という近いコマンドはあるもののまさにというのはありませんでした。</p>

<p>※trunkではデフォルトで<code>electric-indent-mode</code>がonになってるので<code>C-m/RET</code>と<code>C-j</code>が入れ替わります。<br/>
※現在行と改行した先の行両方をインデントする<code>indent-then-newline-and-indent</code>という関数もあります。</p>

<h2><code>M-^</code>(<code>delete-indentation</code>)</h2>

<p>直感的には<code>newline-and-indent</code>の逆関数です。今の行を上の行にくっつけます。そのとき邪魔になるインデントは取り除いてくれます。<code>M-- M-^</code>とすると下の行を今の行にくっつけてくれます。</p>

<h2><code>C-M-j</code>(<code>indent-new-comment-line</code>)</h2>

<p>コメント内で使う<code>C-j</code>です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="c1">;;; This is a comment-!-</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓ <code>C-M-j</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="c1">;;; This is a comment</span>
</span><span class='line'><span class="c1">;;; -!-</span>
</span></code></pre></td></tr></table></div></figure>


<p>です。</p>

<h2><code>M-m</code>(<code>back-to-indentation</code>)</h2>

<p>現在行の空白文字でない最初の文字に移動します。viでいう<code>^</code>です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">aaa-!-bbb</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">-!-aaabbb</span>
</span></code></pre></td></tr></table></div></figure>


<p>です。</p>

<h2><code>electric-indent-mode</code></h2>

<p>さっきちらっと触れました。<code>C-m</code>が<code>newline-and-indent</code>になって<code>C-j</code>が<code>newline</code>になるモードです。</p>

<h1>削除/kill-ring系</h1>

<h2><code>&lt;C-S-backspace&gt;</code>(<code>kill-whole-line</code>)</h2>

<p>おなじみ <code>C-k</code>(<code>kill-line</code>)は現在位置から行末までを削除しますが、それだとぬるいといって<code>C-k</code>で現在行をまるごと削除する設定(<code>(setq kill-whole-line t)</code>)してる人もいますが、実は<code>&lt;C-S-backspace&gt;</code>で可能なのでした。鍛えられた左手の小指の先と腹でCaps LockとShiftを同時押しすれば難易度もそんなに高くない！</p>

<h2><code>C-M-w</code>(<code>append-next-kill</code>)</h2>

<p>nextのkillコマンドでkillした内容をkill-ringにappendします。チュートリアルにも載ってた気がするんですがすっかり忘れてました。</p>

<h1>編集系</h1>

<h2><code>electric-pair-mode</code></h2>

<p>開き括弧を挿入すると自動で閉じ括弧を挿入してくれます。リージョンを選択して括弧を挿入するとリージョンを囲むように括弧を挿入してくれます。これ大事。挿入後のカーソルは開き/閉じのどちらを入力したかに依ります。まあ、想像付きますね。地味に鉤括弧にも対応。</p>

<p><code>ruby-mode</code>はこの挙動を上書きしてるので殴り殺したくなります。</p>

<h2><code>subword-mode</code></h2>

<p>私はキャメルケースが嫌いという超個人的理由で使ってないのですが、キャメルケースがコーディング規約な言語を使う人には便利でしょう。キャメルケースの1こぶを1単語と見做します。例えば&#8221;SubWord&#8221;は&#8221;Sub&#8221; &ldquo;Word&#8221;と認識されます。</p>

<pre><code>-!-SubWord 
</code></pre>

<p>で<code>M-f</code>(<code>forward-word</code>)すると通常は</p>

<pre><code>SubWord-!-
</code></pre>

<p>となりますが<code>subword-mode</code>内だと</p>

<pre><code>Sub-!-Word
</code></pre>

<p>となります。その他word系の操作が全部こぶ単位になります。</p>

<p>因みにモードラインの表示が&#8221;, &ldquo;と、微妙な感じです。</p>

<h2><code>superword-mode</code></h2>

<p><code>subword-mode</code>の逆です。Lispの&#8221;this-is-a-symbol&#8221;といったシンボルが&#8221;this&#8221; &ldquo;-is&rdquo; &ldquo;-a&rdquo; &ldquo;-symbol&#8221;と認識されていたのが&#8221;this-is-a-symbol&#8221;と認識されます。</p>

<p>因みにモードラインの表示は &ldquo;$^2$&rdquo; です。</p>

<h2><code>C-x C-u</code>(<code>upcase-region</code>)</h2>

<p>リージョンを選択した状態で使うとリージョンを大文字にしてくれます。
これを使ったTipsです。</p>

<p>シチュエーションは全部大文字の単語(定数とかで良く出てくる)を入力したいが、Caps Lockは既にCtrlにしてあるので使えないって状態です。<br/>
先ず、<code>C-@</code>します。そして目的の単語を小文字のまま入力します。そして<code>C-x C-u</code>します。すると全て大文字になります。便利。<code>C-x C-l</code>(<code>lowercase-region</code>)でも同じこと出来ますが、使いたいシチュエーションは少ないでしょう。</p>

<p>尚、このコマンドはデフォルトで無効になっているので普段使いするには一回使ってダイアログを出さないようにするか<code>init.el</code>に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;upcase-region</span> <span class="ss">&#39;disabled</span> <span class="no">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>を追加しておく必要があります。</p>

<h2><code>M-- M-u</code>(<code>upcase-word</code>)</h2>

<p><code>upcase-word</code>はカーソルの次の単語を大文字にしますが、負の前置引数を与えると直前の単語を大文字にしてくれます。ちょっと押し辛いですが一応覚えておきましょう。<code>M-- M-l</code>(<code>capitalize-word</code>)もそれなりに使えるかもしれません。</p>

<h1>complete系</h1>

<p><code>icomplete-mode</code>するとミニバッファでの入力時に補完候補が随時表示されますが、実はあの候補に色々操作出来るのです。</p>

<h2><code>M-p</code> / <code>M-n</code></h2>

<p>ヒストリを辿れます</p>

<h2><code>C-j</code></h2>

<p>先頭の候補に決定します。</p>

<h2><code>C-,</code> / <code>C-.</code></h2>

<p>候補を後/先に送ります。キーボードを見て&lt; / &gt;を押せば良いので簡単ですね。</p>

<h2><code>C-M-i</code></h2>

<p>先頭の候補を補完します。続けて<code>C-M-i</code>すると順次次候補になります。</p>

<h2><code>C-r</code></h2>

<p>ヒストリを検索します。</p>

<h2><code>C-s</code></h2>

<p>ミニバッファ内を前方検索します。あまり需要なさそうですね。</p>

<h1>isearch</h1>

<p>isearchはカーソルをバッファに残したままミニバッファを編集するのでキーバインドが特殊です。</p>

<h2><code>C-s</code>(<code>isearch-repeat-forward</code>)</h2>

<p>検索文字列が空の状態で<code>C-s</code>すると前回の検索文字列で検索します。</p>

<h2><code>C-j</code>(<code>isearch-printing-char</code>)</h2>

<p>RETが決定に使われてるので改行はC-jになります。</p>

<h2><code>C-w</code>(<code>isearch-yank-word-or-char</code>)</h2>

<p>カーソル下の単語又は文字を検索文字列にします。連続して押すと範囲を広げます。</p>

<h2><code>C-M-w</code>(<code>isearch-del-char</code>)</h2>

<p>1文字削除します。<code>DEL</code>(<code>isearch-delete-char</code>)とは違って削除してもバッファのポイントは戻りません。</p>

<h2><code>C-M-y</code>(<code>isearch-yank-char</code>)</h2>

<p>カーソル下の文字を検索文字列に足します。</p>

<h2><code>M-s C-e</code>(<code>isearch-yank-line</code>)</h2>

<p>カーソルから行末までを検索文字列にします。</p>

<h2><code>M-s</code>(<code>isearch-toggle-</code>)系</h2>

<p>isearchには実は文字列検索だけでなく、さまざまな検索方法があります。
<code>M-s _</code>(<code>isearch-toggle-symbol</code>)、<code>M-s c</code>(<code>isearch-toggle-case-fold</code>)、<code>M-s r</code>(<code>isearch-toggle-regexp</code>)、<code>M-s w</code>(<code>isearch-toggle-word</code>)、あたりを覚えておくと良いでしょう。</p>

<h1>バッファ/ウィンドウ系</h1>

<h2>split-threshold</h2>

<p>Emacsはデフォルトの状態では何かしらのウィンドウを分割するアクション(e.g. <code>list-buffers</code>)でウィンドウを上下に分割します。しかしワイドディスプレイを使っていると左右に分割して欲しいものです。そこで、この設定です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">split-height-threshold</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">split-width-threshold</span> <span class="mi">100</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>この設定で、幅が100桁以上なら左右、100桁未満なら上下に分割するようになります。100という数字は私が試行錯誤して出した最適解です。<code>split-height-threshold</code>と<code>split-width-threshold</code>を同時に設定したら先に<code>split-height-threshold</code>が判定されるようです。</p>

<h2><code>C-x 4</code>(<code>-other-window</code>)系</h2>

<p>ウィンドウを分割して隣のウィンドウに別のファイルを開きたい、あるいは既に分割してある隣のウィンドウに別のバッファを持ってきたいといったときに使うのが<code>C-x 4</code>(<code>-other-window</code>)系のコマンドです。<code>C-x 4 C-f</code>(<code>find-file-other-window</code>)、<code>C-x 4 b</code>(<code>switch-to-buffer-other-window</code>)、<code>C-x 4 0</code>(<code>kill-buffer-and-window</code>)あたりを覚えておけば良いでしょう。詳しくは<code>C-x 4 C-h</code>すると見れます。</p>

<p>似たようなのに、<code>C-x 5</code>(<code>-other-frame</code>)系のコマンドがありますが、私はEmacsのフレームを2つ以上出したいという状況に遭遇したことがないので省略します。</p>

<h2><code>find-alternate-file</code></h2>

<p>ほぼ<code>find-file</code>と同じ挙動ですが、現在のバッファをkillしてから新たなファイルを開きます。あるファイルを開こうとして間違ったファイルを開いてしまったときに使います(バッファの内容が空なので間違ったことが直ぐ分かる)。地味に便利なのですがデフォルトでキーが割り当てられていません。<code>C-x C-a</code>あたりが妥当でしょうか。</p>

<h1>rectangle(矩形選択)系</h1>

<p>最近機能が強化されてるrectangle系です。プリフィクスが<code>C-x r</code>と押し辛いのが難点ですが、使用頻度が高い訳ではないのでまあ妥当でしょう。</p>

<p>region-rectangleはカーソルとマークで成す長方形を範囲とします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">ab-!-cdefg</span>
</span><span class='line'><span class="nv">hijklmn</span>
</span><span class='line'><span class="nv">opqrs-</span><span class="err">¡</span><span class="nv">-tu</span>
</span></code></pre></td></tr></table></div></figure>


<p>のとき、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">cde</span>
</span><span class='line'><span class="nv">jkl</span>
</span><span class='line'><span class="nv">qrs</span>
</span></code></pre></td></tr></table></div></figure>


<p>がregion-rectangleに入ります。</p>

<p>しかしこれだと分り辛いものです。そこで、最近<code>C-x SPC</code>でregion-rectangleを視覚表示出来るようになりました。るびきちさんの本に載ってる<code>sense-region</code>に近いです。</p>

<h2><code>C-x r k</code>(<code>kill-rectangle</code>) / <code>C-x r d</code>(<code>delete-rectangle</code>) / <code>C-x r M-w</code>(<code>copy-rectangle-as-kill</code>)</h2>

<p>名前のままですね。<code>kill-rectangle</code>や<code>copy-rectangle-as-kill</code>が保存するkill-ringは通常のkill-ringとは異なります。</p>

<p>region-rectangleを視覚表示した状態で<code>C-w</code>すると<code>kill-rectangle</code>になるようです(他のコマンドは未確認)</p>

<h2><code>C-x r y</code>(<code>yank-rectangle</code>)</h2>

<p><code>kill-rectangle</code>や<code>copy-rectangle-as-kill</code>が保存したものを吐きます。どのように挿入されるかというと、<br/>
rectangleのkill-ringが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">cde</span>
</span><span class='line'><span class="nv">jkl</span>
</span><span class='line'><span class="nv">qrs</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、バッファが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">-!-foo</span>
</span><span class='line'><span class="nv">bar</span>
</span><span class='line'><span class="nv">baz</span>
</span></code></pre></td></tr></table></div></figure>


<p>のとき、<code>C-x r y</code>すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">cdefoo</span>
</span><span class='line'><span class="nv">jklbar</span>
</span><span class='line'><span class="nv">qrs-!-baz</span>
</span></code></pre></td></tr></table></div></figure>


<p>となります。</p>

<h2><code>C-x r t</code>(<code>string-rectangle</code>)</h2>

<p>rectangle-regionを文字列で置換します。ちょっと実用的な例を出しましょうかね。</p>

<p>バッファが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">pic_</span><span class="o">-</span><span class="err">¡</span><span class="o">-</span><span class="n">list_first</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="n">pic_list_second</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="n">pic_list</span><span class="o">-!-</span><span class="n">_third</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>で<code>C-x r t RET vector</code>すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">pic_vector_first</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="n">pic_vector_second</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="n">pic_vector_third</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>となります。最近プレビュー機能が入ったので入力しながらリアルタイムでバッファが書き換わります。最小設定主義のemacsにしては珍しい変更ですね。</p>

<p>尚、幅0のregion-rectangleに使うとプリフィクスを付けられることも覚えておきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">-</span><span class="err">¡</span><span class="o">-</span><span class="n">This</span> <span class="n">sentence</span> <span class="n">is</span>
</span><span class='line'><span class="o">-!-</span><span class="n">a</span> <span class="n">quotation</span>
</span></code></pre></td></tr></table></div></figure>


<p>に<code>C-x r t RET &gt;</code>すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">&gt;</span> <span class="n">This</span> <span class="n">sentence</span> <span class="n">is</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">a</span> <span class="n">quotation</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>と出来ます。</p>

<h1>register系</h1>

<p>register系も<code>C-x r</code>のブリフィクスを持ちます。非常に高機能なのに押し辛く、rectangleと紛らわしいキーバインドなのは残念です。</p>

<p>registerの概念は分り辛いのですが、「何でも保存出来る箱」で、しかも「キー1つにつき箱一つ」です。viの名前付きバッファと似ていますが何でも保存出来る点で異なります。</p>

<p>それぞれの機能を見てちょっと自分で試してみて理解して下さい。</p>

<h2><code>C-x r SPC</code>(<code>point-to-register</code>)</h2>

<p>レジスタにポイントを登録します。<code>C-x r C-SPC</code>でも<code>C-x r C-@</code>でも同じです。</p>

<p><code>C-x r SPC</code>すると&#8221;Point to Register: &ldquo;とプロンプトが出るので、現在のポイントを登録させたいレジスタを選びます。レジスタを選ぶというのは好きなキーを押せばよいです。私は考えるのが面倒なのでaから順番に使っていってます。</p>

<p>これだけだと分かりにくいので次のコマンドも参考にして下さい。</p>

<h2><code>C-x r j</code>(<code>jump-to-register</code>)</h2>

<p><code>point-to-register</code>でレジスタに登録したポイントに飛びます。例えばaレジスタにポイントを登録したなら<code>C-x r j RET a</code>でそこに飛べます。最近、現在登録されてるレジスタ一覧が出るようになったので然程迷わないかと思います。</p>

<h2><code>C-x r x</code>(<code>copy-to-register</code>)</h2>

<p>レジスタに選択範囲の文字列を登録します。<code>C-x r s</code>でも同じです。</p>

<p>rectangleと同じプリフィクスを使っているがために非常に覚え辛いキーバインドになってしまっています。しかもkill-ringとの差別化がイマイチ分からないので需要なさそうですね。</p>

<h2><code>C-x r r</code>(<code>copy-rectangle-to-register</code>)</h2>

<p>region-rectangleをレジスタに登録します。</p>

<h2><code>C-x r i</code>(<code>insert-register</code>)</h2>

<p>レジスタに登録した文字列/rectangle/数字をバッファに挿入します。<code>C-x r g</code>でも同じです。</p>

<p>ポイントを挿入しようとすると数字が入るようです(ポイントは内部的には数字)。</p>

<h2><code>C-x r n</code>(<code>number-to-register</code>)</h2>

<p>レジスタに数字を登録します。登録した数字は<code>C-x r +</code>(<code>increment-regiser</code>)で増やしたり(負の前置引数を与えれば減らすことも可能)<code>insert-register</code>でバッファに挿入することも可能。キーボードマクロなんかで役に立つのかな？</p>

<h2><code>C-x r w</code>(<code>window-configuration-to-register</code>)</h2>

<p>現在のフレームのwindow-configuration(ウィンドウの分割や表示されるバッファ)をレジスタに登録します。復元は<code>C-x r j</code>(<code>jump-to-register</code>)です。</p>

<p>同様の機能を提供するために数々のプラグインが作られてきましたが標準で提供されることになりました。</p>

<p>これと次の<code>frameset-to-register</code>は最近入った機能だった気がします。</p>

<h2><code>C-x r f</code>(<code>frameset-to-register</code>)</h2>

<p>frameset(フレームの数や位置、サイズ、そしてそれぞれのフレームのwindow-configuration)をレジスタに登録します。復元は<code>C-x r j</code>(<code>jump-to-register</code>)です。</p>

<h2>蛇足</h2>

<p>キーは割り当てられてませんがキーボードマクロの保存/実行やレジスタにappend/prependするコマンドもあるようです。</p>

<p>同じ<code>C-x r</code>のプリフィクスの機能にブックマークがありますが、るびきちさんの本に載ってるので割愛します。</p>

<h1>vc(バージョン管理)系</h1>

<p>詳しい使い方は多数の記事があると思うのでそちらに任せるとして、よく使うものを紹介します。尚、るびきちさんの本の頃からは大分進化してるのでvcに関しては参考にしない方が良いかと思います。例えば<code>git init</code>相当をするコマンド(<code>vc-create-repo</code>)は追加されてます。その他mergeやpull/pushなども。</p>

<p>各vcsの対応状況は</p>

<blockquote><p>;; Supported version-control systems presently include CVS, RCS, GNU<br/>
;; Arch, Subversion, Bzr, Git, Mercurial, Monotone and SCCS<br/>
;; (or its free replacement, CSSC).</p></blockquote>

<p>とあります。かなり多いですね。というかこんなにvcsあったんですね。</p>

<p>私が最近gitしか使ってないので他のvcsでどうなるかは分かりません。一応vc.el自体vcsの差異を吸収するものなのですが、vcs固有の挙動もあるのです。</p>

<h2><code>C-x v =</code>(<code>vc-diff</code>)</h2>

<p><code>git diff &lt;バッファのファイル&gt;</code>相当です。大体、しばらく作業してそろそろコミットするかーって時に使います。表示されるバッファはdiff-modeになっているのでdiffの部分でRETすると変更箇所にジャンプ出来ます。</p>

<h2><code>C-x v l</code>(<code>vc-print-log</code>) / <code>C-x v L</code>(<code>vc-root-log</code>)</h2>

<p><code>C-x v l</code>(<code>vc-print-log</code>) で現在ファイルの、 <code>C-x v L</code>(<code>vc-root-log</code>) でバージョン管理下全体のログ(コミットグラフ)を見れます。TABでログ間を移動出来たりRETでログを展開したりDでそのログのdiffを見たり色々なことが出来ます。diffを表示させたら勿論RETで変更箇所に飛べます。変更履歴を追うときは圧倒的に便利。</p>

<p>私もそこまで深追いしてないのでlogバッファでの操作の調査は読者の課題とする。</p>

<h2><code>C-x v v</code>(<code>vc-next-action</code>)</h2>

<p>vcの中で一番有名なコマンドでしょうから詳細は省きます。私が強調したいのはコミットログ書くときのlog-editモードです。地味に機能強化されてます。<code>C-c C-d</code>(<code>log-edit-show-diff</code>)でdiffを表示したり<code>C-c C-e</code>(<code>vc-git-log-edit-toggle-amend</code>)でamendにしたり出来ます。詳しくは<code>C-c ?</code>(<code>log-edit-mode-help</code>)して下さい。</p>

<h2><code>C-x v d</code>(<code>vc-dir</code>)</h2>

<p>ディレクトリ単位での機能を使えます。というかファイル単位でない機能(つまりvcsの多くの機能)を使えます。最近はvcを使うときはこれがメインになってます。色々機能があるので<code>&lt;f1&gt; b</code>(<code>describe-bindings</code>)して確認して下さい。</p>

<h2><code>C-x v u</code>(<code>vc-revert</code>)</h2>

<p>これは逆に使ってはいけないコマンドです。バッファのファイルのみをリバートする(<code>git checkout -- &lt;バッファのファイル&gt;</code>相当)と思いきや、<code>git reset --hard</code>するようです。no more被害者。</p>

<h1>view-mode</h1>

<p>かなりキーバインドが特殊ですが割と便利な機能です。ここで紹介したもの以外にもキーはバインドされてますが非自明なのは大体こんなもんでしょう。</p>

<h2><code>RET</code>(<code>View-scroll-line-forward</code>) / <code>y</code>(<code>View-scroll-line-backward</code>)</h2>

<p>上下に1行スクロールします。ありそうで他にない機能です。</p>

<h2><code>/</code>(<code>View-search-regexp-forward</code>) / <code>\</code>(<code>View-search-regexp-backward</code>)</h2>

<p>まさかのviバインド。ちゃんと<code>n</code>(<code>View-search-last-regexp-forward</code>)と<code>p</code>(<code>View-search-last-regexp-backward</code>)も用意されてます。</p>

<h2><code>s</code>(<code>isearch-forward</code>) / <code>r</code> (<code>isearch-backward</code>)</h2>

<p><code>C-</code>がなくなっただけですね。他にも<code>C-</code>がなくなっただけのコマンドはいっぱいありますが<code>/</code>/<code>\</code>との比較で出しました。</p>

<h2><code>m</code>(<code>point-to-register</code>) / <code>'</code>(<code>register-to-point</code>)</h2>

<p><code>m</code>でマークして<code>'</code>でジャンプです。</p>

<h2>やめる系</h2>

<p>なぜか一杯あります。前提として、view-modeは別のファイルから「view-modeで(時に別ウィンドウで)ファイルを開く」系のコマンドで呼ばれることが多いというのがあります。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> コマンド                   </th>
<th align="left"> 説明</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>e</code>(<code>View-exit</code>)           </td>
<td align="left"> view-modeを抜ける。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>E</code>(<code>View-exit-and-edit</code>)  </td>
<td align="left"> view-modeを抜けてバッファを編集出来るようにする。つまり、read-only-modeも抜ける。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>c</code>(<code>View-leave</code>)          </td>
<td align="left"> view-modeを抜けてバッファを切り替えるがバッファはkillしない。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>C</code>(<code>View-kill-and-leave</code>) </td>
<td align="left"> view-modeを抜けてバッファをkillして以前のバッファに切り替る。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>q</code>(<code>View-quit</code>)           </td>
<td align="left"> view-modeを抜けてウィンドウ内の状態を元に戻し、フォーカスも戻す。大抵バッファをkillする。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>Q</code>(<code>View-quit-all</code>)       </td>
<td align="left"> view-modeを抜けてウィンドウ構成を元に戻す。大抵バッファをkillする。</td>
</tr>
</tbody>
</table>


<p>うん。覚えられね。</p>

<h1>dired系</h1>

<p>便利なのに情報が少ないdired系。私はUbuntuのUnityを捨ててStumpwmを使っているのでファイルエクスプローラは専らEmacsですからよく使います。<a href="http://localhost:4000/blog/2013/10/04/emacs-dired/">以前のエントリ</a>以外の便利機能を紹介します。</p>

<p>因みに呆れるほどキーがバインドされてるのでここで紹介するのはほんの一部です。画像のサムネイル関連の機能なんかもあります。</p>

<h2><code>+</code>(<code>dired-create-directory</code>)</h2>

<p>ディレクトリを作ります。</p>

<h2><code>(</code>(<code>dired-hide-ditail-mode</code>)</h2>

<p>初期状態では<code>ls -l</code>っぽい内容が表示されてますが<code>ls</code>に変更出来ます。</p>

<h2><code>v</code>(<code>dired-view-file</code>)</h2>

<p>ポイント下のファイルをview-modeで開きます。view-modeでは<code>q</code>でバッファを閉じれるので、あるディレクトリ下のファイルを連続して読みたいときに便利です。</p>

<h2><code>o</code>(<code>dired-find-file-other-window</code>)</h2>

<p>別ウィンドウでファイルを開きます。</p>

<h2><code>C-o</code>(<code>dired-display-file</code>)</h2>

<p>別ウィンドウでファイルを開きますが、フォーカスは移りません。</p>

<p>diredに限らず、ファイルへのリンクをリスト表示するバッファでは大抵<code>v</code>と<code>o</code>と<code>C-o</code>が使えます。</p>

<h2><code>i</code>(<code>dired-maybe-insert-subdir</code>)</h2>

<p>バッファの下にポイント下のディレクトリの内容を追加します。ツリー表示にする機能はないようです。</p>

<h2><code>%</code>(<code>dired--regexp</code>)系</h2>

<p><code>% C</code>(<code>dired-do-copy-regexp</code>)など色々あるのですがとりあえず使いそうなのは<code>% g</code>(<code>dired-mark-files-containing-regexp</code>)と<code>% m</code>(<code>dired-mark-files-regexp</code>)ですかね。</p>

<p>拡張子でマークするコマンドがあった気がしたのですが見当りませんでした。</p>

<h2>検索/置換系</h2>

<p>これも色々ある上にキーバインドが覚えづらいです。ポイント下又はマークしたファイル全てに操作を行います。キーを覚えるより<code>M-x</code>で実行した方が速そうですね。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> キー          </th>
<th align="left"> コマンド</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>Q</code>           </td>
<td align="left"> <code>dired-do-query-replace-regexp</code></td>
</tr>
<tr>
<td></td>
<td align="left"> <code>M-s a C-s</code>   </td>
<td align="left"> <code>dired-do-isearch</code></td>
</tr>
<tr>
<td></td>
<td align="left"> <code>M-s a C-M-s</code> </td>
<td align="left"> <code>dired-do-isearch-regexp</code></td>
</tr>
</tbody>
</table>


<h1>eww (Emacs Web WOWer)</h1>

<p>elispで書かれたブラウザ(正確にはWOWerらしい)です。レンダリングエンジンにはかつてgnusで使われて今は別プロジェクトになったshr.el(Simple HTML Renderer)が使われています。HTMLの他に簡単なCSSも理解します。</p>

<p>libxsltなどのSGML解析系のライブラリを有効にしてビルドしないと使えないのでEmacsを野良ビルドする人は要注意です。</p>

<h2><code>M-x eww</code></h2>

<p>URL又はキーワードで検索します。検索エンンジンは<code>eww-search-prefix</code>で制御出来ます。</p>

<p>googleで検索したかったら</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">setq-default</span> <span class="nv">eww-search-prefix</span> <span class="s">&quot;https://www.google.co.jp/search?q=&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>です。</p>

<h2>キーバインド</h2>

<p>infoライクに設定されてます。そんなに多くないのですが、一部抜粋すると<code>n</code>(<code>eww-next-url</code>)、<code>p</code>(<code>eww-previous-url</code>)、<code>l</code>(<code>eww-back-url</code>)、<code>r</code>(<code>eww-forward-url</code>)、<code>H</code>(<code>eww-list-histories</code>)、<code>&amp;</code>(<code>eww-browse-with-external-browser</code>)、<code>b</code>(<code>eww-add-bookmark</code>)、<code>B</code>(<code>eww-list-bookmarks</code>)、<code>q</code>(<code>quit-window</code>)です。</p>

<p><code>n</code> / <code>p</code>と<code>l</code> / <code>r</code>の違いは、<code>l</code> / <code>r</code>はヒストリを辿る機能、<code>n</code> / <code>p</code>はヘッダに<code>&lt;link rel="Next/Prev" ...&gt;</code>が設定されているときにそれを辿ります。あまり馴染がないかもしれませんが広告料稼ぐためにページ分割しているサイトが多いので結構便利ですよ。</p>

<h1>newsticker</h1>

<p>最後に最近見付けたRSS/Atomリーダーの紹介です。</p>

<p>先ず、こんな感じの設定をします。ニュースサイトは自分の好きなものを選んで下さい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">setq-default</span> <span class="nv">newsticker-url-list</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;産経&quot;</span> <span class="s">&quot;http://sankei.jp.msn.com/rss/news/points.xml&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="s">&quot;朝日-IT/Sci&quot;</span> <span class="s">&quot;http://rss.asahi.com/rss/asahi/science.rdf&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="s">&quot;技術評論社&quot;</span> <span class="s">&quot;http://rss.rssad.jp/rss/gihyo/feed/rss2?rss&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="s">&quot;Planet Lisp&quot;</span> <span class="s">&quot;http://planet.lisp.org/rss20.xml&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="s">&quot;Hacker News&quot;</span> <span class="s">&quot;https://news.ycombinator.com/rss&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">setq-default</span> <span class="nv">newsticker-url-list-defaults</span>
</span><span class='line'>              <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;LWN (Linux Weekly News)&quot;</span> <span class="s">&quot;http://lwn.net/headlines/rss&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">setq-default</span> <span class="nv">newsticker-retrieval-interval</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">newsticker-html-renderer</span> <span class="nf">#&#39;</span><span class="nv">shr-render-region</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、<code>M-x newsticker-show-news</code>でニュースを取ってきてくれます。</p>

<p>3ペインの画面(treeview)になるかと思いますが、基本操作を覚えれば<code>C-x o</code>で移動する必要はありません。</p>

<h2><code>f</code>(<code>newsticker-treeview-next-feed</code>) / <code>F</code>(<code>newsticker-treeview-prev-feed</code>)</h2>

<p>ニュースサイト間を移動します。</p>

<h2><code>n</code>(<code>newsticker-treeview-next-item</code>) / <code>p</code>(<code>newsticker-treeview-prev-item</code>)</h2>

<p>ニュース間を移動します。</p>

<h2><code>SPC</code>(<code>newsticker-treeview-next-page</code>)</h2>

<p>ニュースのページを送ります。戻すキーは無いようです。</p>

<h2><code>v</code>(<code>newsticker-treeview-browse-url</code>)</h2>

<p>今開いているニュースをブラウザで開きます。RSSは概要しか送られてこないのでこの機能は必須ですね。</p>

<h2><code>q</code>(<code>newsticker-treeview-quit</code>)</h2>

<p>画面を閉じます。</p>

<h1>最後に</h1>

<p>いかがだったでしょうか。ちょっと長いので途中読み飛ばし気味だったかもしれませんが1つでも覚えていただけたら幸いです。</p>

<p>因みに、このエントリを書き始めたのは8/13だったのですが、あまりに長く、途中合宿を挟んだりしたので公開は8/20になってしまいました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mirah 0.1.3がリリースされました]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/07/mirah-0-dot-1-3/"/>
    <updated>2014-08-07T23:52:15+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/07/mirah-0-dot-1-3</id>
    <content type="html"><![CDATA[<p>本日2回目のκeenです。次はRuby-likeな文法でJavaが書けるMirah言語の0.1.3がリリースたのでこれを期にMirahの紹介をします。</p>

<!-- more -->


<h1>Mirahとは？</h1>

<p><a href="http://mirah.org">公式ページ</a>。JRubyの開発者がJRubyのためにJavaを書くのが嫌になったという理由で作り始めた言語です。2008年にスタートだったかな？JRubyの開発の片手間に開発してるのでコミットペースはゆっくりです。</p>

<p><a href="https://github.com/mirah/mirah">github</a>のREADMEから引用すると、</p>

<ul>
<li>Ruby-like シンタックス</li>
<li>.classにコンパイルされる</li>
<li>Javaと同じスピード</li>
<li>ランタイムライブラリ必要なし</li>
</ul>


<p>な言語です。私的には</p>

<ul>
<li>型推論がある</li>
<li>マクロがある</li>
<li>面倒な部分はコンパイラが補ってくれる</li>
</ul>


<p>、Javaです。多くのJVM上の言語は独自言語+Java FFIって感じですが、Mirahは文法をRuby風にしただけで、吐かれるバイトコードはJavaコンパイラが吐くのものと等価です。</p>

<h1>サンプルコード</h1>

<p>一番Javaっぽいコードを見せましょう。ファイル名は<code>HelloWorld.mirah</code>の他に<code>hello_world.mirah</code>でも構いません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HelloWorld</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">main</span><span class="p">(</span><span class="ss">args</span><span class="p">:</span><span class="nb">String</span><span class="o">[]</span><span class="p">)</span><span class="ss">:void</span>
</span><span class='line'>    <span class="no">System</span><span class="o">.</span><span class="n">out</span><span class="o">.</span><span class="n">println</span><span class="p">(</span><span class="s2">&quot;Hello World&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>まあ、Javaですね。JavaのstaticメソッドとRubyのクラスメソッドが対応しています。これをMirahの機能を使って書き換えていきます。</p>

<h2>暗黙のクラス</h2>

<p>ファイル名からクラス名が推測出来るので省略することが出来ます。すなわち、トップレベルのメソッド定義は推測されたクラス内でのメソッド定義として扱われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">main</span><span class="p">(</span><span class="ss">args</span><span class="p">:</span><span class="nb">String</span><span class="o">[]</span><span class="p">)</span><span class="ss">:void</span>
</span><span class='line'>  <span class="no">System</span><span class="o">.</span><span class="n">out</span><span class="o">.</span><span class="n">println</span><span class="p">(</span><span class="s2">&quot;Hello World&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでも動きます。</p>

<h2>暗黙のmain</h2>

<p>トップレベルの式はmain内のものとして扱われます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">System</span><span class="o">.</span><span class="n">out</span><span class="o">.</span><span class="n">println</span><span class="p">(</span><span class="s2">&quot;Hello World&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうも書けることになります。ただし、argsにアクセス出来ないので複雑なことをやりたかったら大人しく<code>self.main</code>を書きましょう。</p>

<h2>putsマクロ</h2>

<p>mirahには組込みで<code>puts</code>というマクロが定義されています。これはコンパイル時に<code>System.out.println</code>に展開されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こう書けます。ここまでくるとRubyと同じコードになりますね。あ、()が省略可能なのは良いですよね。Ruby系の言語ではよくあることです。</p>

<h1>もうちょっとサンプル</h1>

<p>mirah/exmpleから面白いのを拾ってきます。だいたいRubyです。</p>

<h2>リテラル</h2>

<p>ほぼRubyです。つまり、<code>[]</code>が配列ではなくArrayListになってます。尚、自動でintがIntegerに変換されてます。
また、hashはHashMapです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s1">&#39;non-interpolated string&#39;</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="s2">&quot;interpolated is better than </span><span class="si">#{</span><span class="n">str</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">heredoc</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="no">EOS</span>
</span><span class='line'><span class="sh">this is a here doc</span>
</span><span class='line'><span class="no">EOS</span>
</span><span class='line'><span class="n">int</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'><span class="n">char</span> <span class="o">=</span> <span class="sc">?a</span>
</span><span class='line'><span class="n">float</span> <span class="o">=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">14159265358979323846264</span>
</span><span class='line'><span class="n">regex</span> <span class="o">=</span> <span class="sr">/\d(cow)+\w\\/</span>  <span class="c1"># in Java, this would be &quot;\\\\d(cow)+\\\\w\\\\\\\\&quot;</span>
</span><span class='line'><span class="n">regex2</span> <span class="o">=</span> <span class="sr">/interpolated </span><span class="si">#{</span><span class="n">regex</span><span class="si">}</span><span class="sr">/</span>
</span><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">list</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="n">byte</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">byte</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;one&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;two&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="s2">&quot;three&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<h2>修飾import</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">import</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="n">HashMap</span> <span class="n">as</span> <span class="n">H</span>
</span></code></pre></td></tr></table></div></figure>


<p>って書けます</p>

<h2>型推論</h2>

<p>Swingの例です。変数の型を書いてないことに注目して下さい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JFrame</span>
</span><span class='line'><span class="n">import</span> <span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="n">JButton</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># FIXME blocks need to be inside a MethodDefinition, but main doesn&#39;t</span>
</span><span class='line'><span class="c1"># have one.</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span>
</span><span class='line'>  <span class="n">frame</span> <span class="o">=</span> <span class="no">JFrame</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;Welcome to Mirah&quot;</span>
</span><span class='line'>  <span class="n">frame</span><span class="o">.</span><span class="n">setSize</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">300</span>
</span><span class='line'>  <span class="n">frame</span><span class="o">.</span><span class="n">setVisible</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">button</span> <span class="o">=</span> <span class="no">JButton</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;Press me&quot;</span>
</span><span class='line'>  <span class="n">frame</span><span class="o">.</span><span class="n">add</span> <span class="n">button</span>
</span><span class='line'>  <span class="n">frame</span><span class="o">.</span><span class="n">show</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">button</span><span class="o">.</span><span class="n">addActionListener</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>    <span class="no">JButton</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">getSource</span><span class="p">)</span><span class="o">.</span><span class="n">setText</span> <span class="s2">&quot;Mirah Rocks!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<h2>暗黙のInterface及び暗黙のabstractメソッド</h2>

<p>先のSwingの例を良く見て下さい。この部分です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">button</span><span class="o">.</span><span class="n">addActionListener</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>    <span class="no">JButton</span><span class="p">(</span><span class="n">event</span><span class="o">.</span><span class="n">getSource</span><span class="p">)</span><span class="o">.</span><span class="n">setText</span> <span class="s2">&quot;Mirah Rocks!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Javaだと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">button</span><span class="o">.</span><span class="na">addactionlistener</span><span class="o">(</span><span class="k">new</span> <span class="nf">ActionListener</span><span class="o">(){</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">event</span><span class="o">){</span>
</span><span class='line'>        <span class="n">JButton</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getSource</span><span class="o">).</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Mirah Rocks!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>となっていたところが、</p>

<ol>
<li>引数の型がインターフェースだったときはブロックで<code>new Class(){}</code>と同じ働きになる</li>
<li>abstractメソッドが一つのときはそれも省略出来る</li>
</ol>


<p>というルールにより簡潔に書けます。これで引数の中に文が現れるという最悪の事態を回避出来ます。Java8のlambda式に近いのかな？Java8に詳しくなくてゴメンなさい。</p>

<p>似たようなので、Threadも</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'> <span class="c1"># do something</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書けます。</p>

<h2>マクロによる既存クラスの拡張</h2>

<p>マクロは展開後のASTがJavaとして有効であれば良いのでJavaでは出来ない芸当が可能です。</p>

<p>シンプルだけど強力な例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">times</span><span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hi&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>intを<code>times</code>マクロで拡張してます。その他、<code>each</code>などの便利マクロや<code>attr_accessor</code>(getterとsetterを自動生成する)など色々あります。ユーザー定義のマクロで拡張も可能ですが、今シンプルに書けるシンタックスが議論中です。</p>

<h1>Javaとの互換性とか完成度とか</h1>

<p>まだ未実装機能はいっぱいあります。<code>final</code>とか<code>synchronized</code>とか。あとスコープもRuby風に<code>private</code>以下で定義されたものはprivateですがメソッド/フィールド単位では制限出来ません<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。ジェネリクスの構文もまだサポートされてません<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>のでジェネリクスの定義は不可能、使用も型推論で型を明示的に書かなくても良いときのみ可能です。インターフェースやアノテーションはあります。</p>

<p><a href="https://docs.google.com/spreadsheets/d/1t7NVsyysIlj6OF6E26OrVJ1AVrL8i2yzbMv92cdHN8c/edit#gid=0">ここ</a>にTODOがありますが、inner classやlambda(多分Java8のlambda式とは別もの)が弱いようです。</p>

<p>でもまあ、Mirah自体Mirahでセルフホスティングされてますし一つ言語を作れる程度には機能は揃ってます。遊んでみる分には十分使えると思います。</p>

<h1>マクロの話</h1>

<p>Mirahはオブジェクト指向で静的型付けの言語でマクロを実装してます。Lisper的には割と面白かったのでちょいと触れますね。</p>

<p>まずは簡単な例から。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">macro</span> <span class="k">def</span> <span class="nf">puts</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>  <span class="n">quote</span> <span class="p">{</span><span class="no">System</span><span class="o">.</span><span class="n">out</span><span class="o">.</span><span class="n">println</span><span class="p">(</span><span class="sb">` [node] `</span><span class="p">)}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lisperなら</p>

<ul>
<li><code>macro def</code>で<code>defmacro</code></li>
<li><code>quote block</code>でquasiquote</li>
<li>バックスラッシュで囲んでunquote</li>
</ul>


<p>などが読み取れると思います。</p>

<p>今のはASTは陽には出てこない簡単な例でしたが、次はちょっと飛躍しますよ？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">macro</span> <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">abstract</span><span class="p">(</span><span class="ss">klass</span><span class="p">:</span><span class="no">ClassDefinition</span><span class="p">)</span>
</span><span class='line'>  <span class="n">anno</span> <span class="o">=</span> <span class="no">Annotation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@call</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">position</span><span class="p">,</span> <span class="no">Constant</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SimpleString</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;org.mirah.jvm.types.Modifiers&#39;</span><span class="p">)),</span>
</span><span class='line'>                        <span class="o">[</span><span class="no">HashEntry</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SimpleString</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;flags&#39;</span><span class="p">),</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="no">SimpleString</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ABSTRACT&#39;</span><span class="p">)</span><span class="o">]</span><span class="p">))</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">klass</span><span class="o">.</span><span class="n">annotations</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">anno</span><span class="p">)</span>
</span><span class='line'>  <span class="n">klass</span><span class="o">.</span><span class="n">setParent</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="n">klass</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>macroにも型がある。その型はASTの型。</li>
<li>というかClassDefinitionとかいう型がある</li>
<li>ASTをいじるときにASTのNodeオブジェクトのメンバをゴニョゴニョするという手段がある</li>
</ul>


<p>などが読み取れると思います。また、ClassDefinitionを受け取ってClassDefinitionを返しているのでmacro chainが可能ですね。</p>

<p>次はASTを自分で組み立てる例です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">macro</span> <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">attr_reader</span><span class="p">(</span><span class="nb">hash</span><span class="ss">:Hash</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">methods</span> <span class="o">=</span> <span class="no">NodeList</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">size</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span>
</span><span class='line'>      <span class="n">e</span> <span class="o">=</span> <span class="nb">hash</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="nb">method</span> <span class="o">=</span> <span class="n">quote</span> <span class="k">do</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">`</span><span class="n">e</span><span class="o">.</span><span class="n">key</span><span class="sb">`:`</span><span class="n">e</span><span class="o">.</span><span class="n">value</span><span class="sb">`  #`</span>
</span><span class='line'>          <span class="err">@</span><span class="sb">`e.key`</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">methods</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">methods</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>NodeListがprognみたいなものでその中にMethodDefinitionを突っ込んでいってますね。中々楽しい。</p>

<p>余談:ところでgetterメソッド名がgetKeyじゃなくてkeyになってますよね。コンパイル後は変換してくれるのかなと思い、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@foo</span> <span class="o">=</span> <span class="s2">&quot;a&quot;</span>
</span><span class='line'><span class="kp">attr_accessor</span> <span class="ss">:foo</span> <span class="o">=&gt;</span> <span class="ss">:String</span>
</span></code></pre></td></tr></table></div></figure>


<p>をコンパイル、ディスアセンブルしてみました。すると、<code>foo</code>と<code>set_foo</code>というメソッドが定義されてましたorz。Ruby的にはまあ良いんですがコンパイル後はJavaなのでそこはgetKey/setKeyにしてほしかったですね。もしかしたら今はシンボルをキャメルケースに変換出来ないのかもしれません</p>

<p>閑話休題。また、呼び出し元の情報もとれます。これはStringの+マクロです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">macro</span> <span class="k">def</span> <span class="nf">+</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>  <span class="n">quote</span> <span class="p">{</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="sb">`@call.target`</span><span class="si">}#{</span><span class="sb">`arg`</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>@call</code>に呼び出し元の情報が入ってるのでそれを使って情報をとれます。</p>

<p>gensymなんかもあります。これはintのtimesマクロです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">macro</span> <span class="k">def</span> <span class="nf">times</span><span class="p">(</span><span class="ss">block</span><span class="p">:</span><span class="no">Block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="k">if</span> <span class="n">block</span><span class="o">.</span><span class="n">arguments</span> <span class="o">&amp;&amp;</span> <span class="n">block</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">required_size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">block</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">required</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">identifier</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">gensym</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">last</span> <span class="o">=</span> <span class="n">gensym</span>
</span><span class='line'>  <span class="n">quote</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="sb">`i`</span> <span class="o">&lt;</span> <span class="sb">`last`</span>
</span><span class='line'>      <span class="n">init</span> <span class="p">{</span> <span class="sb">`i`</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="sb">`last`</span> <span class="o">=</span> <span class="sb">`@call.target`</span><span class="p">}</span>
</span><span class='line'>      <span class="n">post</span> <span class="p">{</span> <span class="sb">`i`</span> <span class="o">=</span> <span class="sb">`i`</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>      <span class="sb">`block.body`</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>whileの中にある<code>init</code>と<code>post</code>はRubyでいう<code>BEGIN</code>と<code>END</code>、JVM的には<code>for</code>の実装のために使われているのでしょうか。</p>

<h1>まとめとか雑感とか</h1>

<p>0.1.3で一番大きな変更はセルフホストされたことですね。今まではJRubyで書かれてたのでHello Worldのコンパイルに16秒とか掛かってました。今のmirahc.jarはかなり小さく、1MBちょっとしかありません。</p>

<p>入手法はgithubから良いかんじにダウンロード出来るんじゃないですかね？（適当）</p>

<p>古いバージョンにはMirahのコードと等価なJavaのソースを吐くオプションがありましたがコンパイラが変わってなくなりました。かつてheadiusはこの機能を使って吐いたコードをJRubyにコミットしたことがあるそうです。今新しいコンパイラが安定してきたのでそろそろ再実装されそうです。</p>

<p>exampleですが一応私のコミットも入ってます。<code>grep keen NOTICE</code>ってやってみて下さい。</p>

<p>mirah-mode.elをちまちま書いてますが道程は通そうです。ブロックコメント(<code>/* .. */</code>)がネスト可能なのですが、正規表現だと<code>/*/*</code>を<code>/*</code>2つと<code>*/</code>1つと認識しちゃってつらいです。</p>

<p>今回細かいところは省きましたがexampleとかあと公式ページとかgithubのwikiとか見て下さいね。</p>

<p>ある程度の完成度になってきてるのでみなさんも遊んでみて下さい。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>pull-reqは入ってるのですが、まだマージされてません<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>まだリテラルの議論が終わってないだけで、内部はジェネリクスに対応してるので近い内に入りそうな気はします。<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shibuya.XSS TT #5 に参加してきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/07/shibuya-dot-xss-tt-number-5-nican-jia-sitekimasita/"/>
    <updated>2014-08-07T23:12:34+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/07/shibuya-dot-xss-tt-number-5-nican-jia-sitekimasita</id>
    <content type="html"><![CDATA[<p>強化練中のκeenです。明日も朝早いのでこんな時間にエントリー書いてて寝坊しないか心配です。</p>

<p>Shibuya.XSS TT #5 がLINEのオフィスで行なわれてたので覗きに行ってきました。名前はXSSですが内容はセキュリティ全般でしたね。</p>

<!-- more -->


<p>Mozillaの脆弱性バグ報奨金制度にチャレンジした話だとか色々あったのですがやっぱセキュリティの話なのでオフレコな話題が多く、あまり書けることは無いです。
malaさんが飛び入りでさっきサイボウズの脆弱性を見付けたから話します、ってやろうとしてサイボウズの竹迫さんに止められてたり（結局Googleの未修正の脆弱性の話してました。データガンガン抜いててやばかった。）。</p>

<p>話せる話題はblob URI SchemeとサニタイズとmXSSの話ですね。(俄知識なので誤謬があるかと思います。あまり信用しないで下さい)</p>

<h2>blob URI Scheme</h2>

<p>example.com/XXXXXX-XXXXXX-XXXXXX
みたいなURLのことです。blobの名前の通りバイナリをデコードしたURLで、アップロードした画像の一時URLなんかに使われるそうです。似たようなのにdata URI Schemeとかjavascript URI Schemeとかがあるそうです。</p>

<p>これの扱われ方が他とはちょっと違うらしく、<code>iframe</code>内でこのURIでXSSをするとoriginが親コンテンツのものになるそうです。つまり<code>iframe</code>内からSame Origin Policy突破可能。その他にも面白い特徴があって要研究って言ってました。</p>

<h2>サニタイズとmXSS</h2>

<p>mutate base XSSだったかな？</p>

<p>ユーザーの入力をJS側でサニタイズしようとする時の話です。
一つ思い付くのはJSでHTMLパーザを書いて許可しないタグを検出する方法ですが、どうしてもブラウザのパーザと互換性を確保出来ない（ブラウザ毎の非互換性がある）ためそこが脆弱性になるそうです。</p>

<p>そこでブラウザのパーザを呼び出すAPIがあるのでそれを使ってDOMを作り、タグを洗い出す方法が考えられます。ここまでは良いのですが、最後HTMLに追加するときに文字列化してinnerHTMLで書き込もうとするとmXSSの危険性があるそうです。具体的には特定の状況で<code>&amp;lt;</code>や<code>&amp;gt;</code>が<code>&lt;</code>や<code>&gt;</code>に変化してしまい、入力と出力でDOM構造が変わってしまうことがあるそうです。怖い。</p>

<p>セキュリティ大変ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloud9の紹介とLispのセットアップ]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/02/introduction-to-cloud9/"/>
    <updated>2014-08-02T01:02:18+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/02/introduction-to-cloud9</id>
    <content type="html"><![CDATA[<p>κeenです。先日のLisp Meet Upで紹介した<a href="https://c9.io">Cloud9</a>の詳解でも書きます。まあ、そんなに詳しくないんですけどね。</p>

<!-- more -->


<h1>Cloud9について</h1>

<p>先日のスライドを見てない方はまず見て下さい。</p>

<p><a href="http://keens.github.io/slide/cloud-9.html">Cloud 9の紹介 | κeenのHappy Hacκing Blog</a></p>

<p>公式の詳解ムービー(en)もあります。まあ、一般的なIDEの機能は一通り揃ってるようです。git連携とかも。
<a href="https://www.youtube.com/user/c9ide/videos?flow=grid&amp;view=1">CloudNine Ide &ndash; YouTube</a></p>

<p>スライドでバックエンドは一人一つDockerが与えられるって書きましたが自分のVMをバックエンドにも出来るようです。</p>

<p>省略しましたが他のユーザーとの連携機能も多数あって、チャットだとかワークスペースの共有だとかソーシャルコーディング関連も多数機能があります。全社導入の折には役立つ機能なんじゃないでしょうか。</p>

<p>ローカルファイルをアップロードしたり逆にローカルにダウンロードとかも出来るようです。</p>

<p>尚、IDE本体は<a href="https://github.com/ajaxorg/ace">ACEという名前でオープンソースで開発されてる</a>のでプラグインとかのドキュメントはそっちもあたると良いようです。</p>

<h1>Cloud9事始め</h1>

<p>スクショとかは適当にスライドを参照して下さい(手抜き)</p>

<h2>アカウントを作る</h2>

<p><a href="https://c9.io">c9.io</a>にアクセスしてGithubかBitbucketのアカウントでログイン出来ます(以後、Githubでログインしたものとします。Bitbucketの方は適宜読み替えて下さい)。Cloud9で書いたコードをHerokuやらなんやらに直接上げるつもりなら普通にCloud9アカウント作っても良いと思いますが、多くの場合どちらかとの連携を使うと思うので素直にGithubでログインしましょう。</p>

<p>ログインしたらダッシュボードに飛ばされます。demo-projectと自分のGithubのプロジェクトがサイドバーにある筈です。</p>

<h2>細かな設定</h2>

<p>demo-projectでも開きましょうか。demo-projectを選択してstart editingです。</p>

<p>IDEというかEditorの設定が出てくる筈です(多分)。キーバインディングとかタブ幅とか設定しましょう。そして、<code>C-h</code>で<code>backward-delete-char</code>出来ないと死んでしまう方のための設定はこちらです。Preferencesのkeybindingsのedit your keymap fileからkeymap fileに飛んで、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="nt">&quot;command&quot;</span><span class="p">:</span> <span class="s2">&quot;backspace&quot;</span><span class="p">,</span> <span class="nt">&quot;keys&quot;</span><span class="p">:[</span><span class="s2">&quot;Ctrl-H&quot;</span><span class="p">,</span> <span class="s2">&quot;Backspace&quot;</span><span class="p">]},</span>
</span><span class='line'>    <span class="p">{</span><span class="nt">&quot;command&quot;</span><span class="p">:</span> <span class="s2">&quot;replace&quot;</span><span class="p">,</span> <span class="nt">&quot;keys&quot;</span><span class="p">:[</span><span class="s2">&quot;Alt-Shift-5&quot;</span><span class="p">]}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>と編集、保存しましょう。どうも、キーにコマンドを割り当てるのではなく、コマンドにキーを割り当ててる(?)っぽいのでCtrl-Hを持ってる<code>replace</code>を別のキーにしないと動かないようでした。尚、これはファイルをいじらなくてもsearch keybindingsのところから目的のコマンドを捜して、keystrokeのところをクリックして、割り当てたいキーストロークをすれば割り当て出来るようです。その際、自分のkeymap fileも対応して書き変わります。</p>

<h2>Common Lispのセットアップ</h2>

<p>処理系のインストールはいくつか方法があります。</p>

<ol>
<li><code>apt-get</code>で入れる</li>
<li>バイナリを落してくる</li>
<li><a href="https://github.com/KeenS/CIM">CIM</a>を使う</li>
</ol>


<p>のいずれかの方法で処理系を入れて下さい。<code>apt-get</code>で入れる場合はかなり古いバージョンが入ります。CIMで入れる場合は<code>sudo apt-get install time</code>しておかないとSBCLのビルドが出来ませんでした。他の処理系は確認してないです。どの処理系でも良いんですがとりあえずSBCLを入れたってことで話進めますね。私がそれしか確認してないので。</p>

<p>また、便利のためrlwrapを入れましょう。<code>sudo apt-get install rlwrap</code>です。</p>

<p>そこまでいったらrun scriptを作りましょう。上のメニューバーから[Run]>[Run With]>[New Runner]と進みます。で、run scriptの内容はどの方法で処理系を入れたかに依るのですが、</p>

<p>1の場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;cmd&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;sudo&quot;</span><span class="p">,</span> <span class="s2">&quot;rlwrap&quot;</span><span class="p">,</span> <span class="s2">&quot;sbcl&quot;</span><span class="p">,</span> <span class="s2">&quot;--load&quot;</span><span class="p">,</span> <span class="s2">&quot;$file&quot;</span><span class="p">,</span> <span class="s2">&quot;$args&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;info&quot;</span> <span class="p">:</span> <span class="s2">&quot;Started SBCL :: $project_path$file_name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;env&quot;</span> <span class="p">:</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nt">&quot;selector&quot;</span> <span class="p">:</span> <span class="s2">&quot;source.ext&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>だそうです(<a href="http://cjelupton.wordpress.com/2014/07/24/hacking-lisp-in-the-cloud-pt-3/">引用元</a>)。<code>sudo</code>がついてるのはWEBアプリの場合0.0.0.0で待つためにroot権限が必要だからかな？</p>

<p>これは実行した後でREPLに入ってデバッガとか扱う感じの設定ですね。<br/>
単に実行したいだけののきは<code>--load</code>の部分を<code>--script</code>に変えれば良さそうです(未確認)<br/>
2の場合も同じ設定でいけそうな気がします。PATHぐらい必要かな?(未確認)</p>

<p>3の場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;cmd&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;sudo&quot;</span><span class="p">,</span> <span class="s2">&quot;cl&quot;</span><span class="p">,</span> <span class="s2">&quot;$file&quot;</span><span class="p">,</span> <span class="s2">&quot;$args&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;info&quot;</span> <span class="p">:</span> <span class="s2">&quot;Started cl :: $project_path$file_name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;env&quot;</span> <span class="p">:</span> <span class="p">{</span><span class="nt">&quot;CIM_HOME&quot;</span><span class="p">:</span><span class="s2">&quot;$HOME/.cim&quot;</span><span class="p">,</span><span class="nt">&quot;PATH&quot;</span><span class="p">:</span> <span class="s2">&quot;$CIM_HOME/bin:$PATH&quot;</span><span class="p">,</span> <span class="nt">&quot;LISP_IMPL&quot;</span><span class="p">:</span> <span class="s2">&quot;sbcl&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;selector&quot;</span> <span class="p">:</span> <span class="s2">&quot;source.ext&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>です。本来CIMは<code>$CIM_HOME/init.*</code>を呼ばないと動かないのですが、ショートカットする環境変数を設定することで無理矢理動かしてます。Cloud9のinitスクリプト(jsファイル)があるようなのでそこでCIMをinitしておけば無理せずとも出来そうですがあまり深く踏み込んでないです。</p>

<p>尚、この設定は実行即終了のものです。実行してREPLに入りたい場合は<code>"cmd"</code>を<code>["cl","-rf", "$file", "$args"]</code>にすると出来ます。</p>

<h2>動かしてみる</h2>

<p>上記のrun scriptを設定、保存したらメニューバーから[File]>[New File]と進み、新しいファイルを作ります。<br/>
一番簡単に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">write-line</span> <span class="s">&quot;Hello Cloud9&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>とでも書きましょうか。そして[>Run]してちょいと待つと実行出来る筈です。動かなかったら手動で[Run]>[Run With]>[My Runner]とかしてみましょう。ここまで来ればセットアップ完了です。</p>

<h1>今後の課題というか要調査というか</h1>

<h2>シンタックスハイライト</h2>

<p>Lisp Meet Upでも喋りましたがハイライトが最悪です。ユーザー定義ハイライターも(少くともACEレベルでは)出来そうなのでどうにかする必要があります。</p>

<h2>インデント</h2>

<p>Lispのインデントはタブn個とかで済むようなものじゃなくてどのオペレータの中にいるかに依って変わります。その辺どうにかなって欲しいですね。
もしかしたらClojureは上手くいってるかもしれないのでそこからインポートしてくれると嬉しいですね。</p>

<h2>swankインターフェース</h2>

<p>initスクリプトがあるって事はもしかしたらIDEもプログラマブルなのかもしれないのでswankインターフェースを作れるかもしれません。</p>

<h2>CIMインターフェース</h2>

<p>initスクリプトがあるって事は(ry。最終目標はメニューバーからどの処理系を使うか選択可能とかで。</p>

<h1>まとめ</h1>

<ul>
<li>Cloud9を紹介した</li>
<li>Common Lispのセットアップ方法を示した</li>
<li>誰か諸問題解決して下さい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #19でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19/"/>
    <updated>2014-07-30T00:30:40+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/07/30/lisp-meet-up-number-19</id>
    <content type="html"><![CDATA[<p>κeenです毎月恒例の<a href="https://atnd.org/events/53246">Lisp Meet Up presented by Shibuya.lisp</a>でLTしてきたのでレポートです。</p>

<!-- more -->


<p>今回は募集20に対して参加登録20、参加18、LT4本と集りの良い会でした。</p>

<p>自己紹介ではほぼCLの人ばっかりでした。珍しいところ（？）では数理システムの方が居たり会場を提供して下さってるサイバーエージェントの方が覗きにきてたり。</p>

<p>LT1本目はTOYOZUMIさんから連作の一つのCommon Lisp最適化発展。画像のエッジ検出をするときの関数の最適化の話でした。カーネルを渡すだけで最適なコードを生成するそうです。コーナーケースのif式をループの外に追い出してたりと半分成程、あとはよく分かんない話してるなーって。<br/>
最終的には<code>eval</code>を使ってるらしく、本当に速度出るの？って気になりましたが本人もやってみたところ速くなってビックリだったそうです。</p>

<p>スライドはこちら。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/37456264" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/toyozumiKouichi/common-lisp-37456264" title="Common lisp最適化発展" target="_blank">Common lisp最適化発展</a> </strong> from <strong><a href="http://www.slideshare.net/toyozumiKouichi" target="_blank">Toyozumi Kouichi</a></strong> </div></p>

<p>動画は今回から私が担当なので処理が終ったらリンク張ります。</p>

<p>次はTakagiさんよりcl-cudaについて。話聞く前は「どうせC APIをCFFIで叩いただけだろ(ホジ」って思ってましたがさすがにGPGPUはそんなに簡単じゃなかったようです。
cl-cudaはLispのAPIを叩いたらCUDA向けのCコードを吐いてCUDA専用のコンパイラ通してモジュールとして動的に読み込んで、ってやってくれるそうです。すごい。
完成度も、CUDAを研究に使ってたchikuさんによると普通使う分にはほぼ困らなくて、あとは構造体のサポートがあれば良いかも程度だそうです。すごい。</p>

<p>スライドはまだ見付けてないです。</p>

<p>3番目は私から、WebブラウザベースのIDE、<a href="https://c9.io/">Cloud9</a>の紹介とLispの対応状況について。
スライドはこのブログに載せてますが、こちら</p>

<p><a href="http://keens.github.io/slide/cloud-9.html">Cloud 9の紹介 | κeenのHappy Hacκing Blog</a></p>

<p>もうちょっと説明が欲しそうな雰囲気だったので別記事立てますね。@potix2さんが社内チャットに流したところなり反応が良かったようなので普通にIDEとして優れてるんじゃないでしょうか。</p>

<p>最後はかにたん(@kazh98)から床下からLispが出てきた話。うん。本当に床下からLispが出てきた話でした。かにたんの研究室すごいですね。みなさんの家の床下にもLispがあるかもしれませんよm9っ。</p>

<p>最後の最後にかにたんの研究室から出てきたLispについてTOYOZUMIさんがモニタをスクリーンに映しつつみんなで色々議論。なんかWEBのマニュアルがポルトガル語で書かれてたのでポルトガル語喋れる人捜したけど居なかったり。次回、床下Lispを動かしてみようってなりました。</p>

<p>そこでもう閉場の時間だったので懇親会へ。11名が参加。</p>

<p>私とかにたんとpotix2さんがschemeの実装の話してたり@mhkojiさんがhunchentootがありえないくらい遅いって話してたり色々でしたね。
CIMの話も出てました。実用上Windowsサポートは外せないってことで@snmstsさんがCでCIMを書き直してるだとか@nitro_idiotさんがshellyでCIMを使うにあたってCIM側でコアのマネジメントして欲しいって言ってただとか。</p>

<p>C CIMは面白そうですね。ビルドしなきゃいけないから手軽さの問題が…とかlibcurlに依存するとLinuxが…とか言ってたら「ディストリのパッケージシステムに乗せてしまえば問題無い」と一刀両断。その発想はなかった。むしろパッケージシステムに入った方が手軽。</p>

<p>今からCloud9の記事とCIMのコアマネジメント頑張りますね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[近況]]></title>
    <link href="http://KeenS.github.io/blog/2014/07/13/jin-kuang/"/>
    <updated>2014-07-13T20:30:37+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/07/13/jin-kuang</id>
    <content type="html"><![CDATA[<p>κeenです。書く書くいってた近況です。思ったよりあります。</p>

<!-- more -->


<h1>5月</h1>

<h2><a href="http://connpass.com/event/5795/">関数型言語LT大会</a>でLTしてきた</h2>

<p>みんなすごいH本を読み終わったくらいの実力の人達かなって思ってゆるめに準備していったらプロばっかで爆死しました。</p>

<ul>
<li>発表スライド</li>
</ul>


<iframe src="//www.slideshare.net/slideshow/embed_code/34529429" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/blackenedgold/functional-lt" title="(define)なしで再帰関数を定義する" target="_blank">(define)なしで再帰関数を定義する</a> </strong> from <strong><a href="http://www.slideshare.net/blackenedgold" target="_blank">blackenedgold</a></strong> </div></p>

<ul>
<li><a href="http://togetter.com/li/667778">togetter</a></li>
</ul>


<p>因みにここで初めて@wasabiz氏と面会しました。</p>

<h2><a href="https://github.com/wazabiz/picrin">picrin</a>にコミットを始める</h2>

<p>wasabiz氏に会ってからC言語の勉強がてらpicrinのソースでも読んでみるかってなって紆余曲折あってコミットしはじめました。</p>

<p>主には<a href="https://code.google.com/p/chibi-scheme/">chibi scheme</a> のテストケースのインポートとそれによって判明したバグフィクスあたりですね。あとは最近ようやく<a href="https://gmplib.org/">GMP</a>と<a href="http://www.mpfr.org/">MPFR</a> のポートが動いたのでプルリク投げました。今は山葵寿司からレビューを受けて直す作業ですね。</p>

<h2><a href="http://atnd.org/events/50865">Lisp Meet Up #17</a>に参加した</h2>

<p>Scheme回なのに人も発表も多かったので私はLTは控えました。実際時間ギリギリまでLTやってましたし。レポートは<a href="http://shibuya.lisp-users.org/">公式ページ</a>に上ってます。</p>

<p>処理系の話が複数聞けたのは有益でしたね。</p>

<h1>6月</h1>

<h2><a href="http://shibuya.lisp-users.org/">Shibuya.lisp</a>の運営になった</h2>

<p>毎回参加してたら声かかりました。動画周りの担当です。頑張ります。</p>

<h2><a href="http://connpass.com/event/6402/">天下一altJS武闘大会</a>でLTしてきた</h2>

<p>今回は#functionalLTで爆死した反省からLispを前面に押し出しました。発表もEmacs上で行なったり。その結果「最高に怖い」なんて言われてたのでまあ、成功だったんじゃないですかね。</p>

<ul>
<li><a href="https://gist.github.com/KeenS/f3deeca6295d7454cb17">発表資料スライド</a></li>
<li><a href="http://KeenS.github.io/slide/sshi-deshu-kualtjs.html">スライドをreveal.jsに変換したもの</a></li>
<li><a href="http://togetter.com/li/678010">togetter</a></li>
</ul>


<p>因みに<a href="http://atnd.org/events/52355">Lisp Meet Up #18</a>はサークルの用事で逃しました</p>

<h1>7月</h1>

<p>進捗ダメです。このブログに<a href="http://KeenS.github.io/slide/">スライドページ</a>つけたりしました。reveal.jsです。</p>

<p>いちおうOctopressのプラグイン的な感じなってはいるんですが、レイアウトやインクルードファイルも追加してて面倒なので公開してません。このブログのテーマ(cleanpress)以外で動くかも分かりませんし。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パーティションテーブルとか色々吹っ飛ばした話]]></title>
    <link href="http://KeenS.github.io/blog/2014/06/12/partision-table/"/>
    <updated>2014-06-12T12:12:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/06/12/partision-table</id>
    <content type="html"><![CDATA[<p>ご不沙汰しております、κeenです。先日（と言ってもしばらく前）、安いHDDを買ってきてFreeBSDでも入れて遊ぼうかとしていました。</p>

<!-- more -->


<p>そうするとインストールは正常に終わるのにリブートするとブートローダが見付からないとか怒られます。おかしいな〜と思って元のHDDに付け替えてインストールメディアをごちゃごちゃしてまたHDDを付け替えてインストールしてを10回くらい繰り返したでしょうか。</p>

<p>はい、挿さってるHDD勘違いして元のHDDにFreeBSD焼いちゃいました。パーティションテーブルとかHDDの先頭にあったWindowsのパーティションとか全滅です。しかもまだFreeBSD起動しない。どうするよこれ。</p>

<p>USBに焼いてたArchがあったのでどうにかUbuntuを落してきてOS自体は復旧出来ました。因みにFreeBSDが起動しなかった理由はハードウェアがBSDだとかGPTだとかのパーティションテーブルに対応してなかったのが原因っぽいです。尚、LinuxもBSDのパーティションテーブルを理解しないので一旦ddとかで強制的にパーティションテーブルを上書きしないと正常にインストール出来ませんでした。</p>

<p>で、ですよ。問題は飛んだデータです。Windowsの方はどうでも良くてUbuntuの方もほとんどの重要なソースコードはgithubやgitbreakで管理してたので問題無くて、重要でないソースコードは仕方無いとして、LTの資料はまあ、SlideShareにあるし良いとして、KVMイメージはそんなに育ててなかったのでまた作り直すことにして、その他のデータはDropBoxに逃がしてて、残り、<code>cl21-datacollections</code>とこのブログのソースはgitで管理してなかったので消えてしまいました。</p>

<p><code>cl21-datacollections</code>は書き直すより他ないので図書館でアルゴリズムイントロダクションを借りてきました。まあ、そのうち出現すると思います。Lisp Meet UpでTOYOZUMIさんにそそのかされたCSB+木も実装してみるつもりです。</p>

<p>ブログの方はソースが無いと流石につらいので掘り起こしたデータの受け皿に新たに500GのHDDと外付け用のカバーを買ってきて<br/>
<img src="http://KeenS.github.io/images/HDD.jpg" title="HDD" alt="買ってきたHDDたち" /><br/>
<code>test-disk</code>や<code>photorec</code>といったパーティション、データ復旧ツールで復旧を試みました。</p>

<p>パーティション再認識ツールの<code>test-disk</code>は全然駄目で、わずかに<code>/</code>を認識するだけでその下のファイル情報は全く読み出せませんでした。</p>

<p>しゃあないのでデータ復旧ツールの<code>photorec</code>を一晩回してみると…800万くらいのファイルが掘り起こされました。因みにファイル名は機械的につけられたものです。<br/>
ザーっと眺めてみるとほとんどブラウザキャッシュの残骸ですね。因みに拡張子はすっげー適当につけられてるのでせいぜいバイナリかテキストかを見分けられる程度でした。</p>

<p>流石に人力で捜すのは無理なのでOctopress用のマークダウンを拾ってくるスクリプト書いてまた一晩回してみたものの、集まったのは何故かRubiniusのブログばかりでこのブログのデータはゼロ。どうしようもなく、githubに上がってるHTMLから復旧することにしました。</p>

<p>Nokogiri使ってHTMLのタグをちまちまMarkdownに直すスクリプト書いてる途中で「これ、他にもやってる人いるんじゃね？」という思いが。<br/>
調べてみると、ありました。<a href="https://github.com/xijo/reverse_markdown">Reverse Markdown</a>というそうです。ここまでくればあとはNokogiri使ってメタデータとメインの部分抜き出してくるだけなので楽勝ですね。まあ、 <code>{%</code> や<code>#</code>をスケープするなどの作業もあるのですが。#をエスケープしなきゃいけないのはreverse_markdownのバグっぽそうですね。<br/>
画像はディレクトリごとコピーし、Sassはcleanpressを再度インストール、その他自分で手を加えた部分はこのブログに残してあったのでそこを参照しました。</p>

<p>ブログ更新出来なかった間になにしてたかは別記事にしますね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #16 でLTしてきました。]]></title>
    <link href="http://KeenS.github.io/blog/2014/04/25/lisp-meet-up-number-16/"/>
    <updated>2014-04-25T01:35:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/04/25/lisp-meet-up-number-16</id>
    <content type="html"><![CDATA[<p>κeenです。年度末/年度始めで色々あり、しばらく更新できてませんでしたが <a href="http://atnd.org/events/49370">Lisp Meet Up Presented by Shibuya.lisp #16</a>に参加してきたのでレポートです。</p>

<!-- more -->


<p>最近はLisp Meet Upも盛況で毎回ほぼ満席ですね。今回も満席でした。というか立ち見出てました。</p>

<p>自己紹介では初参加の方が多くてCLerが多い印象でした。昔研究とかでCL使ってて久し振りに、とか。私個人的にはTwitterでフォローしてる方々とお会い出来て楽しかったです。</p>

<p>LTは私とTOYOZUMIさんが告知してました。しかしTOYOZUMIさんは当日体調が悪くて欠席したので私と飛び入りのchikuさんで計2件のLTがありました。TOYOZUMIさんは何回かに分けて発表するうちの1回だったので次回LTしていただけるかと思います。</p>

<p>私のやつは↓です。時間ギリギリで作ったのであんまりいじめないで下さい。因みにまだソースはgithubに上げてないです（後述）</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/33794330" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/blackenedgold/lisp-meetup16" title="CL21で色々なデータ構造を実装してみようとした">CL21で色々なデータ構造を実装してみようとした</a></strong> from <strong><a href="http://www.slideshare.net/blackenedgold">blackenedgold</a></strong></p>

<p>会場からはCL21作者のにとりさんから「abstract-sequenceは最低限実装しなきゃいけないメソッドは少ない」との指摘がありましたがqueueとして機能するために色々頑張ったのです。</p>

<p>abstract-setとかは欲しいですねとの声もありました。issueに上げておきますかな</p>

<p>また、chikuさんからheapの実装について色々と指摘があり、 <a href="http://www.amazon.co.jp/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD%E3%83%80%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3-%E7%AC%AC3%E7%89%88-%E7%B7%8F%E5%90%88%E7%89%88-%E4%B8%96%E7%95%8C%E6%A8%99%E6%BA%96MIT%E6%95%99%E7%A7%91%E6%9B%B8-%E3%82%B3%E3%83%AB%E3%83%A1%E3%83%B3/dp/476490408X">Introduction to Algorithms</a>という本を紹介されました。とりあえず大学の図書館から借りてきたのでそれを読んだらcl21-data-collectionsに手を加えてgithubに上げます。</p>

<p>次はchikuさんから <a href="https://github.com/chiku-samugari/chiku.util">chiku-utils</a>というオレオレライブラリの紹介がありました。スライドは見付け次第貼りますね。結構便利そうな関数やマクロがあったので一度見てみると良いかもしれません。</p>

<p>その後は休憩からのぐだぐだ時間でした。chikuさんの発表の中で出てきた<code>keymin</code>という関数について会場から一般的には<code>argmin</code>と言うとの指摘があり、その場でかにたんが<code>argmin</code>の定義の数式を書いたことから私とかにたんとラジカルこうじさんでマスハラをしあってました。というか主にかにたんがマスハラしてました。Lispの話はあまりしませんでしたね… あとは私がゼミで <a href="http://www.amazon.co.jp/gp/product/0124077269/ref=oh_details_o00_s00_i00?ie=UTF8&amp;psc=1">パタヘネ</a>を読んでることからパタヘネってC言語の入門書だよねとかの会話とか。StumpWMについてもちょっと話したかな？</p>

<p>そうだ。次回のScheme回は <a href="https://bitbucket.org/ktakashi/sagittarius-scheme/overview">Sagittarius</a>の作者のKeiさんが次回LTする気満々とのことで話題に上がってました。それに <a href="https://github.com/wasabiz/picrin">picrin</a>の作者のわざびず君も来るかもとかですしTOYOZUMIさんの連作もありますし次回は長くなるか2回に分けるかになるかもしれません。</p>

<p>その後の懇親会は9人が参加でしたがアルコールを飲む方はあまりいませんでしたね。飲んでたのは3~4人かな?多くの方が普通にお酒に弱いだとかバイクで来てるだとか次の日仕事があるとかですね。もう普通に食事でも良いのでは。私のいたテーブルでの会話は佐野さんがLispの本をめっちゃ持ってるだとかでしたね。実践Common Lispを訳者ということを割り引いても多いくらい持ってるそうです。CLtL2とかもめっちゃ持ってるそうです。謎ですね。</p>

<p>今回のまとめ</p>

<ul>
<li>かにたんをホワイトボードに近付けてはいけない</li>
</ul>


<p>最後になりますがイベント管理や会場手配など運営の方々ありがとう御座いまいした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #14でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14/"/>
    <updated>2014-02-27T14:57:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/02/27/lisp-meet-up-number-14</id>
    <content type="html"><![CDATA[<p>どうも、κeenです。Rubyをアップグレードしようとしたら<code>rvm</code>が動かなくて、あれ？ってなったら私が<code>echo -&gt; echo</code>とかいう謎のsymlinkを作ってたせいでした。このブログはOctopressで作ってるのでその間更新遅れました。</p>

<p>さて、毎月恒例 <a href="http://atnd.org/events/47730">Lisp Meet Up Presented by Shibuya.lisp #14</a>でLTしてきたので報告です。今回は「Real World OCamlを読んだ感想」というタイトルです。</p>

<!-- more -->


<p>まあ、感想とは言っても内容を軽く紹介したあとにLispにインポートしてみたという内容です。</p>

<p>今回はいつも以上にスライドが説明不足なのでどうにか頑張ってUstreamを探して下さい</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31658546" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/blackenedgold/real-world-ocamllisp" title="Real World OCamlを読んでLispと協調してみた">Real World OCamlを読んでLispと協調してみた</a></strong> from <strong><a href="http://www.slideshare.net/blackenedgold">blackenedgold</a></strong></p>

<p>会場からはquicksortの例がメモリ使用量的にquicksortとは言えないとか怒られました。あとは<code>append</code>が演算子<code>@</code>で書けちゃうとコスト高いのにみんな頻繁に使っちゃうんじゃないかとかのツッコミもありました。</p>

<p>Meet Up自体は自己紹介から始まりました初めての参加の方が14人中3人だったかな？もっと増えると嬉しいですね。京都から来た博士過程の方とか「ハッカーと画家」を読んでLispに興味を持った方とかが居ました。</p>

<p>で、私のLTは上の通り。前述の通りUstreamでも流されてます。</p>

<p>次はかにたん(@kazh98)さんから。かにたんここ2ヶ月くらいMeet Upで見掛けないなと思ってたら数学の論文に”Gauche”って文字列を入れる仕事をしてたようです。LTはRacketの新バージョンの機能FFIを使って線形代数ライブラリのバインディングを作る話でした。ジョーク飛しながら軽快に喋ってて楽しかったです。スライドはこちら。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/31635279" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <strong><a href="https://www.slideshare.net/kazh98/racket-31635279" title="すべてをRacketに取り込もう！ ~Racket FFI と Package システムの使い方~">すべてをRacketに取り込もう！ ~Racket FFI と Package システムの使い方~</a></strong> from <strong><a href="http://www.slideshare.net/kazh98">Kazuhiro Hishinuma</a></strong></p>

<p>そのあとは休憩からのぐだぐだタイムで私はCommon Lisperで <a href="http://cl21.org/">CL21</a>の<code>lambda</code>の略称を考えてたりしました。私は<code>^</code>良いと思うんですけど英字キーボードだと<code>S-6</code>なので押しにくいそうです。<code>fn</code>は<code>function</code>の略称っぽくてダメという話。<code>function</code>はCommon Lispでは既に別の意味がありますからね。</p>

<p>懇親会では私含めて就活生が二人居るので就活の話になりましたがLisperってまともな就活してないんですね…<br/>
大学中退してバイト先に就職した、友達の始めたベンチャーに参加してから今の職場に転職した、就活せずにふらふらしてたらShibuya.lispでLispの求人があったからそこに行った…。</p>

<p>そういえばまた隣がにとりさんだったので最近何やってますかと訊いたら<code>Utopian</code>に向けて着々と準備進めてますとの返事をいただきました。まだ計画あったんですねと返すと</p>

<blockquote><p>昨日「Utopianってまだ計画あったんですね」って言われたけど、3年前からClack、Caveman、ningle、CL-DBI、SxQL、Caveman2、Integralってずっとリリースし続けてるのは全部Utopianの為ですよ</p>

<p>— 深町英太郎 (fukamachi) (@nitro_idiot) <a href="https://twitter.com/nitro_idiot/statuses/438909695881797632">2014, 2月 27</a><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p></blockquote>

<p>とのこと。私もUtopianの下地を作るためにRubyにあってLispにないものを色々考えてたので色々話してたらCL21のコミット権もらっちゃいました。私はライブラリ(DateTimeとかQueueなどのデータ構造とか)を整備したいのですがそれらは0.2で追加される予定だそうなので今はissue潰しですかね。</p>

<p>まあ、そんなところです。そういえばClojureの会社に潜入したといういちせさん(＠ichisemasashi)にどんな感じか訊くの忘れてましたね…まあ、次回もいらっしゃるでしょうから次回訊けば良いですかね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MathJaxを使って数式を埋め込む]]></title>
    <link href="http://KeenS.github.io/blog/2014/02/21/mathjax/"/>
    <updated>2014-02-21T06:58:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/02/21/mathjax</id>
    <content type="html"><![CDATA[<p>小ネタです。ブログに数式を埋め込むときの話。</p>

<!-- more -->


<p><a href="http://www.mathjax.org/">MathJax</a>はHTMLに$\LaTeX$の式を埋め込んでJavaScriptでMathMLに変換するプロジェクトみたいです。</p>

<p>Octopressで使うには<code>(ocotpressroot)/source/_includes/custom/head.html</code>に</p>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">&lt;script type="text/x-mathjax-config"&gt;
</span><span class="line"> MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ["\\(","\\)"]] } });
</span><span class="line">&lt;/script&gt;
</span><span class="line">&lt;script type="text/javascript"
</span><span class="line"> src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"&gt;
</span><span class="line">&lt;/script&gt;
</span><span class="line">&lt;meta http-equiv="X-UA-Compatible" CONTENT="IE=EmulateIE7" /&gt;</span></code></pre></td>
</tr></table></div></figure>


<p>を追加するだけです。</p>

<p>数式を埋め込むには、上の設定だと<code>$数式$</code>又は<code>\\\(数式\\\)</code>でインライン、</p>

<figure class="code"><div class="highlight"><table><tr>
<td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
<td class="code"><pre><code class=""><span class="line">\\\[
</span><span class="line">数式
</span><span class="line">\\\]</span></code></pre></td>
</tr></table></div></figure>


<p>で別行立ての数式が書けます。markdownとコンフリクトするのでバックスラッシュのエスケープ大変ですね…。<code>\begin{eqnarray*}\end{eqnarray*}</code>は無理なのかなあ</p>

<p>インライン\(e^{i\pi} = -1\)</p>

<p>別行&#92;[\lim_{n \to \infty} P(Z=l) = e^{–\lambda} \frac{ \lambda ^l}{l!}\]</p>
]]></content>
  </entry>
  
</feed>
