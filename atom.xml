<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[κeenのHappy Hacκing Blog]]></title>
  <link href="http://KeenS.github.io/atom.xml" rel="self"/>
  <link href="http://KeenS.github.io/"/>
  <updated>2014-12-14T22:29:01+09:00</updated>
  <id>http://KeenS.github.io/</id>
  <author>
    <name><![CDATA[κeen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[実用Common Lispを読んだ]]></title>
    <link href="http://KeenS.github.io/blog/2014/12/14/shi-yong-common-lispwodu-nda/"/>
    <updated>2014-12-14T21:45:23+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/12/14/shi-yong-common-lispwodu-nda</id>
    <content type="html"><![CDATA[<p>以前<a href="http://keens.github.io/blog/2014/10/20/lisp-ja/">Common Lispの勉強の手引の記事</a>を書いたときに実用Common Lispの名を挙げたが読んだことはなかった。</p>

<p>一応名前を挙げた責任として読んでみた。</p>

<!-- more -->


<p>読んだとは言ってもソースはざっくりしか見てないし、演習には目もくれてないので「一通り目を通した」程度。
買った本は逃げないのだし一回で理解する必要はない。最初に一通り内容を掴んで主張を理解してから、あとで気になった時につぶさに読むのが私の読み方。</p>

<p>最初の感想を言うと、古い。Common Lispもcltl2とANSI両方に配慮されて書かれているし、紹介されているAIの事例も1970~1980年代のもの。
古典といった感じ。ただし、その時代はCommon LispとAIの最盛期なのでこの本を読めばCommon LispがAIで名を馳せた理由が良く分かる。</p>

<p>Common Lispの内容は初級程度。まえがきにもあるようにプログラマとしては中級だがLispは初心者レベルの人向に書かれている。基本的なところを押えたらあとはどんどん進んでいく。
プログラミングの経験があればそれでも問題ない筈。心配ならWeb上にいくらでもあるチュートリアルをこなせば良い。</p>

<p>ライブラリなどに関しては本の中で完結しているので良く言えば1から10まで教えてくれる。悪く言えば最近のCommon Lispの動向は全く分からない。その意味では実践入門ではなく学習図書。陳腐化はしない。</p>

<p>AIについては、やはり古い。今では手法が確立されてAIの分野とは扱われないものも含まれている。ただし、これは意図したものなのかもしれない。
古いものというのは単純だ。最初に2部で単純なものを通して「肩馴らし」をしてから3部で手駒を増やして4部で踏み込んだ内容に入る。</p>

<p>また、AIの分野としては扱われていなものも含む、ということはこの本が情報科学の広い範囲をカバーする、ということでもある。900ベージは伊達じゃない。量もあればバラエティもある。</p>

<p>現実にある様々な難解な問題をCommon Lispという強力な道具で快刀乱麻解決していく。ソフトウェア開発手法を学びながらCommon Lispの強力さを思い知るための一冊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mllexを使ってみる。あるいはlexユーザーに対するmllexの解説]]></title>
    <link href="http://KeenS.github.io/blog/2014/12/10/mllexwoshi-tutemiru/"/>
    <updated>2014-12-10T00:21:04+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/12/10/mllexwoshi-tutemiru</id>
    <content type="html"><![CDATA[<p>このエントリーは<a href="http://qiita.com/advent-calendar/2014/ml">ML Advent Calendar 10日目</a>の記事です。<br/>
前 <a href="http://h-sakurai.hatenablog.com/entry/2014/12/09/144655">OCamlで作ったgoma言語 &ndash; h_sakurai&rsquo;s diary</a></p>

<p>ふと思い立ってPrologのコンパイラかインタプリタかを作ってみようとして、その第一段でlexerに着手しました。</p>

<!-- more -->


<p>ちょ、SML分かる人はmllexくらい常識的に知ってるなんて言わないで下さい。私は初めて触りました。</p>

<p>ちょっと変則的なんですが、smlsharpの配布物にあるドキュメントを読みながらmlton付属のmllexを使い、sml/nj上で動作を確認しました。SMLの処理系管理ガバガバですね。</p>

<p>まあ、初めて使ってみたとは言ってもほぼC版のlexのCを書く部分をそのままSMLで書けば良いだけなので簡単ですね。</p>

<p>因みにPrologの文法は以下のようなもの。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="c1">%reverse a list into X</span>
</span><span class='line'><span class="nf">reverse</span><span class="p">([],</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">reverse</span><span class="p">([</span><span class="nv">Hd</span><span class="p">|</span><span class="nv">Tl</span><span class="p">],</span> <span class="nv">X</span><span class="p">):-</span>
</span><span class='line'>    <span class="nf">reverse</span><span class="p">(</span><span class="nv">Tl</span><span class="p">,</span> <span class="nv">Y</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">append</span><span class="p">(</span><span class="nv">Y</span><span class="p">,</span> <span class="p">[</span><span class="nv">Hd</span><span class="p">],</span> <span class="nv">X</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">reverse</span><span class="p">(</span><span class="nv">List</span><span class="p">,</span> <span class="nv">X</span><span class="p">):-</span>
</span><span class='line'>    <span class="nf">reverse</span><span class="p">(</span><span class="nv">List</span><span class="p">,</span> <span class="p">[]).</span>
</span></code></pre></td></tr></table></div></figure>


<p>だいたいの部分は見れば分かるかと思うのですが、小文字で始まるのがリテラル（文字列？識別子？）で大文字から始まるのが変数です。</p>

<p>で、これをイメージしながらlexファイルを書いていきます。</p>

<h1>Lexファイル</h1>

<p>全体はこのようになっています。lexと同じですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="nv">SMLの補助コード部分</span>
</span><span class='line'>
</span><span class='line'><span class="c1">%%</span>
</span><span class='line'>
</span><span class='line'><span class="s-Atom">補助ルールの記述</span>
</span><span class='line'>
</span><span class='line'><span class="c1">%%</span>
</span><span class='line'>
</span><span class='line'><span class="s-Atom">解析ルールの記述</span>
</span></code></pre></td></tr></table></div></figure>


<p>SMLの補助コードの部分は典型的には<code>datatype</code>を書きます。あとはどうも<code>error : string -&gt; unit</code>と <code>eof : unit -&gt; 'a</code>が必要みたいですね（マニュアルちゃんと読んでない）。<code>'a</code>というのは他の解析ルールと同じ型です。</p>

<p>補助ルールはlexとだいたい同じです。生成した関数やらデータ型を収めるstructureの指定とかもします。</p>

<p>解析ルールもだいたいlexと同じです。</p>

<pre><code>pattern =&gt; (SMLのコード);
</code></pre>

<p>のような形をしてます。</p>

<h1>実際のコード</h1>

<p>結構適当です。あ、カットのこと忘れてた。ほら、適当だった。</p>

<p>このコードをprolog.lexとして保存します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="kr">datatype</span> <span class="kt">lexresult</span> <span class="p">=</span>
</span><span class='line'>         <span class="nc">Comment</span> <span class="kr">of</span> <span class="n">string</span>
</span><span class='line'>       <span class="p">|</span> <span class="nc">LeftParen</span>
</span><span class='line'>       <span class="p">|</span> <span class="nc">RightParen</span>
</span><span class='line'>       <span class="p">|</span> <span class="nc">LeftBracket</span>
</span><span class='line'>       <span class="p">|</span> <span class="nc">RightBracket</span>
</span><span class='line'>       <span class="p">|</span> <span class="nc">Comma</span>
</span><span class='line'>       <span class="p">|</span> <span class="nc">Dot</span>
</span><span class='line'>       <span class="p">|</span> <span class="nc">Bar</span>
</span><span class='line'>       <span class="p">|</span> <span class="nc">Medaka</span>
</span><span class='line'>       <span class="p">|</span> <span class="nc">UnderScore</span>
</span><span class='line'>       <span class="p">|</span> <span class="nc">String</span> <span class="kr">of</span> <span class="n">string</span>
</span><span class='line'>       <span class="p">|</span> <span class="nc">Number</span> <span class="kr">of</span> <span class="n">int</span>
</span><span class='line'>       <span class="p">|</span> <span class="nc">Variable</span> <span class="kr">of</span> <span class="n">string</span>
</span><span class='line'>       <span class="p">|</span> <span class="nc">EOF</span>
</span><span class='line'>
</span><span class='line'><span class="kr">val</span> <span class="nv">linenum</span> <span class="p">=</span> <span class="n">ref</span> <span class="mi">1</span>
</span><span class='line'><span class="kr">val</span> <span class="nv">error</span> <span class="p">=</span> <span class="kr">fn</span> <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">print</span> <span class="p">(</span><span class="n">x</span> <span class="n">^</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="kr">val</span> <span class="nv">eof</span> <span class="p">=</span> <span class="kr">fn</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">EOF</span>
</span><span class='line'><span class="n">%%</span>
</span><span class='line'><span class="n">%</span><span class="kr">structure</span> <span class="nn">PrologLex</span>
</span><span class='line'>
</span><span class='line'><span class="nn">alphanum</span> <span class="p">=</span> <span class="p">[</span><span class="n">A-Za-z0-</span><span class="mi">9</span><span class="p">];</span>
</span><span class='line'><span class="n">alpha</span>    <span class="p">=</span> <span class="p">[</span><span class="n">A-Za-z</span><span class="p">];</span>
</span><span class='line'><span class="n">digit</span>    <span class="p">=</span> <span class="p">[</span><span class="mi">0</span><span class="n">-</span><span class="mi">9</span><span class="p">];</span>
</span><span class='line'><span class="n">ws</span>       <span class="p">=</span> <span class="p">[</span><span class="n">\</span> <span class="n">\t\n</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">%%</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="n">ws</span><span class="p">}</span><span class="n">+</span>            <span class="p">=&gt;</span> <span class="p">(</span><span class="n">lex</span><span class="p">());</span>
</span><span class='line'><span class="n">%</span><span class="p">(</span><span class="err">.*)\n</span>          <span class="p">=&gt;</span> <span class="p">(</span><span class="n">Comment</span> <span class="n">yytext</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;(&quot;</span>              <span class="p">=&gt;</span> <span class="p">(</span><span class="n">LeftParen</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;)&quot;</span>              <span class="p">=&gt;</span> <span class="p">(</span><span class="n">RightParen</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;[&quot;</span>              <span class="p">=&gt;</span> <span class="p">(</span><span class="n">LeftBracket</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;]&quot;</span>              <span class="p">=&gt;</span> <span class="p">(</span><span class="n">RightBracket</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;,&quot;</span>              <span class="p">=&gt;</span> <span class="p">(</span><span class="n">Comma</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;.&quot;</span>              <span class="p">=&gt;</span> <span class="p">(</span><span class="n">Dot</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;|&quot;</span>              <span class="p">=&gt;</span> <span class="p">(</span><span class="n">Bar</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;:-&quot;</span>             <span class="p">=&gt;</span> <span class="p">(</span><span class="n">Medaka</span><span class="p">);</span>
</span><span class='line'><span class="s2">&quot;_&quot;</span>              <span class="p">=&gt;</span> <span class="p">(</span><span class="n">UnderScore</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span><span class="n">a-z</span><span class="p">]{</span><span class="n">alphanum</span><span class="p">}</span><span class="n">*</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">String</span> <span class="n">yytext</span><span class="p">);</span>
</span><span class='line'><span class="p">{</span><span class="n">digit</span><span class="p">}</span><span class="n">+</span>         <span class="p">=&gt;</span> <span class="p">(</span><span class="n">Number</span> <span class="p">(</span><span class="n">foldl</span> <span class="p">(</span><span class="kr">fn</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">r</span><span class="p">)=&gt;</span> <span class="p">(</span><span class="n">ord</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="n">-ord</span><span class="p">(</span><span class="sc">#&quot;0&quot;</span><span class="p">))</span> <span class="n">+</span> <span class="mi">10</span><span class="n">*r</span><span class="p">)</span> <span class="mi">0</span> <span class="p">(</span><span class="n">explode</span> <span class="n">yytext</span><span class="p">)));</span>
</span><span class='line'><span class="p">[</span><span class="n">A-Z</span><span class="p">]{</span><span class="n">alphanum</span><span class="p">}</span><span class="n">*</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">Variable</span> <span class="n">yytext</span><span class="p">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h1>実際に使ってみる。</h1>

<pre><code>$ mllex prolog.lex

Number of states = 19
Number of distinct rows = 8
Approx. memory size of trans. table = 1032 bytes
$ rlwrap sml
Standard ML of New Jersey v110.77 [built: Thu Sep  4 12:32:33 2014]
- use "prolog.lex.sml";
[opening prolog.lex.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[autoloading done]
structure PrologLex :
  sig
    structure UserDeclarations : &lt;sig&gt;
    exception LexError
    structure Internal : &lt;sig&gt;
    structure YYPosInt : &lt;sig&gt;
    val makeLexer : (int -&gt; string) -&gt; unit -&gt; Internal.result
  end
val it = () : unit
- val lexer = PrologLex.makeLexer (fn i =&gt; TextIO.inputN(TextIO.openIn "reverse.pl", i));
val lexer = fn : unit -&gt; PrologLex.Internal.result
- lexer();
val it = Comment "%reverse a list into X\n" : PrologLex.Internal.result
- lexer();
val it = String "reverse" : PrologLex.Internal.result
- lexer();
val it = LeftParen : PrologLex.Internal.result
- lexer();
val it = LeftBracket : PrologLex.Internal.result
- lexer();
val it = RightBracket : PrologLex.Internal.result
- 
</code></pre>

<p>コメントの扱い失敗してますね。この辺はどうしようもないのかなあ</p>

<h1>困ったところ</h1>

<p>ドキュメントが古いSML/NJのものらしく、SMLのコードをそのまま書いても動かなかった。<code>revfold</code>とか<code>inputc</code>とか。</p>

<p>次回はmlyaccでも触ってみますか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[割と処理系ポータブルなCommon Lisp実行可能ファイルを作る]]></title>
    <link href="http://KeenS.github.io/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru/"/>
    <updated>2014-12-08T06:17:12+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/12/08/ge-tochu-li-xi-potaburunacommon-lispshi-xing-ke-neng-huairuwozuo-ru</id>
    <content type="html"><![CDATA[<p>κeenです。Lisp Advent Calendarはもう枠埋まっちゃったので普通にブログで。</p>

<p>コマンドラインから実行可能なLispファイルをそれなりに多くの処理系で動くように作る話。</p>

<!-- more -->


<p>この話はCIMの生い立ちとも関連するんだけどシェルからLispを使いたいときは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env sbcl --script
</span><span class='line'>
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>なんて書いてた人も多いんじゃないかと思うんだけどこれは色々問題がある。</p>

<ol>
<li>envは環境に依っては/usr/local/bin/envだったりする</li>
<li>envは環境に依っては複数引数を取れない。&#8221;sbcl &mdash;script&#8221;という名前のファイルを捜しにいく</li>
<li>sbclでしか動かない</li>
</ol>


<p>この問題の扱いは一応解決策がある</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>#|
</span><span class='line'>exec sbcl --script "$0" -- "$@"
</span><span class='line'>|#
</span><span class='line'>
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>3行目の<code>#|</code>がシェルのコメントでありLispのブロックコメントであるのがポイント。</p>

<ol>
<li>シェルは<code>#!/bin/sh</code>を見てシェルスクリプトとして実行する</li>
<li>1,3行目はコメントなのでシェルは無視</li>
<li>4行目でsbclにそのファイルを引数として与えてexecする。execしたあとはシェルには戻らないのでその後何が書いてあっても構わない</li>
<li>sbclを<code>--script</code>付きで読んでるので1行目の<code>#!</code>で始まる行は無視する</li>
<li>3~5行目はブロックコメントなのでsbclは無視</li>
<li>それ以降がLispとして実行される</li>
</ol>


<p>というカラクリになっている。こういうのをピジン言語っていうんだけ？</p>

<p>まあいいや。</p>

<p>ところでこのブロックコメントの中にはシェルスクリプト書き放題だよね？そのシェルスクリプト内でどのLisp使うか決めたらポータブルになりそうじゃない？</p>

<p>こういうのはどう？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="err">#</span><span class="nv">!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="cm">#|</span>
</span><span class='line'><span class="cm">run_if_exists(){</span>
</span><span class='line'><span class="cm"> command -v $1 &gt; /dev/null 2&gt;&amp;1 &amp;&amp; exec &quot;$@&quot;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm"> run_if_exists sbcl --noinform --no-sysinit --no-userinit --script &quot;$0&quot; -- &quot;$@&quot;</span>
</span><span class='line'><span class="cm"> run_if_exists clisp -norc --quiet --silent -on-error exit  &quot;$0&quot; -- &quot;$@&quot;</span>
</span><span class='line'><span class="cm"> run_if_exists ecl -norc -q -shell &quot;$0&quot; -- &quot;$@&quot;</span>
</span><span class='line'><span class="cm"> run_if_exists mkcl -norc -q -shell &quot;$0&quot; -- &quot;$@&quot;</span>
</span><span class='line'><span class="cm"> run_if_exists alisp -qq -#! &quot;$0&quot; -- &quot;$@&quot;</span>
</span><span class='line'><span class="cm">|#</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">write-line</span> <span class="p">(</span><span class="nb">lisp-implementation-type</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">force-output</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>cclとabclは1行目のシェバンを読み飛ばせなかった&amp;評価結果をエコーバックしない方法が見当らなかったからパス。CMUCLは自分の環境で動かないから検証出来てない。</p>

<p>これでポータブルに実行は可能。コマンドライン引数の扱いとかはライブラリを頼ってくれ。因みにCIMでは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'>  <span class="o">#+</span><span class="nv">allegro</span>  <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nv">system:command-line-arguments</span><span class="p">))</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">sbcl</span> <span class="p">(</span><span class="nb">do*</span>  <span class="p">((</span><span class="nv">var</span> <span class="nv">sb-ext:*posix-argv*</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nb">list</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">list</span> <span class="nv">var</span> <span class="nv">var</span><span class="p">))</span>
</span><span class='line'>               <span class="p">((</span><span class="nb">string=</span> <span class="p">(</span><span class="nb">car</span> <span class="nb">list</span><span class="p">)</span> <span class="s">&quot;--&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">return</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nb">list</span><span class="p">))))</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">clisp</span> <span class="nv">ext:*args*</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">ecl</span> <span class="p">(</span><span class="nb">do*</span>  <span class="p">((</span><span class="nv">var</span> <span class="p">(</span><span class="nv">si:command-args</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nb">list</span><span class="p">))</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">list</span> <span class="nv">var</span> <span class="nv">var</span><span class="p">))</span>
</span><span class='line'>              <span class="p">((</span><span class="nb">string=</span> <span class="p">(</span><span class="nb">car</span> <span class="nb">list</span><span class="p">)</span> <span class="s">&quot;--&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">return</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nb">list</span><span class="p">))))</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">abcl</span> <span class="nv">extensions:*command-line-argument-list*</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">gcl</span> <span class="p">(</span><span class="nb">do*</span>  <span class="p">((</span><span class="nv">var</span> <span class="nv">si::*command-args*</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nb">list</span><span class="p">))</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">list</span> <span class="nv">var</span> <span class="nv">var</span><span class="p">))</span>
</span><span class='line'>              <span class="p">((</span><span class="nb">string=</span> <span class="p">(</span><span class="nb">car</span> <span class="nb">list</span><span class="p">)</span> <span class="s">&quot;--&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">return</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nb">list</span><span class="p">))))</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">cmu</span> <span class="nv">ext:*command-line-words*</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">ccl</span> <span class="nv">ccl:*unprocessed-command-line-arguments*</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">mkcl</span> <span class="p">(</span><span class="nb">do*</span>  <span class="p">((</span><span class="nv">var</span> <span class="p">(</span><span class="nv">si:command-args</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nb">list</span><span class="p">))</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">list</span> <span class="nv">var</span> <span class="nv">var</span><span class="p">))</span>
</span><span class='line'>              <span class="p">((</span><span class="nb">string=</span> <span class="p">(</span><span class="nb">car</span> <span class="nb">list</span><span class="p">)</span> <span class="s">&quot;--&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">return</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nb">list</span><span class="p">))))</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">lispworks</span> <span class="nv">system:*line-arguments-list*</span>
</span></code></pre></td></tr></table></div></figure>


<p>としている。参考までに。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[H2Oにpicrinを溶かす]]></title>
    <link href="http://KeenS.github.io/blog/2014/12/07/h2onipicrinworong-kasu/"/>
    <updated>2014-12-07T22:37:00+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/12/07/h2onipicrinworong-kasu</id>
    <content type="html"><![CDATA[<p>このエントリーは<br/>
<a href="http://qiita.com/advent-calendar/2014/lisp">Lisp Advent Calendar</a> 7日目<br/>
兼<br/>
<a href="http://qiita.com/advent-calendar/2014/h2o">H2O Advent Calendar</a> 7日目<br/>
の記事です。</p>

<p>κeenです。タイトルの通りです。</p>

<!-- more -->


<h1>H2Oとは</h1>

<p>水。</p>

<h1>picrinとは</h1>

<p><a href="http://ja.wikipedia.org/wiki/%E3%83%94%E3%82%AF%E3%83%AA%E3%83%B3%E9%85%B8">Wikipedia</a>にあるように、フェノールのトリニトロ化合物で、水溶性があります。</p>

<h1>ではなくて</h1>

<p>H2OはHTTP1, HTTP2, WebsocketをサポートするNginXより速いHTTPサーバです。<a href="https://github.com/h2o/h2o">Github</a>で開発されています。開発者は@kazuhoさん。</p>

<p>picrinは「速い、軽い、高機能」を目指して作られているScheme処理系です。<a href="https://github.com/picrin-scheme/picrin">Github</a>で開発されています。開発者は@wasabizさん。</p>

<h1>混ぜる</h1>

<p>picrinのように組込み向けで開発されている処理系は</p>

<ul>
<li>picrinからH2Oを使えるようにする</li>
<li>H2Oにpicrinを埋め込む</li>
</ul>


<p>と、2種類考えられますが、今回は後者です。H2Oにpicrinを溶かしてる感じしますね。</p>

<p>まあ、Apatch HTTPDやNginX宜しくmod_picrinを作れば済むでしょう。</p>

<h1>絶望</h1>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/blackenedgold">@blackenedgold</a> モジュラーにできるようにはしてるけど、まだsoをロードする仕組みはないです。というか、APIがまだunstableだし</p>&mdash; Kazuho Oku (@kazuho) <a href="https://twitter.com/kazuho/status/540692011003559936">2014, 12月 5</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>つらい</p>

<h1>solシステムの導入</h1>

<p>mod_xxxにしようと思ったんですけど水だし溶液ってことでsol_xxxにします。</p>

<p>H2Oにこんな感じのパッチ当てて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diff --git a/src/main.c b/src/main.c
</span><span class='line'>index 7fc4680..57804a6 100644
</span><span class='line'>--- a/src/main.c
</span><span class='line'>+++ b/src/main.c
</span><span class='line'>@@ -30,6 +30,7 @@
</span><span class='line'> #include &lt;signal.h&gt;
</span><span class='line'> #include &lt;stdio.h&gt;
</span><span class='line'> #include &lt;unistd.h&gt;
</span><span class='line'>+#include &lt;dlfcn.h&gt;
</span><span class='line'> #include &lt;sys/stat.h&gt;
</span><span class='line'> #include &lt;sys/socket.h&gt;
</span><span class='line'> #include &lt;sys/types.h&gt;
</span><span class='line'>@@ -76,6 +77,8 @@ struct config_t {
</span><span class='line'>     } state;
</span><span class='line'> };
</span><span class='line'> 
</span><span class='line'>+typedef int(*sol_init_fn)(h2o_configurator_command_t *, h2o_configurator_context_t *, const char *, yoml_t *);
</span><span class='line'>+
</span><span class='line'> static unsigned long openssl_thread_id_callback(void)
</span><span class='line'> {
</span><span class='line'>     return (unsigned long)pthread_self();
</span><span class='line'>@@ -381,6 +384,43 @@ static int on_config_num_threads(h2o_configurator_command_t *cmd, h2o_configurat
</span><span class='line'>     return h2o_config_scanf(cmd, config_file, config_node, "%u", &conf-&gt;num_threads);
</span><span class='line'> }
</span><span class='line'> 
</span><span class='line'>+static int on_config_use(h2o_configurator_command_t *cmd, h2o_configurator_context_t *ctx, const char *config_file, yoml_t *config_node)
</span><span class='line'>+{
</span><span class='line'>+  /* struct config_t *conf = H2O_STRUCT_FROM_MEMBER(struct config_t, global_config, ctx-&gt;globalconf); */
</span><span class='line'>+  char *sol_name;
</span><span class='line'>+  sol_init_fn init_fn;
</span><span class='line'>+  void *handle;
</span><span class='line'>+
</span><span class='line'>+  /* fetch solution name */
</span><span class='line'>+  switch (config_node-&gt;type) {
</span><span class='line'>+  case YOML_TYPE_SCALAR:
</span><span class='line'>+    sol_name = config_node-&gt;data.scalar;
</span><span class='line'>+    break;
</span><span class='line'>+  default:
</span><span class='line'>+    h2o_config_print_error(cmd, config_file, config_node, "value must be a string or a mapping (with keys: `port` and optionally `host`)");
</span><span class='line'>+    return -1;
</span><span class='line'>+  }
</span><span class='line'>+
</span><span class='line'>+  char dl_name[strlen("sol_.so") + strlen(sol_name) + 1];
</span><span class='line'>+  char init_fn_name[strlen("init_sol_") + strlen(sol_name) + 1];
</span><span class='line'>+
</span><span class='line'>+  sprintf(dl_name, "./sol_%s.so", sol_name);
</span><span class='line'>+  sprintf(init_fn_name, "init_sol_%s", sol_name);
</span><span class='line'>+  handle = dlopen(dl_name, RTLD_LAZY);
</span><span class='line'>+  if (! handle){
</span><span class='line'>+    h2o_config_print_error(cmd, config_file, config_node, "cannot load the solution");
</span><span class='line'>+    return -1;
</span><span class='line'>+  }
</span><span class='line'>+
</span><span class='line'>+  init_fn = dlsym(handle, init_fn_name);
</span><span class='line'>+  if(dlerror()){
</span><span class='line'>+    h2o_config_print_error(cmd, config_file, config_node, "cannot find the initialize function");
</span><span class='line'>+    return -1;
</span><span class='line'>+  }
</span><span class='line'>+  return (*init_fn)(cmd, ctx, config_file, config_node);
</span><span class='line'>+
</span><span class='line'>+}
</span><span class='line'>+
</span><span class='line'> static void usage_print_directives(h2o_globalconf_t *conf)
</span><span class='line'> {
</span><span class='line'>     h2o_linklist_t *node;
</span><span class='line'>@@ -606,6 +646,10 @@ int main(int argc, char **argv)
</span><span class='line'>             c, "num-threads", H2O_CONFIGURATOR_FLAG_GLOBAL,
</span><span class='line'>             on_config_num_threads,
</span><span class='line'>             "number of worker threads (default: 1)");
</span><span class='line'>+        h2o_config_define_command(
</span><span class='line'>+            c, "use", H2O_CONFIGURATOR_FLAG_GLOBAL,
</span><span class='line'>+            on_config_use,
</span><span class='line'>+            "use the solution");
</span><span class='line'>     }
</span><span class='line'> 
</span><span class='line'>     h2o_access_log_register_configurator(&config.global_config);</span></code></pre></td></tr></table></div></figure>


<p>こんな感じのソリューション用意して</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;picrin.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;picrin/pair.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;picrin/string.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;picrin/error.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;h2o.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">pic_state</span> <span class="o">*</span><span class="n">pic</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">pic_lib</span> <span class="o">*</span><span class="n">PICRIN_BASE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">pic_init_contrib</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">pic_load_piclib</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">pic_value</span>
</span><span class='line'><span class="nf">pic_features</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="n">pic</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">pic_get_args</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">pic</span><span class="o">-&gt;</span><span class="n">features</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">pic_value</span>
</span><span class='line'><span class="nf">pic_libraries</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="n">pic</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">pic_value</span> <span class="n">libs</span> <span class="o">=</span> <span class="n">pic_nil_value</span><span class="p">(),</span> <span class="n">lib</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pic_get_args</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pic_for_each</span> <span class="p">(</span><span class="n">lib</span><span class="p">,</span> <span class="n">pic</span><span class="o">-&gt;</span><span class="n">libs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">libs</span> <span class="o">=</span> <span class="n">pic_cons</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="n">pic_car</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="n">lib</span><span class="p">),</span> <span class="n">libs</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">libs</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">pic_init_picrin</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="n">pic</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">scheme</span> <span class="o">=</span>
</span><span class='line'>    <span class="s">&quot;(import (scheme base)&quot;</span>
</span><span class='line'>    <span class="s">&quot;        (scheme write))&quot;</span>
</span><span class='line'>    <span class="s">&quot;(define-syntax call-with-output-to-string&quot;</span>
</span><span class='line'>    <span class="s">&quot;  (syntax-rules ()&quot;</span>
</span><span class='line'>    <span class="s">&quot;    ((_ proc)&quot;</span>
</span><span class='line'>    <span class="s">&quot;     (let ((s (open-output-string)))&quot;</span>
</span><span class='line'>    <span class="s">&quot;       (proc s)&quot;</span>
</span><span class='line'>    <span class="s">&quot;       (get-output-string s)))))&quot;</span>
</span><span class='line'>    <span class="s">&quot;(define (-&gt;string e)&quot;</span>
</span><span class='line'>    <span class="s">&quot;  (call-with-output-to-string&quot;</span>
</span><span class='line'>    <span class="s">&quot;   (lambda (s)&quot;</span>
</span><span class='line'>    <span class="s">&quot;     (display e s))))&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">pic_add_feature</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="s">&quot;r7rs&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pic_deflibrary</span> <span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="s">&quot;(picrin library)&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pic_defun</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="s">&quot;libraries&quot;</span><span class="p">,</span> <span class="n">pic_libraries</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pic_deflibrary</span> <span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="s">&quot;(scheme base)&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pic_defun</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="s">&quot;features&quot;</span><span class="p">,</span> <span class="n">pic_features</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pic_init_contrib</span><span class="p">(</span><span class="n">pic</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pic_load_piclib</span><span class="p">(</span><span class="n">pic</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">pic_deflibrary</span> <span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="s">&quot;(picrin base)&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pic_load_cstr</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="n">scheme</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span>
</span><span class='line'><span class="nf">pic_eval_cstr_into_cstr</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="n">pic</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">input</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">pic_value</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">v</span> <span class="o">=</span> <span class="n">pic_read_cstr</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="n">input</span><span class="p">);</span>
</span><span class='line'>  <span class="n">v</span> <span class="o">=</span> <span class="n">pic_eval</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">PICRIN_BASE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">v</span> <span class="o">=</span> <span class="n">pic_funcall</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="n">PICRIN_BASE</span><span class="p">,</span> <span class="s">&quot;-&gt;string&quot;</span><span class="p">,</span> <span class="n">pic_list1</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="n">v</span><span class="p">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">pic_str_cstr</span><span class="p">(</span><span class="n">pic_str_ptr</span><span class="p">(</span><span class="n">v</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">on_picrin</span><span class="p">(</span><span class="kt">h2o_configurator_command_t</span> <span class="o">*</span><span class="n">cmd</span><span class="p">,</span> <span class="kt">h2o_configurator_context_t</span> <span class="o">*</span><span class="n">ctx</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">config_file</span><span class="p">,</span> <span class="kt">yoml_t</span> <span class="o">*</span><span class="n">config_node</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">sexp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">config_node</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nl">YOML_TYPE_SCALAR</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sexp</span> <span class="o">=</span> <span class="n">config_node</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">.</span><span class="n">scalar</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="n">h2o_config_print_error</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">config_file</span><span class="p">,</span> <span class="n">config_node</span><span class="p">,</span> <span class="s">&quot;value must be a string&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pic_try</span><span class="p">{</span>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="n">pic_eval_cstr_into_cstr</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="n">sexp</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">pic_catch</span><span class="p">{</span>
</span><span class='line'>    <span class="n">pic_print_backtrace</span><span class="p">(</span><span class="n">pic</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">init_sol_picrin</span><span class="p">(</span><span class="kt">h2o_configurator_command_t</span> <span class="o">*</span><span class="n">cmd</span><span class="p">,</span> <span class="kt">h2o_configurator_context_t</span> <span class="o">*</span><span class="n">ctx</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">config_file</span><span class="p">,</span> <span class="kt">yoml_t</span> <span class="o">*</span><span class="n">config_node</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kt">h2o_configurator_t</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="n">cmd</span><span class="o">-&gt;</span><span class="n">configurator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pic</span> <span class="o">=</span> <span class="n">pic_open</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pic_init_picrin</span><span class="p">(</span><span class="n">pic</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">PICRIN_BASE</span> <span class="o">=</span> <span class="n">pic_find_library</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="n">pic_read_cstr</span><span class="p">(</span><span class="n">pic</span><span class="p">,</span> <span class="s">&quot;(picrin base)&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">h2o_config_define_command</span><span class="p">(</span>
</span><span class='line'>      <span class="n">c</span><span class="p">,</span> <span class="s">&quot;picrin&quot;</span><span class="p">,</span> <span class="n">H2O_CONFIGURATOR_FLAG_GLOBAL</span> <span class="o">|</span> <span class="n">H2O_CONFIGURATOR_FLAG_EXPECT_SCALAR</span><span class="p">,</span>
</span><span class='line'>      <span class="n">on_picrin</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;run picrin&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>んでコンフィグは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp"># to find out the configuration commands, run: h2o --help</span>
</span><span class='line'>
</span><span class='line'><span class="nl">use</span><span class="p">:</span> <span class="n">picrin</span>
</span><span class='line'><span class="nl">listen</span><span class="p">:</span>
</span><span class='line'>  <span class="nl">port</span><span class="p">:</span>
</span><span class='line'><span class="nl">listen</span><span class="p">:</span>
</span><span class='line'>  <span class="nl">port</span><span class="p">:</span> <span class="mi">8081</span>
</span><span class='line'>  <span class="nl">ssl</span><span class="p">:</span>
</span><span class='line'>    <span class="n">certificate</span><span class="o">-</span><span class="nl">file</span><span class="p">:</span> <span class="n">examples</span><span class="o">/</span><span class="n">h2o</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="n">crt</span>
</span><span class='line'>    <span class="n">key</span><span class="o">-</span><span class="nl">file</span><span class="p">:</span> <span class="n">examples</span><span class="o">/</span><span class="n">h2o</span><span class="o">/</span><span class="n">server</span><span class="p">.</span><span class="n">key</span>
</span><span class='line'><span class="nl">picrin</span><span class="p">:</span> <span class="s">&quot;(string-append </span><span class="se">\&quot;</span><span class="s">Hello, </span><span class="se">\&quot;</span><span class="s"> </span><span class="se">\&quot;</span><span class="s">World</span><span class="se">\&quot;</span><span class="s">)&quot;</span>
</span><span class='line'><span class="nl">hosts</span><span class="p">:</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="nl">paths</span><span class="p">:</span>
</span><span class='line'>      <span class="o">/:</span>
</span><span class='line'>        <span class="n">file</span><span class="p">.</span><span class="nl">dir</span><span class="p">:</span> <span class="n">examples</span><span class="o">/</span><span class="n">doc_root</span>
</span><span class='line'>    <span class="n">access</span><span class="o">-</span><span class="nl">log</span><span class="p">:</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">stdout</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして魔法のコマンドを叩いて</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="err">$</span> <span class="n">cp</span> <span class="o">~/</span><span class="n">compile</span><span class="o">/</span><span class="n">picrin</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="p">{</span><span class="n">init_contrib</span><span class="p">.</span><span class="n">c</span><span class="p">,</span><span class="n">load_piclib</span><span class="p">.</span><span class="n">c</span><span class="p">}</span> <span class="p">.</span><span class="o">/</span>
</span><span class='line'><span class="err">$</span> <span class="n">gcc</span> <span class="o">-</span><span class="n">c</span> <span class="n">sol_picrin</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c99</span>   <span class="o">-</span><span class="n">o</span> <span class="n">sol_picrin</span><span class="p">.</span><span class="n">o</span> <span class="o">-</span><span class="n">I</span> <span class="o">~/</span><span class="n">compile</span><span class="o">/</span><span class="n">picrin</span><span class="o">/</span><span class="n">extlib</span><span class="o">/</span><span class="n">benz</span><span class="o">/</span><span class="n">include</span> <span class="o">-</span><span class="n">I</span> <span class="o">~/</span><span class="n">compile</span><span class="o">/</span><span class="n">h2o</span><span class="o">/</span><span class="n">include</span> <span class="o">-</span><span class="n">I</span> <span class="o">~/</span><span class="n">compile</span><span class="o">/</span><span class="n">h2o</span><span class="o">/</span><span class="n">deps</span><span class="o">/</span><span class="n">picohttpparser</span> <span class="o">-</span><span class="n">I</span> <span class="o">~/</span><span class="n">compile</span><span class="o">/</span><span class="n">h2o</span><span class="o">/</span><span class="n">deps</span><span class="o">/</span><span class="n">yoml</span> <span class="o">-</span><span class="n">DH2O_USE_LIBUV</span><span class="o">=</span><span class="mi">0</span> <span class="o">-</span><span class="n">fPIC</span>
</span><span class='line'><span class="err">$</span> <span class="n">gcc</span> <span class="n">sol_picrin</span><span class="p">.</span><span class="n">o</span> <span class="n">load_piclib</span><span class="p">.</span><span class="n">o</span> <span class="n">init_contrib</span><span class="p">.</span><span class="n">o</span> <span class="o">-</span><span class="n">L</span> <span class="o">~/</span><span class="n">compile</span><span class="o">/</span><span class="n">picrin</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span> <span class="o">-</span><span class="n">l</span> <span class="n">picrin</span> <span class="o">-</span><span class="n">fPIC</span> <span class="o">-</span><span class="n">shared</span> <span class="o">-</span><span class="n">o</span> <span class="n">sol_picrin</span><span class="p">.</span><span class="n">so</span>
</span><span class='line'><span class="err">$</span> <span class="n">cp</span> <span class="n">sol_picrin</span><span class="p">.</span><span class="n">so</span> <span class="o">~/</span><span class="n">compile</span><span class="o">/</span><span class="n">h2o</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="err">$</span> <span class="n">cd</span> <span class="o">~/</span><span class="n">compile</span><span class="o">/</span><span class="n">h2o</span>
</span><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">h2o</span> <span class="o">--</span><span class="n">conf</span> <span class="n">example</span><span class="o">/</span><span class="n">h2o</span><span class="o">/</span><span class="n">h2o</span><span class="p">.</span><span class="n">conf</span>
</span><span class='line'><span class="n">Hello</span><span class="p">,</span> <span class="n">Wold</span>
</span></code></pre></td></tr></table></div></figure>


<p>ヤッタ！</p>

<h1>標準出力かよ</h1>

<p>ううっ。ごめんなさい。</p>

<h1>で、HTTPレスポンス版は？</h1>

<p>ごめんなさい、まだです。</p>

<p><code>file.c</code>をベースにして</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">paths</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">/</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">picrin.exp</span><span class="p-Indicator">:</span> <span class="s">&quot;(string-append</span><span class="nv"> </span><span class="s">\&quot;Hello,</span><span class="nv"> </span><span class="s">\&quot;</span><span class="nv"> </span><span class="s">\&quot;World\&quot;)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかしたかったんですけど間に合いませんでした。</p>

<p>ソリューションなりモジュールなりのシステムが出来たらまたトライします</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[claspがアップデートされたよ]]></title>
    <link href="http://KeenS.github.io/blog/2014/12/06/claspgaatupudetosaretayo/"/>
    <updated>2014-12-06T23:29:46+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/12/06/claspgaatupudetosaretayo</id>
    <content type="html"><![CDATA[<p>κeenです。アドベントカレンダーめっちゃ書いてますね。</p>

<!-- more -->


<h1>Clasp!</h1>

<p><a href="https://github.com/drmeister/clasp">clasp</a>のmasterに色々マージされました。リリースノートには、</p>

<blockquote><p>Clasp version 0.11
* Added ASDF support.
This is still alpha. Compile the ASDF module using (core:compile-asdf).
After that you can load the module using (load &ldquo;sys:kernel;asdf;build;asdf.bundle&rdquo;).
It takes between 15-30 seconds to load (this is why I&rsquo;m integrating Cleavir).
* Added the :CLASP <em>feature</em> and removed the :ECL <em>feature</em>.
Clasp will continue to mimic the underlying ECL functionality so that
Common Lisp code that supports ECL can be made to support Clasp by converting</p>

<h1>+ecl to #+(or ecl clasp) and #-ecl to #&ndash;(or ecl clasp)</h1>

<ul>
<li>Added code to generate object files directly from Clasp.
The LLVM bitcode compiler &ldquo;llc&rdquo; no longer needs to be in the PATH
for Clasp to generate object files from Common Lisp source.
The &ldquo;ld&rdquo; linker does need to be accessible.</li>
</ul>
</blockquote>

<p>とあります。ASDFが使える！リリースノートには書いてませんがslimeサポートもmasterにコミットされてます。あとコミット読んだら最適化もされてるような…。</p>

<p><a href="http://keens.github.io/slide/clasp.html">以前</a>二十数秒掛かっていた<code>(fib 29)</code>ですが、今回はなんと</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /usr/local/clasp/bin/clasp_boehm_o
</span><span class='line'>Starting Clasp 0.11 ... loading image... it takes a few seconds
</span><span class='line'>Top level.
</span><span class='line'>&gt; (load "fib.lisp")
</span><span class='line'>1346269
</span><span class='line'>real time : 34.294 secs
</span><span class='line'>run time  : 38.844 secs
</span><span class='line'>T
</span><span class='line'>&gt; (compile-file "fib.lisp")
</span><span class='line'>
</span><span class='line'>#P"/home/kim/Lisp/fib.bc"
</span><span class='line'>NIL
</span><span class='line'>NIL
</span><span class='line'>&gt; (load "fib.bc")
</span><span class='line'>1346269
</span><span class='line'>real time : 21.355 secs
</span><span class='line'>run time  : 25.785 secs
</span><span class='line'>T</span></code></pre></td></tr></table></div></figure>


<p>うわぁ。遅くなってる。</p>

<p>因みに.bcファイルはLLVMの中間ファイルなのでClaspとは独立に<code>opt -f -O3 fib.bc &gt; fib.opt.bc</code>で最適化出来ます。それをやると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ opt -f -O3 fib.bc &gt; fib.opt.bc
</span><span class='line'>$ /usr/local/clasp/bin/clasp_boehm_o
</span><span class='line'>Starting Clasp 0.11 ... loading image... it takes a few seconds
</span><span class='line'>Top level.
</span><span class='line'>&gt; (load "fib.opt.bc")
</span><span class='line'>1346269
</span><span class='line'>real time : 34.981 secs
</span><span class='line'>run time  : 37.986 secs
</span><span class='line'>T</span></code></pre></td></tr></table></div></figure>


<p>あれ？遅くなった。</p>

<p>mpsはまだコンパイル中だから待ってね</p>

<h1>ASDFを使ってみる</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ /usr/local/clasp/bin/clasp_boehm_o
</span><span class='line'>Starting Clasp 0.11 ... loading image... it takes a few seconds
</span><span class='line'>Top level.
</span><span class='line'>&gt; (time (core:compile-asdf))
</span><span class='line'>zsh: segmentation fault (core dumped)  /usr/local/clasp/bin/clasp_boehm_o</span></code></pre></td></tr></table></div></figure>


<p>はい。解散。因みに50分くらいは動いてた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mirahについて]]></title>
    <link href="http://KeenS.github.io/blog/2014/12/04/mirahnituite/"/>
    <updated>2014-12-04T22:44:01+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/12/04/mirahnituite</id>
    <content type="html"><![CDATA[<p>このエントリーはマイナー言語Advent Calendar 2014 4日目の記事です。<br/>
前
後</p>

<p>κeenです。進捗ダメです。マイナー言語Advent Calendarが空いてるようだったのでMirahの話を捩じ込みますね。</p>

<!-- more -->


<h1>Mirahとは？</h1>

<p><a href="http://keens.github.io/blog/2014/08/07/mirah-0-dot-1-3/">以前の記事</a>を参照していただければだいたい分かるかと思いますが、「Ruby風の文法で書けるJava」です。JRubyのようにRubyをJavaで実装したのでもなくGroovyのようにJVM上で動く別の言語でもなく、あくまでJavaそのものです。</p>

<p>JRubyとの違いは理解頂けるかと思いますが、Groovyとの違いを説明するとしたら一番はランタイムですかね。Groovyはコンパイル後のソースもGroovyを必要としますがMirahはコンパイルされたら普通のJavaで書いたのと同じ.classファイルになります。</p>

<p>かといってくるくる括弧(<code>{}</code>)を<code>end</code>で書けるだけかというとそうでもなく、多くのシンタックスシュガーがマクロとして実装されています。</p>

<p>例えば</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">i</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>はJavaの</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>と同じバイトコードを生成します。</p>

<h1>v0.1.4リリースおめでとうございます。</h1>

<p>2014-11-14にv0.1.4がリリースされました。ラムダ式について少し進展があったようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="nb">lambda</span> <span class="no">Runnable</span> <span class="k">do</span>
</span><span class='line'> <span class="mi">1000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello&quot;</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span><span class="p">)</span><span class="o">.</span><span class="n">run</span>
</span></code></pre></td></tr></table></div></figure>


<p>とか書けます。が、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="nb">lambda</span> <span class="no">Runnable</span> <span class="k">do</span>
</span><span class='line'> <span class="mi">1000</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello&quot;</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span><span class="p">)</span><span class="o">.</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>とは書けませんでした。やりたいのはこっちなのにね。ちょっと突っついてみます。</p>

<p><a href="https://github.com/mirah/mirah">ここ</a>からそれっぽい情報入手出来ます。</p>

<p><a href="https://github.com/shannah/mirah-nbm">ここ</a>からNetBeansのプラグインを入手出来ます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VOPで遊ぶ]]></title>
    <link href="http://KeenS.github.io/blog/2014/12/02/vopdeyou-bu/"/>
    <updated>2014-12-02T23:38:26+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/12/02/vopdeyou-bu</id>
    <content type="html"><![CDATA[<p>(:meta<br/>
 ((:this &ldquo;<a href="http://qiita.com/advent-calendar/2014/lisp">Lisp Advent Calendar 2014</a>の3日目の記事&rdquo;)<br/>
  (:prev (:author &ldquo;tk_riple&rdquo; :title <a href="http://compassoftime.blogspot.jp/2014/12/r7rs.html">&ldquo;時の羅針盤＠blog: R7RSポータブルライブラリを書く際の落とし穴&rdquo;</a>))<br/>
  (:next (:author &ldquo;nobkz&rdquo; :tite &ldquo;Shenについて&rdquo;))))</p>

<p>κeenです。さっきまでVOPで遊んでたので当初の予定を変更してVOPの話をします。</p>

<!-- more -->


<h1>VOPとは何か</h1>

<p>SBCLやCMU CLで使われているネイティブコードを吐くための機構、要はインラインアセンブラです。</p>

<h1>VOPとはどんなものか</h1>

<p>とりあえずコードをば。x86-64用です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">in-package</span> <span class="ss">:cl-user</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">defpackage</span> <span class="nv">vop-sample</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="ss">:cl</span> <span class="ss">:sb-ext</span> <span class="ss">:sb-c</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">in-package</span> <span class="ss">:vop-sample</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">defknown</span> <span class="nv">add</span> <span class="p">(</span><span class="kt">fixnum</span> <span class="kt">fixnum</span><span class="p">)</span>          <span class="c1">; addのftypeを宣言</span>
</span><span class='line'>    <span class="kt">fixnum</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">movable</span>                            <span class="c1">; 副作用がない</span>
</span><span class='line'>     <span class="nv">flushable</span>                          <span class="c1">; デッドコードとして除去してよい</span>
</span><span class='line'>     <span class="nv">foldable</span>                           <span class="c1">; 定数畳み込みをしてよい</span>
</span><span class='line'>     <span class="nv">always-translatable</span><span class="p">)</span>               <span class="c1">; 必ずアセンブラコードになる</span>
</span><span class='line'>  <span class="ss">:overwrite-fndb-silently</span> <span class="no">t</span><span class="p">)</span>           <span class="c1">; 関数上書きのエラーを出さない</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">in-package</span> <span class="s">&quot;SB-VM&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-vop</span> <span class="p">(</span><span class="nv">vop-sample::add</span><span class="p">)</span>          <span class="c1">; VOP名</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:translate</span> <span class="nv">vop-sample::add</span><span class="p">)</span>         <span class="c1">; 関数名</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:policy</span> <span class="ss">:fast-safe</span><span class="p">)</span>                  <span class="c1">; declare optimize的な</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:args</span> <span class="p">(</span><span class="nv">x</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">signed-reg</span><span class="p">))</span>          <span class="c1">; 引数宣言。後述</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">y</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">signed-reg</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:arg-types</span> <span class="kt">fixnum</span> <span class="kt">fixnum</span><span class="p">)</span>            <span class="c1">; 引数の型宣言</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:results</span> <span class="p">(</span><span class="nv">r</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">signed-reg</span><span class="p">)))</span>      <span class="c1">; 返り値宣言。後述</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:result-types</span> <span class="kt">fixnum</span><span class="p">)</span>                <span class="c1">; 返り値の型宣言</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:generator</span> <span class="mi">4</span>                         <span class="c1">; 翻訳するときのコスト</span>
</span><span class='line'>              <span class="p">(</span><span class="nv">move</span> <span class="nv">r</span> <span class="nv">x</span><span class="p">)</span>                <span class="c1">; 返り値レジスタにxを移動</span>
</span><span class='line'>              <span class="p">(</span><span class="nv">inst</span> <span class="nv">add</span> <span class="nv">r</span> <span class="nv">y</span><span class="p">)))</span>          <span class="c1">; 返り値レジスタにyを足し込む</span>
</span><span class='line'><span class="p">(</span><span class="nb">in-package</span> <span class="ss">:vop-sample</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">add</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>                        <span class="c1">; 安全なバージョンでラップする</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">add</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちょっとおまじないが多いですね。</p>

<p>すこし解説すると引数は基本レジスタ渡しで、レジスタが足りなければスタックも使います。で、レジスタやスタックの値には型があります。それがストレージクラス(sc)です。この場合、x、y、rは<code>signed-reg</code>と宣言されてますね。符号付きレジスタです。<code>:scs</code>の最後のsは複数形のsです。今回は1つしか指定してませんが複数指定することも可能なのです。</p>

<p><code>move</code>というのはアセンブラ命令ではなく、マクロかなんかです（適当）。VOPなのかな？どのストレージクラスからどのストレージクラスに移動するかを認知して適切な命令を吐きます。</p>

<p><code>inst</code>が付いてるのがアセンブラですね。</p>

<p>このコード、xとrが等しいときに最適化出来るのですがそれはまあおいといて、こいつをディスアセンブルしてみましょう。</p>

<pre><code>VOP-SAMPLE&gt; (disassemble #'add)
; disassembly for ADD
; Size: 43 bytes. Origin: #x1005C26416
; 16:       488BD3           MOV RDX, RBX                     ; no-arg-parsing entry point
; 19:       48D1FA           SAR RDX, 1
; 1C:       488BF9           MOV RDI, RCX
; 1F:       48D1FF           SAR RDI, 1
; 22:       4801FA           ADD RDX, RDI
; 25:       48D1E2           SHL RDX, 1
; 28:       488BE5           MOV RSP, RBP
; 2B:       F8               CLC
; 2C:       5D               POP RBP
; 2D:       C3               RET
; 2E:       CC0A             BREAK 10                         ; error trap
; 30:       02               BYTE #X02
; 31:       19               BYTE #X19                        ; INVALID-ARG-COUNT-ERROR
; 32:       9A               BYTE #X9A                        ; RCX
; 33:       CC0A             BREAK 10                         ; error trap
; 35:       04               BYTE #X04
; 36:       08               BYTE #X08                        ; OBJECT-NOT-FIXNUM-ERROR
; 37:       FE1B01           BYTE #XFE, #X1B, #X01            ; RDX
; 3A:       CC0A             BREAK 10                         ; error trap
; 3C:       04               BYTE #X04
; 3D:       08               BYTE #X08                        ; OBJECT-NOT-FIXNUM-ERROR
; 3E:       FE9B03           BYTE #XFE, #X9B, #X03            ; RDI
NIL
</code></pre>

<p>主要な部分はここです。</p>

<pre><code>; 19:       48D1FA           SAR RDX, 1
; 1C:       488BF9           MOV RDI, RCX
; 1F:       48D1FF           SAR RDI, 1
; 22:       4801FA           ADD RDX, RDI
; 25:       48D1E2           SHL RDX, 1
; 28:       488BE5           MOV RSP, RBP
; 2B:       F8               CLC
; 2C:       5D               POP RBP
; 2D:       C3               RET
</code></pre>

<p><code>ADD</code>の他に無駄な命令がいくつかありますね。</p>

<p>SBCLはintの下位1bitをGCのときのタグとして使ってるのでアセンブラに渡す前に算術右シフト(<code>SAR</code>)して渡してます。
そして返るときはまた左シフト(<code>SHL</code>)してます。</p>

<p>その後の</p>

<pre><code>; 28:       488BE5           MOV RSP, RBP
; 2B:       F8               CLC
; 2C:       5D               POP RBP
; 2D:       C3               RET
</code></pre>

<p>は関数から返るときのイディオム(スタックポインタを復元してフラグをクリアして呼び出し元に戻る)です。</p>

<p>余談ですがLispマシンなどのタグマシンは下位ビットにあるタグを無視して計算出来るのでシフトが不要になります。なので速いんですね。</p>

<h1>シフトをなくす</h1>

<p>さっきは<code>signed-reg</code>を指定しました。つまり「（アセンブラの）intをくれ」と要求した訳です。
intの下位1bitは0なので足し算する分には別にシフトされなくても問題ありませんよね。シフトを殺しましょう。</p>

<p>さっきのコードの下にこれを足します。<code>add</code>は再定義しないと反映されないようでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">in-package</span> <span class="s">&quot;SB-VM&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-vop</span> <span class="p">(</span><span class="nv">vop-sample::add/v2</span><span class="p">)</span>        <span class="c1">; vop名は異なる</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:translate</span> <span class="nv">vop-sample::add</span><span class="p">)</span>          <span class="c1">; 関数名は同じ</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:policy</span> <span class="ss">:fast-safe</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:args</span> <span class="p">(</span><span class="nv">x</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">any-reg</span><span class="p">))</span>             <span class="c1">; any-regになってる</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">y</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">any-reg</span><span class="p">)))</span>            <span class="c1">; any-regになってる</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:arg-types</span> <span class="kt">fixnum</span> <span class="kt">fixnum</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:results</span> <span class="p">(</span><span class="nv">r</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">any-reg</span><span class="p">)))</span>         <span class="c1">; any-regになってる</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:result-types</span> <span class="kt">fixnum</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:generator</span> <span class="mi">3</span>                         <span class="c1">; コストをさっきより低くすると優先して使ってくれる</span>
</span><span class='line'>              <span class="p">(</span><span class="nv">move</span> <span class="nv">r</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nv">inst</span> <span class="nv">add</span> <span class="nv">r</span> <span class="nv">y</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">in-package</span> <span class="ss">:vop-sample</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">add</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">add</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>んで、ディスアセンブルしてみると</p>

<pre><code>VOP-SAMPLE&gt; (disassemble #'add)

; disassembly for ADD
; Size: 31 bytes. Origin: #x1004C2AB83
; 83:       488BD1           MOV RDX, RCX                     ; no-arg-parsing entry point
; 86:       4801FA           ADD RDX, RDI
; 89:       488BE5           MOV RSP, RBP
; 8C:       F8               CLC
; 8D:       5D               POP RBP
; 8E:       C3               RET
; 8F:       CC0A             BREAK 10                         ; error trap
; 91:       02               BYTE #X02
; 92:       19               BYTE #X19                        ; INVALID-ARG-COUNT-ERROR
; 93:       9A               BYTE #X9A                        ; RCX
; 94:       CC0A             BREAK 10                         ; error trap
; 96:       04               BYTE #X04
; 97:       08               BYTE #X08                        ; OBJECT-NOT-FIXNUM-ERROR
; 98:       FE1B01           BYTE #XFE, #X1B, #X01            ; RDX
; 9B:       CC0A             BREAK 10                         ; error trap
; 9D:       04               BYTE #X04
; 9E:       08               BYTE #X08                        ; OBJECT-NOT-FIXNUM-ERROR
; 9F:       FE9B03           BYTE #XFE, #X9B, #X03            ; RDI
NIL
</code></pre>

<p>はい。見事にSARとSHLが消えましたね。</p>

<h1>もう少し複雑な型を扱う</h1>

<p>アセンブラですし<code>(simple-array (unsigned-byte 8) (*))</code>(以下octets)を扱いたいですよね。とりあえず難しいことは考えずにoctetsの0番目の要素にアクセスしてみましょう。とはいっても<code>simple-array</code>は長さや要素の型の情報も持っていることが予想されるので少しデータを読み飛ばさないといけませんね。</p>

<p>その辺の計算が分からなかったのでsbclのソースからそれっぽいものを参考にしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">defknown</span> <span class="nv">access-simple-array-0</span> <span class="p">((</span><span class="kt">simple-array</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">8</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">movable</span> <span class="nv">flushable</span> <span class="nv">always-translatable</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">:overwrite-fndb-silently</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">in-package</span> <span class="s">&quot;SB-VM&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-vop</span> <span class="p">(</span><span class="nv">vop-sample::access-simple-array-0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:translate</span> <span class="nv">vop-sample::access-simple-array-0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:policy</span> <span class="ss">:fast-safe</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:args</span> <span class="p">(</span><span class="nv">x</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">descriptor-reg</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:arg-types</span> <span class="nb">*</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:results</span> <span class="p">(</span><span class="nv">r</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">unsigned-reg</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:result-types</span> <span class="nv">unsigned-num</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:generator</span> <span class="mi">4</span>
</span><span class='line'>              <span class="p">(</span><span class="nv">inst</span> <span class="nv">movzx</span> <span class="nv">r</span>
</span><span class='line'>               <span class="p">(</span><span class="nv">make-ea</span> <span class="ss">:byte</span> <span class="ss">:base</span> <span class="nv">x</span>
</span><span class='line'>                        <span class="ss">:disp</span> <span class="p">(</span><span class="nb">-</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">vector-data-offset</span> <span class="nv">n-word-bytes</span><span class="p">)</span>
</span><span class='line'>                               <span class="nv">other-pointer-lowtag</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">in-package</span> <span class="ss">:vop-sample</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">defvar</span> <span class="vg">*octets*</span> <span class="p">(</span><span class="nb">make-array</span> <span class="mi">4</span>
</span><span class='line'>                             <span class="ss">:element-type</span> <span class="o">&#39;</span><span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>                             <span class="ss">:initial-contents</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span> <span class="mi">13</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">access-simple-array-0</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">access-simple-array-0</span> <span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じになります。境界チェックとかはやってませんが許して下さい。</p>

<p><code>descriptor-reg</code>というのがポインタが入ってるレジスタっぽいです。<code>movzx</code>は8bitの値を64bitのレジスタに符号拡張しながらロードする命令です。</p>

<p><code>make-ea</code>というのがアドレッシングですね。<code>x</code>レジスタを起点として<code>(- (* vector-data-offset n-word-bytes) other-pointer-lowtag)</code>バイト(？ワード？)先のメモリ1byteを指します。</p>

<p>ディスアセンブルしてみましょう。みなさんもう慣れてきたと思うので主要部だけ抜き出します。</p>

<pre><code>; 65:       0FB65101         MOVZX EDX, BYTE PTR [RCX+1]      ; no-arg-parsing entry point
; 69:       48D1E2           SHL RDX, 1
</code></pre>

<p>短いですね。この<code>BYTE PTR [RCX+1]</code>が<code>make-ea</code>した値に対応します。<code>RCX</code>は<code>x</code>で<code>(- (* vector-data-offset n-word-bytes) other-pointer-lowtag)</code>の結果が1に現れてるんでしょう。補足しておくと、<code>EDX</code>と<code>RDX</code>は同じ場所を指します。32bitとして扱うときはE、64bitとして扱うときはRで指します。</p>

<p>さて、私はx86のアドレッシングモードなんて全然知らないのですがコードを見る限りもうちょっと複雑なアドレッシングが出来るようです。</p>

<p>配列のn番目にアクセスするコードが良い例のようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">defknown</span> <span class="nv">access-simple-array-n</span> <span class="p">((</span><span class="kt">simple-array</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">8</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span><span class="p">))</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">64</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">movable</span> <span class="nv">flushable</span> <span class="nv">always-translatable</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">:overwrite-fndb-silently</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">in-package</span> <span class="s">&quot;SB-VM&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-vop</span> <span class="p">(</span><span class="nv">vop-sample::access-simple-array-n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:translate</span> <span class="nv">vop-sample::access-simple-array-n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:policy</span> <span class="ss">:fast-safe</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:args</span> <span class="p">(</span><span class="nv">x</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">descriptor-reg</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">i</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">unsigned-reg</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:arg-types</span> <span class="nb">*</span> <span class="nv">unsigned-num</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:results</span> <span class="p">(</span><span class="nv">r</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">unsigned-reg</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:result-types</span> <span class="nv">unsigned-num</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:generator</span> <span class="mi">4</span>
</span><span class='line'>              <span class="p">(</span><span class="nv">inst</span> <span class="nv">movzx</span> <span class="nv">r</span>
</span><span class='line'>               <span class="p">(</span><span class="nv">make-ea</span> <span class="ss">:byte</span> <span class="ss">:base</span> <span class="nv">x</span>
</span><span class='line'>                        <span class="ss">:scale</span> <span class="mi">1</span>
</span><span class='line'>                        <span class="ss">:index</span> <span class="nv">i</span>
</span><span class='line'>                        <span class="ss">:disp</span> <span class="p">(</span><span class="nb">-</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">vector-data-offset</span> <span class="nv">n-word-bytes</span><span class="p">)</span>
</span><span class='line'>                               <span class="nv">other-pointer-lowtag</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">in-package</span> <span class="ss">:vop-sample</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">access-simple-array-n</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">access-simple-array-n</span> <span class="nv">x</span> <span class="nv">i</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>新たに引数<code>i</code>をとるようになったのと<code>make-ea</code>の引数に<code>:scale 1 :index i</code>が加わってます。</p>

<p>ディスアセンブルしてみましょう。</p>

<pre><code>; 98:       0FB6543901       MOVZX EDX, BYTE PTR [RCX+RDI+1]  ; no-arg-parsing entry point
; 9D:       48D1E2           SHL RDX, 1
</code></pre>

<p>アドレッシングに<code>+RDI</code>が加わりましたね。どうして<code>i</code>(<code>RDI</code>)を<code>RAS</code>しなくていいのか気になりますがまあ、とりあえず正常に動いてるようです。</p>

<p>おわかりかと思いますがアドレッシングが<code>x</code>をベースにして今までの定数オフセット+新たにレジスタで指定したオフセットになってます。</p>

<p><code>make-ea</code>に渡した<code>:index</code>は何か分かるとしても<code>:scale</code>が気になりますよね。<code>scale</code>を2にしてディスアセンブルしてみます。</p>

<pre><code>; 58:       0FB6547901       MOVZX EDX, BYTE PTR [RCX+RDI*2+1]  ; no-arg-parsing entry point
; 5D:       48D1E2           SHL RDX, 1
</code></pre>

<p>はい。インデックスを定数倍するようですね。</p>

<h1>SSEにチャレンジ</h1>

<p>インテルアーキテクチャにあるSSEとはStreaming SIMD Extensionsの略です。じゃあSIMDは何かというとSimple Instruction Mulitple Dataの略で、1命令で複数のデータを処理出来ます。</p>

<p>この「複数のデータ」というのは64bit2つや32bit4つなどを128bitにまとめて渡します。128bitの値なんてどうやって作るんだよって感じですがsbcl-1.1.8から入った<code>sb-ext:%make-simd-pack-*</code>が存在します。</p>

<pre><code>VOP-SAMPLE&gt; (%make-simd-pack-ub32 1 2 3 4)
#&lt;SIMD-PACK  01 00 00 00  02 00 00 00  03 00 00 00  04 00 00 00&gt;
</code></pre>

<p>こんな感じです。x86_64がリトルエンディアンだったのを思い出させる表記ですね。ub32の他にub64、single、doubleが存在します。</p>

<p>ストレージクラスも<code>*-sse-reg</code>というものがあるのでこれを使いましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">defknown</span> <span class="nv">simd-add</span> <span class="p">((</span><span class="nv">simd-pack</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">64</span><span class="p">))</span> <span class="p">(</span><span class="nv">simd-pack</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">64</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">simd-pack</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">32</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">movable</span> <span class="nv">flushable</span> <span class="nv">always-translatable</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">:overwrite-fndb-silently</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">in-package</span> <span class="s">&quot;SB-VM&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">define-vop</span> <span class="p">(</span><span class="nv">vop-sample::simd-add</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:translate</span> <span class="nv">vop-sample::simd-add</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:policy</span> <span class="ss">:fast-safe</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:args</span> <span class="p">(</span><span class="nv">x</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">int-sse-reg</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">y</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">int-sse-reg</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:arg-types</span> <span class="nv">simd-pack-int</span> <span class="nv">simd-pack-int</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:results</span> <span class="p">(</span><span class="nv">r</span> <span class="ss">:scs</span> <span class="p">(</span><span class="nv">int-sse-reg</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:result-types</span> <span class="nv">simd-pack-int</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:generator</span> <span class="mi">4</span>
</span><span class='line'>              <span class="p">(</span><span class="nv">move</span> <span class="nv">r</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nv">inst</span> <span class="nv">padddw</span> <span class="nv">r</span> <span class="nv">y</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">in-package</span> <span class="ss">:vop-sample</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">simd-add</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">simd-add</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>はい。こんな感じですね。<code>paddw</code>はparallel add wordですかね。これをディスアセンブルすると思ったより大きな命令になったので全部貼っときますね。</p>

<pre><code>VOP-SAMPLE&gt; (disassemble #'simd-add)

; disassembly for SIMD-ADD
; Size: 108 bytes. Origin: #x1006D64A21
; 21:       660F6FC2         MOVDQA XMM0, XMM2                ; no-arg-parsing entry point
; 25:       660FFDC1         PADDW XMM0, XMM1
; 29:       49896C2440       MOV [R12+64], RBP                ; thread.pseudo-atomic-bits
; 2E:       4D8B5C2418       MOV R11, [R12+24]                ; thread.alloc-region
; 33:       498D5320         LEA RDX, [R11+32]
; 37:       493B542420       CMP RDX, [R12+32]
; 3C:       7740             JNBE L2
; 3E:       4989542418       MOV [R12+24], RDX                ; thread.alloc-region
; 43:       498D530F         LEA RDX, [R11+15]
; 47: L0:   48C742F165030000 MOV QWORD PTR [RDX-15], 869
; 4F:       48C742F900000000 MOV QWORD PTR [RDX-7], 0
; 57:       660F7F4201       MOVDQA [RDX+1], XMM0
; 5C:       49316C2440       XOR [R12+64], RBP                ; thread.pseudo-atomic-bits
; 61:       7402             JEQ L1
; 63:       cc09             break 9                          ; pending interrupt trap
; 65: l1:   488be5           mov rsp, rbp
; 68:       f8               clc
; 69:       5d               pop rbp
; 6a:       c3               ret
; 6b:       cc0a             break 10                         ; error trap
; 6d:       02               byte #x02
; 6e:       19               byte #x19                        ; invalid-arg-count-error
; 6f:       9a               byte #x9a                        ; rcx
; 70:       cc0a             break 10                         ; error trap
; 72:       04               byte #x04
; 73:       32               byte #x32                        ; object-not-simd-pack-error
; 74:       fe1b01           byte #xfe, #x1b, #x01            ; rdx
; 77:       cc0a             break 10                         ; error trap
; 79:       04               byte #x04
; 7a:       32               byte #x32                        ; object-not-simd-pack-error
; 7b:       fe9b03           byte #xfe, #x9b, #x03            ; rdi
; 7e: l2:   6a20             push 32
; 80:       bac0854200       mov edx, 4359616                 ; alloc_tramp
; 85:       ffd2             call rdx
; 87:       5a               pop rdx
; 88:       80ca0f           or dl, 15
; 8b:       ebba             jmp l0
nil
</code></pre>

<p>なにやってるのやら。</p>

<h1>出来なかったこと</h1>

<p><code>PCMPESTRI</code>を使ってみたかったのですが扱いがトリッキーなので断念しました。具体的に言うと操作する値を格納するレジスタがEAXとECX固定なようなのです。
<code>:temporary</code>節で内部で使うレジスタも要求出来るようなのですが名指しでもらえるんですかね。</p>

<p>SSEの使い方とsimple-arrayから要素の配列を取り出す方法までは示したので誰かやって下さい。</p>

<p>参考資料いっぱい置いときますね。</p>

<p>VOPの使い方。最初の方に出てきたaddの最適化のやつとかも出てくる。(en)
: <a href="http://www.pvk.ca/Blog/2014/08/16/how-to-define-new-intrinsics-in-sbcl/">How to Define New Intrinsics in SBCL &ndash; Paul Khuong mostly on Lisp</a></p>

<p>SBCLのsimd-packの具体的解説(en)
: <a href="http://pvk.ca/Blog/Lisp/hacking_SSE_intrinsics-part_1.html">Hacking SSE Intrinsics in SBCL (part 1) &ndash; Paul Khuong mostly on Lisp</a></p>

<p>SBCLでVOPとSSEを使ってマンデルブロ集合を計算する(en)
<a href="http://www.pvk.ca/Blog/2013/06/05/fresh-in-sbcl-1-dot-1-8-sse-intrinsics/">Fresh in SBCL 1.1.8: SSE Intrinsics! &ndash; Paul Khuong mostly on Lisp</a></p>

<p>IntelのPCMPESTRIとかのマニュアル(en)
: <a href="https://software.intel.com/en-us/node/514244">Packed Compare Intrinsics</a></p>

<p>MicrosoftのPCMPESTRIのマニュアル。こっちの方が分かりやすい(en)
<a href="http://msdn.microsoft.com/en-us/library/bb531465.aspx">_mm_cmpestri</a></p>

<p>PCMPISTRIを使った<code>strlen</code>の実装例(ja)
: <a href="http://homepage1.nifty.com/herumi/prog/intel-opt.html">Intel optimization</a></p>

<p>PCMPESTRIを使ってHTTPパーサーを高速化した話。これをやりたかった。(en)
: <a href="http://blog.kazuhooku.com/2014/12/improving-parser-performance-using-sse.html">Kazuho&rsquo;s Weblog: Improving Parser Performance using SSE Instructions (in case of PicoHTTPParser)</a></p>

<h1>おわりに</h1>

<p>おつかれ様でした。たまには低レベルなことをやっても良いんじゃないでしょうか。</p>

<p>明日はnobkzさんで、Shenについてです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[require, ASDF, quicklispを正しく使う]]></title>
    <link href="http://KeenS.github.io/blog/2014/11/30/quicklisp/"/>
    <updated>2014-11-30T22:05:39+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/11/30/quicklisp</id>
    <content type="html"><![CDATA[<p>κeenです。最近のCommon Lispのパッケージ管理は<code>ql:quickload</code>しか知らないという方も多いのではないでしょうか。しかしそれだけでは機能が足りないこともあります。Common Lispには様々な管理システムがあるので整理しましょう。</p>

<!-- more -->


<h1><code>provide</code>, <code>require</code></h1>

<p>同じファイルを読み込まないための原始的なシステムです。Common Lispの標準の機能です。<code>(require 'foo)</code>がファイルをロードし、ロードされたファイル内で<code>(provide 'foo)</code>しておくと2回目以降の<code>(require 'foo')</code>はファイルを読まずにすぐさま返ります。</p>

<p>ここで問題なのが<code>require</code>がどこのファイルを捜しにいくかは処理系依存なところですね。なので生の<code>require</code>は使えないと思っておいた方が良いでしょう。</p>

<h1>ASDF 3</h1>

<p>Another Sysytem Defininion Facility。過去にはAnotherじゃないSysytem Defininion Facilityもあった模様。最新版は3系です。結構APIが変っているので必ず3の情報を捜しましょう。</p>

<p>この「System」というのが聞き慣れませんが、ASDFの<code>defsystem</code>で</p>

<ol>
<li>systemに含まれるファイルの定義</li>
<li>依存systemの記述</li>
<li>その他作者、ライセンス、バージョンなどの記述</li>
<li>systemのコンパイルやロード、テストなどの操作</li>
</ol>


<p>が可能です。ASDFはCにとってのmake + ldを標榜しています。Makefile的なものは(systemname).asdになります。</p>

<p><code>require</code>との統合もされており、ASDFを適切に設定することで<code>defsystem</code>されたsystemを<code>require</code>でロードすることが出来ます。このときASDFは処理系に依存せずにASDFのパスに従って.asdファイルを捜しにいきます。</p>

<p>また、ほとんどの処理系はASDFを標準添付していて、大抵<code>(require 'asdf)</code>すれば使えるようになっています。</p>

<p>尚、コンパイル後のファイルは処理系、バージョン毎に互換性がないので本来なら適切に管理する必要がありますが、ASDFが適切に~/.cache/common-lisp以下に管理してくれます。優秀ですね。</p>

<h1>quicklisp</h1>

<p>lispプロジェクトのインストーラと微妙にパッケージマネージャ的な役割をします。</p>

<p><a href="http://beta.quicklisp.org/quicklisp.lisp">http://beta.quicklisp.org/quicklisp.lisp</a> をダウンロードしてきてそのファイルを読み込んで<code>(quicklisp-quickstart:install)</code>すれば~/quicklisp/以下にquicklispがインストールされ、ロードされます。処理系を再起動したあとまたquicklispをロードするには~/quicklisp/setup.lispを<code>load</code>します。が、毎回それをやるのが面倒な人は<code>(ql:add-to-init-file)</code>しておけば処理系の初期化ファイルに~/quicklisp/setup.lispを読み込む処理が書き加えられます。</p>

<p>さて、このquicklispを扱う上で3つの概念を覚えておくと良いです。</p>

<p>dist
:    releaseの配布元。普通は&#8217;quicklisp&#8217;のみだがほかのdistを使うことも可能。自前のやつとか。新たなdistを追加したり削除したり出来る。gitのremoteをイメージすればよい。</p>

<p>release
:    quicklispがダウンロードしてくる単位。ライブラリの作者が登録するときの単位。複数のsystemをもつこともある。</p>

<p>system
:    ASDFのsystem。ユーザーが使うときの単位。</p>

<p>さて、quicklispを使うときは通常使いたいシステムを<code>ql:quickload</code>すればそのシステムと依存システムの含まれているリリースをダウンロード、展開、ロードまでしてくれます。</p>

<p>開発中はREPLを立ち上げているので「あ、このライブライリ使おう」と思ったら<code>ql:quickload</code>するだけで即座に使えるようになりますね。</p>

<p>quicklispのリリースは毎月下旬にアップデートされていて、毎月ちゃんと全てのライブラリが対応処理系で動くことがテストされています。なのでメンテナが居なくなったライブラリはドロップします。代わりにquicklispの作者がテスト出来ないライブラリは登録させてもらえなかったりします（cl-cudaとか）</p>

<h1>quicklispの問題</h1>

<p>既にCommon Lispのライブラリマネージャとしてデファクトスタンダード的位置を築きつつあるquicklispですが、私は結構不満があります。</p>

<ul>
<li>~/quicklisp/setup.lispを読み込むとquicklispの全てを読み込んでしまう: これには過去全てのバージョンのdistとreleaseとsystemのデータベース、HTTPクライアント、圧縮ファイルの解凍ライブラリなども含まれており、処理系の起動が非常に遅くなる</li>
<li>特にデータベースはファイルに書かれていても高速に読める形式なのに初期化時に毎回全ての内容をLispのハッシュに変換するという愚行をする。</li>
<li><code>(ql:add-to-init-file)</code>が推奨されているが、前述の通り処理系の起動が遅くなってしまう。特に、（インストーラではなく、インストール済みの）ライブラリマネージャとして使いたくてもインストーラの機能までロードしてしまう。結構メモリを食うしアプリケーションには要らない。</li>
<li>処理系に依っては初期化ファイルはlispファイルをスクリプトとして使うときは読み込まれないこともあるのでスクリプトには使えない。まあ、前述の通り使いたくもない。</li>
</ul>


<p>のでライブラリマネージャにはASDFが向いてるのですが、</p>

<ul>
<li>quicklispでインストールしたシステムはquicklispを一旦ロードするかASDFの設定をいじるかしなければASDFからは使えない</li>
<li>quicklispはシステムのダウンロード/インストールだけすれば良いものをロードまでする</li>
<li>要はASDFを隠す</li>
<li>じゃASDFのラッパーかというとロードしかせず、コンパイルやテストなどはしない</li>
</ul>


<p>など様々な問題があります。</p>

<p>一応quicklispの弁護をしておくと、Common Lispは他のスクリプト言語とはちょっと使い方が違って、</p>

<ul>
<li>初期化ファイルは大抵オレオレライブラリで埋め尽くされていてそもそも起動には時間がかかる</li>
<li>Emacsのように一度REPLを立ち上げたら滅多に落とさない</li>
<li>アプリケーションも基本的にはREPLの中で使う</li>
<li>起動時間を気にするなら初期化ファイルを全てロードした、コアファイルをダンプしておいて使う</li>
</ul>


<p>といった使い方をされることが多いのです。そのような人からしてみたら細々処理されるよりも起動時間とメモリは気にしないから速いやつをくれ、となるのです。</p>

<p>じゃあそれなりにCommon Lispを使う私が何故そうしないかというと</p>

<ul>
<li>立ち上げっぱなしというのが性に合わない。立ち上がっているものを見るとすぐに落としたくなる。EmacsのヘビーユーザーだがEmacsもすぐ落とす。</li>
<li>コマンドラインアプリケーションを作りたいため、起動時間が命になる。</li>
<li>私はSBCLの開発版を使っていて、コアファイルはすぐに無効になるためコアダンプはしない（意味がない）</li>
</ul>


<p>といった理由があります。これは初心者にも共通する部分があるんじゃないでしょうか。REPLを立ち上げっぱなしにはしないし「コアダンプ？なにそれ？エラー出してんじゃん」状態でしょう。</p>

<h1>ASDFを正しく使う</h1>

<p>ということでquicklispをあまり使わない方法を紹介します。</p>

<p>前述の通り、quicklispでインストールしたシステムはquicklispを一旦ロードするかasdfの設定をいじるかしなければasdfからは使えません。具体的に言うと、</p>

<ul>
<li>ASDFのデフォルトパスは~/common-lisp以下</li>
<li>quicklispのシステムのインストールパスは~/quicklisp/dists/(dist name)/software/以下</li>
</ul>


<p>なので~/quicklisp/dists/以下にパスを通します。少し無駄なディレクトリもパスに含まれてしまうので気にする人はそれぞれのdistについて~/quicklisp/dists/(dist name)/software/にパスを通しましょう。</p>

<p>因みに拙作の<a href="https://github.com/KeenS/CIM">CIM</a>は~/.cim/quicklisp以下にquicklispをインストールするのでCIM使いの方は~/.cim/quicklisp/dists/ですね。~/quicklispの方が混乱少ないかなあ。</p>

<p>さて、ASDFの設定は<a href="http://common-lisp.net/project/asdf/asdf.html#Configuring-ASDF-to-find-your-systems">公式マニュアル</a>を参照すれば良いのですが一応実際のものを書いておくと</p>

<p>~/.config/common-lisp/source-registry.conf に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="ss">:source-registry</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:tree</span> <span class="s">&quot;~/quicklisp/dists/&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:tree</span> <span class="p">(</span><span class="ss">:home</span> <span class="s">&quot;Lisp/&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="ss">:INHERIT-CONFIGURATION</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>を書けばOKです。2つめのLisp/は私がCommon Lispファイルを置いているディレクトリですね。この書き方だとquicklispより自分のLispライブラリを優先して読みにいきます。開発版を使いたいときとかむしろ開発をするときとかに必須です。この設定をミスるといくら開発してもロードされてるのはリリース版で、機能が動かないとかの地獄を見ます。</p>

<p>ここまでくれば</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;asdf</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;hoge</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすればquicklispでインストールしたライブラリをロード出来ます。</p>

<h2>require以外のASDFの使い方</h2>

<p>バージョンに依って使い方が異なるのですが、3系だと<code>(asdf:xxx-system 'hoge)</code>などとします。具体的には</p>

<ul>
<li><code>(asdf:load-system 'hoge)</code> ( = <code>(require 'hoge)</code>)</li>
<li><code>(asdf:test-system 'hoge)</code> (テストがあるときのみ)</li>
<li><code>(asdf:compile-system 'hoge)</code></li>
</ul>


<p>を覚えておけば良いでしょう。他にもいくつか操作があるようですが私は使ったことがないです。<code>asdf:locate-system</code>は名前的に便利そうではあるんですけどね。</p>

<p>開発するときはまず.asdファイルを書いておいて(あるいはcl-projectから生成して)、<code>(require 'hoge)</code>で始めて書いていき、ある程度進んだらテストを書いてテストの項目を.asdファイルに書き足して<code>(asdf:test-system 'hoge)</code>、それなりに動くようになったら<code>(asdf:compile-system 'hoge)</code>してコンパイルの様子を見たりコンパイル後のベンチマークを取ったりします。</p>

<h2>quickloadを成仏させる</h2>

<p>これでロードの処理はASDFで全てカバー出来るようになりました。じゃあquickloadのロード機能は邪魔ですね。quicklispをインストーラとしてのみ使いましょう。</p>

<p>まず処理系の初期化ファイル(sbclなら~/.sbclrc)から</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="c1">;;; The following lines added by ql:add-to-init-file:</span>
</span><span class='line'><span class="o">#-</span><span class="nv">quicklisp</span>
</span><span class='line'><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">quicklisp-init</span> <span class="p">(</span><span class="nb">merge-pathnames</span> <span class="s">&quot;~quicklisp/setup.lisp&quot;</span>
</span><span class='line'>                                       <span class="p">(</span><span class="nb">user-homedir-pathname</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">probe-file</span> <span class="nv">quicklisp-init</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">load</span> <span class="nv">quicklisp-init</span> <span class="ss">:verbose</span> <span class="no">nil</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>を削除します。quicklispを使いたいときだけ<code>(load "~/quicklisp/setup.lisp")</code>します。そして欲しいシステムをインストールするには</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">ql::recursively-install</span> <span class="s">&quot;foo&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>します。quickloadに比べて爆速です。ここにきて名前が文字列な上にexportされてないシンポル参照してますね。気持ち悪いという方は大人しくquickloadしましょう。</p>

<p>拙作のCIMにはこれをコマンドラインから行なう<code>ql install</code>なるコマンドが存在します。</p>

<h1>最後に</h1>

<p>quicklispが嫌いなのは私の好みですがASDFを正しく使えて損はないと思うので知らなかった方々は是非試してみて下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lisp meet up #22でLTしてきた]]></title>
    <link href="http://KeenS.github.io/blog/2014/11/28/lisp-meet-up-number-22deltsitekita/"/>
    <updated>2014-11-28T23:17:12+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/11/28/lisp-meet-up-number-22deltsitekita</id>
    <content type="html"><![CDATA[<p>κeenです。先日 Lisp Meet Up #22 でLTしてきたので報告です。</p>

<!-- more -->


<p>LTは事前に登録されたのが2件、私が当日17時くらいに登録したの1件で、参加は20人募集の内20人応募、20人参加と最近中々の人気を見せてます。</p>

<h1>Common Lispで高速なHTTPパーサーを書く(仮)</h1>

<p>LT1件目は深町さんより、「Common Lispで高速なHTTPパーサーを書く(仮)」。fast-httpを作ったときの話。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/42153462" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/fukamachi/writing-a-fast-http-parser" title="Writing a fast HTTP parser" target="_blank">Writing a fast HTTP parser</a> </strong> from <strong><a href="//www.slideshare.net/fukamachi" target="_blank">fukamachi</a></strong> </div></p>

<p><a href="https://docs.google.com/file/d/0B_H0_8eqWuVARnhncWZpRFdUOWM/preview">動画</a></p>

<p><a href="http://blog.8arrow.org/entries/2014/10/23">深町さんのブログ</a>に書かれていることの他、fast-httpが高速になるまでの経緯や実装方針などの話もありました。</p>

<p>最初ベースにしたnode.jsのHTTPパーサ、http-parseは状態を持っていて、1文字読む毎に状態を保存していた。次にベースにしたpicohttpparseは状態を持たず、HTTPリクエストが全部届く前にパースを始めてしまった場合はあきらめて最初からパースするようにしていた。fast-httpは1行パースする毎に状態を保存するようにした。など。</p>

<p>もう一つ、http-parseは<code>while</code>ループの中に巨大な<code>case</code>文があって、現在の状態で<code>case</code>でディスパッチし、その節の中で読んだ文字に依って現在の状態を変え、またループで先頭に戻って状態に依ってディスパッチするという手法だったそうです。Common Lispの場合は<code>case</code>が全て<code>(cond ((eql ..) ....) ...)</code>に展開されて遅い<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>ので<code>while</code>と<code>case</code>じゃなくて<code>tagbody</code>と<code>goto</code>で実装したそうです。</p>

<p>この手法は一般にDirect(Navive) ThreadingだとかThreaded Codeだとか呼ばれています。主にバイトコードインタプリタを実装する時にバイトコードに依るディスパッチの部分で使われるようです。Rubyの解説が丁寧だったようなので参考資料として置いておきます。</p>

<p><a href="http://magazine.rubyist.net/?0008-YarvManiacs">Rubyist Magazine &ndash; YARV Maniacs 【第 3 回】 命令ディスパッチの高速化</a></p>

<p>会場からはアーキテクチャ依存の最適化はしないのかとの質問がありました。SBCLにはインラインアセンブラであるVOPなるものが存在するのでSIMD命令使えば、とかいう怖い話ですね。</p>

<h1>symbol tree diff</h1>

<p>LT2件目はchikuさんより「symbol tree diff」。chikuさんが以前から取り組んでいるプログラムのdiffを構文レベルでとる話の進捗。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/42160384" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/samugari/symbol-treediff" title="Symbol tree-diff" target="_blank">Symbol tree-diff</a> </strong> from <strong><a href="//www.slideshare.net/samugari" target="_blank">samugari</a></strong> </div></p>

<p><a href="https://docs.google.com/file/d/0B_H0_8eqWuVARUoxVGtiMlFrRVU/preview">動画</a></p>

<p>diff自体はとれるようになったようですが見せ方に問題があり、見易い形式を模索中のようです。会場に見易い形式は何か投げ掛けましたが良い案を見付けるのは難しいようです。</p>

<h1>Semantic S式</h1>

<p>私から「Semantic S式」。括弧が多い方が嬉しいこともあるよねーというゆるい話。
<a href="http://keens.github.io/slide/semantic-sshi.html">Semantic S式 | κeenのHappy Hacκing Blog</a></p>

<p><a href="https://docs.google.com/file/d/0B_H0_8eqWuVAQms2QkZDcnZfVlU/preview">動画</a></p>

<p>会場からは半分同意、半分ツッコみたいとの反応が。plistをリテラルから<code>getf</code>するやついないだろ、とか。</p>

<h1>懇親会</h1>

<p>私の発表で21時あたりだったのでそのまま解散して懇親会。隣にLand of Lispを読んでLispに興味持ってLispの授業をとってる方がいたのでどの本が入門に良いかなど。</p>

<p>VOPの話の続きもしました。どうしても資料がないのがネックだよねー、と。私の知っているのは</p>

<p><a href="http://www.pvk.ca/Blog/2014/08/16/how-to-define-new-intrinsics-in-sbcl/">How to Define New Intrinsics in SBCL &ndash; Paul Khuong mostly on Lisp</a></p>

<p>や</p>

<p><a href="http://pvk.ca/Blog/Lisp/hacking_SSE_intrinsics-part_1.html">Hacking SSE Intrinsics in SBCL (part 1) &ndash; Paul Khuong mostly on Lisp</a></p>

<p>かな。日本語のやってみた系だとg1さんの</p>

<p><a href="http://g000001.cddddr.org/2011-12-08">#:g1: SBCLでVOPを使ってみよう</a></p>

<p>あたり。</p>

<h1>その他</h1>

<p>テンプレートエンジンを作ってるって以前深町さんに話してたら「まだ出来ないんですか？」とさんざん煽られました。はい。頑張ります。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><code>cond</code>は先頭から順番に比較する仕様です。<code>case</code>は<code>cond</code>に展開されることが仕様で定められていた筈。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#isucon で学生賞二連覇してきた]]></title>
    <link href="http://KeenS.github.io/blog/2014/11/09/isucondexue-sheng-shang-er-lian-ba-sitekita/"/>
    <updated>2014-11-09T01:06:24+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/11/09/isucondexue-sheng-shang-er-lian-ba-sitekita</id>
    <content type="html"><![CDATA[<p>κeenです。@nemunemu3desuさん（ねむさん）、@cocodripsさん（くーむさん）とチーム「(ρ_&ndash;)/超銀杏バスターズ&#92;(･ω･ o)」で<a href="http://isucon.net/">ISUCON4</a>で学生賞とってきた。二連覇わーい。</p>

<!-- more -->


<p>※2014-11-09 16:50 ちょっと加筆修正しました</p>

<p>やったこと</p>

<h1>本番前</h1>

<p>なにもしなかった。しかも前日に体調崩して簡単な打ち合わせも欠席という状態。結局前回と同じく私インフラ、ねむさんアプリ、くーむさんDB。</p>

<h1>当日</h1>

<h2>朝</h2>

<p>起床成功。</p>

<h2>競技開始〜昼御飯</h2>

<p>くーむさんにssh、ねむさんにgitレポジトリの設定してもらって私はcapistranoの設定。capistrano触るのは去年のisucon以来でうんうん言いながらやってた。</p>

<p>rack-line-profをしかけてもらってNginXでjsとcss返してベンチ走らせるもなんか動かないしでつまる。運営からベンチに障害があるとのアナウンスがきてローカルで動かすもエラーが出るわプロファイル結果出ないわ。</p>

<p>foremanが死んでなかったっぽいことが判明したりとちょっと前進するもエラーは残る。</p>

<p>しばらくにらめっこしてもエラーとれないのでとりあえず昼御飯食べながらプロファイル結果見て作戦会議。ここ遅いよって言われて見てみたらrubyからmp4返してたので第一段はそこをWebDAVサーバーに置くことに。因みにエラーの原因は後にline-profのバグだったことが判明。</p>

<p>1号サーバーだけCPUが少ないので3号サーバでリクエスト受けて動画のPOSTは1号サーバーで動いてるWebDAVサーバーにスルーパス、GETはリダイレクトな感じにしよう。私がWedDAVサーバー、ねむさんがアプリ、くーむさんは引き続きアプリ読んで次のボトルネック解析。</p>

<p>因みになんで1号サーバーをWebDAVにしたかというと次の手で2号サーバーもフロントにしたかったから。</p>

<h2>昼御飯後〜15、16時くらい？</h2>

<p>静的ファイルならlighttpdかなと思ってWebDAV設定するもyumで入れたやつはWebDAV用にビルドされてなかった。結局NginXにした。</p>

<p>lighttpd、一瞬で消え去ったと思ってる方も居るかと思いますがRaspberry Piでも元気に動いてくれる良い子なんですよ！！</p>

<p>ねむさんはWebDAV叩くの初めてみたいで苦戦してたり私の設定ミスもあったりでようやく動く。これでスコアめっちゃ上がる。</p>

<blockquote class="twitter-tweet" lang="ja"><p>4位浮上うぇーーーーーい <a href="https://twitter.com/hashtag/isucon?src=hash">#isucon</a></p>&mdash; κeen (@blackenedgold) <a href="https://twitter.com/blackenedgold/status/530996733145149440">2014, 11月 8</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>社会人相手に一時的に4位を取ったのは嬉しかった。</p>

<p>どうやらネットワーク帯域を全部埋めたよう。</p>

<h2>16時以降</h2>

<p>くーむさんの分析でログをファイルに書き出してる部分がめっちゃ無駄&amp;フロントの2台化を邪魔するのでどうにかしようとの話になる。最初jsonをシリアライズしてるからMongoDB、いや、やっぱ安心と信頼のMySQL、いや、やっぱ既に動いてるRedisと言って結局MySQLに落ち着く。2台からアクセスが来るので1号サーバに置く。</p>

<p>くーむさんがねむさんにデータベーススキーマの設計とか説明しつつねむさんが実装、私がMySQLのリモートログインとかその他DB全般の設定をする。よく考えたらねむさんPythonアイドルの女子大生とペアプロしてるぞ。</p>

<p>しかし結果間に合わず。うーむ。</p>

<h2>最後</h2>

<p>ベンチマーク毎にWebDAVにファイルが溜っていくのでどうにかしよう。今までは手動削除してたけど本番計測下手したらこけるんじゃねって不安。アプリの初期化API内でWebDAVサーパーのファイルを全部削除しようとするもなんか拒否られる。設定ミスってたかなあ。</p>

<p>結局CGI(シェル)スクリプトで叩くという荒技。レスポンスが500なのは御愛嬌。しかもNginXがfastCGIしかサポートしてないのでNginXからApacheにフォワードしてからApacheがCGI起動という曲芸のような仕様。MySQLが間に合えばこのシェルスクリプトにDBの初期化も入れるつもりだった。lighttpdならこんなことにはならなかったのに…</p>

<p>Unicornのワーカー数とかベンチマークのワークロード数とかいじってみるも測定誤差がめっちゃ大きくて参考にならず、4位に浮上したときのパラメータで挑む。</p>

<h1>結果</h1>

<p>タイトルにあるように学生賞。全体は12位で一応真ん中よりは上。賞金GET!無料 VPS GET!!しかもVPSはTECHORUS社長の一声で半年から1年になりました。TECHORUS++++</p>

<p>懇親会で@tagomorisさんに学生チームで帯域を埋めるのは大したもんと褒められた。ヤッター。</p>

<h1>反省</h1>

<p>個人的には自由奔放すぎた。もうちょっと協調的だったら、とかREADMEくらい書いたら、とかあった。あと私はインフラ担当だったからどのミドルウェアがどのログ管理してて、っていうのを把握してたけど他の二人は把握出来てないことを把握してなかった。毎回rubyのログはどこにあるんですかとか聞かれてた。Capistranoとか結局私しか使えてなかった。</p>

<p>チーム全体では最初ごたごたし過ぎた所為で最後MySQL入れるのが間に合わなかったのと静的ファイルをキャッシュしてなかったねっていうの。静的ファイルをキャッシュしようとしたらまぐれでCache-Control設定したかもしれない（実際2位のチームがそうらしい）。sinatraをproductionモードするのを忘れないって競技中にHangoutに書いたのに忘れてた。Unixドメインソケットも使ってなかった。最後焦りすぎたね。</p>

<h1>最後に</h1>

<p>私は今年で学生枠で出るのは最後でした。来年からは猛者犇めく一般枠での参加になります。予選突破が大きな目標ですね。出来れば次回はCommon Lispで出たい。</p>

<p>私のインフラ周りの知識や経験はほぼISUCONの経験を通して得られたもので、一年ちょっと前のSQLも見たことない自分に比べるとずいぶん成長したなと思います。LINE、COOKPAD、TECHORUSの方々、運営お疲れ様でした。本当にありがとう御座います。来年も宜しくお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCの話]]></title>
    <link href="http://KeenS.github.io/blog/2014/10/26/gcfalsehua/"/>
    <updated>2014-10-26T19:13:45+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/10/26/gcfalsehua</id>
    <content type="html"><![CDATA[<p>#関数型なんたら でGCの話を聴いて、<a href="http://www.pllab.riec.tohoku.ac.jp/papers/icfp2011UenoOhoriOtomoAuthorVersion.pdf">SML#のGCの論文</a>を読んで色々感じたのでエントリー。</p>

<!-- more -->


<h1>Snapshot GC</h1>

<p>まず、湯浅先生のSnapshot GC (<a href="http://seesaawiki.jp/w/author_nari/d/GC/extend/%A5%B9%A5%CA%A5%C3%A5%D7%A5%B7%A5%E7%A5%C3%A5%C8%B7%BFGC">解説</a>)。並列、並行、インクリメンタルにGCが出来る。恐らく一番性能が出るとのこと。解説ではmark &amp; sweepだけど私が聴いたのはCopyingだった。</p>

<p>勿論並行にするにはライトバリアが必要なんだけどその辺にまつわる話。並行じゃなくても世代別GCでもライトバリアが必要になるからその辺も頭に入れて聴いてほしい。Copyingはアロケーションが鬼のように速いのが特徴。<code>malloc</code>の感覚でメモリ確保が重いとか思ってると感覚が狂う。なので新たなオブジェクトを作るコストは非常に低い。そこにオブジェクトの変更にはライトバリアが付くとなると、大きくないオブジェクトの場合 <strong>オブジェクトを変更するより新たに作った方がコストが低くなる</strong> 。一応言っておくと、Copying GCの負荷は <em>生きている</em> オブジェクトの数に比例するのでゴミオブジェクトを大量に作ったところでそんなにGCの負荷は高くならない。勿論、GCの頻度は上がってしまうが。それも世代別GCなら軽いGCが走るだけなので回数が増えてもそんなに負荷にはならない。</p>

<p>つまるところ <strong>関数型スタイルでプログラムを書いた方がパフォーマンスが上がる</strong> ことがある。素晴しい。逆にこのような理由から関数型言語ではCopying GCを使うことが多い。</p>

<p>ただ、全ての場合で速くなる訳ではない。Copying GCはオブジェクトを移動するため、オブジェクトのアドレスが変わる。普通の参照ならGCのアルゴリズムが書き換えてくれるのだがそうはいかないのがハッシュ。ハッシュは多くの場合オブジェクトのアドレスをハッシュ値に使うため、GCが走ったらハッシュ値の再計算が必要になる。しかもハッシュの操作には破壊的なものが多いため、ライトバリアの影響も受ける。その場合、 <strong>ハッシュマップよりもツリーマップの方がパフォーマンスが出る</strong> ことがある。勿論、アルゴリズムのオーダが違うので要素数がケタ違いに大きくなるとハッシュに軍配が上がるが、通常そこまで要素を入れない。ようやく関数型言語でツリーマップが使われる理由が分かった。</p>

<h1>Bitmap GC</h1>

<p>関数型言語と相性の良いCopying GCだけど問題もある。Stop the Worldの話は世代別化やらそれこそSnopsht GCでどうにでもなるからそれはいい。Copying GCに本質的な問題。オブジェクトのアドレスの問題。GCが走ると現在のポインタが無効になる。処理系内部だけならまだ開発者が頑張れば良いんだけどC拡張を許すとそうもいかない。普通のポインタの問題だけじゃなくて構造体にポインタがあったら、とかそもそも外部ライブラリの内部のポインタをとか考えてるとどこかで割り切る必要がある。</p>

<p>そのためユーザにC拡張を気持ち良く使わせようと思うとCopying GCではつらい。Mark &amp; Sweepが現実的な選択肢になる。が、そうすると今度はパフォーマンスに問題が出る。特にフラグメント化の問題は関数型スタイルが天敵である。じゃあ、Mark &amp; Sweepの性能を改善しようというのがBitmap GC。</p>

<p>概要はMark &amp; Sweepがオブジェクトにマークを付けるのに対してオブジェクトとマークを別にしてマークだけbit列で管理すると局所性が上がって良いよねというもの。詳しくは最初に上げた論文を参照して欲しいが一応解説。</p>

<p>局所性が上がるとはいっても単にキャッシュが効くとかではない。ビット列になることでCPU命令で操作出来るようになって$O(n)$が$O(n/32)$になったりする。そして何より、Mark &amp; SweepじゃなくてSweep &amp; Markになる。Sweepはビット列を0で埋める論理削除。ほぼ一瞬。なので実質Markのコストしかかからない。</p>

<h2>構成</h2>

<p>勿論、ただのbit列でオブジェクトの生死を管理するにはヒープをサイズ毎に用意する必要がある。8bitのオブジェクト用のサブヒープ、16bitのオブジェクト用のサブヒープ…という風に。そしてそれぞれのヒープ毎にビットマップをつける。ただそれだと無限に大きいサイズのヒープが必要になるのでどこかで切ってそれ以降は普通のMark &amp; Sweepで管理するらしい。因みにSML#では4096bitが上限。32bit専用アーキテクチャなので64bitだと少し違うのかもしれない。以下、32bitアーキテクチャを仮定する。64bitでも適切に読み替えれば問題ない。</p>

<p>サブヒープはセグメント列とアロケーションポインタからなる。アロケーションポインタは次にアロケートすべき場所を差す(セグメント、ブロック、bitmap tree(後述)の情報)。</p>

<p>セグメントはオブジェクト数、ブロック列、ビットマップ、作業領域を持つ。ブロックというのが実際のオブジェクトが入る場所。8bitのサブヒープなら8bitのオブジェクトが入る。1セグメントに含まれるブロックの数は事前に決められている。要はコンパイル時なり起動時なりのパラメータになる。勿論、サブヒープ毎にブロック数をいじることになる。</p>

<p>ビットマップはただのビット列ではない。ただのintの列にするといくらCPU命令を使っても次の空いている場所を捜すのに$O(n/32)$かかってしまう。そこでbitmap treeで管理する。bitmap treeは親ビット列のi番目のビットが1のとき、i番目の子ビット列がfullである。ここでfullとは末端なら対応するブロックが使われている、それ以外なら子ビット列が全て1であるということである。これで次の空いているブロックを$Ω(log_{32} n)$で見付けることが出来る。同じワード内にあって適切なCPU命令があれば$O(1)$で済む。</p>

<p>アロケーションは先に出てきたアロケーションポインタの先が使われているか判断して、空いてれば先にデータを書き込んでアロケーションポインタをインクリメントするこのとき、特にbitmap treeは変更しない。空いてなければ空きブロックを捜す。空いてなければ次のセグメントに移って繰り返す同じ操作を行なう。最後のセグメントならセグメントプールに新しいセグメントを要求する。それももらえなければGCが走る。この辺はホットスポットらしいので色々テクニックが詰まっている。詳しくは論文を参照して欲しい。</p>

<p>GCは先に述べたように全てのサブヒープの全てのセグメントのbitmap treeを0で埋めることから始まる。そしてこれでSweep完了。</p>

<p>Markはまずrootノードについて、対応するbitmap treeを1にして、セグメントのオブジェクト数をインクリメントし、作業領域のトレーススタックに積む。あとはトレーススタックの中身の参照先をを順に同様に処理していけば良い。既にMarkされているオブジェクトは単に無視する。空になったセグメントはセグメントプールに返して、fullなセグメント(オブジェクト数=1セグメント毎のブロック数 なセグメント)はセグメント列の先頭に持ってくればアロケート時に無駄に探索されることはない。そしてアロケーションポインタを最初の空きブロックを差すようにすれば良い。</p>

<p>オブジェクトをサイズ毎に管理することでSweepを論理削除で済ませているところが良い。</p>

<h2>世代別化</h2>

<p>論文には世代別化の話もある。ライトバリアが必要なのは一緒だけど世代の管理が面白かった。安直には世代毎にサブヒープを分ける方法が思い付くが、それだとオブジェクトの移動が発生する。論文では世代毎にbitmap treeを持っている。ある世代のbitmap treeはその世代とそれより古い世代全ての生きているオブジェクトのbitmapになっている。</p>

<p>ある世代をsweepしたければ一つ古い世代のbitmap treeで上書きすれば良い。</p>

<p>ある世代のMarkは生存回数をインクリメントし、その世代のbitmap treeにMarkする。生存回数が閾値を越えたら上の世代にもMarkする。</p>

<p>全て完了したら若い世代達にも反映する(どう反映するかは論文には載ってない。差分をとって…とかかな？)。面白いのはある世代狙い撃ちでGC走らせられる点。あるいはいくつかの世代でも可能だろう。多くのアルゴリズムはある世代&#8221;以下&#8221;な気がする。これによって、マイナーGCでダメならミドルGCして、それでもダメならメジャーGCしてってなってたのが若年、中年、高年で別々に可能になる。まあ、ライトバリアの数がものすごいことになるからやらないだろうけど。なんでかっていうと若い世代から古い世代への参照もトレースする必要が出てくるから。論文に詳しく載ってないのはそんなに多くの世代を作っても現実的でないからだろう。勿論、ある世代以下を全てsweepも出来るので普通はそうする筈。</p>

<h2>リメンバーセットとライトバリア</h2>

<p>さて、さっきからライトバリアの話は出てたのに具体的になんなのかが出てこなかった。</p>

<p>世代別GCでは、マイナーGCが動くときに旧世代から新世代への参照があればその新世代のオブジェクトは生きているのでマークしなければならない。その「参照されている」ことを覚えておくのがリメンバーセット。GCされた後どうなるかは資料が見付からなかったけど旧世代に移ったものやGCされたものを取り除くんじゃないかな。</p>

<p>ライトバリアは調べたところ、多義的である。オブジェクトの参照を変更するときにごにょごにょするもの全般をライトバリアと呼んでいるようだ。Snapshot GC(並行GC)の場合はマーク中に変更された参照の先のオブジェクトもマークしていくことのようだし、RGenGC(インクリメンタル GC)はマーク中に変更された参照の元オブジェクトをグレーにすることのようだし、世代別GCではさらに色々意味がある。</p>

<p>世代別GCでのライトバリアは、全ての参照を変更する操作にフックして動く。そしてリメンバーセットを更新する。そこまでは皆共通している。そこからは、</p>

<ul>
<li>旧世代オブジェクトから新たに参照された新世代オブジェクトをリメンバーセットに加える</li>
<li>変更されたオブジェクトをリメンバーセットに加える</li>
<li>変更されたオブジェクトを、旧世代オブジェクトならリメンバーセットに加える</li>
</ul>


<p>などのバリエーションがある。それ以外にもありそう。尚、どれも正確ではない。つまり本来なら死んでいるオブジェクトも生き残る可能性がある。</p>

<p>正確にやろうと思えばリメンバー&#8221;マップ&#8221;を用意し、[新世代オブジェクト]&ndash;>[旧世代からの参照数]を保持し、参照カウントを行なえばいけると思う。</p>

<p>そこまでやらないのは性能に問題があるからかな。あとそもそも世代別GC自体正確にはオブジェクトを回収しないから正確にやってもあまり意味がないのもある。</p>

<h2>Sticky Mark世代別化</h2>

<p>Sticky Mark世代別GCというのは世代別GCを世代2つ、生存回数の閾値1とするときの簡単な実装方法。本当に簡単で、前回のMarkを残しておけば良い。それが旧世代の目印になる。あとはライトバリアとリメンバーセットを用意するだけ。元々Markのときに既にMarkされているオブジェクトはスルーされるのでアルゴリズムはほぼ変更が要らない。普通のMark &amp; Sweepでも出来るし、Bitmap GCでもアロケーションのときにbitmap treeをいじってないのでbitmap treeを0にする処理をしなければ良い。</p>

<p>さらに、リメンバーセットに関しても簡単になる。全てのオブジェクトが旧世代になるのだからリメンバーセットはクリアするだけで良い。あるいはGC毎に消えてしまうデータに格納してしまっても良い。SML#ではトレーススタックに積むことでリメンバーセットとしているようだった。何も考えなくてもGCのときにルートノードとして扱われる。重複判定に関しては読み解けなかった。</p>

<p>以下、書いてあるところの引用。最初の this factというのはリメンバーセットについて簡単になるということ。Tworkというのが作業領域。</p>

<blockquote><p>Taking advantage of this fact, we allocate a re-
membered set in the collector’s trace stack. As mentioned before,
our trace stack is implemented as a linked list using <code>Twork</code> work
areas. This is done by assigning a unique pointer slot in <code>Twork</code> to
each object. This implementation allows us to determine whether
a given object is already in the list or not by checking whether
the pointer is non-null. This automatically eliminates duplication
in the remembered set. A write barrier can then be incorporated
in the generational collector as follows. A write barrier code takes
a young object that is to be referred from the old generation due
to mutation, and marks it and pushes it to the trace stack. Minor
collector simply traces objects using the trace stack whose initial
contents is the remembered set</p></blockquote>

<p>誰か分かる人教えて下さい。</p>

<h2>複数mutater対応</h2>

<p>要はアプリケーションでスレッドを使ったときの話。1スレッドにつき1セグメント割り当てて新たなセグメントを確保するときだけロックとればアロケーション速いよねって言ってる。GCはStop the Worldしないようにするとか言ってるけど出来るのかな。</p>

<h2>パフォーマンス</h2>

<p>Bitmap GC、sticky bit世代別Bitmap GC、シンプルなCopying GC、2世代、5世代の世代別Copying GCでの比較が載ってる。Copying GCは2世代が最もパフォーマンスが良く、世代別Bitmap GCもそんなに負けてない。少くともシンプルなCopying GCには勝ってる。アロケーションは及びもつかないものの、世代別Bitmap GCはGCのStop the Worldは圧倒的に短いみたい。</p>

<h1>picrinの話</h1>

<p>picrinのGCは超シンプルなMark &amp; Sweep。んで、picrinのボトルネック。どうにかしたい。先述の理由からMark &amp; Sweepなのは維持なんだけどどう拡張しようねという話。</p>

<p>ライトバリアさえ実装してしまえばSticky Markで簡単に世代別化出来る。もうちょっと言うとライトバリアだけのデバッグが出来る。そしてまともな世代別化につながる。でもライトバリア->Bitmap化だとライトバリアも書き換える必要が出てきてあまり宜しくない。</p>

<p>Bitmap化すれば速くなるっぽい。が、メモリ管理を大幅に書き換える必要がある。特にサイズ別に管理するところ。でもそこからさらにSticky Markとかでさらに拡張可能。</p>

<p>うーん。個人的にはBitmap化してみたいんだけど完全に独自メモリ管理になっちゃうからなー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#関数型なんたら で喋ってきた]]></title>
    <link href="http://KeenS.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita/"/>
    <updated>2014-10-26T17:14:10+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/10/26/number-guan-shu-xing-nantara-nican-jia-sitekita</id>
    <content type="html"><![CDATA[<p>κeenです。昨日<a href="http://connpass.com/event/8634/">函数型なんたらの集い</a>に参加してきたので報告/感想です。</p>

<!-- more -->


<p>会場提供はドワンゴということでトークはニコ生に流された模様。ちらっと覗いてみたらLinuxでも見れましたね。いつのまにかFlashのバグ直ってたんですね。
とはいえ私自身のトーク中のコメントが見れなかったのであまり意味はないのですが…</p>

<p>プレミアム会員は放送後7日は生放送の内容を見れるそうですね。見れる方々は<a href="http://live.nicovideo.jp/gate/lv196879029">コチラ</a>からどうぞ。次回からはタイムシフト予約しておこう。</p>

<h1>話した内容</h1>

<p><a href="http://keens.github.io/slide/c6h6-plus-hno3.html">C6H6+HNO3</a>というタイトルで、picrinのbenzとnitrosについて。本当はnitrosの依存関係解決器sulfuricを完成させてそれについて話し、nitroを書こう!って言う予定だったんですが着手が遅れて完成しないまま発表になりました。</p>

<p>普段関数型言語のヒトは型やらモナドで殴ってる印象があったのでマクロで殴ろうと思ったのですがマクロの話のところで焦ってしまって話が飛んでしまい、殴れずに終わりました。</p>

<p>ガチの組み込み屋さんから組み込み機器で動作検証したのかとの質問がありましたがそもそも持ってないです。そろそろ1.0が出ると思うのでそのあたりでやります。</p>

<p><strong>GCがconservativeかとの質問に対して「はい」と答えてしまいましたが間違いでした。</strong> conservativeなのはcall/ccでした。GCはexactですね。<a href="http://picrin.readthedocs.org/en/latest/intro.html">ドキュメント</a>に載ってます。</p>

<p>wasabizの名前に反応した人が多かったようですね。やっぱ有名人なのかぁ。</p>

<h1>興味深かった話</h1>

<h2><a href="http://www.slideshare.net/RuiccRail/engineerusesmonads?ref=http://connpass.com/event/8634/presentation/">エンジニアとモナド</a></h2>

<p>またモナドで殴る話かと思ったら全然違いました。トップダウンで設計するときにそれぞれを小さなDSLに分割してそれらをモナドで実装し、モナド変換子で組み合わせると良いよねとのこと。タスクアサインもモナド単位になるし分かり易い。スピードのために実際には単相化すると良いとか現実的な話をしてて非常に良かったです。</p>

<p>Lispで考えるとこうはいかないなと思います。トップダウンで設計するのが他の言語以上に向いてない気がします。というか、ボトムアップに向きすぎてる。小っさく始めて抽象が欲しければマクロを書いて…って。オブジェクト指向で作るにしてもオブジェクトとメソッドが分離してるのでボトムアップと相性が良い。この辺はポールグレアムの「ハッカーと画家」に詳しいです。</p>

<h2><a href="http://xuwei-k.github.io/slides/functional-something-shapeless/#0">shapelessの紹介</a></h2>

<p>興味を持ったのはshaplessそのものではなくてヘテロなリストやヘテロなハッシュに型をつける話。<code>{ 1 =&gt; "foo", "bar" =&gt; 2}</code>に型がつくのは面白すぎます。「高度に多相化された静的型は動的型と区別がつかなくなる」っぽかったです。</p>

<h2>パターンマッチいろいろ</h2>

<p>議論を呼んだ発表。パターンマッチを拡張する話。例えば年月日に対して<code>YMD(y, 12 25)</code>でクリスマスならそのときの年を取り出せるだとかさらにアンドを使えばHMSも一緒にマッチ出来るだとか。
そこからEgisonに話が飛んでEgisonの例のようにポーカーの役をScalaでパターンマッチする例の紹介。</p>

<p>議論を呼んだというのはパターンマッチにガードが吸収されてる件ですね。データ型のコンストラクタとエクストラクタが一対一対応してこそパターンマッチは真価を発揮する派vsパターンマッチの表現力が高ければ高い方が良い派の対立ですね。さらに前者は型の表現力が足りてないのなら型をもっと複雑にすべき派とガードを付けて網羅性の証明をすれば良い派に分かれます。私はパターンマッチには表現力があればあるほど良いよね派。</p>

<p>これはそもそもパターンに対する立場の違いがある気がするんですよね。私はパターンマッチは同じデータに対する条件判定のシンタックスシュガーとして捉えています。マッチと束縛を一緒に行なうのは便利なのとパフォーマンスのため。ガードが必要なのはパターンの表現力が足りないため。だからパターンがリッチならリッチな方が良い。そもそもLispでは網羅性のチェックは期待出来ませんので。そもそもの話動的言語はコンパイル時の検査をあきらめてその代わり表現力を得ようという思想ですからね。</p>

<p>パターンが複雑になるとメモリが爆発するとの指摘がありましたがそれに直面した人がいるらしく、パターンによる分岐の枝を実行時に伸ばしていくようなパターンマッチライブラリも存在します。（Lispは実行時にもマクロが動いていて、実行時にコードを生成することも可能なのです。）</p>

<h1>懇親会その他</h1>

<p>名古屋の<s>型々</s>方々と色々喋れました。偶々でこれきさん、みずぴーさんと同じテーブルに座り、昼御飯も一緒に。普段休日出勤してる印象が強く、名古屋に行かないと会えないと思っていたブレイスさんといよさんも一緒でした。でこれき先生はやっぱり大先生だった。</p>

<p>よんたさんにSML#のコードリーディング会開いて下さいって言ったら良いよって言ってもらいました。そろそろ64bit版も出るそうなのでリリース記念コードリーディング会&amp;芋煮会やろうって話になりました。</p>

<p>OCamlのユニコードライブラリを作ってる方とも話しました。内部でropeで持ってるらしく、その話を聞きました。ropeのユニコード化はどうやら普通に文字列をUTF-8で保持し、ropeに文字列長のフィールドを保たせるだけで良いよう。ただ、picrinはCとの連携のためちょくちょくCの文字列に変換してまた新たにropeを作って、とするので若干勝手というかボトルネックが違いそう。</p>

<p>Schemeのネイティブコンパイラを作ってる方とも話しました。Schemeの実装について喋ったり、GCについて喋ったり。GCについては興味深いことを聴いたのでもう1本エントリー書きます。あとはプロセス代数とかモデル検査とか。</p>

<h1>まとめ</h1>

<p>楽しかった。どうしてもLispは関数型とはあまり言われない（し、私も関数型言語とは思ってない）のでLisperが少なかったのですが私自身はMLも好きなので楽しめました。GCとTaPLとHaskellとScalaとEgisonに対するモチベーションが上がりました。</p>

<p>最後に開催して下さった主催の方々、会場を提供して下さったドワンゴ様、ありがとう御座いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Lispの勉強をするには、あるいは情報を得るには]]></title>
    <link href="http://KeenS.github.io/blog/2014/10/20/lisp-ja/"/>
    <updated>2014-10-20T20:35:33+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/10/20/lisp-ja</id>
    <content type="html"><![CDATA[<p><a href="http://blog.8arrow.org/entry/2014/09/05/062028">深町さんのブログ</a>で日本語でCommon Lispの質問をする方法が載ってましたが質問じゃなくて単に情報を得たい、勉強をしたいという場合が書かれてなかったので勝手に補遺。</p>

<!-- more -->


<h1>処理系選び</h1>

<p><a href="http://cl.cddddr.org/index.cgi?%BD%E8%CD%FD%B7%CF%3A%C1%AA%A4%D3%CA%FD%A4%CE%CC%DC%B0%C2">処理系:選び方の目安 &ndash; Common LISP users jp</a>や
<a href="https://sites.google.com/site/shidoinfo/Home/programing-lang/%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E/lisp/common-lisp/common-lisp-%E5%87%A6%E7%90%86%E7%B3%BB">Common Lisp 処理系 &ndash; 紫藤のWiki</a>が参考になるかと思います。</p>

<h1>開発環境構築</h1>

<p><a href="http://modern-cl.blogspot.jp/">Modern Common Lisp</a>あたりですかね。著者がちょっと古くなってきたので更新するって言ってました。</p>

<p>処理系のインストールなら*nix環境で使える拙作の<a href="https://github.com/KeenS/CIM">CIM</a>もあります。解説は<a href="http://keens.github.io/blog/2014/01/27/cim-explanation/">こちら</a>。</p>

<h1>入門</h1>

<h2>Web</h2>

<p>私の一番のおすすめはM.HiroiさんのWebページです。一応Common Lispではなくxyzzyですがここで紹介されている内容であればCommon Lispにも共通します。<br/>
<a href="http://www.geocities.jp/m_hiroi/xyzzy_lisp.html">M.Hiroi&rsquo;s Home Page / xyzzy Lisp Programming</a></p>

<h2>書籍</h2>

<ul>
<li><a href="http://www.amazon.co.jp/%E5%AE%9F%E8%B7%B5Common-Lisp-Peter-Seibel/dp/4274067211">実践Common Lisp</a>は入門から実践までいけて素晴らしいです。内容の密度が濃いです。心無しか手にとってみると少し重いです。
loopやformatなど複雑な部分はしっかりベージを割いてるので入門が終わってもリファレンスとして役立ちます。私も今でも参照してます。</li>
<li><a href="http://www.amazon.co.jp/Land-Lisp-M-D-Conrad-Barski/dp/4873115876">Land of Lisp</a>は挿絵が多く、少し学んでは実際に使ってみるのルーチンなので勉強のモチベーションを保ちやすいです。
内容は実践Common Lispに比べると細かな注釈が少ないかな？といったところ。さらっと読めて良いですね。</li>
<li><a href="http://www.amazon.co.jp/gp/product/4798118907/ref=pd_lpo_sbs_dp_ss_2?pf_rd_p=466449256&amp;pf_rd_s=lpo-top-stripe&amp;pf_rd_t=201&amp;pf_rd_i=4873115876&amp;pf_rd_m=AN1VRQENFRJN5&amp;pf_rd_r=1YA4XCHT36XJD6ZEF9KC">実用Common Lisp</a>(通称PAIP本)はぶ厚くて高い本。AI系の内容らしい。私は読んだことが無いのですが、数理システムが入門書として使ってるそうです。
2014-12-14 追記 <a href="https://keens.github.io/blog/2014/12/14/shi-yong-common-lispwodu-nda/">読みました</a></li>
</ul>


<h1>何か作る</h1>

<h2>Web</h2>

<ul>
<li><a href="http://www.usamimi.info/~ide/programe/stg_doc/stg-commonlisp.pdf">Common LispでSTGを作りますが何か</a>は有名なPDF。STG(シューティングゲーム)を作る内容。多少古い(SDLが1.2系だとか)ものの、練習には十分です。</li>
<li><a href="http://blog.8arrow.org/entry/2013/09/10/110632">Common LispでWebAppの開発に必要なN個のこと &ndash; 八発白中</a>はWeb Appを作るにあたって必要なライブラリを紹介している。紹介しているだけで作り方は書いてないのでどうにか頑張って下さい。</li>
</ul>


<p>あんまり情報無いですね…Lisperのみなさんもっとアウトプットしましょう。</p>

<h1>リファレンス</h1>

<h2>Web</h2>

<ul>
<li><a href="http://www.lispworks.com/documentation/HyperSpec/Front/">Common Lisp Hyper Spec</a>はCommon Lispの機能をサンプルと共に網羅的に、詳細に紹介しています。英語です。
主に<a href="http://www.lispworks.com/documentation/HyperSpec/Front/Contents.htm">コンテンツ</a>からドリルダウンで調べていくと良いです。時間があればじっくり眺めても良いかも。
Common Lispをやる上では必ず必要になるので、英語ですが必ず友達になっておきましょう。</li>
<li><a href="http://tips.cddddr.org/common-lisp/">逆引きCommon Lisp</a>は名前の通りやりたいことからCommon Lispの機能を調べられます。サンプルもあります。残念ながら網羅的ではないのですが凡その需要は満たせると思います。</li>
<li><a href="http://quickdocs.org/">Quickdocs</a>はライブラリのドキュメントサイト(英語)。ライブラリを捜す時にも良いと思います。</li>
</ul>


<h2>書籍</h2>

<ul>
<li><a href="http://www.amazon.co.jp/COMMON-LISP-%E7%AC%AC2%E7%89%88-Guy-L-Steele/dp/4320025881/ref=cm_lmf_tit_10">COMMON LISP 第2版</a>は通称cltl2と呼ばれるCommon Lispの原典の和訳です。一応紹介しました。今のCommon LispはANSI Common Lispになってるので少し違います。</li>
</ul>


<h1>ポータルサイト</h1>

<ul>
<li><a href="http://cl.cddddr.org/index.cgi">Common LISP users jp</a>は日本語で様々な情報が得られます。</li>
<li><a href="http://www.reddit.com/r/lisp_ja/">redditの/r/lisp_ja</a>にはLispに関連するWebページの情報が日々投稿されています。</li>
<li><a href="http://www.cliki.net/">CLiki</a>はCommon Lispの総合Wiki(英語)。非常に有用な情報が溜まってます。</li>
<li><a href="http://common-lisp.net/">Common-Lisp.net</a>はCommon Lispのコミュニティ支援サイト(英語)。多くのプロジェクトをホストしていて、そのWebページなんかもあります。</li>
</ul>


<h1>ソースコードを読む</h1>

<p>κeenの適当チョイスです。他にお勧めがあれば教えて下さい。</p>

<ul>
<li><a href="https://github.com/keithj/alexandria">alexandria</a>は有名なユーティリティパッケージ。小さな関数やマクロで構成されてるのでイディオム集みたいな感じで読めると思います。</li>
<li><a href="https://github.com/7max/log4cl">log4cl</a>はログライブラリ。ドキュメント(英語)をしっかり書いてるので読み易いです。</li>
<li><a href="https://github.com/edicl/hunchentoot">Hunchentoot</a>はWebサーバ。ドキュメント(英語)を過剰に書いてるので読める筈。</li>
</ul>


<h1>ステップアップ</h1>

<h2>Web</h2>

<ul>
<li><a href="http://www.asahi-net.or.jp/~kc7k-nd/onlispjhtml/">On Lisp</a>は主にマクロについて書かれたCommon Lispプログラミングの指南書。書籍もありますが、Web版もあります。</li>
</ul>


<h2>書籍</h2>

<ul>
<li><a href="http://www.amazon.co.jp/LET-OVER-LAMBDA-Edition-1-0/dp/4434133632">Let Over Lambda</a>(通称LOL)は過激とか狂気とか宗教とか言われるエッセイ。高速化の話とかクロージャの危ない使い方とかが書かれてます。</li>
</ul>


<h1>Lisperとコミュニケーションをとる</h1>

<ul>
<li><a href="http://shibuya.lisp-users.org/">Shibuya.lisp</a>は渋谷を中心に半径2万kmを対象としたLispコミュニティ。毎月下旬の平日夜にLisp Meet Upをやってるのでひょこっとやってくると良いと思います。内容はCommon Lisp, Scheme, Clojureで回してるのでCommon Lisp回は3ヶ月に1回ですが毎回Common Lisperは来てるので別のLispの回でも構わず参加すると良いと思います。
#lispmeetup の情報は<a href="https://atnd.org/users/51173">ここ</a>から入手するのが良いかな？あとは<a href="https://twitter.com/shibuya_lisp">Twitterアカウント</a>もあります。Ustream配信もしてます。</li>
<li>IRCの#lisp-ja@irc.freenode.orgと#common-lisp-ja@irc.freenode.orgにコミュニティがあります。常に誰かがいる訳ではないのですがちょくちょく見てる人はいるので発言してみると反応があるかもしれません。今もこの投稿に対して反応があってCIMとredditの項目を追加しました。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Meet Up #20でLTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/09/30/lisp-meet-up-number-20/"/>
    <updated>2014-09-30T09:35:05+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/09/30/lisp-meet-up-number-20</id>
    <content type="html"><![CDATA[<p>κeenです。lisp meet up # 20に参加したのでレポートです。</p>

<!-- more -->


<p>20人の募集に19人参加予定。会場は今回初めてのところでした。</p>

<h1>LT</h1>

<p>LTはTOYOZUMIさんが仕事で来れなくなったので私の1件のみ。内容はpicrinのチューニングの話と思わせてほとんどがその前振りのGCの話。</p>

<p>スライドはこちら。</p>

<p><a href="http://keens.github.io/slide/picrin-gc.html">Picrinのチューニングの話、もといGCの話 | κeenのHappy Hacκing Blog</a></p>

<p>TOYOZUMIさんのdocstringの話聞きたかった</p>

<h2>飛び入り</h2>

<ul>
<li>ブラウザ上でbiwa schemeの環境(REPLだけでなくオートインデントとか)を作ってる</li>
<li>関連して、websocketでswankと対話できるやつ作ってる</li>
<li>関連して、ブラウザ上で動くLispに似てそうなBlockyというヴィジュアル言語がある
なんかの話がありました。</li>
</ul>


<h1>余った時間</h1>

<p>chikuさんが前でGCの話してました。んで話が尽きたあたりで私がpicrinの宣伝しました。<code>(picrin control list)</code>の話です。非同期プロミス然りpicrinにはトリッキーな機能が多いですね。</p>

<p>結局ライブコーディングはしませんでしたね。</p>

<h1>懇親会</h1>

<p>Raspberry Piの話とかちょいとGCの話とかVarnishの話とかaltJSとか。ブログの話題が出たのでOctopress推しといたり。なんでみんなGithub Pages + Octopress使わないん？便利ですやん。</p>

<p>結構色々話してた気がするんですが覚えてないですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#ISUCON 4 予選に学生枠で参加してきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/09/30/isucon4-q/"/>
    <updated>2014-09-30T00:51:30+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/09/30/isucon4-q</id>
    <content type="html"><![CDATA[<p>κeenです。ISUCON 4 予選に学生枠で参加してきたのでレポートです。日曜、2日目の方に参加です。</p>

<!-- more -->


<h1>メンバー集めと準備</h1>

<p>一番苦労しました。去年と同じく、全く知らない人と組んでます。全然集らなくて、@941さんがメンバー集めの音頭をとってくれたりして、ようやく集りました。941++。</p>

<p>結局ISUCON夏期講習にいたPythonアイドルのくーむ(<a href="https://twitter.com/cocodrips">@cocodrips</a>)さんとその友達の友達のねむねむ(<a href="https://twitter.com/nemunemu3desu">@nemunemu3desu</a>)さんと出ることになりました。くーむさんは競技プログラミング系Pythonista、ねむねむさんはプログラマのためのWebサービス開発のバイトをやってるWeb系Rubyist。因みに私は去年もISUCONに出て<a href="http://KeenS.github.io/blog/2013/11/11/isucon-final-stage/">学生賞なんか貰ってる</a>のでISUCONで要求される技術は一通り、広く浅くといった感じのRubyist。普段はLisp書いてます。「Lispを書く」はダブルミーニングですよ。すごいどうでも良いけどくーむさんは情報系のM2、ねむねむさんは情報系のB4、私は数学科のB4です。</p>

<p>流石に初対面のメンバーでいきなり競技を始めても何も出来ないので一度3人で顔を合わせて打ち合わせをしました。簡単に書いてますけど待ち合わせとか苦労したんですよ。</p>

<ul>
<li>データ量とかアルゴリズムに対する感のあるくーむさんにはMySQLのチューニングを任せる</li>
<li>くーむさんは各社のインターンで実務経験があるのでデプロイとかのコードの流れ、ベンチマークの管理もやって貰う</li>
<li>その周辺のツールも作って貰う</li>
<li>Rubyでwebサービスの開発をやってるねむねむさんにはRubyのコードをがんがん弄ってもらう</li>
<li>Redisを使うことも視野に入れてもらう。Redisの経験はあるようなのでそんなに問題なさそう。</li>
<li>あとは余ったNginX、Varnishをκeenが担当する</li>
<li>恐らくNginX、Varnishは然程手間取らないのでアプリとMySQLで苦戦してる方にκeenが入る</li>
<li>最初のセットアップはAWSアカウントを作ったくーむさんにやって貰う</li>
<li>最初に計測することが大事なのでデフォルトのままログの設定だけ変えてベンチを走らせて作戦会議をする</li>
<li>チーム名は3人のアイデンティティを合わせて「(ρ_&ndash;)/超銀杏バスターズ(･ω･ o)」とする</li>
</ul>


<p>あたりを決めました。</p>

<p>くーむさんは完全に普段とドメインが違うのでちょっとつらそうでしたがSQLとかRedisとかの本を貸したらめっちゃ勉強してきたみたいでした。
流石、情報科ですね。地力が違いますね。あとはGithubの学生が使えるプライベートリポジトリを用意してくれたり。ベンチマークを走らせたら時刻とgitのコミットIDをセットにしてログ用のレポジトリに突っこむスクリプトの準備もしてくれました。</p>

<p>ねむねむさんはAWSアカウントを作って去年の予選の問題を予習してきたようでした。あとRedis使うかもって言っといたらRedis in ActionのPDFを見付けてたようなので読んできたんじゃないかなと思います。Rack用のプロファイラを試したようでした。去年も使おうとして結局使えなかったminiprofiler。ねむねむさんにも使えなかったようです。</p>

<p>私はApacheとかNginXのログフォーマットを整備してパス/メソッド毎の(合計)レスポンスタイムを出す集計スクリプトを用意。その他マスタリングNginXを一通り読み直したりOpenRestyでmemcachedやlua、Redisのプラグインがあることを確認してインストールスクリプトを書いたりしてました。Varnishは間に合いませんでした。</p>

<h1>当日</h1>

<h2>開始</h2>

<p>LINEカフェを使わせてもらうので9:20に集合。ちゃんと集まる。家の近いくーむさんがデカいディスプレイを持ってきてました。</p>

<p>LINEカフェではLINEインターンの経験のあるくーむさんが勝手が分かってるので机を勝手に動かして三人横並びに座る。真ん中にくーむさんの大きいディスプレイがきて良い感じでした。</p>

<p>10:00に号砲と共に競技開始。早速3人ともAWSの初心者でAMIの起動の仕方が分からず詰まります。ここクリックしてみて？とかいいながらログイン出来たのが10:20くらいですね。isuconユーザーにRSAのpubキーを突っ込むもパスワードを要求されてハマる。くーむさんはLinuxには不慣れなようだったので私がやるも<a href="http://KeenS.github.io/blog/2014/08/21/isucon-summer-2014/">夏期講習のとき</a>と同じく解決出来ず。うーん。結局パスワードのまま通しました。</p>

<p>gitの設定をするときにアプリとログはレポジトリを分けることは決まってましたがログを吐く場所を決めてなかったのでゴタゴタ。/var/logに吐こうとするもMySQLが吐いてくれない。権限の問題じゃね？とか言って777にするという邪悪なことをするとねむねむさんがsshを締め出される。MySQLが吐いてくれなかったのは再起動忘れ。sshを締め出されたのはsshdのログファイルの権限の問題。この辺解決したのが11時過ぎかな？</p>

<p>ごたごたしてる間はねむねむさんはアプリ読んでくーむさんはインテグレーション周りの準備してくれたり。私もちょっとアプリ読んだりエラーでググったり。</p>

<h2>作戦会議</h2>

<p>12時前なので昼御飯食べながら。</p>

<ul>
<li>ベンチマークを走らせると明かにMySQLが重いのでインデックスを張る(くーむ)</li>
<li>アプリはキャッシュ効きそうなのでガンガンRedis使う(ねむねむ)</li>
<li>とりあえずNginXの最適化とVarnishは入れる(κeen)</li>
</ul>


<p>な感じです。</p>

<h2>作業</h2>

<p>Typoがあった以外はNginXとVarnishはスムーズに。</p>

<p>実際にはくーむさんがログの自動プッシュ周りで苦戦してたのでけんちん汁を食べてる隙に私がインデックスを張ることにしました。ちまちまexplainしながらやるもどうもうまくいかない、と思ったらinit.shのヒアドキュメントが二重になってる…。そこを解消したら一気にスコア上がりました。でもWHERE狙いとORDER BY狙いってどうなんだっけとなって多少過剰なインデックスだったかもしれません。</p>

<p>それでもうMySQLはCPU使わなくなったのでワークロード上げてみたらスコア12,000くらいになりました。</p>

<p>なんか静的ファイルでベンチマークエラー出てるとくーむさんから報告がありました。Varnishの設定ミスったかなと思ったらエラーメッセージが無機質だったのでシステム関連っぽい。そこは全て独学でやってきた数学科生のググり力を発揮。調べるとローカルポートを使い果たしていた模様。システムの設定をコピペ。エラー出なくなる。</p>

<p>RubyがCPU使ってるのでNginXからのリダイレクトをunixドメインソケットに。あんまり効果無し。</p>

<p>ねむねむさんのRedisキャッシュ化が入って15,000とか。ねむねむさんを信じて「キャッシュして」とだけ言っといたので詳細は不明ですがユーザーはRedisに全部突っ込んだ模様。その後は脱MySQLを目指して黙々と作業してました。</p>

<p>私は/reportがN+1クエリなので直そうと2時間くらい奮闘。後にスコアには反映されてないことを知らされて絶望。よく見とけば良かった。しかもEmacsのバッファに残ってるものをコミットしてしまってねむねむさんのコミット上書きしてしまったりしました。</p>

<p>まだRubyがCPUを使ってるのてテンプレートエンジンを置き換えることを考えました。slimが速いと風の噂で訊いたのでくーむさんにお願いしてみるもスコアがた落ち。あれRuby製だったんですね。C製のテンプレートエンジン捜しとかなきゃ。</p>

<p>さらにくーむさんがCSSやpngのminifyを試みるもチェックサムをとられていたようで失敗。良く見たらMD5とるってレギュレーションに書いてありました。後にminifyでなくインライン化すれば良かったらしいと聞く。</p>

<h2>最終確認とか</h2>

<p>17時あたりで一旦chkconfigしてリブートしてもベンチが動くことを確認。よかった。一応AMIを作ります。その後でN+1クエリの解決が動くも当然スコアには変動なし。あとはミドルウェアのログを切って脱MySQLは間に合わなくてアプリの微改善が入りパラメータの微調整をし、17,700あたりで競技終了。</p>

<h1>終わってみて</h1>

<p>一応2日目の中では学生1位なものの、1日目10チーム、2日目4チームなので何とも言えないですね。一般枠は40,000でも本戦出場無理ポとか言ってるのに20,000にも全然届かないスコアで本戦出れるかもとか言ってるゆとりの学生です。</p>

<p>反省は</p>

<ul>
<li>レギュレーション良く読む</li>
<li>ベンチマークのスコアリングも確認する

<ul>
<li>静的ファイルは0.1点と思ってたら0.01点だった。この差大きい。</li>
</ul>
</li>
<li>権限管理は適切に</li>
<li>hangoutに思ったことを垂れ流す筈だったのに口頭で済ませてしまった

<ul>
<li>それだけならまだしもhangoutに貼ったものが無視されてしまった</li>
</ul>
</li>
<li>プロファイラ使えるようにならないとね。

<ul>
<li>RubyがCPU喰ってるのは分かってるのにどこがまずいか分かんなかったのは悔しい</li>
</ul>
</li>
<li>深みに嵌ったらあきらめる</li>
<li>ブランチ切るとミドルウェアの違いで問題が出る(varnishとnginxの80の取り合い)</li>
<li>互いのスキルを把握しておく</li>
<li>開発スタイルを決めておく</li>
<li>workload、workerprocessは最適値を捜す(コア数が4だったので4~8で決め打ちだったけど後に30くらいまで上げれると聞く)</li>
</ul>


<p>かな？私が普段Linuxを使ってるのでLinuxの設定くらいみんな出来ると思ってたら私以外Macerだったってのは予想外でした。本来なら私がAWSアカウント持ってれば問題なかったんですけどクレジットカード持ってないんですよね。つらい。</p>

<p>開発スタイルはねむねむさんがpull-reqスタイル、私が細かいコミットをマスターに入れるスタイルでした。設定ファイルとアプリの違いもありますがpull-reqスタイルの方がロールバックし易いしそっちに統一した方が良さげですね。</p>

<p>個人的に、いつも通りケアレスミスが多かったのは反省しなきゃなと思います。「あれ？動かない。あ！そうか！」みたいな。メンバーは「すげー。デバッグ速えー」って言ってましたけど違いますよ？世の中の不当評価はこうして産まれるんだと少し社会を知りました。</p>

<p>Varnishももうちょっと使い熟さないとなーってのとlua勉強しなきゃなーってのが個人的な本戦に向けた準備ですね。N+1のとこはSQLの練習が出来たので個人的には満足…って言ったらメンバーに怒られますかね。</p>

<p>全体として、チームは上手く動いてたんじゃないかなと思います。N+1のところで無駄に嵌らずにねむねむさんと2人でアプリの改修やってたら脱MySQLが間に合ったんじゃないかなってのが心残りです。インテグレーションはくーむさんのスクリプトで良い感じだったのでもうちょっと改良して本番にも使いたいですね。あとCapistranoかFabricも準備しないといけませんね。</p>

<p>本当、やらかしてばっかの私に怒ることなく一緒にやってくれたくーむさん、ねむねむさんには感謝してます。もし予選通ってたら本戦も宜しくお願いします。</p>

<p>そして忙しい中ISUCONを開催して下さったCOOKPADの方々、941さん、ありがとう御座います。ベンチマーカーの問題にも迅速に対応して下さってこちらは本当に楽しく競技出来ました。</p>

<p>P.S.<br/>
今回の作業レポジトリは<a href="https://github.com/cocodrips/isucon2014q">ここ</a>、ログレポジトリは<a href="https://github.com/tomoasleep/isucon2014qlog">ここ</a>にありますがまだ非公開です。そのうち公開されると思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[低レベルなことがしたい]]></title>
    <link href="http://KeenS.github.io/blog/2014/09/18/low-level-languages/"/>
    <updated>2014-09-18T01:53:11+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/09/18/low-level-languages</id>
    <content type="html"><![CDATA[<p>低レベルなことがしたい。もうちょっと具体的に言うと、DBMを書きたい。コンパイラを書きたい。ただ動くだけじゃなくて効率的な実装がしたい。CPUの歓声が聞きたい。そのためにもバイナリを簡単に扱える言語が良い。マシン語が透けて見える言語が良い。いっそインラインアセンブラが欲しい。システムコールがスムーズに出来る(≒ C をスムーズに呼べる)言語が良い。どんな言語が適任か。</p>

<!-- more -->


<p>因みにコンパイラはLLVMをバックエンドに使う予定。何の言語のコンパイラかは決めてない。SMLのサブセットかmini Camlかその辺？</p>

<p>まず考えられるのはダイレクトにマシン語が見えるアセンブラ。でも移植性が無いからボツ。じゃあ他には？</p>

<ul>
<li>LLVMアセンブラ</li>
<li>C</li>
<li>C++</li>
<li>Java</li>
<li>SML</li>
<li>Haskell</li>
<li>OCaml</li>
<li>ATS</li>
<li>Go</li>
<li>D</li>
<li>Rust</li>
</ul>


<p>あたりかな？と思う。Common Lispはバイナリの扱いは案外いけるが流石に効率的な実装は難しい。ガチガチに型宣言つけていくくらいならそもそも静的型付けで型推論のある言語を使った方が良い。その意味ではHylasに期待したけど今はまだメンテナンス中。多分完成したら使う。</p>

<p>Nimrodなる言語もあるらしいがあまり聞かないのでスルー。</p>

<p>因みにこの中で自分が普通に書けるのはCとJava。OCamlもまあまあ。HaskellはRWH読んだっきりでアウトプットはしてない。C++とSMLはHello World + α程度。他はサンプルコード眺めてHello Worldしたかしてないかくらい。</p>

<h2>LLVMアセンブラ</h2>

<p>移植性のあるアセンブラ。アセンブラとは言ってもモジュールシステムもある、関数もある。一度学んでおくと便利な気はする。ただ、多少Cの呼び出しが面倒。メンテナンス性が悪そう。総合して悪くはない、程度かな。</p>

<h2>C</h2>

<p>Cの呼び出し易さにおいて他の追随を許さない言語。高級アセンブラの別名の通りマシン語も透けて見える。というか、書こうとしているDBMのプロトタイプはCで書かれている。だが、既にpicrinでCを書いているし、今回やりたいのとは違う気がするのでおやすみ。</p>

<h2>C++</h2>

<p>LLVM自体C++で書かれているしbetter Cな側面もあるし今回の目的に一番合致しそうな言語。ではあるんだけどあまり好きになれない。一度はやっておかなきゃいけないんだろうけど…。一旦保留で。</p>

<h2>Java</h2>

<p>安心と信頼のJava。30億のデバイスで走るJava。バイナリの扱いは上々だけど今回は使いたくない。理由は、必要上の理由ではなく論理的な理由でオブジェクトを作らなきゃいけない点。メモリ管理が出来ない点。ポインタを扱えない点。抽象性のための犠牲なんだろうけど今回は抽象性ではなく効率をとりたい。</p>

<p>ただ、後で習作としてDBMをJavaで書き直すのはありかもしれない。JavaというかMirahだろうけど。</p>

<h2>SML</h2>

<p>Standard ML。人工知能御三家のうち唯一静的型付けの言語。Haskellerがモナドモナドうるさい所為で隠れがちだがML系の言語は意外とバイナリの扱いも出来る気がする。記号処理に向いてるからとコンパイラを書こうとしたときにバイナリ扱えないと片手落ちだからかな。実際SML、OCaml、Haskellは全てセルフホストコンパイラがある。</p>

<p>SMLの中でも今回検討してるのはSML#とMLton。どちらもCとの相互呼出がある。しかも1行書くだけ。だが複雑な構造体とかはどうしようね。</p>

<p>SML#は分割コンパイルがあるしSML#自身LLVMバックエンドなのでLLVMバインディングもある。が、MLtonに比べて数倍遅く、まだ64bit対応もしてない。MLtonは速くて機能も豊富。だが分割コンパイルは無いっぽい？</p>

<p>一応コンパイラはこれらのどちらかで書くかな、と考えている。</p>

<h2>Haskell</h2>

<p>ML系の言語の中では一番人気でライブラリ豊富。言語自体はすごい好きなんだけどコミュニティが初心者をモナドで殴りにいく印象が強いのであまり好きになれない。あと参考コードとしてGHCのコードは読む気にはなれない。SMLで書いててつらくなったらトライしてみるかな。その時は(a)jhcを使うのかな？</p>

<h2>OCaml</h2>

<p>LLVMやるならOCamlらしい(?)。が、C書いててライブラリの豊富さに気付いてSML#やってCとの相互呼出に惹かれた身には少しもの足りなくなってきた。うーん。迷う。</p>

<h2>ATS</h2>

<p>元Depenent ML。低レベルなことが出来るMLらしい。しかし一々証明しながらプログラム書く気はしない。もうちょっと情報が欲しい。</p>

<h2>Go</h2>

<p>最近中々の人気を見せるGo。一応コンパイルの速いシステム記述言語との触れ込みだがWeb系で多い気がする。なんとなーく自分のやりたいことと違う方向向いてる言語な気がする。Goで書かれたDBMもあるけど。Cとの連携はトリッキーだがヘッダからラッパ自動生成してくれるのは気に入った。DBM書く候補には入れとく</p>

<h2>D</h2>

<p>やりたいこと的には多分一番合ってる言語。でもネタ言語感が拭えないのがなんとも。あと思ったよりCの呼び出しが面倒だった。一応心には留めておく。</p>

<h2>Rust</h2>

<p>まだまだ未熟な印象な言語。だがMozillaが本気で作ってるっぽいので期待も出来そう。メモリ管理も自分でやらせてくれるみたいだしDBMはこれでいこうかなと思ってる。でもCとの連携はつらそう。うーん。メモリモデルの関係上ヘッダから自動生成は出来ないのは分かるんだけどどうにかならんのですかね。</p>

<p>まあ、これだけつらつら書いておいてもCIMもpicrinもcl21も面倒看なきゃいけないしcl21-datacollectionsも復活させないといけないしちゃんと出来るんですかね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shibuya.lisp Tech Talk #8を運営&amp;LTしてきました]]></title>
    <link href="http://KeenS.github.io/blog/2014/09/16/lisp-tech-talk-8/"/>
    <updated>2014-09-16T21:04:12+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/09/16/lisp-tech-talk-8</id>
    <content type="html"><![CDATA[<p>κeenです。レポートに追われ試験があり合宿に行きで2週間以上空きましたが8/30にShibuya.lisp TT #8の運営をしつつLT枠での参加もしてきたので報告です。何かそこそこ大きなイベントの運営をされる方の参考になれば。</p>

<!-- more -->


<h1>キックオフミーティング</h1>

<p>キックオフミーティングが6月にありました。集まったのは5人。potix2(@potix2)さん、chikuさん、深町(@nitro_idiot)さんかにたん(@kazh98)、私。Shibuya.lispの運営はもうちょい居る筈なんですけど引く手数多のLisper達はきっと忙しいんでしょうね。</p>

<p>Shibuya.lisp TTを開催するかを含めて話し合いました。開催されるとなれば3年振りです。</p>

<p>一番の懸案事項はTTをする人がいるかでした。招待講演のアテを話し合ったりTT枠とLT枠のバランスを話し合ったりして開催可能だろうと判断しました。その場で予想参加人数、タイムテーブルや役割分担、TT枠やLT枠が応募多寡になったときの対応、懇親会をどうするかなどを話し合いました。</p>

<p>やっぱりその時点では会場が決まってないので不確定要素が多く、「会場次第」が多かったかと思います。そのときの予想や要求を元に会場の条件を絞った訳ですが。</p>

<p>必要と判断された役職は、</p>

<ul>
<li>懇親会</li>
<li>司会</li>
<li>誘導</li>
<li>照明</li>
<li>マイク</li>
<li>受付</li>
<li>会計</li>
<li>広報</li>
<li>動画</li>
<li>タイムキーパ</li>
<li>コーヒーのケータリングとかお茶とかお菓子の準備</li>
</ul>


<p>でした。5人だとどうしても人数が足りないので運営手伝いも募集することになりました。</p>

<h1>会場決定</h1>

<p>mixi様より(鈴木さん経由で)会場を提供頂きました。スクリーン2枚、飲食OK、懇親会もその場でOK、ハンディカムの貸し出しありの至れり尽せりです。鈴木さんありがとう御座います。</p>

<h1>広報</h1>

<p>広報担当のかにたんがTwitterやMeet Upで宣伝したりchikuさんがTokyo.cljに参加して宣伝したりで広報活動を行なってきました。結果、60人の枠がほぼ埋まる(キャンセル含めれば超過)程度の人数が集りました。かにたんありがとう。</p>

<p>懸案事項だったTTの発表者は早々に埋まり、むしろ応募多寡だろうと予想されたLT枠が半分しか埋まらなくて焦りました。</p>

<h1>ビデオ</h1>

<p>映像に詳しいTOYOZUMIさんに相談したところ、発表者の映像出力をキャプチャする手段があるとのことなので</p>

<ol>
<li>特殊機器による映像出力のキャプチャ</li>
<li>ハンディカムによる発表者の録画</li>
<li>WebカメラによるUstream配信</li>
</ol>


<p>の3つを行ない、3.はリアルタイムに、1.、2.を合成したものを録画映像として配信することになりました。一応私がビデオ担当でしたが一人では無理なのでchikuさんやかにたんと一緒に予行演習を行ないました。</p>

<p>扱いの分からぬ機器に悪戦苦闘し、一応動かすことは出来たものの不安が残るので、上手く動いたシナリオと動かなかったシナリオを用意しました。</p>

<h1>その他</h1>

<p>懇親会の手配やら会計やらがどうだったかは分かりません。何も気にすることが無い程スムーズに進んでたんでしょう。potix2さんと深町さんありがとうございます。</p>

<h1>当日</h1>

<h2>準備</h2>

<p>chikuさんと一緒に渋谷駅に集合し、ケータリングのコーヒーを持って会場入り。そのまま鈴木さんにお世話になりつつ会場設営。当初は私は会場設営はほどほどに、ビデオ関係の準備をしてる筈でしたが人が少ないのでそのまま設営をやってました。</p>

<p>さらにThunderboltケーブルが不足ということでビックカメラまでダッシュ。雪駄+合宿で痛めた足で走るんじゃなかった。結局Thunderboltを買ってきても機器を上手く扱うことが出来ず、失敗した方のシナリオでオペレーションしてました。</p>

<p>映像配信に関しては私のLinuxではUstream配信出来ないだとかWebカメラがスライドから遠くて見えないだとかがありましたが、全体は滞りなく進行。</p>

<h2>Talk</h2>

<p>TalkはLT枠は飛び入りが4人あり、結局良い感じに埋まりました。</p>

<ul>
<li>特別講演

<ol>
<li>笹川様 : 好きい夢の話 (<a href="https://drive.google.com/file/d/0B_H0_8eqWuVAY25lWGdiTGE5RmM/edit?usp=sharing">ビデオ</a>)</li>
</ol>
</li>
<li>TT

<ol>
<li>athosさん : genuine-hilighterの話 (<a href="https://drive.google.com/file/d/0B_H0_8eqWuVAZmJPaWpTMHZRUmc/edit?usp=sharing">ビデオ</a>)</li>
<li>深町さん : cl21の話 (<a href="https://drive.google.com/file/d/0B_H0_8eqWuVAcV91QXRzSC1JVXc/edit?usp=sharing">ビデオ</a>)</li>
<li>豊住さん : 自作画像処理ライブラリの話 (<a href="https://drive.google.com/file/d/0B_H0_8eqWuVATE5nZ0Z4V3Zwdms/edit?usp=sharing">ビデオ</a>)</li>
<li>横田さん : 型宣言と最適化の話 (<a href="https://drive.google.com/file/d/0B_H0_8eqWuVAYzhqZ2J5T0VKTXc/edit?usp=sharing">ビデオ</a>)</li>
</ol>
</li>
<li>LT (<a href="https://drive.google.com/file/d/0B_H0_8eqWuVAaGNLTGpTWWh0ZFU/edit?usp=sharing">ビデオ 1~4</a>、<a href="https://drive.google.com/file/d/0B_H0_8eqWuVAR21Pc2M4bmdpdlU/edit?usp=sharing">ビデオ 4~9</a>)

<ol>
<li>のぶかずさん : Shenの話</li>
<li>κeen : moclの話</li>
<li>かにたん : 床下LispとLisp Meet Upの話</li>
<li>すてぃべあさん : EROSの話</li>
<li>ねこはるさん : Clojureの型推論器の話</li>
<li>Takagiさん: cl-cudaの話</li>
<li>あんちべさん : Incanterの話</li>
<li>TAKUFUKUSHIMAさん : Omの話</li>
<li>zick_minohさん : 42の言語でLisp処理系を書いた話</li>
</ol>
</li>
</ul>


<p>と様々な内容に分かれて行われました。私の発表スライドは<a href="http://KeenS.github.io/slide/shibuya-dot-lisp-tt-number-8.html">ここ</a>にあります。</p>

<h2>懇親会</h2>

<p>箸が足りない、ケータリングのボットを返却し忘れるなどとトラブルはあったものの概ね問題なく進みました。出されたのはアルコール、ソフトドリンク、寿司、ピザです。</p>

<p>だいたい言語毎に島が出来てたようです。私は撮影したビデオを取り込みつつ色々な島に入っていきました。Common Lisperでcl21コミッタでScheme実装者でClojureワナビーなのでどこにも入れて良いですね。ただ、前日スライドの微調整などであまり寝てなかったのでちょいちょい居眠りしてました。</p>

<p>片付けが終って外に出るとみなさんが待ってて下さったのでぞろぞろ帰りました。TOYOZUMIさんが2次会にカラオケに行こうと皆さん誘ってました。私は行こうかと思ったのですがカラオケはジェネレーションギャップがあるとつらいので大人しく帰りました。</p>

<h1>後日</h1>

<p>返し忘れたケータリングのポットは後日chikuさんが返してくれました。</p>

<p>録画した動画はちょいと梃摺りました。まず、長い動画なので動画サイズが4GBのところで切れてます。なのでその2つを結合し、さらにあまりにサイズが大きいので画質を落とす作業が必要でした。</p>

<p>変換はavconv(ffmpegのフォーク。Ubuntuだとこれしか入らない)で行なったのですが、MPEG4をダイレクトには結合出来ないらしことに気付くまで何度も失敗しました(1つの動画の変換に4時間とか掛かるんですよ？しかもその間CPUは100%に張り付いてるのでPC使えない)。レポートやら試験やらの合間に行なったのでそれだけで数日使いました。最終的にはmpegtsなるフォーマットに変換してcatで結合すれば良いことが分かり、</p>

<pre><code>(MP4 + MP4) -&gt; (mpegts + mpegts) -&gt; mpegts -&gt; MP4 -&gt; MP4(low quality)
</code></pre>

<p>の手順を踏んで最終動画を得ました。それでも1トークあたり1GBくらいのサイズがあります。もうちょい画質落としても良かったのかな。</p>

<p>で、今アップロード中ですが私のポンコツWiMAXルータは高負荷に耐えられず1動画数時間掛かってます。その間全くネットが使えません。はぁ。</p>

<p>実は今回の運営は私も含めTech Talk初参加の人がそれなりに居たのですがなんとか乗り切れましたね。講演をして下さった笹川様、会場を提供して下さったmixi様と鈴木さん、運営の手伝いをして下さった方々、ありがとう御座いました。そして運営のみなさん、発表者のみなさんお疲れ様でした。</p>

<p>次回もTT開催出来ると良いですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common LispでSIGINTを捉える]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp/"/>
    <updated>2014-08-27T21:45:37+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/27/sigint-in-common-lisp</id>
    <content type="html"><![CDATA[<p>κeenです。もうすぐShibuya.lisp TT #8 ですね。今回はCIMのREPLの改善をしてたらSIGINTを補足しようとして詰まったので共有します。</p>

<!-- more -->


<p>結論を書いちゃうと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defvar</span> <span class="vg">*interrupt-condition*</span>
</span><span class='line'>  <span class="c1">;; It seems abcl does not raise any conditions</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">allegro</span> <span class="ss">&#39;excl:interrupt-signal</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">ccl</span> <span class="ss">&#39;ccl:interrupt-signal-condition</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">clisp</span> <span class="ss">&#39;system::simple-interrupt-condition</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">ecl</span> <span class="ss">&#39;ext:interactive-interrupt</span>
</span><span class='line'>  <span class="o">#+</span><span class="nv">sbcl</span> <span class="ss">&#39;sb-sys:interactive-interrupt</span>
</span><span class='line'>  <span class="o">#-</span><span class="p">(</span><span class="nb">or</span> <span class="nv">allegro</span> <span class="nv">ccl</span> <span class="nv">clisp</span> <span class="nv">ecl</span> <span class="nv">sbcl</span><span class="p">)</span> <span class="ss">&#39;no-conditon-known</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">with-handle-interrupt</span> <span class="p">(</span><span class="k">&amp;body</span> <span class="nv">body</span><span class="p">)</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nb">handler-case</span>
</span><span class='line'>       <span class="o">#-</span><span class="nv">ccl</span><span class="p">(</span><span class="k">progn</span>
</span><span class='line'>              <span class="o">,@</span><span class="nv">body</span><span class="p">)</span>
</span><span class='line'>       <span class="o">#+</span><span class="nv">ccl</span> <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">ccl:*break-hook*</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="kt">condition</span> <span class="nv">hook</span><span class="p">)</span>
</span><span class='line'>                                       <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">ignore</span> <span class="nv">hook</span><span class="p">))</span>
</span><span class='line'>                                       <span class="p">(</span><span class="nb">error</span> <span class="kt">condition</span><span class="p">))))</span>
</span><span class='line'>               <span class="o">,@</span><span class="nv">body</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="o">#.</span><span class="vg">*interrupt-condition*</span> <span class="p">(</span><span class="nv">c</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">handle-interrupt</span> <span class="nv">c</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じです。ABCLがコンディションを投げずに即終了してる(?)っぽいのでABCLに対しては無力です。もしかしたらJava側で捉えないといけないのかもしれません。
因みにどうやってそれぞれのコンディション名を調べたかというと、<code>(handler-case (loop) (condition (c) (print c)))</code>を各処理系のREPLで実行して<code>^C</code>しました。
Allegro CLは<code>interrupt-signal</code>がconditionのサブクラスでなかった(<code>serious-condition</code>だった)のでちょいと困りましたね。結局マニュアル読みました。</p>

<p>CIMのコードなので上記以外の処理系には対応してないです。</p>

<p>今回詰まったのはCCLですね。<code>ccl:interrupt-signal-condition</code>は定義してあるもののユーザーより先に処理系が処理するので無意味でした。なので<code>ccl:*break-hook*</code>を使って処理系が捉えるより早くコンディションを発生させました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[isucon夏期講習2014に参加してきた]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/21/isucon-summer-2014/"/>
    <updated>2014-08-21T12:16:03+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/21/isucon-summer-2014</id>
    <content type="html"><![CDATA[<p>レポート締切間近のκeenです。ISUCON夏期講習2014に参加してきたのでレポートです。とはいっても去年の夏期講習もISUCONも参加してるので目新しいことはないんですが。主な目的はメンバー集めです。</p>

<!-- more -->


<h1>流れ</h1>

<ul>
<li>LINEの採用情報:
 ISUCONがきっかけでLINEに内定貰った人がいるよう。因みに自分はLINE落ちた。</li>
<li><p>ISUCONの概要の説明:
うん。知ってる。</p>

<p> <iframe src="//www.slideshare.net/slideshow/embed_code/38160090" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/tagomoris/isucon2014" title="ISUCONの話(夏期講習2014)" target="_blank">ISUCONの話(夏期講習2014)</a> </strong> from <strong><a href="http://www.slideshare.net/tagomoris" target="_blank">SATOSHI TAGOMORI</a></strong> </div></p></li>
<li>過去問を解く:
 去年の予選の問題だった。うん。知ってる。</li>
<li>パフォーマンス向上に関しての解説:
 これもISUCON反省会とかそんなんでkazeburoさんが話してた気がする</li>
</ul>


<iframe src="//www.slideshare.net/slideshow/embed_code/38162132" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/kazeburo/isucon-summerclass2014action1" title=" Webアプリケーションの パフォーマンス向上のコツ 概要編" target="_blank"> Webアプリケーションの パフォーマンス向上のコツ 概要編</a> </strong> from <strong><a href="http://www.slideshare.net/kazeburo" target="_blank">Masahiro Nagano</a></strong> </div></p>

<iframe src="//www.slideshare.net/slideshow/embed_code/38163927" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/kazeburo/isucon-summerclass2014action2" title=" Webアプリケーションの パフォーマンス向上のコツ 実践編" target="_blank"> Webアプリケーションの パフォーマンス向上のコツ 実践編</a> </strong> from <strong><a href="http://www.slideshare.net/kazeburo" target="_blank">Masahiro Nagano</a></strong> </div></p>

<ul>
<li>morisさんによるライブチューニング:
 失敗してた</li>
<li>懇親会</li>
</ul>


<h1>自分の作業</h1>

<p>前年度参加者がハイパフォーマンス叩き出して俺TUEEEEEEしても意味がないので次回のISUCONで試したいことを試して地雷踏むことにした。</p>

<h2>sshのRSAAuthenticationの設定</h2>

<p>何故かハマる。</p>

<p>id_rsa.pubをauthorized_keysに突っ込んでUserPAMの設定まで確認して<code>sudo service sshd restart</code>したのにパスワードを求められる。確か色々確認してもう一回sshdリスタートしたら通った気がする。原因不明。</p>

<p>そういや</p>

<pre><code>curl https://github.com/KeenS.keys &gt;&gt; .ssh/authorized_keys
</code></pre>

<p>のワンライナー使えば良かった。</p>

<h2>アプリケーションをgitで管理する</h2>

<p>やらかす。</p>

<p>最初isucon/webapp/ruby/だけをgitで管理した。それだと足りないので次にisucon/全体をgitで管理しようとしたらisucon/webapp/ruby/がサブモジュール扱いされて困った。サブモジュール分かんね。色々試すもついぞisucon/のgitでisucon/webapp/ruby/を管理出来なかった。結局.git吹っ飛ばして再度<code>git init .</code>した。これは次回までの宿題ですね。</p>

<p>あと地味にisucon/init.shが.gitignoreされてて困った。</p>

<h2>サーバーマシンをgitサーバーにする</h2>

<p>前回はbitbucketで管理してたがしばらく使わない内にパスワードを忘れてしまったのと(もしかしたら以前のバイト先のメールアドレスで登録してた?)pingが400msのbitbucketサーバー使うのに気が引けたのでサーバーマシンをgitサーバーにしようと決意。ハマる。</p>

<p>gitのマニュアルを適当に読んでたのが悪かった。ローカルで<code>git clone iscon@machine:isucon</code>してもなんか怒られてしばらく悩む。正解は、先ずリモートで<code>git clone --bare isucon isucon.git</code>してから<code>git clone iscon@machine:isucon.git</code>だった。</p>

<p>次にリモートで</p>

<pre><code>mv isucon isucon.back
git clone isucon.git isucon
</code></pre>

<p>したら.gitignoreとかその辺の関係でベンチマークやら何やらが動かなくなる。自分でベンチマークをビルドする羽目に。</p>

<p>新たにcloneせずに</p>

<pre><code>cd isucon
git remote add origin ../isucon.git
</code></pre>

<p>すれば良かったのだろうか。要調査。</p>

<h2>細かなチューニング</h2>

<p>markdownのバックエンドをrdiscountにしたり。これもGemfileで困る。結局あれはローカルで<code>bundle install --no-deploy</code>してから<code>git push</code>したら良かったのだろうか。これも宿題。</p>

<h2>インデックスを張る</h2>

<p>isucon/config/init.sqlに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">users_idx_username</span> <span class="k">ON</span> <span class="n">users</span> <span class="p">(</span><span class="n">username</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">memos_idx_id_is_private_created_at_id</span> <span class="k">ON</span> <span class="n">memos</span> <span class="p">(</span><span class="n">is_private</span><span class="p">,</span> <span class="n">created_at</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">memos_idx_id_user_created_at</span> <span class="k">ON</span> <span class="n">memos</span> <span class="p">(</span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">,</span> <span class="n">created_at</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>を書いてisucon/init.shに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>mysql -u isu-user isucon &lt; ./config/init.sql &gt; log 2&gt;<span class="p">&amp;</span>1
</span><span class='line'><span class="c">#データ投入後になにかしらの作業をしたい場合はこのシェルスクリプトに書いてください</span>
</span></code></pre></td></tr></table></div></figure>


<p>を書くもエラーが出る。結局絶対パスで書いて2〜3回実行したら通ったのでパスの問題だったかと。しかし1回で通らなかったのは謎。</p>

<p>あとデバッグ大変だった。ベンチマークツールさん、初期化スクリプトでエラー出したらエラーログ吐いて下さいよ。</p>

<p>そういやリダイレクト先のlogファイルは結局行方不明のままだった。</p>

<h2>N+1クエリの解決</h2>

<p>SQL書けなすぎてJOINとかFORCE INDEX書くのに戸惑った。一々書いてはmysqlのコンソールに貼ってエラーメッセージ読んでってやってた。すんなりやりたい。</p>

<h2>リバースプロキシをNginXにする</h2>

<p>まずは</p>

<pre><code>sudo yum install nginx
mv /etc/nginx/nginx.conf ./config/
git add ./config/nginx.conf
git commit -m 'add nignx.conf'
sudo ln -s /home/isu-user/isucon/config/nginx.conf /etc/nginx/
sudo service httpd stop
sudo service nginx start
</code></pre>

<p>だったかな?最初<code>ln</code>に絶対パスを使ってなくてエラー出たりしたけど。</p>

<p>んで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>location / <span class="o">{</span>
</span><span class='line'>   proxy_pass   http://localhost:5000<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>だけ書くも<code>404 http://localhost:5000/なんちゃら Not Found</code>が出る。そういや、とプロキシヘッダを追加。それでも画像などはとれない。多分rootをいじらなかったのが原因。次の手で静的ファイルをNginXでキャッシュするように設定したら直った。</p>

<p>あまり記録残してないけどこの辺で2900点くらいで首位だった気がする。因みに初期値は1700くらい。</p>

<h2>Varnishを噛ませる</h2>

<p>前回、ベンチマークツールのチェックが甘くてVarnishを使うだけでスコアが跳ね上がるというのを知っていたのでちょっとチート臭いけどどうせ本番でも必要だしということで練習もかねて使う。</p>

<pre><code>sudo yum install varnish
mv /etc/sysconfig/varnish ./config
git add ./config/varnish
git commit -m 'varnish'
sudo ln -s /home/isu-user/isucon/config/varnish /etc/sysconfig/varnish
mv /etc/varnish/default.vcl ./config
git add ./config/default.vcl
git commit -m 'default.vcl'
sudo ln -s /home/isu-user/isucon/config/default.vcl /etc/varnish/default.vcl
</code></pre>

<p>的なことをやった。あとはvarnishを80番にしてバックエンドを4000番にして、NginXを4000番にした。それだけでスコアが14000くらいになった。varinish簡単だし優秀。</p>

<h2>my.cnfのチューニング</h2>

<p>もはやvarnishが仕事してる所為でボトルネックはベンチマークツールなのだけど一応。</p>

<p>とはいってもinnodb_buffer_pool_sizeを2GBから6GBにしただけ。因みに与えられたマシンのメモリは8GB。スコアは一応微増。でもまあ誤差の範囲内。</p>

<p>この辺でタイムオーバー。</p>

<h1>懇親会</h1>

<p>目の前の人がClojure推しの人でだいたいそんな話してた。</p>

<p>チームメンバー捜しは席の周りの人が当日出れない人ばかりだったのと席替えがなかったので失敗に終わる。誰か学生枠で一緒に出ましょうよ。学生賞目指しましょうよ。</p>

<h1>やり残したこととか反省とか</h1>

<ul>
<li>ローカルで変更→commit→push→リモートでpull→再起動→ベンチマークのワークフローが結構面倒だったしpull忘れ、再起動忘れがあったのでpushより後を自動化したい。出来ればgitのコミットログとベンチマークのスコアをペアで保存しながら。hook使ったら割と出来そうな気はするんだけどなあ。</li>
<li>折角サーバー与えられたんだしMySQLのslow logを吐かせるの一回練習しとけば良かった。</li>
<li>結局capistrano使わなかった。複数台構成なら必須だし復習しておきたかったのに。</li>
<li>メンバー捜したかった。</li>
</ul>


<p>マジでメンバー捜してます。学生枠で出たい人@blackenedgoldまでお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs便利機能/Tips紹介]]></title>
    <link href="http://KeenS.github.io/blog/2014/08/13/emacs-utility-functions/"/>
    <updated>2014-08-13T23:15:37+09:00</updated>
    <id>http://KeenS.github.io/blog/2014/08/13/emacs-utility-functions</id>
    <content type="html"><![CDATA[<p>κeenです。このブログのアクセスログを見てるとEmacsの記事が好評なようなのでここは一つ私の知ってる便利機能を全列挙してみますね。</p>

<!-- more -->


<p>どの辺から常識でどの辺からTipsかは私の主観です。だいたいるびきちさんの本に載ってるのは常識扱いです。</p>

<p>※<code>-!-</code>でカーソル位置、<code>-¡-</code>でマーク位置を表すものとします。<br/>
※私はEmacsのtrunkをビルドして使ってるので最新のリリース版のEmacsにも含まれない機能もあるかもしれません。</p>

<h1>改行/インデント系</h1>

<h2><code>C-m</code> <code>RET</code> <code>C-j</code> <code>C-o</code></h2>

<p>最初の頃は混乱してました。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> key       </th>
<th align="left"> lisp function</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> C-m = RET </td>
<td align="left"> <code>newline</code></td>
</tr>
<tr>
<td></td>
<td align="left"> C-j       </td>
<td align="left"> <code>newline-and-indent</code></td>
</tr>
<tr>
<td></td>
<td align="left"> C-o       </td>
<td align="left"> <code>open-line</code></td>
</tr>
</tbody>
</table>


<p>です。<code>C-m</code>と<code>C-o</code>の違いはカーソルが現在行に残るか残らないかです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaa-!-aaa</span></code></pre></td></tr></table></div></figure>


<p>↓ <code>C-m</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaa
</span><span class='line'>-!-aaa</span></code></pre></td></tr></table></div></figure>


<p>ですが、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaa-!-aaa</span></code></pre></td></tr></table></div></figure>


<p>↓ <code>C-o</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aaa-!-
</span><span class='line'>aaa</span></code></pre></td></tr></table></div></figure>


<p>です。</p>

<p><code>C-o</code>の改行後にインデントする版を捜したのですが<code>C-M-o (split-line)</code>という近いコマンドはあるもののまさにというのはありませんでした。</p>

<p>※trunkではデフォルトで<code>electric-indent-mode</code>がonになってるので<code>C-m/RET</code>と<code>C-j</code>が入れ替わります。<br/>
※現在行と改行した先の行両方をインデントする<code>indent-then-newline-and-indent</code>という関数もあります。</p>

<h2><code>M-^</code>(<code>delete-indentation</code>)</h2>

<p>直感的には<code>newline-and-indent</code>の逆関数です。今の行を上の行にくっつけます。そのとき邪魔になるインデントは取り除いてくれます。<code>M-- M-^</code>とすると下の行を今の行にくっつけてくれます。</p>

<h2><code>C-M-j</code>(<code>indent-new-comment-line</code>)</h2>

<p>コメント内で使う<code>C-j</code>です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="c1">;;; This is a comment-!-</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓ <code>C-M-j</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="c1">;;; This is a comment</span>
</span><span class='line'><span class="c1">;;; -!-</span>
</span></code></pre></td></tr></table></div></figure>


<p>です。</p>

<h2><code>M-m</code>(<code>back-to-indentation</code>)</h2>

<p>現在行の空白文字でない最初の文字に移動します。viでいう<code>^</code>です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">aaa-!-bbb</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">-!-aaabbb</span>
</span></code></pre></td></tr></table></div></figure>


<p>です。</p>

<h2><code>electric-indent-mode</code></h2>

<p>さっきちらっと触れました。<code>C-m</code>が<code>newline-and-indent</code>になって<code>C-j</code>が<code>newline</code>になるモードです。</p>

<h1>削除/kill-ring系</h1>

<h2><code>&lt;C-S-backspace&gt;</code>(<code>kill-whole-line</code>)</h2>

<p>おなじみ <code>C-k</code>(<code>kill-line</code>)は現在位置から行末までを削除しますが、それだとぬるいといって<code>C-k</code>で現在行をまるごと削除する設定(<code>(setq kill-whole-line t)</code>)してる人もいますが、実は<code>&lt;C-S-backspace&gt;</code>で可能なのでした。鍛えられた左手の小指の先と腹でCaps LockとShiftを同時押しすれば難易度もそんなに高くない！</p>

<h2><code>C-M-w</code>(<code>append-next-kill</code>)</h2>

<p>nextのkillコマンドでkillした内容をkill-ringにappendします。チュートリアルにも載ってた気がするんですがすっかり忘れてました。</p>

<h1>編集系</h1>

<h2><code>electric-pair-mode</code></h2>

<p>開き括弧を挿入すると自動で閉じ括弧を挿入してくれます。リージョンを選択して括弧を挿入するとリージョンを囲むように括弧を挿入してくれます。これ大事。挿入後のカーソルは開き/閉じのどちらを入力したかに依ります。まあ、想像付きますね。地味に鉤括弧にも対応。</p>

<p><code>ruby-mode</code>はこの挙動を上書きしてるので殴り殺したくなります。</p>

<h2><code>subword-mode</code></h2>

<p>私はキャメルケースが嫌いという超個人的理由で使ってないのですが、キャメルケースがコーディング規約な言語を使う人には便利でしょう。キャメルケースの1こぶを1単語と見做します。例えば&#8221;SubWord&#8221;は&#8221;Sub&#8221; &ldquo;Word&#8221;と認識されます。</p>

<pre><code>-!-SubWord 
</code></pre>

<p>で<code>M-f</code>(<code>forward-word</code>)すると通常は</p>

<pre><code>SubWord-!-
</code></pre>

<p>となりますが<code>subword-mode</code>内だと</p>

<pre><code>Sub-!-Word
</code></pre>

<p>となります。その他word系の操作が全部こぶ単位になります。</p>

<p>因みにモードラインの表示が&#8221;, &ldquo;と、微妙な感じです。</p>

<h2><code>superword-mode</code></h2>

<p><code>subword-mode</code>の逆です。Lispの&#8221;this-is-a-symbol&#8221;といったシンボルが&#8221;this&#8221; &ldquo;-is&rdquo; &ldquo;-a&rdquo; &ldquo;-symbol&#8221;と認識されていたのが&#8221;this-is-a-symbol&#8221;と認識されます。</p>

<p>因みにモードラインの表示は &ldquo;$^2$&rdquo; です。</p>

<h2><code>C-x C-u</code>(<code>upcase-region</code>)</h2>

<p>リージョンを選択した状態で使うとリージョンを大文字にしてくれます。
これを使ったTipsです。</p>

<p>シチュエーションは全部大文字の単語(定数とかで良く出てくる)を入力したいが、Caps Lockは既にCtrlにしてあるので使えないって状態です。<br/>
先ず、<code>C-@</code>します。そして目的の単語を小文字のまま入力します。そして<code>C-x C-u</code>します。すると全て大文字になります。便利。<code>C-x C-l</code>(<code>lowercase-region</code>)でも同じこと出来ますが、使いたいシチュエーションは少ないでしょう。</p>

<p>尚、このコマンドはデフォルトで無効になっているので普段使いするには一回使ってダイアログを出さないようにするか<code>init.el</code>に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">put</span> <span class="ss">&#39;upcase-region</span> <span class="ss">&#39;disabled</span> <span class="no">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>を追加しておく必要があります。</p>

<h2><code>M-- M-u</code>(<code>upcase-word</code>)</h2>

<p><code>upcase-word</code>はカーソルの次の単語を大文字にしますが、負の前置引数を与えると直前の単語を大文字にしてくれます。ちょっと押し辛いですが一応覚えておきましょう。<code>M-- M-l</code>(<code>capitalize-word</code>)もそれなりに使えるかもしれません。</p>

<h1>complete系</h1>

<p><code>icomplete-mode</code>するとミニバッファでの入力時に補完候補が随時表示されますが、実はあの候補に色々操作出来るのです。</p>

<h2><code>M-p</code> / <code>M-n</code></h2>

<p>ヒストリを辿れます</p>

<h2><code>C-j</code></h2>

<p>先頭の候補に決定します。</p>

<h2><code>C-,</code> / <code>C-.</code></h2>

<p>候補を後/先に送ります。キーボードを見て&lt; / &gt;を押せば良いので簡単ですね。</p>

<h2><code>C-M-i</code></h2>

<p>先頭の候補を補完します。続けて<code>C-M-i</code>すると順次次候補になります。</p>

<h2><code>C-r</code></h2>

<p>ヒストリを検索します。</p>

<h2><code>C-s</code></h2>

<p>ミニバッファ内を前方検索します。あまり需要なさそうですね。</p>

<h1>isearch</h1>

<p>isearchはカーソルをバッファに残したままミニバッファを編集するのでキーバインドが特殊です。</p>

<h2><code>C-s</code>(<code>isearch-repeat-forward</code>)</h2>

<p>検索文字列が空の状態で<code>C-s</code>すると前回の検索文字列で検索します。</p>

<h2><code>C-j</code>(<code>isearch-printing-char</code>)</h2>

<p>RETが決定に使われてるので改行はC-jになります。</p>

<h2><code>C-w</code>(<code>isearch-yank-word-or-char</code>)</h2>

<p>カーソル下の単語又は文字を検索文字列にします。連続して押すと範囲を広げます。</p>

<h2><code>C-M-w</code>(<code>isearch-del-char</code>)</h2>

<p>1文字削除します。<code>DEL</code>(<code>isearch-delete-char</code>)とは違って削除してもバッファのポイントは戻りません。</p>

<h2><code>C-M-y</code>(<code>isearch-yank-char</code>)</h2>

<p>カーソル下の文字を検索文字列に足します。</p>

<h2><code>M-s C-e</code>(<code>isearch-yank-line</code>)</h2>

<p>カーソルから行末までを検索文字列にします。</p>

<h2><code>M-s</code>(<code>isearch-toggle-</code>)系</h2>

<p>isearchには実は文字列検索だけでなく、さまざまな検索方法があります。
<code>M-s _</code>(<code>isearch-toggle-symbol</code>)、<code>M-s c</code>(<code>isearch-toggle-case-fold</code>)、<code>M-s r</code>(<code>isearch-toggle-regexp</code>)、<code>M-s w</code>(<code>isearch-toggle-word</code>)、あたりを覚えておくと良いでしょう。</p>

<h1>バッファ/ウィンドウ系</h1>

<h2>split-threshold</h2>

<p>Emacsはデフォルトの状態では何かしらのウィンドウを分割するアクション(e.g. <code>list-buffers</code>)でウィンドウを上下に分割します。しかしワイドディスプレイを使っていると左右に分割して欲しいものです。そこで、この設定です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">split-height-threshold</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">split-width-threshold</span> <span class="mi">100</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>この設定で、幅が100桁以上なら左右、100桁未満なら上下に分割するようになります。100という数字は私が試行錯誤して出した最適解です。<code>split-height-threshold</code>と<code>split-width-threshold</code>を同時に設定したら先に<code>split-height-threshold</code>が判定されるようです。</p>

<h2><code>C-x 4</code>(<code>-other-window</code>)系</h2>

<p>ウィンドウを分割して隣のウィンドウに別のファイルを開きたい、あるいは既に分割してある隣のウィンドウに別のバッファを持ってきたいといったときに使うのが<code>C-x 4</code>(<code>-other-window</code>)系のコマンドです。<code>C-x 4 C-f</code>(<code>find-file-other-window</code>)、<code>C-x 4 b</code>(<code>switch-to-buffer-other-window</code>)、<code>C-x 4 0</code>(<code>kill-buffer-and-window</code>)あたりを覚えておけば良いでしょう。詳しくは<code>C-x 4 C-h</code>すると見れます。</p>

<p>似たようなのに、<code>C-x 5</code>(<code>-other-frame</code>)系のコマンドがありますが、私はEmacsのフレームを2つ以上出したいという状況に遭遇したことがないので省略します。</p>

<h2><code>find-alternate-file</code></h2>

<p>ほぼ<code>find-file</code>と同じ挙動ですが、現在のバッファをkillしてから新たなファイルを開きます。あるファイルを開こうとして間違ったファイルを開いてしまったときに使います(バッファの内容が空なので間違ったことが直ぐ分かる)。地味に便利なのですがデフォルトでキーが割り当てられていません。<code>C-x C-a</code>あたりが妥当でしょうか。</p>

<h1>rectangle(矩形選択)系</h1>

<p>最近機能が強化されてるrectangle系です。プリフィクスが<code>C-x r</code>と押し辛いのが難点ですが、使用頻度が高い訳ではないのでまあ妥当でしょう。</p>

<p>region-rectangleはカーソルとマークで成す長方形を範囲とします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">ab-!-cdefg</span>
</span><span class='line'><span class="nv">hijklmn</span>
</span><span class='line'><span class="nv">opqrs-</span><span class="err">¡</span><span class="nv">-tu</span>
</span></code></pre></td></tr></table></div></figure>


<p>のとき、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">cde</span>
</span><span class='line'><span class="nv">jkl</span>
</span><span class='line'><span class="nv">qrs</span>
</span></code></pre></td></tr></table></div></figure>


<p>がregion-rectangleに入ります。</p>

<p>しかしこれだと分り辛いものです。そこで、最近<code>C-x SPC</code>でregion-rectangleを視覚表示出来るようになりました。るびきちさんの本に載ってる<code>sense-region</code>に近いです。</p>

<h2><code>C-x r k</code>(<code>kill-rectangle</code>) / <code>C-x r d</code>(<code>delete-rectangle</code>) / <code>C-x r M-w</code>(<code>copy-rectangle-as-kill</code>)</h2>

<p>名前のままですね。<code>kill-rectangle</code>や<code>copy-rectangle-as-kill</code>が保存するkill-ringは通常のkill-ringとは異なります。</p>

<p>region-rectangleを視覚表示した状態で<code>C-w</code>すると<code>kill-rectangle</code>になるようです(他のコマンドは未確認)</p>

<h2><code>C-x r y</code>(<code>yank-rectangle</code>)</h2>

<p><code>kill-rectangle</code>や<code>copy-rectangle-as-kill</code>が保存したものを吐きます。どのように挿入されるかというと、<br/>
rectangleのkill-ringが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">cde</span>
</span><span class='line'><span class="nv">jkl</span>
</span><span class='line'><span class="nv">qrs</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、バッファが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">-!-foo</span>
</span><span class='line'><span class="nv">bar</span>
</span><span class='line'><span class="nv">baz</span>
</span></code></pre></td></tr></table></div></figure>


<p>のとき、<code>C-x r y</code>すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">cdefoo</span>
</span><span class='line'><span class="nv">jklbar</span>
</span><span class='line'><span class="nv">qrs-!-baz</span>
</span></code></pre></td></tr></table></div></figure>


<p>となります。</p>

<h2><code>C-x r t</code>(<code>string-rectangle</code>)</h2>

<p>rectangle-regionを文字列で置換します。ちょっと実用的な例を出しましょうかね。</p>

<p>バッファが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">pic_</span><span class="o">-</span><span class="err">¡</span><span class="o">-</span><span class="n">list_first</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="n">pic_list_second</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="n">pic_list</span><span class="o">-!-</span><span class="n">_third</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>で<code>C-x r t RET vector</code>すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">pic_vector_first</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="n">pic_vector_second</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="n">pic_vector_third</span><span class="p">(</span><span class="n">pic_state</span> <span class="o">*</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>となります。最近プレビュー機能が入ったので入力しながらリアルタイムでバッファが書き換わります。最小設定主義のemacsにしては珍しい変更ですね。</p>

<p>尚、幅0のregion-rectangleに使うとプリフィクスを付けられることも覚えておきましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">-</span><span class="err">¡</span><span class="o">-</span><span class="n">This</span> <span class="n">sentence</span> <span class="n">is</span>
</span><span class='line'><span class="o">-!-</span><span class="n">a</span> <span class="n">quotation</span>
</span></code></pre></td></tr></table></div></figure>


<p>に<code>C-x r t RET &gt;</code>すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="o">&gt;</span> <span class="n">This</span> <span class="n">sentence</span> <span class="n">is</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">a</span> <span class="n">quotation</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>と出来ます。</p>

<h1>register系</h1>

<p>register系も<code>C-x r</code>のブリフィクスを持ちます。非常に高機能なのに押し辛く、rectangleと紛らわしいキーバインドなのは残念です。</p>

<p>registerの概念は分り辛いのですが、「何でも保存出来る箱」で、しかも「キー1つにつき箱一つ」です。viの名前付きバッファと似ていますが何でも保存出来る点で異なります。</p>

<p>それぞれの機能を見てちょっと自分で試してみて理解して下さい。</p>

<h2><code>C-x r SPC</code>(<code>point-to-register</code>)</h2>

<p>レジスタにポイントを登録します。<code>C-x r C-SPC</code>でも<code>C-x r C-@</code>でも同じです。</p>

<p><code>C-x r SPC</code>すると&#8221;Point to Register: &ldquo;とプロンプトが出るので、現在のポイントを登録させたいレジスタを選びます。レジスタを選ぶというのは好きなキーを押せばよいです。私は考えるのが面倒なのでaから順番に使っていってます。</p>

<p>これだけだと分かりにくいので次のコマンドも参考にして下さい。</p>

<h2><code>C-x r j</code>(<code>jump-to-register</code>)</h2>

<p><code>point-to-register</code>でレジスタに登録したポイントに飛びます。例えばaレジスタにポイントを登録したなら<code>C-x r j RET a</code>でそこに飛べます。最近、現在登録されてるレジスタ一覧が出るようになったので然程迷わないかと思います。</p>

<h2><code>C-x r x</code>(<code>copy-to-register</code>)</h2>

<p>レジスタに選択範囲の文字列を登録します。<code>C-x r s</code>でも同じです。</p>

<p>rectangleと同じプリフィクスを使っているがために非常に覚え辛いキーバインドになってしまっています。しかもkill-ringとの差別化がイマイチ分からないので需要なさそうですね。</p>

<h2><code>C-x r r</code>(<code>copy-rectangle-to-register</code>)</h2>

<p>region-rectangleをレジスタに登録します。</p>

<h2><code>C-x r i</code>(<code>insert-register</code>)</h2>

<p>レジスタに登録した文字列/rectangle/数字をバッファに挿入します。<code>C-x r g</code>でも同じです。</p>

<p>ポイントを挿入しようとすると数字が入るようです(ポイントは内部的には数字)。</p>

<h2><code>C-x r n</code>(<code>number-to-register</code>)</h2>

<p>レジスタに数字を登録します。登録した数字は<code>C-x r +</code>(<code>increment-regiser</code>)で増やしたり(負の前置引数を与えれば減らすことも可能)<code>insert-register</code>でバッファに挿入することも可能。キーボードマクロなんかで役に立つのかな？</p>

<h2><code>C-x r w</code>(<code>window-configuration-to-register</code>)</h2>

<p>現在のフレームのwindow-configuration(ウィンドウの分割や表示されるバッファ)をレジスタに登録します。復元は<code>C-x r j</code>(<code>jump-to-register</code>)です。</p>

<p>同様の機能を提供するために数々のプラグインが作られてきましたが標準で提供されることになりました。</p>

<p>これと次の<code>frameset-to-register</code>は最近入った機能だった気がします。</p>

<h2><code>C-x r f</code>(<code>frameset-to-register</code>)</h2>

<p>frameset(フレームの数や位置、サイズ、そしてそれぞれのフレームのwindow-configuration)をレジスタに登録します。復元は<code>C-x r j</code>(<code>jump-to-register</code>)です。</p>

<h2>蛇足</h2>

<p>キーは割り当てられてませんがキーボードマクロの保存/実行やレジスタにappend/prependするコマンドもあるようです。</p>

<p>同じ<code>C-x r</code>のプリフィクスの機能にブックマークがありますが、るびきちさんの本に載ってるので割愛します。</p>

<h1>vc(バージョン管理)系</h1>

<p>詳しい使い方は多数の記事があると思うのでそちらに任せるとして、よく使うものを紹介します。尚、るびきちさんの本の頃からは大分進化してるのでvcに関しては参考にしない方が良いかと思います。例えば<code>git init</code>相当をするコマンド(<code>vc-create-repo</code>)は追加されてます。その他mergeやpull/pushなども。</p>

<p>各vcsの対応状況は</p>

<blockquote><p>;; Supported version-control systems presently include CVS, RCS, GNU<br/>
;; Arch, Subversion, Bzr, Git, Mercurial, Monotone and SCCS<br/>
;; (or its free replacement, CSSC).</p></blockquote>

<p>とあります。かなり多いですね。というかこんなにvcsあったんですね。</p>

<p>私が最近gitしか使ってないので他のvcsでどうなるかは分かりません。一応vc.el自体vcsの差異を吸収するものなのですが、vcs固有の挙動もあるのです。</p>

<h2><code>C-x v =</code>(<code>vc-diff</code>)</h2>

<p><code>git diff &lt;バッファのファイル&gt;</code>相当です。大体、しばらく作業してそろそろコミットするかーって時に使います。表示されるバッファはdiff-modeになっているのでdiffの部分でRETすると変更箇所にジャンプ出来ます。</p>

<h2><code>C-x v l</code>(<code>vc-print-log</code>) / <code>C-x v L</code>(<code>vc-root-log</code>)</h2>

<p><code>C-x v l</code>(<code>vc-print-log</code>) で現在ファイルの、 <code>C-x v L</code>(<code>vc-root-log</code>) でバージョン管理下全体のログ(コミットグラフ)を見れます。TABでログ間を移動出来たりRETでログを展開したりDでそのログのdiffを見たり色々なことが出来ます。diffを表示させたら勿論RETで変更箇所に飛べます。変更履歴を追うときは圧倒的に便利。</p>

<p>私もそこまで深追いしてないのでlogバッファでの操作の調査は読者の課題とする。</p>

<h2><code>C-x v v</code>(<code>vc-next-action</code>)</h2>

<p>vcの中で一番有名なコマンドでしょうから詳細は省きます。私が強調したいのはコミットログ書くときのlog-editモードです。地味に機能強化されてます。<code>C-c C-d</code>(<code>log-edit-show-diff</code>)でdiffを表示したり<code>C-c C-e</code>(<code>vc-git-log-edit-toggle-amend</code>)でamendにしたり出来ます。詳しくは<code>C-c ?</code>(<code>log-edit-mode-help</code>)して下さい。</p>

<h2><code>C-x v d</code>(<code>vc-dir</code>)</h2>

<p>ディレクトリ単位での機能を使えます。というかファイル単位でない機能(つまりvcsの多くの機能)を使えます。最近はvcを使うときはこれがメインになってます。色々機能があるので<code>&lt;f1&gt; b</code>(<code>describe-bindings</code>)して確認して下さい。</p>

<h2><code>C-x v u</code>(<code>vc-revert</code>)</h2>

<p>これは逆に使ってはいけないコマンドです。バッファのファイルのみをリバートする(<code>git checkout -- &lt;バッファのファイル&gt;</code>相当)と思いきや、<code>git reset --hard</code>するようです。no more被害者。</p>

<h1>view-mode</h1>

<p>かなりキーバインドが特殊ですが割と便利な機能です。ここで紹介したもの以外にもキーはバインドされてますが非自明なのは大体こんなもんでしょう。</p>

<h2><code>RET</code>(<code>View-scroll-line-forward</code>) / <code>y</code>(<code>View-scroll-line-backward</code>)</h2>

<p>上下に1行スクロールします。ありそうで他にない機能です。</p>

<h2><code>/</code>(<code>View-search-regexp-forward</code>) / <code>\</code>(<code>View-search-regexp-backward</code>)</h2>

<p>まさかのviバインド。ちゃんと<code>n</code>(<code>View-search-last-regexp-forward</code>)と<code>p</code>(<code>View-search-last-regexp-backward</code>)も用意されてます。</p>

<h2><code>s</code>(<code>isearch-forward</code>) / <code>r</code> (<code>isearch-backward</code>)</h2>

<p><code>C-</code>がなくなっただけですね。他にも<code>C-</code>がなくなっただけのコマンドはいっぱいありますが<code>/</code>/<code>\</code>との比較で出しました。</p>

<h2><code>m</code>(<code>point-to-register</code>) / <code>'</code>(<code>register-to-point</code>)</h2>

<p><code>m</code>でマークして<code>'</code>でジャンプです。</p>

<h2>やめる系</h2>

<p>なぜか一杯あります。前提として、view-modeは別のファイルから「view-modeで(時に別ウィンドウで)ファイルを開く」系のコマンドで呼ばれることが多いというのがあります。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> コマンド                   </th>
<th align="left"> 説明</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>e</code>(<code>View-exit</code>)           </td>
<td align="left"> view-modeを抜ける。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>E</code>(<code>View-exit-and-edit</code>)  </td>
<td align="left"> view-modeを抜けてバッファを編集出来るようにする。つまり、read-only-modeも抜ける。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>c</code>(<code>View-leave</code>)          </td>
<td align="left"> view-modeを抜けてバッファを切り替えるがバッファはkillしない。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>C</code>(<code>View-kill-and-leave</code>) </td>
<td align="left"> view-modeを抜けてバッファをkillして以前のバッファに切り替る。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>q</code>(<code>View-quit</code>)           </td>
<td align="left"> view-modeを抜けてウィンドウ内の状態を元に戻し、フォーカスも戻す。大抵バッファをkillする。</td>
</tr>
<tr>
<td></td>
<td align="left"> <code>Q</code>(<code>View-quit-all</code>)       </td>
<td align="left"> view-modeを抜けてウィンドウ構成を元に戻す。大抵バッファをkillする。</td>
</tr>
</tbody>
</table>


<p>うん。覚えられね。</p>

<h1>dired系</h1>

<p>便利なのに情報が少ないdired系。私はUbuntuのUnityを捨ててStumpwmを使っているのでファイルエクスプローラは専らEmacsですからよく使います。<a href="http://localhost:4000/blog/2013/10/04/emacs-dired/">以前のエントリ</a>以外の便利機能を紹介します。</p>

<p>因みに呆れるほどキーがバインドされてるのでここで紹介するのはほんの一部です。画像のサムネイル関連の機能なんかもあります。</p>

<h2><code>+</code>(<code>dired-create-directory</code>)</h2>

<p>ディレクトリを作ります。</p>

<h2><code>(</code>(<code>dired-hide-ditail-mode</code>)</h2>

<p>初期状態では<code>ls -l</code>っぽい内容が表示されてますが<code>ls</code>に変更出来ます。</p>

<h2><code>v</code>(<code>dired-view-file</code>)</h2>

<p>ポイント下のファイルをview-modeで開きます。view-modeでは<code>q</code>でバッファを閉じれるので、あるディレクトリ下のファイルを連続して読みたいときに便利です。</p>

<h2><code>o</code>(<code>dired-find-file-other-window</code>)</h2>

<p>別ウィンドウでファイルを開きます。</p>

<h2><code>C-o</code>(<code>dired-display-file</code>)</h2>

<p>別ウィンドウでファイルを開きますが、フォーカスは移りません。</p>

<p>diredに限らず、ファイルへのリンクをリスト表示するバッファでは大抵<code>v</code>と<code>o</code>と<code>C-o</code>が使えます。</p>

<h2><code>i</code>(<code>dired-maybe-insert-subdir</code>)</h2>

<p>バッファの下にポイント下のディレクトリの内容を追加します。ツリー表示にする機能はないようです。</p>

<h2><code>%</code>(<code>dired--regexp</code>)系</h2>

<p><code>% C</code>(<code>dired-do-copy-regexp</code>)など色々あるのですがとりあえず使いそうなのは<code>% g</code>(<code>dired-mark-files-containing-regexp</code>)と<code>% m</code>(<code>dired-mark-files-regexp</code>)ですかね。</p>

<p>拡張子でマークするコマンドがあった気がしたのですが見当りませんでした。</p>

<h2>検索/置換系</h2>

<p>これも色々ある上にキーバインドが覚えづらいです。ポイント下又はマークしたファイル全てに操作を行います。キーを覚えるより<code>M-x</code>で実行した方が速そうですね。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> キー          </th>
<th align="left"> コマンド</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> <code>Q</code>           </td>
<td align="left"> <code>dired-do-query-replace-regexp</code></td>
</tr>
<tr>
<td></td>
<td align="left"> <code>M-s a C-s</code>   </td>
<td align="left"> <code>dired-do-isearch</code></td>
</tr>
<tr>
<td></td>
<td align="left"> <code>M-s a C-M-s</code> </td>
<td align="left"> <code>dired-do-isearch-regexp</code></td>
</tr>
</tbody>
</table>


<h1>eww (Emacs Web WOWer)</h1>

<p>elispで書かれたブラウザ(正確にはWOWerらしい)です。レンダリングエンジンにはかつてgnusで使われて今は別プロジェクトになったshr.el(Simple HTML Renderer)が使われています。HTMLの他に簡単なCSSも理解します。</p>

<p>libxsltなどのSGML解析系のライブラリを有効にしてビルドしないと使えないのでEmacsを野良ビルドする人は要注意です。</p>

<h2><code>M-x eww</code></h2>

<p>URL又はキーワードで検索します。検索エンンジンは<code>eww-search-prefix</code>で制御出来ます。</p>

<p>googleで検索したかったら</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">setq-default</span> <span class="nv">eww-search-prefix</span> <span class="s">&quot;https://www.google.co.jp/search?q=&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>です。</p>

<h2>キーバインド</h2>

<p>infoライクに設定されてます。そんなに多くないのですが、一部抜粋すると<code>n</code>(<code>eww-next-url</code>)、<code>p</code>(<code>eww-previous-url</code>)、<code>l</code>(<code>eww-back-url</code>)、<code>r</code>(<code>eww-forward-url</code>)、<code>H</code>(<code>eww-list-histories</code>)、<code>&amp;</code>(<code>eww-browse-with-external-browser</code>)、<code>b</code>(<code>eww-add-bookmark</code>)、<code>B</code>(<code>eww-list-bookmarks</code>)、<code>q</code>(<code>quit-window</code>)です。</p>

<p><code>n</code> / <code>p</code>と<code>l</code> / <code>r</code>の違いは、<code>l</code> / <code>r</code>はヒストリを辿る機能、<code>n</code> / <code>p</code>はヘッダに<code>&lt;link rel="Next/Prev" ...&gt;</code>が設定されているときにそれを辿ります。あまり馴染がないかもしれませんが広告料稼ぐためにページ分割しているサイトが多いので結構便利ですよ。</p>

<h1>newsticker</h1>

<p>最後に最近見付けたRSS/Atomリーダーの紹介です。</p>

<p>先ず、こんな感じの設定をします。ニュースサイトは自分の好きなものを選んで下さい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">setq-default</span> <span class="nv">newsticker-url-list</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;産経&quot;</span> <span class="s">&quot;http://sankei.jp.msn.com/rss/news/points.xml&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="s">&quot;朝日-IT/Sci&quot;</span> <span class="s">&quot;http://rss.asahi.com/rss/asahi/science.rdf&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="s">&quot;技術評論社&quot;</span> <span class="s">&quot;http://rss.rssad.jp/rss/gihyo/feed/rss2?rss&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="s">&quot;Planet Lisp&quot;</span> <span class="s">&quot;http://planet.lisp.org/rss20.xml&quot;</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="s">&quot;Hacker News&quot;</span> <span class="s">&quot;https://news.ycombinator.com/rss&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">setq-default</span> <span class="nv">newsticker-url-list-defaults</span>
</span><span class='line'>              <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;LWN (Linux Weekly News)&quot;</span> <span class="s">&quot;http://lwn.net/headlines/rss&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">setq-default</span> <span class="nv">newsticker-retrieval-interval</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">newsticker-html-renderer</span> <span class="nf">#&#39;</span><span class="nv">shr-render-region</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、<code>M-x newsticker-show-news</code>でニュースを取ってきてくれます。</p>

<p>3ペインの画面(treeview)になるかと思いますが、基本操作を覚えれば<code>C-x o</code>で移動する必要はありません。</p>

<h2><code>f</code>(<code>newsticker-treeview-next-feed</code>) / <code>F</code>(<code>newsticker-treeview-prev-feed</code>)</h2>

<p>ニュースサイト間を移動します。</p>

<h2><code>n</code>(<code>newsticker-treeview-next-item</code>) / <code>p</code>(<code>newsticker-treeview-prev-item</code>)</h2>

<p>ニュース間を移動します。</p>

<h2><code>SPC</code>(<code>newsticker-treeview-next-page</code>)</h2>

<p>ニュースのページを送ります。戻すキーは無いようです。</p>

<h2><code>v</code>(<code>newsticker-treeview-browse-url</code>)</h2>

<p>今開いているニュースをブラウザで開きます。RSSは概要しか送られてこないのでこの機能は必須ですね。</p>

<h2><code>q</code>(<code>newsticker-treeview-quit</code>)</h2>

<p>画面を閉じます。</p>

<h1>最後に</h1>

<p>いかがだったでしょうか。ちょっと長いので途中読み飛ばし気味だったかもしれませんが1つでも覚えていただけたら幸いです。</p>

<p>因みに、このエントリを書き始めたのは8/13だったのですが、あまりに長く、途中合宿を挟んだりしたので公開は8/20になってしまいました。</p>
]]></content>
  </entry>
  
</feed>
